
Secular_PG-TokenRing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08011f08  08011f08  00021f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012958  08012958  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  08012958  08012958  00022958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012960  08012960  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012960  08012960  00022960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012964  08012964  00022964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08012968  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e8c  20000410  08012d78  00030410  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001329c  08012d78  0003329c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b6f  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005172  00000000  00000000  00055faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0005b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b28  00000000  00000000  0005ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e807  00000000  00000000  0005e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024126  00000000  00000000  0008d197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113e32  00000000  00000000  000b12bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c50ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000948c  00000000  00000000  001c5140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011eec 	.word	0x08011eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	08011eec 	.word	0x08011eec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <gpio_config_output>:

//////////////////////////////////////////
// private functions

static void gpio_config_output(GPIO_OUT_t *gpio)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef *port = gpio->port;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
	uint32_t pin = gpio->pin;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	60bb      	str	r3, [r7, #8]

	// First, configure as an output
    port->MODER &= ~(0x3 << (pin*2)) ;      // clear the two MODE bits for this pin
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	2103      	movs	r1, #3
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	43d2      	mvns	r2, r2
 800103c:	401a      	ands	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	601a      	str	r2, [r3, #0]
    port->MODER |=  1 << (pin*2)  ;        	// 1 => output
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	0052      	lsls	r2, r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	431a      	orrs	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	601a      	str	r2, [r3, #0]

	// ...and then the selected drive
	port->OTYPER &= ~(0x1 << pin) ;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2101      	movs	r1, #1
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	43d2      	mvns	r2, r2
 8001064:	401a      	ands	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	605a      	str	r2, [r3, #4]
	port->OTYPER |= (gpio->otype << pin) ;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	7952      	ldrb	r2, [r2, #5]
 8001072:	4611      	mov	r1, r2
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	431a      	orrs	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	605a      	str	r2, [r3, #4]

	// ...with selected speed
	port->OSPEEDR &= ~(0x3 << (pin*2)) ; 	// clear the two OSPEED bits for this pin
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	2103      	movs	r1, #3
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	43d2      	mvns	r2, r2
 8001090:	401a      	ands	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	609a      	str	r2, [r3, #8]
	port->OSPEEDR |= gpio->ospeed << (pin*2) ;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	7992      	ldrb	r2, [r2, #6]
 800109e:	4611      	mov	r1, r2
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	0052      	lsls	r2, r2, #1
 80010a4:	fa01 f202 	lsl.w	r2, r1, r2
 80010a8:	431a      	orrs	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	609a      	str	r2, [r3, #8]

	// ...set initial value
	port->ODR &= ~(0x1 << pin);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2101      	movs	r1, #1
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	401a      	ands	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	615a      	str	r2, [r3, #20]
	port->ODR |= (gpio->init_value << pin);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	79d2      	ldrb	r2, [r2, #7]
 80010ca:	4611      	mov	r1, r2
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	431a      	orrs	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	615a      	str	r2, [r3, #20]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <MFS_init>:

//////////////////////////////////////////
// public functions

void MFS_init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
    // Enable the clock to GPIO Ports A, and B
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock some MFS buttons / LEDs
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MFS_init+0x48>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <MFS_init+0x48>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;    // enable clock some MFS buttons / LEDs
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MFS_init+0x48>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <MFS_init+0x48>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c

	// configure the LEDs as GPIO outputs
	for(int ii=1; ii<=4; ii++) {
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	e009      	b.n	800111c <MFS_init+0x38>
		gpio_config_output(&leds[ii]);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <MFS_init+0x4c>)
 800110e:	4413      	add	r3, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff81 	bl	8001018 <gpio_config_output>
	for(int ii=1; ii<=4; ii++) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b04      	cmp	r3, #4
 8001120:	ddf2      	ble.n	8001108 <MFS_init+0x24>
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	20000000 	.word	0x20000000

08001134 <MFS_set_led>:

// Turns LED `num` to 'on' if non-zero, or off if zero
void MFS_set_led( uint8_t num, uint32_t on )
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
	while(num > 4);	// hang if invalid input
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d8fc      	bhi.n	8001140 <MFS_set_led+0xc>

	GPIO_TypeDef *port = leds[num].port;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <MFS_set_led+0x5c>)
 800114a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800114e:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << leds[num].pin;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MFS_set_led+0x5c>)
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	2301      	movs	r3, #1
 800115e:	4093      	lsls	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]

	if ( on )
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <MFS_set_led+0x44>
		port->ODR &= ~bit ;	// active low
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	615a      	str	r2, [r3, #20]
	else
		port->ODR |= bit ;
}
 8001176:	e005      	b.n	8001184 <MFS_set_led+0x50>
		port->ODR |= bit ;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000

08001194 <app_init>:
extern int msgSize;
QueueHandle_t cmd_queue;


void app_init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	//display beginning message
	msgSize = sprintf((char *)userMsg, "\r\nStart program.\r\n");
 8001198:	490e      	ldr	r1, [pc, #56]	; (80011d4 <app_init+0x40>)
 800119a:	480f      	ldr	r0, [pc, #60]	; (80011d8 <app_init+0x44>)
 800119c:	f00b ff48 	bl	800d030 <siprintf>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <app_init+0x48>)
 80011a4:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, userMsg, msgSize);
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <app_init+0x48>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	490a      	ldr	r1, [pc, #40]	; (80011d8 <app_init+0x44>)
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <app_init+0x4c>)
 80011b0:	f001 ff30 	bl	8003014 <USART_Write>
	receive_task_init();
 80011b4:	f001 f834 	bl	8002220 <receive_task_init>
	channel_task_init();
 80011b8:	f000 f816 	bl	80011e8 <channel_task_init>
	ring_task_init();
 80011bc:	f001 f898 	bl	80022f0 <ring_task_init>
	cmd_queue = xQueueCreate(99, sizeof(COMMAND_c));
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	2063      	movs	r0, #99	; 0x63
 80011c6:	f008 fe7f 	bl	8009ec8 <xQueueGenericCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <app_init+0x50>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	08011f08 	.word	0x08011f08
 80011d8:	2000b8c0 	.word	0x2000b8c0
 80011dc:	2000b988 	.word	0x2000b988
 80011e0:	40004400 	.word	0x40004400
 80011e4:	2000042c 	.word	0x2000042c

080011e8 <channel_task_init>:
};

static void channel_task(void *params);

//creates task to take in gen commands
int channel_task_init(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
	//create task
	BaseType_t err = xTaskCreate(channel_task, "Channel_Task", 1024, (void *) pc_ch, 3, NULL);
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <channel_task_init+0x3c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	9200      	str	r2, [sp, #0]
 80011fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <channel_task_init+0x40>)
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <channel_task_init+0x44>)
 8001202:	f009 fa24 	bl	800a64e <xTaskCreate>
 8001206:	6078      	str	r0, [r7, #4]
	assert(err == pdPASS);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <channel_task_init+0x32>
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <channel_task_init+0x48>)
 8001210:	4a08      	ldr	r2, [pc, #32]	; (8001234 <channel_task_init+0x4c>)
 8001212:	2137      	movs	r1, #55	; 0x37
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <channel_task_init+0x50>)
 8001216:	f00a fcb1 	bl	800bb7c <__assert_func>
	return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000028 	.word	0x20000028
 8001228:	08011f30 	.word	0x08011f30
 800122c:	0800123d 	.word	0x0800123d
 8001230:	08011f40 	.word	0x08011f40
 8001234:	0801221c 	.word	0x0801221c
 8001238:	08011f50 	.word	0x08011f50

0800123c <channel_task>:
static void channel_task(void* params){
 800123c:	b580      	push	{r7, lr}
 800123e:	b090      	sub	sp, #64	; 0x40
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
	COMMAND_c * rec_cmd; //pointer to received command
	int channel_sel; //variable to hold selected DAC channel
	uint32_t req_freq; //variable for required frequency of waveform
	uint32_t req_freq_div; //variable for required ARR value
	int noise_bits; //number of noise bits to unmask
	uint16_t prescaler = 0; //prescaler value that the timers will use
 8001244:	2300      	movs	r3, #0
 8001246:	867b      	strh	r3, [r7, #50]	; 0x32
	char gen_cmd[] = "gen\0";
 8001248:	4a9a      	ldr	r2, [pc, #616]	; (80014b4 <channel_task+0x278>)
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001252:	6018      	str	r0, [r3, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	7019      	strb	r1, [r3, #0]
	char cap_cmd[] = "cap\0";
 8001258:	4a97      	ldr	r2, [pc, #604]	; (80014b8 <channel_task+0x27c>)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001262:	6018      	str	r0, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	7019      	strb	r1, [r3, #0]
	while(1)
	{
		if(uxQueueMessagesWaiting(cmd_queue))
 8001268:	4b94      	ldr	r3, [pc, #592]	; (80014bc <channel_task+0x280>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f009 f863 	bl	800a338 <uxQueueMessagesWaiting>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 81b4 	beq.w	80015e2 <channel_task+0x3a6>
		{
			//receive pointer to command struct
			BaseType_t rec_error = xQueueReceive(cmd_queue, &rec_cmd, 0);
 800127a:	4b90      	ldr	r3, [pc, #576]	; (80014bc <channel_task+0x280>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f107 011c 	add.w	r1, r7, #28
 8001282:	2200      	movs	r2, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f008 ff77 	bl	800a178 <xQueueReceive>
 800128a:	62f8      	str	r0, [r7, #44]	; 0x2c
			assert(rec_error == pdPASS);
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <channel_task+0x62>
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <channel_task+0x284>)
 8001294:	4a8b      	ldr	r2, [pc, #556]	; (80014c4 <channel_task+0x288>)
 8001296:	2149      	movs	r1, #73	; 0x49
 8001298:	488b      	ldr	r0, [pc, #556]	; (80014c8 <channel_task+0x28c>)
 800129a:	f00a fc6f 	bl	800bb7c <__assert_func>
			if(strcmp((char *) rec_cmd->name, gen_cmd) == 0)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	461a      	mov	r2, r3
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	f7fe ff91 	bl	80001d0 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 817c 	bne.w	80015ae <channel_task+0x372>
			{
				channel_sel = rec_cmd->channel;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
				noise_bits = rec_cmd->noise;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
				TIM2->PSC = prescaler;
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012c8:	6293      	str	r3, [r2, #40]	; 0x28
				TIM5->PSC = prescaler;
 80012ca:	4a80      	ldr	r2, [pc, #512]	; (80014cc <channel_task+0x290>)
 80012cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012ce:	6293      	str	r3, [r2, #40]	; 0x28
				if(rec_cmd->freq == 0)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	f7ff fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <channel_task+0xbe>
				{
					//generate DC signal
					generate_DC(channel_sel, rec_cmd->dac_minv, rec_cmd->noise);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	8b19      	ldrh	r1, [r3, #24]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012f4:	f000 f98e 	bl	8001614 <generate_DC>
 80012f8:	e06f      	b.n	80013da <channel_task+0x19e>
				} else{
					//calculate register values to achieve correct frequency
					req_freq = rec_cmd->freq * LUT_SIZE;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <channel_task+0x294>)
 8001306:	f7ff f987 	bl	8000618 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc59 	bl	8000bc8 <__aeabi_d2uiz>
 8001316:	4603      	mov	r3, r0
 8001318:	623b      	str	r3, [r7, #32]
					req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 800131a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800131c:	3301      	adds	r3, #1
 800131e:	4a6d      	ldr	r2, [pc, #436]	; (80014d4 <channel_task+0x298>)
 8001320:	fb92 f3f3 	sdiv	r3, r2, r3
 8001324:	461a      	mov	r2, r3
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	637b      	str	r3, [r7, #52]	; 0x34


					//switch statement to generate the selected waveform
					switch(rec_cmd->type)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	7b1b      	ldrb	r3, [r3, #12]
 8001332:	3b61      	subs	r3, #97	; 0x61
 8001334:	2b13      	cmp	r3, #19
 8001336:	d850      	bhi.n	80013da <channel_task+0x19e>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <channel_task+0x104>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	080013cd 	.word	0x080013cd
 8001344:	080013db 	.word	0x080013db
 8001348:	080013db 	.word	0x080013db
 800134c:	080013db 	.word	0x080013db
 8001350:	080013db 	.word	0x080013db
 8001354:	080013db 	.word	0x080013db
 8001358:	080013db 	.word	0x080013db
 800135c:	080013db 	.word	0x080013db
 8001360:	080013db 	.word	0x080013db
 8001364:	080013db 	.word	0x080013db
 8001368:	080013db 	.word	0x080013db
 800136c:	080013db 	.word	0x080013db
 8001370:	080013db 	.word	0x080013db
 8001374:	080013db 	.word	0x080013db
 8001378:	080013db 	.word	0x080013db
 800137c:	080013db 	.word	0x080013db
 8001380:	080013db 	.word	0x080013db
 8001384:	080013a5 	.word	0x080013a5
 8001388:	08001391 	.word	0x08001391
 800138c:	080013b9 	.word	0x080013b9
					{
						case 's':
							generate_sine(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	8b19      	ldrh	r1, [r3, #24]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	8b5a      	ldrh	r2, [r3, #26]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800139e:	f000 f9c3 	bl	8001728 <generate_sine>
							break;
 80013a2:	e01a      	b.n	80013da <channel_task+0x19e>
						case 'r':
							generate_rectangle(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	8b19      	ldrh	r1, [r3, #24]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	8b5a      	ldrh	r2, [r3, #26]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013b2:	f000 f965 	bl	8001680 <generate_rectangle>
							break;
 80013b6:	e010      	b.n	80013da <channel_task+0x19e>
						case 't':
							generate_triangular(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	8b19      	ldrh	r1, [r3, #24]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	8b5a      	ldrh	r2, [r3, #26]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c6:	f000 fa5b 	bl	8001880 <generate_triangular>
							break;
 80013ca:	e006      	b.n	80013da <channel_task+0x19e>
						case 'a':
							generate_arbitrary(channel_sel, rec_cmd->noise);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4619      	mov	r1, r3
 80013d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013d4:	f000 fad2 	bl	800197c <generate_arbitrary>
							break;
 80013d8:	bf00      	nop
					}
				}
				//start the DMA for the data
				switch(channel_sel)
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d004      	beq.n	80013ea <channel_task+0x1ae>
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	f000 8082 	beq.w	80014ec <channel_task+0x2b0>
 80013e8:	e0fb      	b.n	80015e2 <channel_task+0x3a6>
				{
				case 1:
					//turn off DAC
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80013ea:	2100      	movs	r1, #0
 80013ec:	483a      	ldr	r0, [pc, #232]	; (80014d8 <channel_task+0x29c>)
 80013ee:	f003 fcef 	bl	8004dd0 <HAL_DAC_Stop_DMA>
					//turn off noise
					DAC->CR &= ~(DAC_CR_MAMP1_0 + DAC_CR_MAMP1_1 + DAC_CR_MAMP1_2 + DAC_CR_MAMP1_3);
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <channel_task+0x2a0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a39      	ldr	r2, [pc, #228]	; (80014dc <channel_task+0x2a0>)
 80013f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013fc:	6013      	str	r3, [r2, #0]
					DAC->CR &= ~DAC_CR_WAVE1_0;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <channel_task+0x2a0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a36      	ldr	r2, [pc, #216]	; (80014dc <channel_task+0x2a0>)
 8001404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001408:	6013      	str	r3, [r2, #0]
					//if there is noise bits, enable noise generator and unmask that number of bits
					if(noise_bits > 0)
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd0d      	ble.n	800142c <channel_task+0x1f0>
					{
						DAC->CR |= DAC_CR_WAVE1_0;
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <channel_task+0x2a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a31      	ldr	r2, [pc, #196]	; (80014dc <channel_task+0x2a0>)
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	6013      	str	r3, [r2, #0]
						DAC->CR |= (noise_bits << DAC_CR_MAMP1_Pos);
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <channel_task+0x2a0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	4611      	mov	r1, r2
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <channel_task+0x2a0>)
 8001428:	430b      	orrs	r3, r1
 800142a:	6013      	str	r3, [r2, #0]
					}
					//start timer 2 and DMA for channel 1
					if(rec_cmd->type == 'c')
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	2b63      	cmp	r3, #99	; 0x63
 8001432:	d125      	bne.n	8001480 <channel_task+0x244>
					{
						req_freq = 10000; //put entire buffer into DAC in 2 seconds (20k/2 = 10kHz)
 8001434:	f242 7310 	movw	r3, #10000	; 0x2710
 8001438:	623b      	str	r3, [r7, #32]
						req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 800143a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800143c:	3301      	adds	r3, #1
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <channel_task+0x298>)
 8001440:	fb92 f3f3 	sdiv	r3, r2, r3
 8001444:	461a      	mov	r2, r3
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
						TIM2->ARR = req_freq_div;
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001454:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM2->EGR |= TIM_EGR_UG;
 8001456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim2);
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <channel_task+0x2a4>)
 8001468:	f005 ff10 	bl	800728c <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)adc_LUT_1, ADC_LUT_SIZE, DAC_ALIGN_12B_R);
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <channel_task+0x2a8>)
 8001476:	2100      	movs	r1, #0
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <channel_task+0x29c>)
 800147a:	f003 fbdd 	bl	8004c38 <HAL_DAC_Start_DMA>
						TIM2->ARR = req_freq_div;
						TIM2->EGR |= TIM_EGR_UG;
						HAL_TIM_Base_Start(&htim2);
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_LUT_1, LUT_SIZE , DAC_ALIGN_12B_R);
					}
					break;
 800147e:	e0b0      	b.n	80015e2 <channel_task+0x3a6>
						TIM2->ARR = req_freq_div;
 8001480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM2->EGR |= TIM_EGR_UG;
 8001488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim2);
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <channel_task+0x2a4>)
 800149a:	f005 fef7 	bl	800728c <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_LUT_1, LUT_SIZE , DAC_ALIGN_12B_R);
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <channel_task+0x2ac>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <channel_task+0x29c>)
 80014ac:	f003 fbc4 	bl	8004c38 <HAL_DAC_Start_DMA>
					break;
 80014b0:	e097      	b.n	80015e2 <channel_task+0x3a6>
 80014b2:	bf00      	nop
 80014b4:	08011f80 	.word	0x08011f80
 80014b8:	08011f88 	.word	0x08011f88
 80014bc:	2000042c 	.word	0x2000042c
 80014c0:	08011f6c 	.word	0x08011f6c
 80014c4:	08012230 	.word	0x08012230
 80014c8:	08011f50 	.word	0x08011f50
 80014cc:	40000c00 	.word	0x40000c00
 80014d0:	40700000 	.word	0x40700000
 80014d4:	04c4b400 	.word	0x04c4b400
 80014d8:	2000b5d0 	.word	0x2000b5d0
 80014dc:	40007400 	.word	0x40007400
 80014e0:	2000b6d0 	.word	0x2000b6d0
 80014e4:	20000830 	.word	0x20000830
 80014e8:	20000430 	.word	0x20000430
				case 2:
					//turn off DAC
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_2);
 80014ec:	2110      	movs	r1, #16
 80014ee:	483f      	ldr	r0, [pc, #252]	; (80015ec <channel_task+0x3b0>)
 80014f0:	f003 fc6e 	bl	8004dd0 <HAL_DAC_Stop_DMA>
					//turn off noise
					DAC->CR &= ~(DAC_CR_MAMP2_0 + DAC_CR_MAMP2_1 + DAC_CR_MAMP2_2 + DAC_CR_MAMP2_3);
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <channel_task+0x3b4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <channel_task+0x3b4>)
 80014fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80014fe:	6013      	str	r3, [r2, #0]
					DAC->CR &= ~DAC_CR_WAVE2_0;
 8001500:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <channel_task+0x3b4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <channel_task+0x3b4>)
 8001506:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800150a:	6013      	str	r3, [r2, #0]
					//if there is noise bits, enable noise generator and unmask that number of bits
					if(noise_bits > 0)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	2b00      	cmp	r3, #0
 8001510:	dd0d      	ble.n	800152e <channel_task+0x2f2>
					{
						DAC->CR |= DAC_CR_WAVE2_0;
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <channel_task+0x3b4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a36      	ldr	r2, [pc, #216]	; (80015f0 <channel_task+0x3b4>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151c:	6013      	str	r3, [r2, #0]
						DAC->CR |= (noise_bits << DAC_CR_MAMP2_Pos);
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <channel_task+0x3b4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	0612      	lsls	r2, r2, #24
 8001526:	4611      	mov	r1, r2
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <channel_task+0x3b4>)
 800152a:	430b      	orrs	r3, r1
 800152c:	6013      	str	r3, [r2, #0]
					}

					//start timer 5 and DMA for channel 1
					if(rec_cmd->type == 'c')
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	7b1b      	ldrb	r3, [r3, #12]
 8001532:	2b63      	cmp	r3, #99	; 0x63
 8001534:	d125      	bne.n	8001582 <channel_task+0x346>
					{
						//output to DAC at 10kHz
						HAL_ADC_Stop_DMA(&hadc1);
 8001536:	482f      	ldr	r0, [pc, #188]	; (80015f4 <channel_task+0x3b8>)
 8001538:	f002 fafe 	bl	8003b38 <HAL_ADC_Stop_DMA>
						req_freq = 10000;
 800153c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001540:	623b      	str	r3, [r7, #32]
						req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 8001542:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001544:	3301      	adds	r3, #1
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <channel_task+0x3bc>)
 8001548:	fb92 f3f3 	sdiv	r3, r2, r3
 800154c:	461a      	mov	r2, r3
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
						TIM5->ARR = req_freq_div; //calculated for a frequency of 0.5 Hz (2s)
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <channel_task+0x3c0>)
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM5->EGR |= TIM_EGR_UG;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <channel_task+0x3c0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <channel_task+0x3c0>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim5);
 8001568:	4825      	ldr	r0, [pc, #148]	; (8001600 <channel_task+0x3c4>)
 800156a:	f005 fe8f 	bl	800728c <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)adc_LUT_1, ADC_LUT_SIZE, DAC_ALIGN_12B_R);
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <channel_task+0x3c8>)
 8001578:	2110      	movs	r1, #16
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <channel_task+0x3b0>)
 800157c:	f003 fb5c 	bl	8004c38 <HAL_DAC_Start_DMA>
						TIM5->ARR = req_freq_div;
						TIM5->EGR |= TIM_EGR_UG;
						HAL_TIM_Base_Start(&htim5);
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)dac_LUT_2, LUT_SIZE, DAC_ALIGN_12B_R);
					}
					break;
 8001580:	e02f      	b.n	80015e2 <channel_task+0x3a6>
						TIM5->ARR = req_freq_div;
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <channel_task+0x3c0>)
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM5->EGR |= TIM_EGR_UG;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <channel_task+0x3c0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <channel_task+0x3c0>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim5);
 8001594:	481a      	ldr	r0, [pc, #104]	; (8001600 <channel_task+0x3c4>)
 8001596:	f005 fe79 	bl	800728c <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)dac_LUT_2, LUT_SIZE, DAC_ALIGN_12B_R);
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <channel_task+0x3cc>)
 80015a4:	2110      	movs	r1, #16
 80015a6:	4811      	ldr	r0, [pc, #68]	; (80015ec <channel_task+0x3b0>)
 80015a8:	f003 fb46 	bl	8004c38 <HAL_DAC_Start_DMA>
					break;
 80015ac:	e019      	b.n	80015e2 <channel_task+0x3a6>
				}
			} else if (strcmp((char *) rec_cmd->name, cap_cmd) == 0)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f7fe fe09 	bl	80001d0 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10e      	bne.n	80015e2 <channel_task+0x3a6>
			{
				TIM4->EGR |= TIM_EGR_UG;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <channel_task+0x3d0>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4a10      	ldr	r2, [pc, #64]	; (800160c <channel_task+0x3d0>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6153      	str	r3, [r2, #20]
				HAL_TIM_Base_Start(&htim4);
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <channel_task+0x3d4>)
 80015d2:	f005 fe5b 	bl	800728c <HAL_TIM_Base_Start>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_LUT_1, ADC_LUT_SIZE);
 80015d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015da:	490a      	ldr	r1, [pc, #40]	; (8001604 <channel_task+0x3c8>)
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <channel_task+0x3b8>)
 80015de:	f002 f9ef 	bl	80039c0 <HAL_ADC_Start_DMA>
			}
		}
		vTaskDelay(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f009 f980 	bl	800a8e8 <vTaskDelay>
		if(uxQueueMessagesWaiting(cmd_queue))
 80015e8:	e63e      	b.n	8001268 <channel_task+0x2c>
 80015ea:	bf00      	nop
 80015ec:	2000b5d0 	.word	0x2000b5d0
 80015f0:	40007400 	.word	0x40007400
 80015f4:	2000b524 	.word	0x2000b524
 80015f8:	04c4b400 	.word	0x04c4b400
 80015fc:	40000c00 	.word	0x40000c00
 8001600:	2000b768 	.word	0x2000b768
 8001604:	20000830 	.word	0x20000830
 8001608:	20000630 	.word	0x20000630
 800160c:	40000800 	.word	0x40000800
 8001610:	2000b71c 	.word	0x2000b71c

08001614 <generate_DC>:
	}
}


void generate_DC(int channel, uint16_t dac_minv, int noise)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	460b      	mov	r3, r1
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	817b      	strh	r3, [r7, #10]
	//generate lookup table for DC signal

	switch(channel)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d003      	beq.n	8001630 <generate_DC+0x1c>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d00f      	beq.n	800164e <generate_DC+0x3a>
			//add noise
			dac_LUT_2[i] = dac_minv;
		}
		break;
	}
}
 800162e:	e01d      	b.n	800166c <generate_DC+0x58>
		for(int i = 0; i < LUT_SIZE; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e007      	b.n	8001646 <generate_DC+0x32>
			dac_LUT_1[i] = dac_minv;
 8001636:	4910      	ldr	r1, [pc, #64]	; (8001678 <generate_DC+0x64>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	897a      	ldrh	r2, [r7, #10]
 800163c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	ddf4      	ble.n	8001636 <generate_DC+0x22>
		break;
 800164c:	e00e      	b.n	800166c <generate_DC+0x58>
		for(int i = 0; i < LUT_SIZE; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e007      	b.n	8001664 <generate_DC+0x50>
			dac_LUT_2[i] = dac_minv;
 8001654:	4909      	ldr	r1, [pc, #36]	; (800167c <generate_DC+0x68>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	897a      	ldrh	r2, [r7, #10]
 800165a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	3301      	adds	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	ddf4      	ble.n	8001654 <generate_DC+0x40>
		break;
 800166a:	bf00      	nop
}
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000430 	.word	0x20000430
 800167c:	20000630 	.word	0x20000630

08001680 <generate_rectangle>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_rectangle(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	4613      	mov	r3, r2
 8001690:	813b      	strh	r3, [r7, #8]
	//generate lookup table for rectangle signal where half is minv and 2nd half is maxv
	switch(channel)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d003      	beq.n	80016a0 <generate_rectangle+0x20>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d01d      	beq.n	80016da <generate_rectangle+0x5a>
			//set high part of rectangle
			dac_LUT_2[i] = dac_maxv;
		}
		break;
	}
}
 800169e:	e039      	b.n	8001714 <generate_rectangle+0x94>
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	e007      	b.n	80016b6 <generate_rectangle+0x36>
			dac_LUT_1[i] = dac_minv;
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <generate_rectangle+0xa0>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	897a      	ldrh	r2, [r7, #10]
 80016ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ba:	ddf4      	ble.n	80016a6 <generate_rectangle+0x26>
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e007      	b.n	80016d2 <generate_rectangle+0x52>
			dac_LUT_1[i] = dac_maxv;
 80016c2:	4917      	ldr	r1, [pc, #92]	; (8001720 <generate_rectangle+0xa0>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	893a      	ldrh	r2, [r7, #8]
 80016c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	3301      	adds	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	ddf4      	ble.n	80016c2 <generate_rectangle+0x42>
		break;
 80016d8:	e01c      	b.n	8001714 <generate_rectangle+0x94>
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e007      	b.n	80016f0 <generate_rectangle+0x70>
			dac_LUT_2[i] = dac_minv;
 80016e0:	4910      	ldr	r1, [pc, #64]	; (8001724 <generate_rectangle+0xa4>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	897a      	ldrh	r2, [r7, #10]
 80016e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b7f      	cmp	r3, #127	; 0x7f
 80016f4:	ddf4      	ble.n	80016e0 <generate_rectangle+0x60>
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e007      	b.n	800170c <generate_rectangle+0x8c>
			dac_LUT_2[i] = dac_maxv;
 80016fc:	4909      	ldr	r1, [pc, #36]	; (8001724 <generate_rectangle+0xa4>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	893a      	ldrh	r2, [r7, #8]
 8001702:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3301      	adds	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	ddf4      	ble.n	80016fc <generate_rectangle+0x7c>
		break;
 8001712:	bf00      	nop
}
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000430 	.word	0x20000430
 8001724:	20000630 	.word	0x20000630

08001728 <generate_sine>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_sine(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	817b      	strh	r3, [r7, #10]
 8001738:	4613      	mov	r3, r2
 800173a:	813b      	strh	r3, [r7, #8]
	uint16_t midv = (dac_minv + dac_maxv) / 2;
 800173c:	897a      	ldrh	r2, [r7, #10]
 800173e:	893b      	ldrh	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	0fda      	lsrs	r2, r3, #31
 8001744:	4413      	add	r3, r2
 8001746:	105b      	asrs	r3, r3, #1
 8001748:	82fb      	strh	r3, [r7, #22]
	float angle = (float)(2*M_PI)/LUT_SIZE;
 800174a:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <generate_sine+0x14c>)
 800174c:	613b      	str	r3, [r7, #16]
	switch(channel)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <generate_sine+0x34>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d043      	beq.n	80017e2 <generate_sine+0xba>
			//set LUT to be a sine wave and add noise
			dac_LUT_2[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
		}
		break;
	}
}
 800175a:	e085      	b.n	8001868 <generate_sine+0x140>
		for(int i = 0; i < LUT_SIZE; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	e03b      	b.n	80017da <generate_sine+0xb2>
			dac_LUT_1[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
 8001762:	8afb      	ldrh	r3, [r7, #22]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe feed 	bl	8000544 <__aeabi_i2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
 800176e:	893a      	ldrh	r2, [r7, #8]
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee5 	bl	8000544 <__aeabi_i2d>
 800177a:	4680      	mov	r8, r0
 800177c:	4689      	mov	r9, r1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001788:	edd7 7a04 	vldr	s15, [r7, #16]
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	ee17 0a90 	vmov	r0, s15
 8001794:	f7fe fee8 	bl	8000568 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	ec43 2b10 	vmov	d0, r2, r3
 80017a0:	f00f fb5a 	bl	8010e58 <sin>
 80017a4:	ec53 2b10 	vmov	r2, r3, d0
 80017a8:	4640      	mov	r0, r8
 80017aa:	4649      	mov	r1, r9
 80017ac:	f7fe ff34 	bl	8000618 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd78 	bl	80002ac <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa00 	bl	8000bc8 <__aeabi_d2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b299      	uxth	r1, r3
 80017cc:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <generate_sine+0x150>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	2bff      	cmp	r3, #255	; 0xff
 80017de:	ddc0      	ble.n	8001762 <generate_sine+0x3a>
		break;
 80017e0:	e042      	b.n	8001868 <generate_sine+0x140>
		for(int i = 0; i < LUT_SIZE; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	e03b      	b.n	8001860 <generate_sine+0x138>
			dac_LUT_2[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
 80017e8:	8afb      	ldrh	r3, [r7, #22]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe feaa 	bl	8000544 <__aeabi_i2d>
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	893a      	ldrh	r2, [r7, #8]
 80017f6:	8afb      	ldrh	r3, [r7, #22]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fea2 	bl	8000544 <__aeabi_i2d>
 8001800:	4680      	mov	r8, r0
 8001802:	4689      	mov	r9, r1
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	ee17 0a90 	vmov	r0, s15
 800181a:	f7fe fea5 	bl	8000568 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b10 	vmov	d0, r2, r3
 8001826:	f00f fb17 	bl	8010e58 <sin>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
 800182e:	4640      	mov	r0, r8
 8001830:	4649      	mov	r1, r9
 8001832:	f7fe fef1 	bl	8000618 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fd35 	bl	80002ac <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9bd 	bl	8000bc8 <__aeabi_d2uiz>
 800184e:	4603      	mov	r3, r0
 8001850:	b299      	uxth	r1, r3
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <generate_sine+0x154>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	3301      	adds	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	ddc0      	ble.n	80017e8 <generate_sine+0xc0>
		break;
 8001866:	bf00      	nop
}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001872:	bf00      	nop
 8001874:	3cc90fdb 	.word	0x3cc90fdb
 8001878:	20000430 	.word	0x20000430
 800187c:	20000630 	.word	0x20000630

08001880 <generate_triangular>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_triangular(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	817b      	strh	r3, [r7, #10]
 800188e:	4613      	mov	r3, r2
 8001890:	813b      	strh	r3, [r7, #8]
	uint16_t slope = (dac_maxv - dac_minv)/(LUT_SIZE/2);
 8001892:	893a      	ldrh	r2, [r7, #8]
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	da00      	bge.n	800189e <generate_triangular+0x1e>
 800189c:	337f      	adds	r3, #127	; 0x7f
 800189e:	11db      	asrs	r3, r3, #7
 80018a0:	82fb      	strh	r3, [r7, #22]
	switch(channel)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <generate_triangular+0x30>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d02e      	beq.n	800190c <generate_triangular+0x8c>
			//set negative part of the triangular wave
			dac_LUT_2[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
		}
		break;
	}
}
 80018ae:	e05b      	b.n	8001968 <generate_triangular+0xe8>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	e00f      	b.n	80018d6 <generate_triangular+0x56>
			dac_LUT_1[i] = dac_minv + (i * slope);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	8afa      	ldrh	r2, [r7, #22]
 80018bc:	fb12 f303 	smulbb	r3, r2, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	4413      	add	r3, r2
 80018c6:	b299      	uxth	r1, r3
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <generate_triangular+0xf4>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	3301      	adds	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	ddec      	ble.n	80018b6 <generate_triangular+0x36>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	e010      	b.n	8001904 <generate_triangular+0x84>
			dac_LUT_1[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8afa      	ldrh	r2, [r7, #22]
 80018e8:	fb12 f303 	smulbb	r3, r2, r3
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	3380      	adds	r3, #128	; 0x80
 80018f2:	8939      	ldrh	r1, [r7, #8]
 80018f4:	1a8a      	subs	r2, r1, r2
 80018f6:	b291      	uxth	r1, r2
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <generate_triangular+0xf4>)
 80018fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	3301      	adds	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2b7f      	cmp	r3, #127	; 0x7f
 8001908:	ddeb      	ble.n	80018e2 <generate_triangular+0x62>
		break;
 800190a:	e02d      	b.n	8001968 <generate_triangular+0xe8>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	e00f      	b.n	8001932 <generate_triangular+0xb2>
			dac_LUT_2[i] = dac_minv + (i * slope);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	b29b      	uxth	r3, r3
 8001916:	8afa      	ldrh	r2, [r7, #22]
 8001918:	fb12 f303 	smulbb	r3, r2, r3
 800191c:	b29a      	uxth	r2, r3
 800191e:	897b      	ldrh	r3, [r7, #10]
 8001920:	4413      	add	r3, r2
 8001922:	b299      	uxth	r1, r3
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <generate_triangular+0xf8>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	ddec      	ble.n	8001912 <generate_triangular+0x92>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	e010      	b.n	8001960 <generate_triangular+0xe0>
			dac_LUT_2[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	b29b      	uxth	r3, r3
 8001942:	8afa      	ldrh	r2, [r7, #22]
 8001944:	fb12 f303 	smulbb	r3, r2, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3380      	adds	r3, #128	; 0x80
 800194e:	8939      	ldrh	r1, [r7, #8]
 8001950:	1a8a      	subs	r2, r1, r2
 8001952:	b291      	uxth	r1, r2
 8001954:	4a08      	ldr	r2, [pc, #32]	; (8001978 <generate_triangular+0xf8>)
 8001956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	3301      	adds	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b7f      	cmp	r3, #127	; 0x7f
 8001964:	ddeb      	ble.n	800193e <generate_triangular+0xbe>
		break;
 8001966:	bf00      	nop
}
 8001968:	bf00      	nop
 800196a:	372c      	adds	r7, #44	; 0x2c
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000430 	.word	0x20000430
 8001978:	20000630 	.word	0x20000630

0800197c <generate_arbitrary>:
 *
 * Param: int channel - # of DAC channel
 * 		  int noise - # of noise bits
 */
void generate_arbitrary(int channel, int noise)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]

	switch(channel)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d003      	beq.n	8001994 <generate_arbitrary+0x18>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d012      	beq.n	80019b8 <generate_arbitrary+0x3c>
			//set equal to EKG part of triangular and add noise
			dac_LUT_2[i] = ekg[i];
		}
		break;
	}
}
 8001992:	e023      	b.n	80019dc <generate_arbitrary+0x60>
		for(int i = 0; i < LUT_SIZE; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e00a      	b.n	80019b0 <generate_arbitrary+0x34>
			dac_LUT_1[i] = ekg[i];
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <generate_arbitrary+0x6c>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <generate_arbitrary+0x70>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3301      	adds	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	ddf1      	ble.n	800199a <generate_arbitrary+0x1e>
		break;
 80019b6:	e011      	b.n	80019dc <generate_arbitrary+0x60>
		for(int i = 0; i < LUT_SIZE; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e00a      	b.n	80019d4 <generate_arbitrary+0x58>
			dac_LUT_2[i] = ekg[i];
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <generate_arbitrary+0x6c>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <generate_arbitrary+0x74>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	ddf1      	ble.n	80019be <generate_arbitrary+0x42>
		break;
 80019da:	bf00      	nop
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	20000430 	.word	0x20000430
 80019f0:	20000630 	.word	0x20000630

080019f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <vApplicationGetIdleTaskMemory+0x30>)
 8001a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a12:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	2000a470 	.word	0x2000a470
 8001a24:	2000a524 	.word	0x2000a524

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2e:	f001 fbe9 	bl	8003204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a32:	f000 f833 	bl	8001a9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a36:	f000 f882 	bl	8001b3e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3a:	f000 fb7f 	bl	800213c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a3e:	f000 fb4f 	bl	80020e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a42:	f000 faed 	bl	8002020 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001a46:	f000 f921 	bl	8001c8c <MX_DAC1_Init>
  MX_RNG_Init();
 8001a4a:	f000 f971 	bl	8001d30 <MX_RNG_Init>
  MX_TIM2_Init();
 8001a4e:	f000 f9d7 	bl	8001e00 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001a52:	f000 f981 	bl	8001d58 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001a56:	f000 fa95 	bl	8001f84 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001a5a:	f000 f89f 	bl	8001b9c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001a5e:	f000 fa43 	bl	8001ee8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001a62:	f000 fb0d 	bl	8002080 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <main+0x6c>)
 8001a68:	1d3c      	adds	r4, r7, #4
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f008 f8a7 	bl	8009bd0 <osThreadCreate>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <main+0x70>)
 8001a86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  app_init();
 8001a88:	f7ff fb84 	bl	8001194 <app_init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a8c:	f008 f899 	bl	8009bc2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <main+0x68>
 8001a92:	bf00      	nop
 8001a94:	08011f9c 	.word	0x08011f9c
 8001a98:	2000b8bc 	.word	0x2000b8bc

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2244      	movs	r2, #68	; 0x44
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f00a f9cf 	bl	800be4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001abe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ac2:	f003 fff1 	bl	8005aa8 <HAL_PWREx_ControlVoltageScaling>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001acc:	f000 fba2 	bl	8002214 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ada:	2310      	movs	r3, #16
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001aea:	230a      	movs	r3, #10
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001aee:	2307      	movs	r3, #7
 8001af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f828 	bl	8005b54 <HAL_RCC_OscConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b0a:	f000 fb83 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	230f      	movs	r3, #15
 8001b10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b12:	2303      	movs	r3, #3
 8001b14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	2104      	movs	r1, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fbf0 	bl	800630c <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b32:	f000 fb6f 	bl	8002214 <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3758      	adds	r7, #88	; 0x58
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b0a2      	sub	sp, #136	; 0x88
 8001b42:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2288      	movs	r2, #136	; 0x88
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00a f97f 	bl	800be4e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 8001b50:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8001b54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b5a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001b5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b60:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b62:	2302      	movs	r3, #2
 8001b64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001b7a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001b7e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fe18 	bl	80067b8 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001b8e:	f000 fb41 	bl	8002214 <Error_Handler>
  }
}
 8001b92:	bf00      	nop
 8001b94:	3788      	adds	r7, #136	; 0x88
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bc0:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <MX_ADC1_Init+0xe8>)
 8001bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bde:	2204      	movs	r2, #4
 8001be0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c22:	4817      	ldr	r0, [pc, #92]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c24:	f001 fd76 	bl	8003714 <HAL_ADC_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001c2e:	f000 faf1 	bl	8002214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4810      	ldr	r0, [pc, #64]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c3e:	f002 fe47 	bl	80048d0 <HAL_ADCEx_MultiModeConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001c48:	f000 fae4 	bl	8002214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_ADC1_Init+0xec>)
 8001c4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c50:	2306      	movs	r3, #6
 8001c52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c58:	237f      	movs	r3, #127	; 0x7f
 8001c5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c6a:	f001 ffe5 	bl	8003c38 <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c74:	f000 face 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000b524 	.word	0x2000b524
 8001c84:	50040000 	.word	0x50040000
 8001c88:	14f00020 	.word	0x14f00020

08001c8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2224      	movs	r2, #36	; 0x24
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00a f8d8 	bl	800be4e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <MX_DAC1_Init+0xa0>)
 8001ca2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ca4:	4820      	ldr	r0, [pc, #128]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001ca6:	f002 ffa5 	bl	8004bf4 <HAL_DAC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001cb0:	f000 fab0 	bl	8002214 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001cb8:	2324      	movs	r3, #36	; 0x24
 8001cba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001cd0:	f003 f8e1 	bl	8004e96 <HAL_DAC_ConfigChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001cda:	f000 fa9b 	bl	8002214 <Error_Handler>
  }

  /** Configure Noise wave generation on DAC OUT1
  */
  if (HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_LFSRUNMASK_BIT0) != HAL_OK)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4811      	ldr	r0, [pc, #68]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001ce4:	f003 fa27 	bl	8005136 <HAL_DACEx_NoiseWaveGenerate>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001cee:	f000 fa91 	bl	8002214 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001cf2:	231c      	movs	r3, #28
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001cfe:	f003 f8ca 	bl	8004e96 <HAL_DAC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8001d08:	f000 fa84 	bl	8002214 <Error_Handler>
  }

  /** Configure Noise wave generation on DAC OUT2
  */
  if (HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_2, DAC_LFSRUNMASK_BIT0) != HAL_OK)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2110      	movs	r1, #16
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001d12:	f003 fa10 	bl	8005136 <HAL_DACEx_NoiseWaveGenerate>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_DAC1_Init+0x94>
  {
    Error_Handler();
 8001d1c:	f000 fa7a 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000b5d0 	.word	0x2000b5d0
 8001d2c:	40007400 	.word	0x40007400

08001d30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <MX_RNG_Init+0x24>)
 8001d38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d3c:	f005 f9f8 	bl	8007130 <HAL_RNG_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001d46:	f000 fa65 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000b674 	.word	0x2000b674
 8001d54:	50060800 	.word	0x50060800

08001d58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <MX_TIM1_Init+0xa4>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da2:	4815      	ldr	r0, [pc, #84]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001da4:	f005 fa1b 	bl	80071de <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dae:	f000 fa31 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001dc0:	f005 fd36 	bl	8007830 <HAL_TIM_ConfigClockSource>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dca:	f000 fa23 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001de0:	f006 fa22 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dea:	f000 fa13 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000b684 	.word	0x2000b684
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	; 0x38
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e20:	463b      	mov	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e3c:	224f      	movs	r2, #79	; 0x4f
 8001e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e5a:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e5c:	f005 f9bf 	bl	80071de <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e66:	f000 f9d5 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481b      	ldr	r0, [pc, #108]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e78:	f005 fcda 	bl	8007830 <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e82:	f000 f9c7 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e88:	f005 fad8 	bl	800743c <HAL_TIM_OC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e92:	f000 f9bf 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e96:	2320      	movs	r3, #32
 8001e98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001ea6:	f006 f9bf 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001eb0:	f000 f9b0 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_RETRIGERRABLE_OPM1;
 8001eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001ece:	f005 fc35 	bl	800773c <HAL_TIM_OC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001ed8:	f000 f99c 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3738      	adds	r7, #56	; 0x38
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000b6d0 	.word	0x2000b6d0

08001ee8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <MX_TIM4_Init+0x98>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7999;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001f1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f2e:	f005 f956 	bl	80071de <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001f38:	f000 f96c 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f4a:	f005 fc71 	bl	8007830 <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001f54:	f000 f95e 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f66:	f006 f95f 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f000 f950 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000b71c 	.word	0x2000b71c
 8001f80:	40000800 	.word	0x40000800

08001f84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <MX_TIM5_Init+0x98>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_TIM5_Init+0x94>)
 8001faa:	224f      	movs	r2, #79	; 0x4f
 8001fac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fca:	f005 f908 	bl	80071de <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001fd4:	f000 f91e 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fe6:	f005 fc23 	bl	8007830 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f000 f910 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_TIM5_Init+0x94>)
 8002002:	f006 f911 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800200c:	f000 f902 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000b768 	.word	0x2000b768
 800201c:	40000c00 	.word	0x40000c00

08002020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART2_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002064:	f006 f986 	bl	8008374 <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f8d1 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000b7b4 	.word	0x2000b7b4
 800207c:	40004400 	.word	0x40004400

08002080 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART3_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800208c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020c4:	f006 f956 	bl	8008374 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 f8a1 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000b838 	.word	0x2000b838
 80020dc:	40004800 	.word	0x40004800

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_DMA_Init+0x58>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <MX_DMA_Init+0x58>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6493      	str	r3, [r2, #72]	; 0x48
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_DMA_Init+0x58>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2105      	movs	r1, #5
 8002102:	200b      	movs	r0, #11
 8002104:	f002 fd4c 	bl	8004ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002108:	200b      	movs	r0, #11
 800210a:	f002 fd65 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	200d      	movs	r0, #13
 8002114:	f002 fd44 	bl	8004ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002118:	200d      	movs	r0, #13
 800211a:	f002 fd5d 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2105      	movs	r1, #5
 8002122:	200e      	movs	r0, #14
 8002124:	f002 fd3c 	bl	8004ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002128:	200e      	movs	r0, #14
 800212a:	f002 fd55 	bl	8004bd8 <HAL_NVIC_EnableIRQ>

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_GPIO_Init+0x9c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <MX_GPIO_Init+0x9c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <MX_GPIO_Init+0x9c>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_GPIO_Init+0x9c>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_GPIO_Init+0xa0>)
 80021ca:	f003 fab5 	bl	8005738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	48000800 	.word	0x48000800

080021e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f007 fd3d 	bl	8009c68 <osDelay>
 80021ee:	e7fb      	b.n	80021e8 <StartDefaultTask+0x8>

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002202:	f001 f81f 	bl	8003244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40000400 	.word	0x40000400

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	e7fe      	b.n	800221c <Error_Handler+0x8>
	...

08002220 <receive_task_init>:
static void receive_task(void *params);
static int print_command(COMMAND_c * c_print);

//create receive task
int receive_task_init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af02      	add	r7, sp, #8
	COMMAND_c * c = &cmd;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <receive_task_init+0x48>)
 8002228:	607b      	str	r3, [r7, #4]
	memset(c, 0, sizeof(COMMAND_c));
 800222a:	2220      	movs	r2, #32
 800222c:	2100      	movs	r1, #0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f009 fe0d 	bl	800be4e <memset>
	BaseType_t err = xTaskCreate(receive_task, "Receive_Task", 1024, &cmd, 1, NULL);
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2301      	movs	r3, #1
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <receive_task_init+0x48>)
 800223e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <receive_task_init+0x4c>)
 8002244:	480a      	ldr	r0, [pc, #40]	; (8002270 <receive_task_init+0x50>)
 8002246:	f008 fa02 	bl	800a64e <xTaskCreate>
 800224a:	6038      	str	r0, [r7, #0]
	assert(err == pdPASS);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <receive_task_init+0x3e>
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <receive_task_init+0x54>)
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <receive_task_init+0x58>)
 8002256:	211b      	movs	r1, #27
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <receive_task_init+0x5c>)
 800225a:	f009 fc8f 	bl	800bb7c <__assert_func>
	return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000b990 	.word	0x2000b990
 800226c:	08011fb8 	.word	0x08011fb8
 8002270:	08002281 	.word	0x08002281
 8002274:	08011fc8 	.word	0x08011fc8
 8002278:	08012240 	.word	0x08012240
 800227c:	08011fd8 	.word	0x08011fd8

08002280 <receive_task>:

static void receive_task(void *params){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	memset(txBuffer2, '\0', sizeof(txBuffer2));
 8002288:	2264      	movs	r2, #100	; 0x64
 800228a:	2100      	movs	r1, #0
 800228c:	4811      	ldr	r0, [pc, #68]	; (80022d4 <receive_task+0x54>)
 800228e:	f009 fdde 	bl	800be4e <memset>
	while(1)
	{
		//check for a completed line
		if(USART_getline(USART2))
 8002292:	4811      	ldr	r0, [pc, #68]	; (80022d8 <receive_task+0x58>)
 8002294:	f000 fe5c 	bl	8002f50 <USART_getline>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <receive_task+0x4a>
		{
			//append source ID and write to USART3
			msgSize = sprintf((char *)txBuffer2, "%s %s\r", ring.ringID, rxBuffer2);
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <receive_task+0x5c>)
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <receive_task+0x60>)
 80022a2:	4910      	ldr	r1, [pc, #64]	; (80022e4 <receive_task+0x64>)
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <receive_task+0x54>)
 80022a6:	f00a fec3 	bl	800d030 <siprintf>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <receive_task+0x68>)
 80022ae:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart3, txBuffer2, msgSize);
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <receive_task+0x68>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	4906      	ldr	r1, [pc, #24]	; (80022d4 <receive_task+0x54>)
 80022ba:	480c      	ldr	r0, [pc, #48]	; (80022ec <receive_task+0x6c>)
 80022bc:	f006 f8a8 	bl	8008410 <HAL_UART_Transmit_IT>
			memset(rxBuffer2, '\0',  sizeof(rxBuffer2));
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	2100      	movs	r1, #0
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <receive_task+0x5c>)
 80022c6:	f009 fdc2 	bl	800be4e <memset>
		}
		vTaskDelay(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f008 fb0c 	bl	800a8e8 <vTaskDelay>
		if(USART_getline(USART2))
 80022d0:	e7df      	b.n	8002292 <receive_task+0x12>
 80022d2:	bf00      	nop
 80022d4:	2000bb38 	.word	0x2000bb38
 80022d8:	40004400 	.word	0x40004400
 80022dc:	2000bad4 	.word	0x2000bad4
 80022e0:	2000b9b0 	.word	0x2000b9b0
 80022e4:	08011ff4 	.word	0x08011ff4
 80022e8:	2000b988 	.word	0x2000b988
 80022ec:	2000b838 	.word	0x2000b838

080022f0 <ring_task_init>:
const char *pc_r = "Ring\n";

static void ring_task(void* params);

int ring_task_init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
	int msgSize;
	//clear memory at ring
	RING_r  * r = &ring;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <ring_task_init+0x8c>)
 80022f8:	60fb      	str	r3, [r7, #12]
	memset(r, 0, sizeof(RING_r));
 80022fa:	22be      	movs	r2, #190	; 0xbe
 80022fc:	2100      	movs	r1, #0
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f009 fda5 	bl	800be4e <memset>

	//prompt for source ID
	msgSize = sprintf((char *)txBuffer2, "Enter source name (letters only):\r\n");
 8002304:	491e      	ldr	r1, [pc, #120]	; (8002380 <ring_task_init+0x90>)
 8002306:	481f      	ldr	r0, [pc, #124]	; (8002384 <ring_task_init+0x94>)
 8002308:	f00a fe92 	bl	800d030 <siprintf>
 800230c:	60b8      	str	r0, [r7, #8]
	USART_Write(USART2, txBuffer2, msgSize);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	461a      	mov	r2, r3
 8002312:	491c      	ldr	r1, [pc, #112]	; (8002384 <ring_task_init+0x94>)
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <ring_task_init+0x98>)
 8002316:	f000 fe7d 	bl	8003014 <USART_Write>

	//wait until a user name is entered
	while(!USART_getline(USART2));
 800231a:	bf00      	nop
 800231c:	481a      	ldr	r0, [pc, #104]	; (8002388 <ring_task_init+0x98>)
 800231e:	f000 fe17 	bl	8002f50 <USART_getline>
 8002322:	4603      	mov	r3, r0
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f6      	bne.n	800231c <ring_task_init+0x2c>
	sscanf((char *)rxBuffer2, "%s", r->ringID);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	4916      	ldr	r1, [pc, #88]	; (800238c <ring_task_init+0x9c>)
 8002334:	4816      	ldr	r0, [pc, #88]	; (8002390 <ring_task_init+0xa0>)
 8002336:	f00a fe9b 	bl	800d070 <siscanf>

	//create ring task
	BaseType_t err = xTaskCreate(ring_task, "Ring_Task", 1024, (void *) r, 2, NULL);
 800233a:	2300      	movs	r3, #0
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	2302      	movs	r3, #2
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002348:	4912      	ldr	r1, [pc, #72]	; (8002394 <ring_task_init+0xa4>)
 800234a:	4813      	ldr	r0, [pc, #76]	; (8002398 <ring_task_init+0xa8>)
 800234c:	f008 f97f 	bl	800a64e <xTaskCreate>
 8002350:	6078      	str	r0, [r7, #4]
	assert(err == pdPASS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <ring_task_init+0x74>
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <ring_task_init+0xac>)
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <ring_task_init+0xb0>)
 800235c:	212a      	movs	r1, #42	; 0x2a
 800235e:	4811      	ldr	r0, [pc, #68]	; (80023a4 <ring_task_init+0xb4>)
 8002360:	f009 fc0c 	bl	800bb7c <__assert_func>

	MFS_init();
 8002364:	f7fe febe 	bl	80010e4 <MFS_init>
	//enable interrupt
	HAL_UART_Receive_IT(&huart3, &rxByte3, 1);
 8002368:	2201      	movs	r2, #1
 800236a:	490f      	ldr	r1, [pc, #60]	; (80023a8 <ring_task_init+0xb8>)
 800236c:	480f      	ldr	r0, [pc, #60]	; (80023ac <ring_task_init+0xbc>)
 800236e:	f006 f8bd 	bl	80084ec <HAL_UART_Receive_IT>
	return 0;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000b9b0 	.word	0x2000b9b0
 8002380:	08012110 	.word	0x08012110
 8002384:	2000bb38 	.word	0x2000bb38
 8002388:	40004400 	.word	0x40004400
 800238c:	08012134 	.word	0x08012134
 8002390:	2000bad4 	.word	0x2000bad4
 8002394:	08012138 	.word	0x08012138
 8002398:	080023b1 	.word	0x080023b1
 800239c:	08012144 	.word	0x08012144
 80023a0:	08012254 	.word	0x08012254
 80023a4:	08012154 	.word	0x08012154
 80023a8:	2000bb9d 	.word	0x2000bb9d
 80023ac:	2000b838 	.word	0x2000b838

080023b0 <ring_task>:

static void ring_task(void* params){
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b09d      	sub	sp, #116	; 0x74
 80023b4:	af08      	add	r7, sp, #32
 80023b6:	6078      	str	r0, [r7, #4]
	RING_r * r = (RING_r *)params; //pointer to received command
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	char gen_cmd[] = "gen\0";
 80023bc:	4a95      	ldr	r2, [pc, #596]	; (8002614 <ring_task+0x264>)
 80023be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023c6:	6018      	str	r0, [r3, #0]
 80023c8:	3304      	adds	r3, #4
 80023ca:	7019      	strb	r1, [r3, #0]
	char cap_cmd[] = "cap\0";
 80023cc:	4a92      	ldr	r2, [pc, #584]	; (8002618 <ring_task+0x268>)
 80023ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d6:	6018      	str	r0, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	7019      	strb	r1, [r3, #0]
	char msg_cmd[] = "msg\0";
 80023dc:	4a8f      	ldr	r2, [pc, #572]	; (800261c <ring_task+0x26c>)
 80023de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e6:	6018      	str	r0, [r3, #0]
 80023e8:	3304      	adds	r3, #4
 80023ea:	7019      	strb	r1, [r3, #0]
	char led_cmd[] = "led\0";
 80023ec:	4a8c      	ldr	r2, [pc, #560]	; (8002620 <ring_task+0x270>)
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023f6:	6018      	str	r0, [r3, #0]
 80023f8:	3304      	adds	r3, #4
 80023fa:	7019      	strb	r1, [r3, #0]
	char on[] = "on\0";
 80023fc:	f646 636f 	movw	r3, #28271	; 0x6e6f
 8002400:	61fb      	str	r3, [r7, #28]
	char off[] = "off\0";
 8002402:	4a88      	ldr	r2, [pc, #544]	; (8002624 <ring_task+0x274>)
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240c:	6018      	str	r0, [r3, #0]
 800240e:	3304      	adds	r3, #4
 8002410:	7019      	strb	r1, [r3, #0]
	int msgSize;
	unsigned char temp_ringID[10];
	//enable HAL UART interrupts
	HAL_UART_Receive_IT(&huart3, &rxByte3, 1);
 8002412:	2201      	movs	r2, #1
 8002414:	4984      	ldr	r1, [pc, #528]	; (8002628 <ring_task+0x278>)
 8002416:	4885      	ldr	r0, [pc, #532]	; (800262c <ring_task+0x27c>)
 8002418:	f006 f868 	bl	80084ec <HAL_UART_Receive_IT>
	while(1)
	{
		//if flag is raised (UART3 has received a line
		if(uart3_line_flag)
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <ring_task+0x280>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80f3 	beq.w	800260c <ring_task+0x25c>
		{
			//read in command
			sscanf((char *)rxBuffer3, "%s %s %s %s %s %s %s %s %s", r->sourceID, r->destID, r->command, r->param_1, r->param_2, r->param_3, r->param_4, r->param_5, r->param_6);
 8002426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002428:	f103 0c0a 	add.w	ip, r3, #10
 800242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242e:	f103 0e14 	add.w	lr, r3, #20
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	331e      	adds	r3, #30
 8002436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002438:	325a      	adds	r2, #90	; 0x5a
 800243a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800243c:	318c      	adds	r1, #140	; 0x8c
 800243e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002440:	3096      	adds	r0, #150	; 0x96
 8002442:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002444:	34a0      	adds	r4, #160	; 0xa0
 8002446:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002448:	35aa      	adds	r5, #170	; 0xaa
 800244a:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800244c:	36b4      	adds	r6, #180	; 0xb4
 800244e:	9606      	str	r6, [sp, #24]
 8002450:	9505      	str	r5, [sp, #20]
 8002452:	9404      	str	r4, [sp, #16]
 8002454:	9003      	str	r0, [sp, #12]
 8002456:	9102      	str	r1, [sp, #8]
 8002458:	9201      	str	r2, [sp, #4]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4673      	mov	r3, lr
 800245e:	4662      	mov	r2, ip
 8002460:	4974      	ldr	r1, [pc, #464]	; (8002634 <ring_task+0x284>)
 8002462:	4875      	ldr	r0, [pc, #468]	; (8002638 <ring_task+0x288>)
 8002464:	f00a fe04 	bl	800d070 <siscanf>

			//check if destination ID matches ring ID
			if(strcmp((char *) r->destID, (char *) r->ringID) == 0)
 8002468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246a:	3314      	adds	r3, #20
 800246c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd fead 	bl	80001d0 <strcmp>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8097 	bne.w	80025ac <ring_task+0x1fc>
			{
				//received command
				msgSize = sprintf((char *)txBuffer2, "Received command: %s\r\n", r->command);
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	331e      	adds	r3, #30
 8002482:	461a      	mov	r2, r3
 8002484:	496d      	ldr	r1, [pc, #436]	; (800263c <ring_task+0x28c>)
 8002486:	486e      	ldr	r0, [pc, #440]	; (8002640 <ring_task+0x290>)
 8002488:	f00a fdd2 	bl	800d030 <siprintf>
 800248c:	64b8      	str	r0, [r7, #72]	; 0x48
				USART_Write(USART2, txBuffer2, msgSize);
 800248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002490:	461a      	mov	r2, r3
 8002492:	496b      	ldr	r1, [pc, #428]	; (8002640 <ring_task+0x290>)
 8002494:	486b      	ldr	r0, [pc, #428]	; (8002644 <ring_task+0x294>)
 8002496:	f000 fdbd 	bl	8003014 <USART_Write>
				memset(txBuffer2, '\0', sizeof(txBuffer2)); //reset buffer to all null terminators
 800249a:	2264      	movs	r2, #100	; 0x64
 800249c:	2100      	movs	r1, #0
 800249e:	4868      	ldr	r0, [pc, #416]	; (8002640 <ring_task+0x290>)
 80024a0:	f009 fcd5 	bl	800be4e <memset>
				//if command matches gen or cap
				if((strcmp((char *) r->command, gen_cmd) == 0) || strcmp((char *) r->destID, cap_cmd) == 0)
 80024a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a6:	331e      	adds	r3, #30
 80024a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd fe8e 	bl	80001d0 <strcmp>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <ring_task+0x120>
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	3314      	adds	r3, #20
 80024be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fd fe83 	bl	80001d0 <strcmp>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <ring_task+0x126>
				{
					parse_channel_cmd(r);
 80024d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80024d2:	f000 f8c1 	bl	8002658 <parse_channel_cmd>
				}

				//if received command is msg, print out message
				if((strcmp((char *) r->command, msg_cmd) == 0))
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	331e      	adds	r3, #30
 80024da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd fe75 	bl	80001d0 <strcmp>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <ring_task+0x15c>
				{
					msgSize = sprintf((char *)txBuffer2, "%s: %s\r\n", r->sourceID, r->param_1);
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	f103 020a 	add.w	r2, r3, #10
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	335a      	adds	r3, #90	; 0x5a
 80024f6:	4954      	ldr	r1, [pc, #336]	; (8002648 <ring_task+0x298>)
 80024f8:	4851      	ldr	r0, [pc, #324]	; (8002640 <ring_task+0x290>)
 80024fa:	f00a fd99 	bl	800d030 <siprintf>
 80024fe:	64b8      	str	r0, [r7, #72]	; 0x48
					USART_Write(USART2, txBuffer2, msgSize);
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	461a      	mov	r2, r3
 8002504:	494e      	ldr	r1, [pc, #312]	; (8002640 <ring_task+0x290>)
 8002506:	484f      	ldr	r0, [pc, #316]	; (8002644 <ring_task+0x294>)
 8002508:	f000 fd84 	bl	8003014 <USART_Write>
				}

				//if received command is LED, turn on LED
				if((strcmp((char *) r->command, led_cmd) == 0))
 800250c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250e:	331e      	adds	r3, #30
 8002510:	f107 0220 	add.w	r2, r7, #32
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe5a 	bl	80001d0 <strcmp>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d14f      	bne.n	80025c2 <ring_task+0x212>
				{
					msgSize = sprintf((char *)txBuffer2, "%s: LED %s turned %s\r\n", r->sourceID, r->param_1, r->param_2);
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	f103 020a 	add.w	r2, r3, #10
 8002528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252a:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	338c      	adds	r3, #140	; 0x8c
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	460b      	mov	r3, r1
 8002536:	4945      	ldr	r1, [pc, #276]	; (800264c <ring_task+0x29c>)
 8002538:	4841      	ldr	r0, [pc, #260]	; (8002640 <ring_task+0x290>)
 800253a:	f00a fd79 	bl	800d030 <siprintf>
 800253e:	64b8      	str	r0, [r7, #72]	; 0x48
					USART_Write(USART2, txBuffer2, msgSize);
 8002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002542:	461a      	mov	r2, r3
 8002544:	493e      	ldr	r1, [pc, #248]	; (8002640 <ring_task+0x290>)
 8002546:	483f      	ldr	r0, [pc, #252]	; (8002644 <ring_task+0x294>)
 8002548:	f000 fd64 	bl	8003014 <USART_Write>
					if((strcmp((char *) r->param_2, on) == 0))
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	338c      	adds	r3, #140	; 0x8c
 8002550:	f107 021c 	add.w	r2, r7, #28
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe3a 	bl	80001d0 <strcmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <ring_task+0x1cc>
					{
						int led = atoi(r->param_1);
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	335a      	adds	r3, #90	; 0x5a
 8002566:	4618      	mov	r0, r3
 8002568:	f009 fb29 	bl	800bbbe <atoi>
 800256c:	6438      	str	r0, [r7, #64]	; 0x40
						MFS_set_led(led, 1);
 800256e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2101      	movs	r1, #1
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fddd 	bl	8001134 <MFS_set_led>
 800257a:	e022      	b.n	80025c2 <ring_task+0x212>
					}else if((strcmp((char *) r->param_2, off) == 0))
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	338c      	adds	r3, #140	; 0x8c
 8002580:	f107 0214 	add.w	r2, r7, #20
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe22 	bl	80001d0 <strcmp>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d117      	bne.n	80025c2 <ring_task+0x212>
					{
						int led = atoi(r->param_1);
 8002592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002594:	335a      	adds	r3, #90	; 0x5a
 8002596:	4618      	mov	r0, r3
 8002598:	f009 fb11 	bl	800bbbe <atoi>
 800259c:	6478      	str	r0, [r7, #68]	; 0x44
						MFS_set_led(led, 0);
 800259e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fdc5 	bl	8001134 <MFS_set_led>
 80025aa:	e00a      	b.n	80025c2 <ring_task+0x212>
					}
				}
			} else{
				//if not intended destination, send message out
				msgSize = sprintf((char *)txBuffer2, "Not intended target\r\n");
 80025ac:	4928      	ldr	r1, [pc, #160]	; (8002650 <ring_task+0x2a0>)
 80025ae:	4824      	ldr	r0, [pc, #144]	; (8002640 <ring_task+0x290>)
 80025b0:	f00a fd3e 	bl	800d030 <siprintf>
 80025b4:	64b8      	str	r0, [r7, #72]	; 0x48
				USART_Write(USART2, txBuffer2, msgSize);
 80025b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b8:	461a      	mov	r2, r3
 80025ba:	4921      	ldr	r1, [pc, #132]	; (8002640 <ring_task+0x290>)
 80025bc:	4821      	ldr	r0, [pc, #132]	; (8002644 <ring_task+0x294>)
 80025be:	f000 fd29 	bl	8003014 <USART_Write>
				//USART_Write(USART3, rxBuffer3, sizeof(rxBuffer3));
			}
			uart3_line_flag = 0;
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <ring_task+0x280>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
			memset(rxBuffer3, '\0', sizeof(rxBuffer3)); //reset buffer to all null terminators
 80025c8:	2264      	movs	r2, #100	; 0x64
 80025ca:	2100      	movs	r1, #0
 80025cc:	481a      	ldr	r0, [pc, #104]	; (8002638 <ring_task+0x288>)
 80025ce:	f009 fc3e 	bl	800be4e <memset>
			memset(txBuffer2, '\0', sizeof(txBuffer2)); //reset buffer to all null terminators
 80025d2:	2264      	movs	r2, #100	; 0x64
 80025d4:	2100      	movs	r1, #0
 80025d6:	481a      	ldr	r0, [pc, #104]	; (8002640 <ring_task+0x290>)
 80025d8:	f009 fc39 	bl	800be4e <memset>

			//store ring ID and clear ring command
			// copying ring ID to temporary
			strcpy((char*)temp_ringID, (char*) r->ringID);
 80025dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00a fdb4 	bl	800d152 <strcpy>
			memset(r, '\0', sizeof(RING_r));
 80025ea:	22be      	movs	r2, #190	; 0xbe
 80025ec:	2100      	movs	r1, #0
 80025ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80025f0:	f009 fc2d 	bl	800be4e <memset>
			strcpy((char*) r->ringID, (char*)temp_ringID);
 80025f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f6:	f107 0208 	add.w	r2, r7, #8
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00a fda8 	bl	800d152 <strcpy>

			//enable interrupt
			HAL_UART_Receive_IT(&huart3, &rxByte3, 1);
 8002602:	2201      	movs	r2, #1
 8002604:	4908      	ldr	r1, [pc, #32]	; (8002628 <ring_task+0x278>)
 8002606:	4809      	ldr	r0, [pc, #36]	; (800262c <ring_task+0x27c>)
 8002608:	f005 ff70 	bl	80084ec <HAL_UART_Receive_IT>
		}

		vTaskDelay(1);
 800260c:	2001      	movs	r0, #1
 800260e:	f008 f96b 	bl	800a8e8 <vTaskDelay>
		if(uart3_line_flag)
 8002612:	e703      	b.n	800241c <ring_task+0x6c>
 8002614:	080121d8 	.word	0x080121d8
 8002618:	080121e0 	.word	0x080121e0
 800261c:	080121e8 	.word	0x080121e8
 8002620:	080121f0 	.word	0x080121f0
 8002624:	080121f8 	.word	0x080121f8
 8002628:	2000bb9d 	.word	0x2000bb9d
 800262c:	2000b838 	.word	0x2000b838
 8002630:	2000bac8 	.word	0x2000bac8
 8002634:	08012168 	.word	0x08012168
 8002638:	2000bba0 	.word	0x2000bba0
 800263c:	08012184 	.word	0x08012184
 8002640:	2000bb38 	.word	0x2000bb38
 8002644:	40004400 	.word	0x40004400
 8002648:	0801219c 	.word	0x0801219c
 800264c:	080121a8 	.word	0x080121a8
 8002650:	080121c0 	.word	0x080121c0
 8002654:	00000000 	.word	0x00000000

08002658 <parse_channel_cmd>:
	*/
}

//Use ring command parameters to create command for channel tasks
void parse_channel_cmd(RING_r * r)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	double minv, maxv;
	COMMAND_c * c = &cmd;
 8002660:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <parse_channel_cmd+0x100>)
 8002662:	60bb      	str	r3, [r7, #8]
	memset(c, 0, sizeof(COMMAND_c));
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2220      	movs	r2, #32
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f009 fbef 	bl	800be4e <memset>
	strcpy((char*) c->name, (char*) r->command);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	461a      	mov	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	331e      	adds	r3, #30
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f00a fd69 	bl	800d152 <strcpy>
	c->channel = atoi((char *)r->param_1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	335a      	adds	r3, #90	; 0x5a
 8002684:	68bc      	ldr	r4, [r7, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f009 fa99 	bl	800bbbe <atoi>
 800268c:	4603      	mov	r3, r0
 800268e:	60a3      	str	r3, [r4, #8]
	c->type = (unsigned char) r->param_2[0];
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 8002698:	731a      	strb	r2, [r3, #12]
	c->freq = atof((char *)r->param_3);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3396      	adds	r3, #150	; 0x96
 800269e:	68bc      	ldr	r4, [r7, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f009 fa89 	bl	800bbb8 <atof>
 80026a6:	eeb0 7a40 	vmov.f32	s14, s0
 80026aa:	eef0 7a60 	vmov.f32	s15, s1
 80026ae:	ed84 7b04 	vstr	d7, [r4, #16]

	minv = atof((char *)r->param_4);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	33a0      	adds	r3, #160	; 0xa0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f009 fa7e 	bl	800bbb8 <atof>
 80026bc:	ed87 0b06 	vstr	d0, [r7, #24]
	maxv = atof((char *)r->param_5);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	33aa      	adds	r3, #170	; 0xaa
 80026c4:	4618      	mov	r0, r3
 80026c6:	f009 fa77 	bl	800bbb8 <atof>
 80026ca:	ed87 0b04 	vstr	d0, [r7, #16]
	c->dac_minv = (float) (4095/3.3) * minv;
 80026ce:	a320      	add	r3, pc, #128	; (adr r3, 8002750 <parse_channel_cmd+0xf8>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d8:	f7fd ff9e 	bl	8000618 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	68bc      	ldr	r4, [r7, #8]
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fa6f 	bl	8000bc8 <__aeabi_d2uiz>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8323      	strh	r3, [r4, #24]
	c->dac_maxv = (float) (4095/3.3) * maxv;
 80026f0:	a317      	add	r3, pc, #92	; (adr r3, 8002750 <parse_channel_cmd+0xf8>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026fa:	f7fd ff8d 	bl	8000618 <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	68bc      	ldr	r4, [r7, #8]
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe fa5e 	bl	8000bc8 <__aeabi_d2uiz>
 800270c:	4603      	mov	r3, r0
 800270e:	b29b      	uxth	r3, r3
 8002710:	8363      	strh	r3, [r4, #26]

	c->noise = atoi((char *)r->param_6);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	33b4      	adds	r3, #180	; 0xb4
 8002716:	68bc      	ldr	r4, [r7, #8]
 8002718:	4618      	mov	r0, r3
 800271a:	f009 fa50 	bl	800bbbe <atoi>
 800271e:	4603      	mov	r3, r0
 8002720:	61e3      	str	r3, [r4, #28]
	BaseType_t err = xQueueSendToFront(cmd_queue, &c, 0);
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <parse_channel_cmd+0x104>)
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	f107 0108 	add.w	r1, r7, #8
 800272a:	2301      	movs	r3, #1
 800272c:	2200      	movs	r2, #0
 800272e:	f007 fc25 	bl	8009f7c <xQueueGenericSend>
 8002732:	60f8      	str	r0, [r7, #12]
	assert(err == pdPASS);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d005      	beq.n	8002746 <parse_channel_cmd+0xee>
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <parse_channel_cmd+0x108>)
 800273c:	4a09      	ldr	r2, [pc, #36]	; (8002764 <parse_channel_cmd+0x10c>)
 800273e:	21a6      	movs	r1, #166	; 0xa6
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <parse_channel_cmd+0x110>)
 8002742:	f009 fa1b 	bl	800bb7c <__assert_func>
}
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	bf00      	nop
 8002750:	e0000000 	.word	0xe0000000
 8002754:	409363a2 	.word	0x409363a2
 8002758:	2000b990 	.word	0x2000b990
 800275c:	2000042c 	.word	0x2000042c
 8002760:	08012144 	.word	0x08012144
 8002764:	08012264 	.word	0x08012264
 8002768:	08012154 	.word	0x08012154

0800276c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_MspInit+0x4c>)
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_MspInit+0x4c>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6613      	str	r3, [r2, #96]	; 0x60
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_MspInit+0x4c>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_MspInit+0x4c>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_MspInit+0x4c>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_MspInit+0x4c>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	210f      	movs	r1, #15
 80027a6:	f06f 0001 	mvn.w	r0, #1
 80027aa:	f002 f9f9 	bl	8004ba0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <HAL_ADC_MspInit+0xcc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d150      	bne.n	8002880 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_ADC_MspInit+0xd0>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a2a      	ldr	r2, [pc, #168]	; (800288c <HAL_ADC_MspInit+0xd0>)
 80027e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_ADC_MspInit+0xd0>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_ADC_MspInit+0xd0>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_ADC_MspInit+0xd0>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_ADC_MspInit+0xd0>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800280e:	2301      	movs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002812:	230b      	movs	r3, #11
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f002 ff88 	bl	8005738 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 800282a:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_ADC_MspInit+0xd8>)
 800282c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 800283c:	2200      	movs	r2, #0
 800283e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 800285e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002862:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002864:	480a      	ldr	r0, [pc, #40]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002866:	f002 fcf1 	bl	800524c <HAL_DMA_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_ADC_MspInit+0xb8>
    {
      Error_Handler();
 8002870:	f7ff fcd0 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 8002878:	64da      	str	r2, [r3, #76]	; 0x4c
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <HAL_ADC_MspInit+0xd4>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	50040000 	.word	0x50040000
 800288c:	40021000 	.word	0x40021000
 8002890:	2000b588 	.word	0x2000b588
 8002894:	40020008 	.word	0x40020008

08002898 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a41      	ldr	r2, [pc, #260]	; (80029bc <HAL_DAC_MspInit+0x124>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d17c      	bne.n	80029b4 <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_DAC_MspInit+0x128>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <HAL_DAC_MspInit+0x128>)
 80028c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
 80028c6:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_DAC_MspInit+0x128>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_DAC_MspInit+0x128>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_DAC_MspInit+0x128>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_DAC_MspInit+0x128>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028ea:	2330      	movs	r3, #48	; 0x30
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ee:	2303      	movs	r3, #3
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002900:	f002 ff1a 	bl	8005738 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002906:	4a30      	ldr	r2, [pc, #192]	; (80029c8 <HAL_DAC_MspInit+0x130>)
 8002908:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 800290c:	2206      	movs	r2, #6
 800290e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002912:	2210      	movs	r2, #16
 8002914:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002928:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 800292c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002930:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002934:	2220      	movs	r2, #32
 8002936:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 800293a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800293e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002940:	4820      	ldr	r0, [pc, #128]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002942:	f002 fc83 	bl	800524c <HAL_DMA_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 800294c:	f7ff fc62 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <HAL_DAC_MspInit+0x12c>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_DAC_MspInit+0x134>)
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_DAC_MspInit+0x138>)
 8002960:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_DAC_MspInit+0x134>)
 8002964:	2205      	movs	r2, #5
 8002966:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_DAC_MspInit+0x134>)
 800296a:	2210      	movs	r2, #16
 800296c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_DAC_MspInit+0x134>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_DAC_MspInit+0x134>)
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_DAC_MspInit+0x134>)
 800297c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002980:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_DAC_MspInit+0x134>)
 8002984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002988:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_DAC_MspInit+0x134>)
 800298c:	2220      	movs	r2, #32
 800298e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_DAC_MspInit+0x134>)
 8002992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002996:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002998:	480c      	ldr	r0, [pc, #48]	; (80029cc <HAL_DAC_MspInit+0x134>)
 800299a:	f002 fc57 	bl	800524c <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80029a4:	f7ff fc36 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_DAC_MspInit+0x134>)
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_DAC_MspInit+0x134>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40007400 	.word	0x40007400
 80029c0:	40021000 	.word	0x40021000
 80029c4:	2000b5e4 	.word	0x2000b5e4
 80029c8:	40020030 	.word	0x40020030
 80029cc:	2000b62c 	.word	0x2000b62c
 80029d0:	40020044 	.word	0x40020044

080029d4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_RNG_MspInit+0x38>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10b      	bne.n	80029fe <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RNG_MspInit+0x3c>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RNG_MspInit+0x3c>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <HAL_RNG_MspInit+0x3c>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	50060800 	.word	0x50060800
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_TIM_Base_MspInit+0xa4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10c      	bne.n	8002a40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a30:	6613      	str	r3, [r2, #96]	; 0x60
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a3e:	e034      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d10c      	bne.n	8002a64 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6593      	str	r3, [r2, #88]	; 0x58
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
}
 8002a62:	e022      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_TIM_Base_MspInit+0xac>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10c      	bne.n	8002a88 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
}
 8002a86:	e010      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_TIM_Base_MspInit+0xb0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10b      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_TIM_Base_MspInit+0xa8>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00

08002ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0ae      	sub	sp, #184	; 0xb8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	2288      	movs	r2, #136	; 0x88
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f009 f9b0 	bl	800be4e <memset>
  if(huart->Instance==USART2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_UART_MspInit+0x144>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d13c      	bne.n	8002b72 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002afc:	2300      	movs	r3, #0
 8002afe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fe57 	bl	80067b8 <HAL_RCCEx_PeriphCLKConfig>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b10:	f7ff fb80 	bl	8002214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	4a3d      	ldr	r2, [pc, #244]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	4a37      	ldr	r2, [pc, #220]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b44:	230c      	movs	r3, #12
 8002b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6c:	f002 fde4 	bl	8005738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b70:	e048      	b.n	8002c04 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <HAL_UART_MspInit+0x14c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d143      	bne.n	8002c04 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8002b80:	2320      	movs	r3, #32
 8002b82:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fe15 	bl	80067b8 <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002b94:	f7ff fb3e 	bl	8002214 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_UART_MspInit+0x148>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002be2:	2307      	movs	r3, #7
 8002be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bec:	4619      	mov	r1, r3
 8002bee:	480a      	ldr	r0, [pc, #40]	; (8002c18 <HAL_UART_MspInit+0x150>)
 8002bf0:	f002 fda2 	bl	8005738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2105      	movs	r1, #5
 8002bf8:	2027      	movs	r0, #39	; 0x27
 8002bfa:	f001 ffd1 	bl	8004ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bfe:	2027      	movs	r0, #39	; 0x27
 8002c00:	f001 ffea 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
}
 8002c04:	bf00      	nop
 8002c06:	37b8      	adds	r7, #184	; 0xb8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40004400 	.word	0x40004400
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40004800 	.word	0x40004800
 8002c18:	48000800 	.word	0x48000800

08002c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_InitTick+0xe0>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <HAL_InitTick+0xe0>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <HAL_InitTick+0xe0>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c42:	f107 0210 	add.w	r2, r7, #16
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f003 fd21 	bl	8006694 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f003 fcee 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8002c60:	6378      	str	r0, [r7, #52]	; 0x34
 8002c62:	e004      	b.n	8002c6e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c64:	f003 fcea 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_InitTick+0xe4>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <HAL_InitTick+0xe8>)
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_InitTick+0xec>)
 8002c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_InitTick+0xe8>)
 8002c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c88:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_InitTick+0xe8>)
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002c90:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_InitTick+0xe8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_InitTick+0xe8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_InitTick+0xe8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002ca2:	4818      	ldr	r0, [pc, #96]	; (8002d04 <HAL_InitTick+0xe8>)
 8002ca4:	f004 fa9b 	bl	80071de <HAL_TIM_Base_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11b      	bne.n	8002cee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002cb6:	4813      	ldr	r0, [pc, #76]	; (8002d04 <HAL_InitTick+0xe8>)
 8002cb8:	f004 fb50 	bl	800735c <HAL_TIM_Base_Start_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d111      	bne.n	8002cee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cca:	201d      	movs	r0, #29
 8002ccc:	f001 ff84 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	d808      	bhi.n	8002ce8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	201d      	movs	r0, #29
 8002cdc:	f001 ff60 	bl	8004ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_InitTick+0xf0>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e002      	b.n	8002cee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002cee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3738      	adds	r7, #56	; 0x38
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	2000ba70 	.word	0x2000ba70
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	20000230 	.word	0x20000230

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <NMI_Handler+0x4>

08002d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <MemManage_Handler+0x4>

08002d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d26:	e7fe      	b.n	8002d26 <BusFault_Handler+0x4>

08002d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <UsageFault_Handler+0x4>

08002d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <DMA1_Channel1_IRQHandler+0x10>)
 8002d42:	f002 fc1a 	bl	800557a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000b588 	.word	0x2000b588

08002d50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMA1_Channel3_IRQHandler+0x10>)
 8002d56:	f002 fc10 	bl	800557a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000b5e4 	.word	0x2000b5e4

08002d64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <DMA1_Channel4_IRQHandler+0x10>)
 8002d6a:	f002 fc06 	bl	800557a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	2000b62c 	.word	0x2000b62c

08002d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <TIM3_IRQHandler+0x10>)
 8002d7e:	f004 fbbe 	bl	80074fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000ba70 	.word	0x2000ba70

08002d8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <USART3_IRQHandler+0x10>)
 8002d92:	f005 fc01 	bl	8008598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000b838 	.word	0x2000b838

08002da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return 1;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_kill>:

int _kill(int pid, int sig)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dba:	f008 ff05 	bl	800bbc8 <__errno>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2216      	movs	r2, #22
 8002dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <_exit>:

void _exit (int status)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ffe7 	bl	8002db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de2:	e7fe      	b.n	8002de2 <_exit+0x12>

08002de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e00a      	b.n	8002e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002df6:	f3af 8000 	nop.w
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	60ba      	str	r2, [r7, #8]
 8002e02:	b2ca      	uxtb	r2, r1
 8002e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbf0      	blt.n	8002df6 <_read+0x12>
  }

  return len;
 8002e14:	687b      	ldr	r3, [r7, #4]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e009      	b.n	8002e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	60ba      	str	r2, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf1      	blt.n	8002e30 <_write+0x12>
  }
  return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_close>:

int _close(int file)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <_isatty>:

int _isatty(int file)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f008 fe6a 	bl	800bbc8 <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20018000 	.word	0x20018000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	2000babc 	.word	0x2000babc
 8002f28:	200132a0 	.word	0x200132a0

08002f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <SystemInit+0x20>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <SystemInit+0x20>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <USART_getline>:
uint8_t rxByte3; //char and buffer for USART3
uint8_t rxBuffer3[UART_BUFFER_SIZE];
uint8_t txBuffer3[UART_BUFFER_SIZE];

_Bool USART_getline(USART_TypeDef * USARTx)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	rxByte2 = USART_Read(USARTx);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f88d 	bl	8003078 <USART_Read>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <USART_getline+0xa8>)
 8002f64:	701a      	strb	r2, [r3, #0]
	//if character isn't null
	if(rxByte2 != 255)
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <USART_getline+0xa8>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d03c      	beq.n	8002fe8 <USART_getline+0x98>
	{
		if(rxByte2 == '\r')
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <USART_getline+0xa8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b0d      	cmp	r3, #13
 8002f74:	d112      	bne.n	8002f9c <USART_getline+0x4c>
		{
			n = sprintf((char *)txBuffer2, "\r\n");
 8002f76:	4921      	ldr	r1, [pc, #132]	; (8002ffc <USART_getline+0xac>)
 8002f78:	4821      	ldr	r0, [pc, #132]	; (8003000 <USART_getline+0xb0>)
 8002f7a:	f00a f859 	bl	800d030 <siprintf>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <USART_getline+0xb4>)
 8002f82:	6013      	str	r3, [r2, #0]
			USART_Write(USART2, txBuffer2, n);
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <USART_getline+0xb4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	491d      	ldr	r1, [pc, #116]	; (8003000 <USART_getline+0xb0>)
 8002f8c:	481e      	ldr	r0, [pc, #120]	; (8003008 <USART_getline+0xb8>)
 8002f8e:	f000 f841 	bl	8003014 <USART_Write>
			uart2_index = 0;
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <USART_getline+0xbc>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
			return 1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e028      	b.n	8002fee <USART_getline+0x9e>
		}
		else if(rxByte2 == '\177'){
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <USART_getline+0xa8>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa2:	d110      	bne.n	8002fc6 <USART_getline+0x76>
			if(uart2_index > 0)
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <USART_getline+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	dd0a      	ble.n	8002fc2 <USART_getline+0x72>
			{
				rxBuffer2[uart2_index - 1] = '\0';
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <USART_getline+0xbc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <USART_getline+0xc0>)
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	54d1      	strb	r1, [r2, r3]
				uart2_index --;
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <USART_getline+0xbc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <USART_getline+0xbc>)
 8002fc0:	6013      	str	r3, [r2, #0]
			}
			//USART_Write(USARTx, '\r\n');
			return 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e013      	b.n	8002fee <USART_getline+0x9e>
		}
		else if(uart2_index < UART_BUFFER_SIZE){
 8002fc6:	4b11      	ldr	r3, [pc, #68]	; (800300c <USART_getline+0xbc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b63      	cmp	r3, #99	; 0x63
 8002fcc:	dc0e      	bgt.n	8002fec <USART_getline+0x9c>
			rxBuffer2[uart2_index] = rxByte2;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <USART_getline+0xbc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <USART_getline+0xa8>)
 8002fd4:	7811      	ldrb	r1, [r2, #0]
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <USART_getline+0xc0>)
 8002fd8:	54d1      	strb	r1, [r2, r3]
			uart2_index++;
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <USART_getline+0xbc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <USART_getline+0xbc>)
 8002fe2:	6013      	str	r3, [r2, #0]
       	    return 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e002      	b.n	8002fee <USART_getline+0x9e>
		}
	}else{
		return 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <USART_getline+0x9e>
	}
	return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000bad0 	.word	0x2000bad0
 8002ffc:	08012200 	.word	0x08012200
 8003000:	2000bb38 	.word	0x2000bb38
 8003004:	2000bacc 	.word	0x2000bacc
 8003008:	40004400 	.word	0x40004400
 800300c:	2000bac0 	.word	0x2000bac0
 8003010:	2000bad4 	.word	0x2000bad4

08003014 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e010      	b.n	8003048 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8003026:	bf00      	nop
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f9      	beq.n	8003028 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d8ea      	bhi.n	8003026 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8003050:	bf00      	nop
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f9      	beq.n	8003052 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	61da      	str	r2, [r3, #28]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <USART_Read>:

uint8_t USART_Read (USART_TypeDef * USARTx) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if(!(USARTx->ISR & USART_ISR_RXNE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <USART_Read+0x18>
	{
		return -1;
 800308c:	23ff      	movs	r3, #255	; 0xff
 800308e:	e018      	b.n	80030c2 <USART_Read+0x4a>
	} else{
		// Reading USART_DR automatically clears the RXNE flag
		//USART_Write(USARTx, (uint8_t)(USARTx->RDR & 0xFF));
		rxBytePnt = ((uint8_t)(USARTx->RDR & 0xFF));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003094:	b29b      	uxth	r3, r3
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <USART_Read+0x54>)
 800309a:	701a      	strb	r2, [r3, #0]
		n = sprintf((char *)txBuffer2, "%c", rxBytePnt);
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <USART_Read+0x54>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	490b      	ldr	r1, [pc, #44]	; (80030d0 <USART_Read+0x58>)
 80030a4:	480b      	ldr	r0, [pc, #44]	; (80030d4 <USART_Read+0x5c>)
 80030a6:	f009 ffc3 	bl	800d030 <siprintf>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <USART_Read+0x60>)
 80030ae:	6013      	str	r3, [r2, #0]
 		USART_Write(USART2, txBuffer2, n);
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <USART_Read+0x60>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4907      	ldr	r1, [pc, #28]	; (80030d4 <USART_Read+0x5c>)
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <USART_Read+0x64>)
 80030ba:	f7ff ffab 	bl	8003014 <USART_Write>
		//HAL_UART_Transmit(USARTx, (uint8_t*)&rxBytePnt, sizeof(rxBytePnt), 1);
		return rxBytePnt;
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <USART_Read+0x54>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
	}
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000bb9c 	.word	0x2000bb9c
 80030d0:	08012204 	.word	0x08012204
 80030d4:	2000bb38 	.word	0x2000bb38
 80030d8:	2000bacc 	.word	0x2000bacc
 80030dc:	40004400 	.word	0x40004400

080030e0 <HAL_UART_RxCpltCallback>:

//interrupt handler for USART3
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	//if character isn't null and if USART3 was triggered.
	if(huart == &huart3){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <HAL_UART_RxCpltCallback+0xb8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d141      	bne.n	8003174 <HAL_UART_RxCpltCallback+0x94>
		if(rxByte3 != 255)
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2bff      	cmp	r3, #255	; 0xff
 80030f6:	d03d      	beq.n	8003174 <HAL_UART_RxCpltCallback+0x94>
		{
			if(rxByte3 == '\r')
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b0d      	cmp	r3, #13
 80030fe:	d10c      	bne.n	800311a <HAL_UART_RxCpltCallback+0x3a>
			{
				rxBuffer3[uart3_index] = rxByte3;
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 8003106:	7811      	ldrb	r1, [r2, #0]
 8003108:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_UART_RxCpltCallback+0xc4>)
 800310a:	54d1      	strb	r1, [r2, r3]
				uart3_index = 0;
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
				uart3_line_flag = 1; //don't recall interrupt
 8003112:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_UART_RxCpltCallback+0xc8>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e02c      	b.n	8003174 <HAL_UART_RxCpltCallback+0x94>
			}
			else if(rxByte3 == '\177'){
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b7f      	cmp	r3, #127	; 0x7f
 8003120:	d114      	bne.n	800314c <HAL_UART_RxCpltCallback+0x6c>
				if(uart3_index > 0)
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	dd0a      	ble.n	8003140 <HAL_UART_RxCpltCallback+0x60>
				{
					rxBuffer3[uart3_index - 1] = '\0';
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3b01      	subs	r3, #1
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <HAL_UART_RxCpltCallback+0xc4>)
 8003132:	2100      	movs	r1, #0
 8003134:	54d1      	strb	r1, [r2, r3]
					uart3_index --;
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 800313e:	6013      	str	r3, [r2, #0]
				}
				HAL_UART_Receive_IT(huart, &rxByte3, 1);
 8003140:	2201      	movs	r2, #1
 8003142:	4916      	ldr	r1, [pc, #88]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f005 f9d1 	bl	80084ec <HAL_UART_Receive_IT>
 800314a:	e013      	b.n	8003174 <HAL_UART_RxCpltCallback+0x94>
				//USART_Write(USARTx, '\r\n');
			}
			else if(uart3_index < UART_BUFFER_SIZE){
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b63      	cmp	r3, #99	; 0x63
 8003152:	dc0f      	bgt.n	8003174 <HAL_UART_RxCpltCallback+0x94>
				rxBuffer3[uart3_index] = rxByte3;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a10      	ldr	r2, [pc, #64]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 800315a:	7811      	ldrb	r1, [r2, #0]
 800315c:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <HAL_UART_RxCpltCallback+0xc4>)
 800315e:	54d1      	strb	r1, [r2, r3]
				uart3_index++;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <HAL_UART_RxCpltCallback+0xc0>)
 8003168:	6013      	str	r3, [r2, #0]
				HAL_UART_Receive_IT(huart, &rxByte3, 1);
 800316a:	2201      	movs	r2, #1
 800316c:	490b      	ldr	r1, [pc, #44]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f005 f9bc 	bl	80084ec <HAL_UART_Receive_IT>
			}
		}
	}
	//if uart2 triggered and line flag has not been raised
	if((huart == &huart2) && !uart3_line_flag){
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_UART_RxCpltCallback+0xcc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <HAL_UART_RxCpltCallback+0xae>
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_UART_RxCpltCallback+0xc8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <HAL_UART_RxCpltCallback+0xae>
		HAL_UART_Receive_IT(huart, &rxByte3, 1);
 8003184:	2201      	movs	r2, #1
 8003186:	4905      	ldr	r1, [pc, #20]	; (800319c <HAL_UART_RxCpltCallback+0xbc>)
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f005 f9af 	bl	80084ec <HAL_UART_Receive_IT>
	}
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000b838 	.word	0x2000b838
 800319c:	2000bb9d 	.word	0x2000bb9d
 80031a0:	2000bac4 	.word	0x2000bac4
 80031a4:	2000bba0 	.word	0x2000bba0
 80031a8:	2000bac8 	.word	0x2000bac8
 80031ac:	2000b7b4 	.word	0x2000b7b4

080031b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b4:	f7ff feba 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <LoopForever+0x6>)
  ldr r1, =_edata
 80031ba:	490d      	ldr	r1, [pc, #52]	; (80031f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <LoopForever+0xe>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c0:	e002      	b.n	80031c8 <LoopCopyDataInit>

080031c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c6:	3304      	adds	r3, #4

080031c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031cc:	d3f9      	bcc.n	80031c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d0:	4c0a      	ldr	r4, [pc, #40]	; (80031fc <LoopForever+0x16>)
  movs r3, #0
 80031d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d4:	e001      	b.n	80031da <LoopFillZerobss>

080031d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d8:	3204      	adds	r2, #4

080031da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031dc:	d3fb      	bcc.n	80031d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031de:	f008 fe01 	bl	800bde4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031e2:	f7fe fc21 	bl	8001a28 <main>

080031e6 <LoopForever>:

LoopForever:
    b LoopForever
 80031e6:	e7fe      	b.n	80031e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f0:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 80031f4:	08012968 	.word	0x08012968
  ldr r2, =_sbss
 80031f8:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 80031fc:	2001329c 	.word	0x2001329c

08003200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003200:	e7fe      	b.n	8003200 <ADC1_2_IRQHandler>
	...

08003204 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800320e:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_Init+0x3c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <HAL_Init+0x3c>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321a:	2003      	movs	r0, #3
 800321c:	f001 fcb5 	bl	8004b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003220:	200f      	movs	r0, #15
 8003222:	f7ff fcfb 	bl	8002c1c <HAL_InitTick>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	71fb      	strb	r3, [r7, #7]
 8003230:	e001      	b.n	8003236 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003232:	f7ff fa9b 	bl	800276c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003236:	79fb      	ldrb	r3, [r7, #7]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40022000 	.word	0x40022000

08003244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_IncTick+0x20>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x24>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4413      	add	r3, r2
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_IncTick+0x24>)
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000234 	.word	0x20000234
 8003268:	2000bc04 	.word	0x2000bc04

0800326c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return uwTick;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_GetTick+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	2000bc04 	.word	0x2000bc04

08003284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff ffee 	bl	800326c <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d005      	beq.n	80032aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_Delay+0x44>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032aa:	bf00      	nop
 80032ac:	f7ff ffde 	bl	800326c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d8f7      	bhi.n	80032ac <HAL_Delay+0x28>
  {
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000234 	.word	0x20000234

080032cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3360      	adds	r3, #96	; 0x60
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <LL_ADC_SetOffset+0x44>)
 8003356:	4013      	ands	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	4313      	orrs	r3, r2
 8003364:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	03fff000 	.word	0x03fff000

0800337c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3360      	adds	r3, #96	; 0x60
 800338a:	461a      	mov	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3360      	adds	r3, #96	; 0x60
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3330      	adds	r3, #48	; 0x30
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	4413      	add	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	211f      	movs	r1, #31
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	f003 011f 	and.w	r1, r3, #31
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	431a      	orrs	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3314      	adds	r3, #20
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	0e5b      	lsrs	r3, r3, #25
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	0d1b      	lsrs	r3, r3, #20
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2107      	movs	r1, #7
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	401a      	ands	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	0d1b      	lsrs	r3, r3, #20
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0318 	and.w	r3, r3, #24
 80034d6:	4908      	ldr	r1, [pc, #32]	; (80034f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034d8:	40d9      	lsrs	r1, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	400b      	ands	r3, r1
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	0007ffff 	.word	0x0007ffff

080034fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 031f 	and.w	r3, r3, #31
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6093      	str	r3, [r2, #8]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800354c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003550:	d101      	bne.n	8003556 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003578:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035a0:	d101      	bne.n	80035a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035f0:	f043 0202 	orr.w	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <LL_ADC_IsEnabled+0x18>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <LL_ADC_IsEnabled+0x1a>
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d101      	bne.n	8003642 <LL_ADC_IsDisableOngoing+0x18>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_IsDisableOngoing+0x1a>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800368c:	f043 0210 	orr.w	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d101      	bne.n	80036b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d101      	bne.n	8003706 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e136      	b.n	800399c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff f83d 	bl	80027bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fef1 	bl	800353c <LL_ADC_IsDeepPowerDownEnabled>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fed7 	bl	8003518 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff0c 	bl	800358c <LL_ADC_IsInternalRegulatorEnabled>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fef0 	bl	8003564 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003784:	4b87      	ldr	r3, [pc, #540]	; (80039a4 <HAL_ADC_Init+0x290>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_ADC_Init+0x294>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	3301      	adds	r3, #1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003798:	e002      	b.n	80037a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3b01      	subs	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f9      	bne.n	800379a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff feee 	bl	800358c <LL_ADC_IsInternalRegulatorEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff62 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 80037dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f040 80cf 	bne.w	800398a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80cb 	bne.w	800398a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fefb 	bl	8003604 <LL_ADC_IsEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003814:	4865      	ldr	r0, [pc, #404]	; (80039ac <HAL_ADC_Init+0x298>)
 8003816:	f7ff fef5 	bl	8003604 <LL_ADC_IsEnabled>
 800381a:	4604      	mov	r4, r0
 800381c:	4864      	ldr	r0, [pc, #400]	; (80039b0 <HAL_ADC_Init+0x29c>)
 800381e:	f7ff fef1 	bl	8003604 <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	431c      	orrs	r4, r3
 8003826:	4863      	ldr	r0, [pc, #396]	; (80039b4 <HAL_ADC_Init+0x2a0>)
 8003828:	f7ff feec 	bl	8003604 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	4323      	orrs	r3, r4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4619      	mov	r1, r3
 800383a:	485f      	ldr	r0, [pc, #380]	; (80039b8 <HAL_ADC_Init+0x2a4>)
 800383c:	f7ff fd46 	bl	80032cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7e5b      	ldrb	r3, [r3, #25]
 8003844:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800384a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003850:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003856:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	3b01      	subs	r3, #1
 8003874:	045b      	lsls	r3, r3, #17
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_ADC_Init+0x2a8>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	69b9      	ldr	r1, [r7, #24]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fef5 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 80038b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff16 	bl	80036ee <LL_ADC_INJ_IsConversionOngoing>
 80038c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d13d      	bne.n	8003946 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d13a      	bne.n	8003946 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ec:	f023 0302 	bic.w	r3, r3, #2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	430b      	orrs	r3, r1
 80038f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003900:	2b01      	cmp	r3, #1
 8003902:	d118      	bne.n	8003936 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003926:	430a      	orrs	r2, r1
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	611a      	str	r2, [r3, #16]
 8003934:	e007      	b.n	8003946 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10c      	bne.n	8003968 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f023 010f 	bic.w	r1, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	1e5a      	subs	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
 8003966:	e007      	b.n	8003978 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 020f 	bic.w	r2, r2, #15
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f023 0303 	bic.w	r3, r3, #3
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
 8003988:	e007      	b.n	800399a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800399a:	7ffb      	ldrb	r3, [r7, #31]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3724      	adds	r7, #36	; 0x24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd90      	pop	{r4, r7, pc}
 80039a4:	2000022c 	.word	0x2000022c
 80039a8:	053e2d63 	.word	0x053e2d63
 80039ac:	50040000 	.word	0x50040000
 80039b0:	50040100 	.word	0x50040100
 80039b4:	50040200 	.word	0x50040200
 80039b8:	50040300 	.word	0x50040300
 80039bc:	fff0c007 	.word	0xfff0c007

080039c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039cc:	4853      	ldr	r0, [pc, #332]	; (8003b1c <HAL_ADC_Start_DMA+0x15c>)
 80039ce:	f7ff fd95 	bl	80034fc <LL_ADC_GetMultimode>
 80039d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe61 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8093 	bne.w	8003b0c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_Start_DMA+0x34>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e08e      	b.n	8003b12 <HAL_ADC_Start_DMA+0x152>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a47      	ldr	r2, [pc, #284]	; (8003b20 <HAL_ADC_Start_DMA+0x160>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d008      	beq.n	8003a18 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d002      	beq.n	8003a18 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	d172      	bne.n	8003afe <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fdb9 	bl	8004590 <ADC_Enable>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d165      	bne.n	8003af4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a38      	ldr	r2, [pc, #224]	; (8003b24 <HAL_ADC_Start_DMA+0x164>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d002      	beq.n	8003a4c <HAL_ADC_Start_DMA+0x8c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	e000      	b.n	8003a4e <HAL_ADC_Start_DMA+0x8e>
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_ADC_Start_DMA+0x168>)
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d002      	beq.n	8003a5c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d105      	bne.n	8003a68 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	f023 0206 	bic.w	r2, r3, #6
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003a80:	e002      	b.n	8003a88 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <HAL_ADC_Start_DMA+0x16c>)
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <HAL_ADC_Start_DMA+0x170>)
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9c:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_ADC_Start_DMA+0x174>)
 8003a9e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	221c      	movs	r2, #28
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0210 	orr.w	r2, r2, #16
 8003abe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3340      	adds	r3, #64	; 0x40
 8003ada:	4619      	mov	r1, r3
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f001 fc6c 	bl	80053bc <HAL_DMA_Start_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fdaf 	bl	8003650 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003af2:	e00d      	b.n	8003b10 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003afc:	e008      	b.n	8003b10 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b0a:	e001      	b.n	8003b10 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	50040300 	.word	0x50040300
 8003b20:	50040200 	.word	0x50040200
 8003b24:	50040100 	.word	0x50040100
 8003b28:	50040000 	.word	0x50040000
 8003b2c:	0800475b 	.word	0x0800475b
 8003b30:	08004833 	.word	0x08004833
 8003b34:	0800484f 	.word	0x0800484f

08003b38 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_Stop_DMA+0x16>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e051      	b.n	8003bf2 <HAL_ADC_Stop_DMA+0xba>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b56:	2103      	movs	r1, #3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fc5d 	bl	8004418 <ADC_ConversionStop>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d13f      	bne.n	8003be8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d10f      	bne.n	8003ba6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fc76 	bl	800547c <HAL_DMA_Abort>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0210 	bic.w	r2, r2, #16
 8003bb4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fd6d 	bl	800469c <ADC_Disable>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e002      	b.n	8003bce <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fd67 	bl	800469c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b0b6      	sub	sp, #216	; 0xd8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x22>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e3c7      	b.n	80043ea <HAL_ADC_ConfigChannel+0x7b2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fd1a 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 83a8 	bne.w	80043c4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d824      	bhi.n	8003cc6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	3b02      	subs	r3, #2
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d81b      	bhi.n	8003cbe <HAL_ADC_ConfigChannel+0x86>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_ADC_ConfigChannel+0x54>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003ca5 	.word	0x08003ca5
 8003c94:	08003cad 	.word	0x08003cad
 8003c98:	08003cb5 	.word	0x08003cb5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	605a      	str	r2, [r3, #4]
          break;
 8003ca2:	e011      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2212      	movs	r2, #18
 8003ca8:	605a      	str	r2, [r3, #4]
          break;
 8003caa:	e00d      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2218      	movs	r2, #24
 8003cb0:	605a      	str	r2, [r3, #4]
          break;
 8003cb2:	e009      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cba:	605a      	str	r2, [r3, #4]
          break;
 8003cbc:	e004      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2206      	movs	r2, #6
 8003cc2:	605a      	str	r2, [r3, #4]
          break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003cc6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f7ff fb95 	bl	8003404 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fcde 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 8003ce4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fcfe 	bl	80036ee <LL_ADC_INJ_IsConversionOngoing>
 8003cf2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 81a6 	bne.w	800404c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 81a1 	bne.w	800404c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7ff fba0 	bl	800345c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	08db      	lsrs	r3, r3, #3
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d00a      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6919      	ldr	r1, [r3, #16]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d4e:	f7ff faf1 	bl	8003334 <LL_ADC_SetOffset>
 8003d52:	e17b      	b.n	800404c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fb0e 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x148>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fb03 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	f003 021f 	and.w	r2, r3, #31
 8003d7e:	e01e      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x186>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff faf8 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003dae:	2320      	movs	r3, #32
 8003db0:	e004      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x19e>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	0e9b      	lsrs	r3, r3, #26
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	e018      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x1d0>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e004      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d106      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fac7 	bl	80033a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff faab 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x20e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff faa0 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	0e9b      	lsrs	r3, r3, #26
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	e01e      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x24c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fa95 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e5c:	fa93 f3a3 	rbit	r3, r3
 8003e60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003e74:	2320      	movs	r3, #32
 8003e76:	e004      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x264>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e9b      	lsrs	r3, r3, #26
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	e018      	b.n	8003ece <HAL_ADC_ConfigChannel+0x296>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e004      	b.n	8003ece <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d106      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fa64 	bl	80033a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fa48 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x2d4>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fa3d 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003f02:	4603      	mov	r3, r0
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	e01e      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x312>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fa32 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e004      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x32a>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0e9b      	lsrs	r3, r3, #26
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	e016      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x358>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003f82:	2320      	movs	r3, #32
 8003f84:	e004      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fa03 	bl	80033a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff f9e7 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x396>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2103      	movs	r1, #3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff f9dc 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	0e9b      	lsrs	r3, r3, #26
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	e017      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x3c6>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff f9d1 	bl	800337c <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e003      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x3de>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	0e9b      	lsrs	r3, r3, #26
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	e011      	b.n	800403a <HAL_ADC_ConfigChannel+0x402>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004026:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800402e:	2320      	movs	r3, #32
 8004030:	e003      	b.n	800403a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800403a:	429a      	cmp	r2, r3
 800403c:	d106      	bne.n	800404c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	2103      	movs	r1, #3
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff f9ae 	bl	80033a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fad7 	bl	8003604 <LL_ADC_IsEnabled>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 813f 	bne.w	80042dc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	461a      	mov	r2, r3
 800406c:	f7ff fa22 	bl	80034b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a8e      	ldr	r2, [pc, #568]	; (80042b0 <HAL_ADC_ConfigChannel+0x678>)
 8004076:	4293      	cmp	r3, r2
 8004078:	f040 8130 	bne.w	80042dc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x46c>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0e9b      	lsrs	r3, r3, #26
 8004092:	3301      	adds	r3, #1
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2b09      	cmp	r3, #9
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e019      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x4a0>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e003      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80040c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	bf94      	ite	ls
 80040d2:	2301      	movls	r3, #1
 80040d4:	2300      	movhi	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d079      	beq.n	80041d0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x4c0>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	3301      	adds	r3, #1
 80040f0:	069b      	lsls	r3, r3, #26
 80040f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f6:	e015      	b.n	8004124 <HAL_ADC_ConfigChannel+0x4ec>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800410a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004110:	2320      	movs	r3, #32
 8004112:	e003      	b.n	800411c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3301      	adds	r3, #1
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x50c>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	3301      	adds	r3, #1
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	e017      	b.n	8004174 <HAL_ADC_ConfigChannel+0x53c>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800415c:	2320      	movs	r3, #32
 800415e:	e003      	b.n	8004168 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	3301      	adds	r3, #1
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f303 	lsl.w	r3, r1, r3
 8004174:	ea42 0103 	orr.w	r1, r2, r3
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <HAL_ADC_ConfigChannel+0x562>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	3301      	adds	r3, #1
 800418c:	f003 021f 	and.w	r2, r3, #31
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	051b      	lsls	r3, r3, #20
 8004198:	e018      	b.n	80041cc <HAL_ADC_ConfigChannel+0x594>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e003      	b.n	80041be <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041cc:	430b      	orrs	r3, r1
 80041ce:	e080      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x5b4>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	3301      	adds	r3, #1
 80041e4:	069b      	lsls	r3, r3, #26
 80041e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ea:	e015      	b.n	8004218 <HAL_ADC_ConfigChannel+0x5e0>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004204:	2320      	movs	r3, #32
 8004206:	e003      	b.n	8004210 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	069b      	lsls	r3, r3, #26
 8004214:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x600>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	3301      	adds	r3, #1
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	e017      	b.n	8004268 <HAL_ADC_ConfigChannel+0x630>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	61fb      	str	r3, [r7, #28]
  return result;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3301      	adds	r3, #1
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2101      	movs	r1, #1
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	ea42 0103 	orr.w	r1, r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10d      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x65c>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	3301      	adds	r3, #1
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	3b1e      	subs	r3, #30
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004292:	e01d      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x698>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	613b      	str	r3, [r7, #16]
  return result;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e005      	b.n	80042bc <HAL_ADC_ConfigChannel+0x684>
 80042b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f003 021f 	and.w	r2, r3, #31
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	3b1e      	subs	r3, #30
 80042ca:	051b      	lsls	r3, r3, #20
 80042cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d0:	430b      	orrs	r3, r1
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	6892      	ldr	r2, [r2, #8]
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7ff f8c0 	bl	800345c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <HAL_ADC_ConfigChannel+0x7bc>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d07a      	beq.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e8:	4843      	ldr	r0, [pc, #268]	; (80043f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80042ea:	f7ff f815 	bl	8003318 <LL_ADC_GetCommonPathInternalCh>
 80042ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a41      	ldr	r2, [pc, #260]	; (80043fc <HAL_ADC_ConfigChannel+0x7c4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d12c      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d126      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3c      	ldr	r2, [pc, #240]	; (8004400 <HAL_ADC_ConfigChannel+0x7c8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_ADC_ConfigChannel+0x6e4>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <HAL_ADC_ConfigChannel+0x7cc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d15d      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800431c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004324:	4619      	mov	r1, r3
 8004326:	4834      	ldr	r0, [pc, #208]	; (80043f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004328:	f7fe ffe3 	bl	80032f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800432c:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_ADC_ConfigChannel+0x7d0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	4a36      	ldr	r2, [pc, #216]	; (800440c <HAL_ADC_ConfigChannel+0x7d4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004346:	e002      	b.n	800434e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b01      	subs	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f9      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004354:	e040      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <HAL_ADC_ConfigChannel+0x7d8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d118      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x75a>
 8004360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d112      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <HAL_ADC_ConfigChannel+0x7c8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_ADC_ConfigChannel+0x748>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a22      	ldr	r2, [pc, #136]	; (8004404 <HAL_ADC_ConfigChannel+0x7cc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d12d      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004388:	4619      	mov	r1, r3
 800438a:	481b      	ldr	r0, [pc, #108]	; (80043f8 <HAL_ADC_ConfigChannel+0x7c0>)
 800438c:	f7fe ffb1 	bl	80032f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004390:	e024      	b.n	80043dc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <HAL_ADC_ConfigChannel+0x7dc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d120      	bne.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800439c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11a      	bne.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a14      	ldr	r2, [pc, #80]	; (8004400 <HAL_ADC_ConfigChannel+0x7c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d115      	bne.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ba:	4619      	mov	r1, r3
 80043bc:	480e      	ldr	r0, [pc, #56]	; (80043f8 <HAL_ADC_ConfigChannel+0x7c0>)
 80043be:	f7fe ff98 	bl	80032f2 <LL_ADC_SetCommonPathInternalCh>
 80043c2:	e00c      	b.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	f043 0220 	orr.w	r2, r3, #32
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80043d6:	e002      	b.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	37d8      	adds	r7, #216	; 0xd8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	80080000 	.word	0x80080000
 80043f8:	50040300 	.word	0x50040300
 80043fc:	c7520000 	.word	0xc7520000
 8004400:	50040000 	.word	0x50040000
 8004404:	50040200 	.word	0x50040200
 8004408:	2000022c 	.word	0x2000022c
 800440c:	053e2d63 	.word	0x053e2d63
 8004410:	cb840000 	.word	0xcb840000
 8004414:	80000001 	.word	0x80000001

08004418 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f936 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 8004434:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff f957 	bl	80036ee <LL_ADC_INJ_IsConversionOngoing>
 8004440:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d103      	bne.n	8004450 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8098 	beq.w	8004580 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02a      	beq.n	80044b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7e5b      	ldrb	r3, [r3, #25]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d126      	bne.n	80044b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7e1b      	ldrb	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d122      	bne.n	80044b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800446e:	2301      	movs	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004472:	e014      	b.n	800449e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4a45      	ldr	r2, [pc, #276]	; (800458c <ADC_ConversionStop+0x174>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d90d      	bls.n	8004498 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f043 0210 	orr.w	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e074      	b.n	8004582 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3301      	adds	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d1e3      	bne.n	8004474 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2240      	movs	r2, #64	; 0x40
 80044b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d014      	beq.n	80044e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f8ee 	bl	80036a0 <LL_ADC_REG_IsConversionOngoing>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff f8ab 	bl	800362a <LL_ADC_IsDisableOngoing>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff f8ca 	bl	8003678 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d014      	beq.n	8004514 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f8fd 	bl	80036ee <LL_ADC_INJ_IsConversionOngoing>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00c      	beq.n	8004514 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff f893 	bl	800362a <LL_ADC_IsDisableOngoing>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff f8d9 	bl	80036c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d005      	beq.n	8004526 <ADC_ConversionStop+0x10e>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d105      	bne.n	800452c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004520:	230c      	movs	r3, #12
 8004522:	617b      	str	r3, [r7, #20]
        break;
 8004524:	e005      	b.n	8004532 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004526:	2308      	movs	r3, #8
 8004528:	617b      	str	r3, [r7, #20]
        break;
 800452a:	e002      	b.n	8004532 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800452c:	2304      	movs	r3, #4
 800452e:	617b      	str	r3, [r7, #20]
        break;
 8004530:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004532:	f7fe fe9b 	bl	800326c <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004538:	e01b      	b.n	8004572 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800453a:	f7fe fe97 	bl	800326c <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b05      	cmp	r3, #5
 8004546:	d914      	bls.n	8004572 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455a:	f043 0210 	orr.w	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e007      	b.n	8004582 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1dc      	bne.n	800453a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	a33fffff 	.word	0xa33fffff

08004590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff f82f 	bl	8003604 <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d169      	bne.n	8004680 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <ADC_Enable+0xfc>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f043 0210 	orr.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e055      	b.n	8004682 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe ffea 	bl	80035b4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045e0:	482b      	ldr	r0, [pc, #172]	; (8004690 <ADC_Enable+0x100>)
 80045e2:	f7fe fe99 	bl	8003318 <LL_ADC_GetCommonPathInternalCh>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f0:	4b28      	ldr	r3, [pc, #160]	; (8004694 <ADC_Enable+0x104>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	4a28      	ldr	r2, [pc, #160]	; (8004698 <ADC_Enable+0x108>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800460a:	e002      	b.n	8004612 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3b01      	subs	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f9      	bne.n	800460c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004618:	f7fe fe28 	bl	800326c <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800461e:	e028      	b.n	8004672 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe ffed 	bl	8003604 <LL_ADC_IsEnabled>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe ffbd 	bl	80035b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800463a:	f7fe fe17 	bl	800326c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d914      	bls.n	8004672 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d00d      	beq.n	8004672 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	f043 0210 	orr.w	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e007      	b.n	8004682 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d1cf      	bne.n	8004620 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	8000003f 	.word	0x8000003f
 8004690:	50040300 	.word	0x50040300
 8004694:	2000022c 	.word	0x2000022c
 8004698:	053e2d63 	.word	0x053e2d63

0800469c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe ffbe 	bl	800362a <LL_ADC_IsDisableOngoing>
 80046ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe ffa5 	bl	8003604 <LL_ADC_IsEnabled>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d047      	beq.n	8004750 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d144      	bne.n	8004750 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030d 	and.w	r3, r3, #13
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10c      	bne.n	80046ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe ff7f 	bl	80035dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2203      	movs	r2, #3
 80046e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046e6:	f7fe fdc1 	bl	800326c <HAL_GetTick>
 80046ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046ec:	e029      	b.n	8004742 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f043 0210 	orr.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e023      	b.n	8004752 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800470a:	f7fe fdaf 	bl	800326c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d914      	bls.n	8004742 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f043 0210 	orr.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e007      	b.n	8004752 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1dc      	bne.n	800470a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d14b      	bne.n	800480c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d021      	beq.n	80047d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fe23 	bl	80033de <LL_ADC_REG_IsTriggerSourceSWStart>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d032      	beq.n	8004804 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d12b      	bne.n	8004804 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d11f      	bne.n	8004804 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
 80047d0:	e018      	b.n	8004804 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f043 0201 	orr.w	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff f9f8 	bl	8003bfa <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800480a:	e00e      	b.n	800482a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fa02 	bl	8003c22 <HAL_ADC_ErrorCallback>
}
 800481e:	e004      	b.n	800482a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff f9e4 	bl	8003c0e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f043 0204 	orr.w	r2, r3, #4
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff f9d4 	bl	8003c22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <LL_ADC_IsEnabled>:
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <LL_ADC_IsEnabled+0x18>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <LL_ADC_IsEnabled+0x1a>
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_ADC_REG_IsConversionOngoing>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d101      	bne.n	80048c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b09f      	sub	sp, #124	; 0x7c
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e093      	b.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80048f6:	2300      	movs	r3, #0
 80048f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80048fa:	2300      	movs	r3, #0
 80048fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a47      	ldr	r2, [pc, #284]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d102      	bne.n	800490e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004908:	4b46      	ldr	r3, [pc, #280]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	e001      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e072      	b.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ffb8 	bl	80048a8 <LL_ADC_REG_IsConversionOngoing>
 8004938:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ffb2 	bl	80048a8 <LL_ADC_REG_IsConversionOngoing>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d154      	bne.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800494a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800494c:	2b00      	cmp	r3, #0
 800494e:	d151      	bne.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004950:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004952:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02c      	beq.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800496e:	035b      	lsls	r3, r3, #13
 8004970:	430b      	orrs	r3, r1
 8004972:	431a      	orrs	r2, r3
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004978:	4829      	ldr	r0, [pc, #164]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800497a:	f7ff ff82 	bl	8004882 <LL_ADC_IsEnabled>
 800497e:	4604      	mov	r4, r0
 8004980:	4828      	ldr	r0, [pc, #160]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004982:	f7ff ff7e 	bl	8004882 <LL_ADC_IsEnabled>
 8004986:	4603      	mov	r3, r0
 8004988:	431c      	orrs	r4, r3
 800498a:	4828      	ldr	r0, [pc, #160]	; (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800498c:	f7ff ff79 	bl	8004882 <LL_ADC_IsEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	4323      	orrs	r3, r4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d137      	bne.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049a0:	f023 030f 	bic.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	6811      	ldr	r1, [r2, #0]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	6892      	ldr	r2, [r2, #8]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b4:	e028      	b.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c2:	4817      	ldr	r0, [pc, #92]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80049c4:	f7ff ff5d 	bl	8004882 <LL_ADC_IsEnabled>
 80049c8:	4604      	mov	r4, r0
 80049ca:	4816      	ldr	r0, [pc, #88]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049cc:	f7ff ff59 	bl	8004882 <LL_ADC_IsEnabled>
 80049d0:	4603      	mov	r3, r0
 80049d2:	431c      	orrs	r4, r3
 80049d4:	4815      	ldr	r0, [pc, #84]	; (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80049d6:	f7ff ff54 	bl	8004882 <LL_ADC_IsEnabled>
 80049da:	4603      	mov	r3, r0
 80049dc:	4323      	orrs	r3, r4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d112      	bne.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049ea:	f023 030f 	bic.w	r3, r3, #15
 80049ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049f2:	e009      	b.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004a06:	e000      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	377c      	adds	r7, #124	; 0x7c
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	50040000 	.word	0x50040000
 8004a24:	50040100 	.word	0x50040100
 8004a28:	50040300 	.word	0x50040300
 8004a2c:	50040200 	.word	0x50040200

08004a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <__NVIC_SetPriorityGrouping+0x44>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a62:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <__NVIC_SetPriorityGrouping+0x44>)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	60d3      	str	r3, [r2, #12]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__NVIC_GetPriorityGrouping+0x18>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	f003 0307 	and.w	r3, r3, #7
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	db0b      	blt.n	8004abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	f003 021f 	and.w	r2, r3, #31
 8004aac:	4907      	ldr	r1, [pc, #28]	; (8004acc <__NVIC_EnableIRQ+0x38>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000e100 	.word	0xe000e100

08004ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	6039      	str	r1, [r7, #0]
 8004ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	db0a      	blt.n	8004afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	490c      	ldr	r1, [pc, #48]	; (8004b1c <__NVIC_SetPriority+0x4c>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	440b      	add	r3, r1
 8004af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004af8:	e00a      	b.n	8004b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4908      	ldr	r1, [pc, #32]	; (8004b20 <__NVIC_SetPriority+0x50>)
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	3b04      	subs	r3, #4
 8004b08:	0112      	lsls	r2, r2, #4
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	761a      	strb	r2, [r3, #24]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000e100 	.word	0xe000e100
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f1c3 0307 	rsb	r3, r3, #7
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	bf28      	it	cs
 8004b42:	2304      	movcs	r3, #4
 8004b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d902      	bls.n	8004b54 <NVIC_EncodePriority+0x30>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3b03      	subs	r3, #3
 8004b52:	e000      	b.n	8004b56 <NVIC_EncodePriority+0x32>
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b58:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	401a      	ands	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	43d9      	mvns	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b7c:	4313      	orrs	r3, r2
         );
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3724      	adds	r7, #36	; 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff4c 	bl	8004a30 <__NVIC_SetPriorityGrouping>
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb2:	f7ff ff61 	bl	8004a78 <__NVIC_GetPriorityGrouping>
 8004bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f7ff ffb1 	bl	8004b24 <NVIC_EncodePriority>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff80 	bl	8004ad0 <__NVIC_SetPriority>
}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff54 	bl	8004a94 <__NVIC_EnableIRQ>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e014      	b.n	8004c30 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	791b      	ldrb	r3, [r3, #4]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd fe3e 	bl	8002898 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	795b      	ldrb	r3, [r3, #5]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_DAC_Start_DMA+0x1e>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e0ab      	b.n	8004dae <HAL_DAC_Start_DMA+0x176>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d12f      	bne.n	8004cc8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	; (8004db8 <HAL_DAC_Start_DMA+0x180>)
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a51      	ldr	r2, [pc, #324]	; (8004dbc <HAL_DAC_Start_DMA+0x184>)
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a50      	ldr	r2, [pc, #320]	; (8004dc0 <HAL_DAC_Start_DMA+0x188>)
 8004c7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c8e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d013      	beq.n	8004cbe <HAL_DAC_Start_DMA+0x86>
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d845      	bhi.n	8004d28 <HAL_DAC_Start_DMA+0xf0>
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_DAC_Start_DMA+0x72>
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d005      	beq.n	8004cb4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004ca8:	e03e      	b.n	8004d28 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	613b      	str	r3, [r7, #16]
        break;
 8004cb2:	e03c      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	613b      	str	r3, [r7, #16]
        break;
 8004cbc:	e037      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	613b      	str	r3, [r7, #16]
        break;
 8004cc6:	e032      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <HAL_DAC_Start_DMA+0x18c>)
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <HAL_DAC_Start_DMA+0x190>)
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a3b      	ldr	r2, [pc, #236]	; (8004dcc <HAL_DAC_Start_DMA+0x194>)
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d013      	beq.n	8004d1e <HAL_DAC_Start_DMA+0xe6>
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d817      	bhi.n	8004d2c <HAL_DAC_Start_DMA+0xf4>
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_DAC_Start_DMA+0xd2>
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d005      	beq.n	8004d14 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004d08:	e010      	b.n	8004d2c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	613b      	str	r3, [r7, #16]
        break;
 8004d12:	e00c      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3318      	adds	r3, #24
 8004d1a:	613b      	str	r3, [r7, #16]
        break;
 8004d1c:	e007      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	331c      	adds	r3, #28
 8004d24:	613b      	str	r3, [r7, #16]
        break;
 8004d26:	e002      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004d2c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6898      	ldr	r0, [r3, #8]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	f000 fb35 	bl	80053bc <HAL_DMA_Start_IT>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
 8004d56:	e010      	b.n	8004d7a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68d8      	ldr	r0, [r3, #12]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	f000 fb23 	bl	80053bc <HAL_DMA_Start_IT>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2201      	movs	r2, #1
 8004d94:	409a      	lsls	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e005      	b.n	8004dac <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	080050cb 	.word	0x080050cb
 8004dbc:	080050ed 	.word	0x080050ed
 8004dc0:	08005109 	.word	0x08005109
 8004dc4:	080051e1 	.word	0x080051e1
 8004dc8:	08005203 	.word	0x08005203
 8004dcc:	0800521f 	.word	0x0800521f

08004dd0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43da      	mvns	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	400a      	ands	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2201      	movs	r2, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fb2c 	bl	800547c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e00c      	b.n	8004e50 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fb1e 	bl	800547c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004e4e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	795b      	ldrb	r3, [r3, #5]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_DAC_ConfigChannel+0x1c>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e107      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x22c>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d174      	bne.n	8004fb0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ec6:	f7fe f9d1 	bl	800326c <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d134      	bne.n	8004f3c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ed2:	e011      	b.n	8004ef8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ed4:	f7fe f9ca 	bl	800326c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d90a      	bls.n	8004ef8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0e4      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7fe f9bc 	bl	8003284 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	6992      	ldr	r2, [r2, #24]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
 8004f16:	e01e      	b.n	8004f56 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f18:	f7fe f9a8 	bl	800326c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d90a      	bls.n	8004f3c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2203      	movs	r2, #3
 8004f36:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0c2      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dbe8      	blt.n	8004f18 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004f46:	2001      	movs	r0, #1
 8004f48:	f7fe f99c 	bl	8003284 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	6992      	ldr	r2, [r2, #24]
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	ea02 0103 	and.w	r1, r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	21ff      	movs	r1, #255	; 0xff
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	ea02 0103 	and.w	r1, r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d11d      	bne.n	8004ff4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	221f      	movs	r2, #31
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2207      	movs	r2, #7
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	431a      	orrs	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43da      	mvns	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	400a      	ands	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	f640 72fc 	movw	r2, #4092	; 0xffc
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	22c0      	movs	r2, #192	; 0xc0
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	400a      	ands	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff febe 	bl	8004e5a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	711a      	strb	r2, [r3, #4]
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff feb7 	bl	8004e6e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7ff fead 	bl	8004e82 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	711a      	strb	r2, [r3, #4]
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	795b      	ldrb	r3, [r3, #5]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_DACEx_NoiseWaveGenerate+0x18>
 800514a:	2302      	movs	r3, #2
 800514c:	e024      	b.n	8005198 <HAL_DACEx_NoiseWaveGenerate+0x62>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2202      	movs	r2, #2
 8005158:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	ea02 0103 	and.w	r1, r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	409a      	lsls	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff ffd8 	bl	80051a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	711a      	strb	r2, [r3, #4]
}
 80051fa:	bf00      	nop
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff ffd1 	bl	80051b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f043 0204 	orr.w	r2, r3, #4
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7ff ffc7 	bl	80051cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	711a      	strb	r2, [r3, #4]
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e098      	b.n	8005390 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	4b4d      	ldr	r3, [pc, #308]	; (800539c <HAL_DMA_Init+0x150>)
 8005266:	429a      	cmp	r2, r3
 8005268:	d80f      	bhi.n	800528a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <HAL_DMA_Init+0x154>)
 8005272:	4413      	add	r3, r2
 8005274:	4a4b      	ldr	r2, [pc, #300]	; (80053a4 <HAL_DMA_Init+0x158>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	009a      	lsls	r2, r3, #2
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a48      	ldr	r2, [pc, #288]	; (80053a8 <HAL_DMA_Init+0x15c>)
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
 8005288:	e00e      	b.n	80052a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <HAL_DMA_Init+0x160>)
 8005292:	4413      	add	r3, r2
 8005294:	4a43      	ldr	r2, [pc, #268]	; (80053a4 <HAL_DMA_Init+0x158>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	009a      	lsls	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a42      	ldr	r2, [pc, #264]	; (80053b0 <HAL_DMA_Init+0x164>)
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005302:	d039      	beq.n	8005378 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <HAL_DMA_Init+0x15c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d11a      	bne.n	8005344 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <HAL_DMA_Init+0x168>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	f003 031c 	and.w	r3, r3, #28
 800531a:	210f      	movs	r1, #15
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	43db      	mvns	r3, r3
 8005322:	4924      	ldr	r1, [pc, #144]	; (80053b4 <HAL_DMA_Init+0x168>)
 8005324:	4013      	ands	r3, r2
 8005326:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005328:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <HAL_DMA_Init+0x168>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6859      	ldr	r1, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	f003 031c 	and.w	r3, r3, #28
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	491d      	ldr	r1, [pc, #116]	; (80053b4 <HAL_DMA_Init+0x168>)
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
 8005342:	e019      	b.n	8005378 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <HAL_DMA_Init+0x16c>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534c:	f003 031c 	and.w	r3, r3, #28
 8005350:	210f      	movs	r1, #15
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	4917      	ldr	r1, [pc, #92]	; (80053b8 <HAL_DMA_Init+0x16c>)
 800535a:	4013      	ands	r3, r2
 800535c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <HAL_DMA_Init+0x16c>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	f003 031c 	and.w	r3, r3, #28
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	4911      	ldr	r1, [pc, #68]	; (80053b8 <HAL_DMA_Init+0x16c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40020407 	.word	0x40020407
 80053a0:	bffdfff8 	.word	0xbffdfff8
 80053a4:	cccccccd 	.word	0xcccccccd
 80053a8:	40020000 	.word	0x40020000
 80053ac:	bffdfbf8 	.word	0xbffdfbf8
 80053b0:	40020400 	.word	0x40020400
 80053b4:	400200a8 	.word	0x400200a8
 80053b8:	400204a8 	.word	0x400204a8

080053bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_DMA_Start_IT+0x20>
 80053d8:	2302      	movs	r3, #2
 80053da:	e04b      	b.n	8005474 <HAL_DMA_Start_IT+0xb8>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d13a      	bne.n	8005466 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f95f 	bl	80056d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 020e 	orr.w	r2, r2, #14
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e00f      	b.n	8005454 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0204 	bic.w	r2, r2, #4
 8005442:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 020a 	orr.w	r2, r2, #10
 8005452:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e005      	b.n	8005472 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800546e:	2302      	movs	r3, #2
 8005470:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d008      	beq.n	80054a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2204      	movs	r2, #4
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e022      	b.n	80054ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 020e 	bic.w	r2, r2, #14
 80054b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f003 021c 	and.w	r2, r3, #28
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d005      	beq.n	800551c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2204      	movs	r2, #4
 8005514:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e029      	b.n	8005570 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 020e 	bic.w	r2, r2, #14
 800552a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	f003 021c 	and.w	r2, r3, #28
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	2101      	movs	r1, #1
 800554a:	fa01 f202 	lsl.w	r2, r1, r2
 800554e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4798      	blx	r3
    }
  }
  return status;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f003 031c 	and.w	r3, r3, #28
 800559a:	2204      	movs	r2, #4
 800559c:	409a      	lsls	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d026      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x7a>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d021      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d107      	bne.n	80055ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0204 	bic.w	r2, r2, #4
 80055cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f003 021c 	and.w	r2, r3, #28
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2104      	movs	r1, #4
 80055dc:	fa01 f202 	lsl.w	r2, r1, r2
 80055e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d071      	beq.n	80056ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80055f2:	e06c      	b.n	80056ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	f003 031c 	and.w	r3, r3, #28
 80055fc:	2202      	movs	r2, #2
 80055fe:	409a      	lsls	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02e      	beq.n	8005666 <HAL_DMA_IRQHandler+0xec>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d029      	beq.n	8005666 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10b      	bne.n	8005638 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 020a 	bic.w	r2, r2, #10
 800562e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	f003 021c 	and.w	r2, r3, #28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2102      	movs	r1, #2
 8005646:	fa01 f202 	lsl.w	r2, r1, r2
 800564a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d038      	beq.n	80056ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005664:	e033      	b.n	80056ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	f003 031c 	and.w	r3, r3, #28
 800566e:	2208      	movs	r2, #8
 8005670:	409a      	lsls	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d02a      	beq.n	80056d0 <HAL_DMA_IRQHandler+0x156>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d025      	beq.n	80056d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 020e 	bic.w	r2, r2, #14
 8005692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005698:	f003 021c 	and.w	r2, r3, #28
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f202 	lsl.w	r2, r1, r2
 80056a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
}
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ea:	f003 021c 	and.w	r2, r3, #28
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	2101      	movs	r1, #1
 80056f4:	fa01 f202 	lsl.w	r2, r1, r2
 80056f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b10      	cmp	r3, #16
 8005708:	d108      	bne.n	800571c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800571a:	e007      	b.n	800572c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005746:	e17f      	b.n	8005a48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	2101      	movs	r1, #1
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	4013      	ands	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8171 	beq.w	8005a42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	2b01      	cmp	r3, #1
 800576a:	d005      	beq.n	8005778 <HAL_GPIO_Init+0x40>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d130      	bne.n	80057da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ae:	2201      	movs	r2, #1
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0201 	and.w	r2, r3, #1
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	fa02 f303 	lsl.w	r3, r2, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d118      	bne.n	8005818 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80057ec:	2201      	movs	r2, #1
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	08db      	lsrs	r3, r3, #3
 8005802:	f003 0201 	and.w	r2, r3, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b03      	cmp	r3, #3
 8005822:	d017      	beq.n	8005854 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d123      	bne.n	80058a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	08da      	lsrs	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3208      	adds	r2, #8
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	220f      	movs	r2, #15
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4013      	ands	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	08da      	lsrs	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3208      	adds	r2, #8
 80058a2:	6939      	ldr	r1, [r7, #16]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0203 	and.w	r2, r3, #3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80ac 	beq.w	8005a42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	4b5f      	ldr	r3, [pc, #380]	; (8005a68 <HAL_GPIO_Init+0x330>)
 80058ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ee:	4a5e      	ldr	r2, [pc, #376]	; (8005a68 <HAL_GPIO_Init+0x330>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6613      	str	r3, [r2, #96]	; 0x60
 80058f6:	4b5c      	ldr	r3, [pc, #368]	; (8005a68 <HAL_GPIO_Init+0x330>)
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005902:	4a5a      	ldr	r2, [pc, #360]	; (8005a6c <HAL_GPIO_Init+0x334>)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	3302      	adds	r3, #2
 800590a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	220f      	movs	r2, #15
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800592c:	d025      	beq.n	800597a <HAL_GPIO_Init+0x242>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a4f      	ldr	r2, [pc, #316]	; (8005a70 <HAL_GPIO_Init+0x338>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01f      	beq.n	8005976 <HAL_GPIO_Init+0x23e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4e      	ldr	r2, [pc, #312]	; (8005a74 <HAL_GPIO_Init+0x33c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_GPIO_Init+0x23a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a4d      	ldr	r2, [pc, #308]	; (8005a78 <HAL_GPIO_Init+0x340>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_GPIO_Init+0x236>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a4c      	ldr	r2, [pc, #304]	; (8005a7c <HAL_GPIO_Init+0x344>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00d      	beq.n	800596a <HAL_GPIO_Init+0x232>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a4b      	ldr	r2, [pc, #300]	; (8005a80 <HAL_GPIO_Init+0x348>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <HAL_GPIO_Init+0x22e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <HAL_GPIO_Init+0x34c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_GPIO_Init+0x22a>
 800595e:	2306      	movs	r3, #6
 8005960:	e00c      	b.n	800597c <HAL_GPIO_Init+0x244>
 8005962:	2307      	movs	r3, #7
 8005964:	e00a      	b.n	800597c <HAL_GPIO_Init+0x244>
 8005966:	2305      	movs	r3, #5
 8005968:	e008      	b.n	800597c <HAL_GPIO_Init+0x244>
 800596a:	2304      	movs	r3, #4
 800596c:	e006      	b.n	800597c <HAL_GPIO_Init+0x244>
 800596e:	2303      	movs	r3, #3
 8005970:	e004      	b.n	800597c <HAL_GPIO_Init+0x244>
 8005972:	2302      	movs	r3, #2
 8005974:	e002      	b.n	800597c <HAL_GPIO_Init+0x244>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_GPIO_Init+0x244>
 800597a:	2300      	movs	r3, #0
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	f002 0203 	and.w	r2, r2, #3
 8005982:	0092      	lsls	r2, r2, #2
 8005984:	4093      	lsls	r3, r2
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800598c:	4937      	ldr	r1, [pc, #220]	; (8005a6c <HAL_GPIO_Init+0x334>)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	089b      	lsrs	r3, r3, #2
 8005992:	3302      	adds	r3, #2
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_GPIO_Init+0x350>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4013      	ands	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059be:	4a32      	ldr	r2, [pc, #200]	; (8005a88 <HAL_GPIO_Init+0x350>)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059c4:	4b30      	ldr	r3, [pc, #192]	; (8005a88 <HAL_GPIO_Init+0x350>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4013      	ands	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <HAL_GPIO_Init+0x350>)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059ee:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_GPIO_Init+0x350>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a12:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <HAL_GPIO_Init+0x350>)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_GPIO_Init+0x350>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a3c:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <HAL_GPIO_Init+0x350>)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	3301      	adds	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f ae78 	bne.w	8005748 <HAL_GPIO_Init+0x10>
  }
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	48000400 	.word	0x48000400
 8005a74:	48000800 	.word	0x48000800
 8005a78:	48000c00 	.word	0x48000c00
 8005a7c:	48001000 	.word	0x48001000
 8005a80:	48001400 	.word	0x48001400
 8005a84:	48001800 	.word	0x48001800
 8005a88:	40010400 	.word	0x40010400

08005a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40007000 	.word	0x40007000

08005aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab6:	d130      	bne.n	8005b1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ab8:	4b23      	ldr	r3, [pc, #140]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac4:	d038      	beq.n	8005b38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ace:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ad4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ad6:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2232      	movs	r2, #50	; 0x32
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	0c9b      	lsrs	r3, r3, #18
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aec:	e002      	b.n	8005af4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d102      	bne.n	8005b08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f2      	bne.n	8005aee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b08:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d110      	bne.n	8005b38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00f      	b.n	8005b3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b26:	d007      	beq.n	8005b38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b30:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	2000022c 	.word	0x2000022c
 8005b50:	431bde83 	.word	0x431bde83

08005b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b088      	sub	sp, #32
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e3ca      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b66:	4b97      	ldr	r3, [pc, #604]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b70:	4b94      	ldr	r3, [pc, #592]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80e4 	beq.w	8005d50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_RCC_OscConfig+0x4a>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	f040 808b 	bne.w	8005cac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	f040 8087 	bne.w	8005cac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b9e:	4b89      	ldr	r3, [pc, #548]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e3a2      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	4b82      	ldr	r3, [pc, #520]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x7c>
 8005bc6:	4b7f      	ldr	r3, [pc, #508]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bce:	e005      	b.n	8005bdc <HAL_RCC_OscConfig+0x88>
 8005bd0:	4b7c      	ldr	r3, [pc, #496]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d223      	bcs.n	8005c28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fd87 	bl	80066f8 <RCC_SetFlashLatencyFromMSIRange>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e383      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bf4:	4b73      	ldr	r3, [pc, #460]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a72      	ldr	r2, [pc, #456]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005bfa:	f043 0308 	orr.w	r3, r3, #8
 8005bfe:	6013      	str	r3, [r2, #0]
 8005c00:	4b70      	ldr	r3, [pc, #448]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	496d      	ldr	r1, [pc, #436]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c12:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	4968      	ldr	r1, [pc, #416]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
 8005c26:	e025      	b.n	8005c74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	f043 0308 	orr.w	r3, r3, #8
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	4b63      	ldr	r3, [pc, #396]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	4960      	ldr	r1, [pc, #384]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	495b      	ldr	r1, [pc, #364]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fd47 	bl	80066f8 <RCC_SetFlashLatencyFromMSIRange>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e343      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c74:	f000 fc4a 	bl	800650c <HAL_RCC_GetSysClockFreq>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	4b52      	ldr	r3, [pc, #328]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	4950      	ldr	r1, [pc, #320]	; (8005dc8 <HAL_RCC_OscConfig+0x274>)
 8005c86:	5ccb      	ldrb	r3, [r1, r3]
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c90:	4a4e      	ldr	r2, [pc, #312]	; (8005dcc <HAL_RCC_OscConfig+0x278>)
 8005c92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c94:	4b4e      	ldr	r3, [pc, #312]	; (8005dd0 <HAL_RCC_OscConfig+0x27c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fc ffbf 	bl	8002c1c <HAL_InitTick>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d052      	beq.n	8005d4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	e327      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d032      	beq.n	8005d1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a42      	ldr	r2, [pc, #264]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cc0:	f7fd fad4 	bl	800326c <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cc8:	f7fd fad0 	bl	800326c <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e310      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cda:	4b3a      	ldr	r3, [pc, #232]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ce6:	4b37      	ldr	r3, [pc, #220]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a36      	ldr	r2, [pc, #216]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005cec:	f043 0308 	orr.w	r3, r3, #8
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	4931      	ldr	r1, [pc, #196]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d04:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	492c      	ldr	r1, [pc, #176]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]
 8005d18:	e01a      	b.n	8005d50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d26:	f7fd faa1 	bl	800326c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d2e:	f7fd fa9d 	bl	800326c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e2dd      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d40:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f0      	bne.n	8005d2e <HAL_RCC_OscConfig+0x1da>
 8005d4c:	e000      	b.n	8005d50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d074      	beq.n	8005e46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d005      	beq.n	8005d6e <HAL_RCC_OscConfig+0x21a>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	d10e      	bne.n	8005d86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6e:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d064      	beq.n	8005e44 <HAL_RCC_OscConfig+0x2f0>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d160      	bne.n	8005e44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e2ba      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8e:	d106      	bne.n	8005d9e <HAL_RCC_OscConfig+0x24a>
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e026      	b.n	8005dec <HAL_RCC_OscConfig+0x298>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da6:	d115      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x280>
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a02      	ldr	r2, [pc, #8]	; (8005dc4 <HAL_RCC_OscConfig+0x270>)
 8005dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e014      	b.n	8005dec <HAL_RCC_OscConfig+0x298>
 8005dc2:	bf00      	nop
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	08012278 	.word	0x08012278
 8005dcc:	2000022c 	.word	0x2000022c
 8005dd0:	20000230 	.word	0x20000230
 8005dd4:	4ba0      	ldr	r3, [pc, #640]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a9f      	ldr	r2, [pc, #636]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	4b9d      	ldr	r3, [pc, #628]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a9c      	ldr	r2, [pc, #624]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d013      	beq.n	8005e1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fd fa3a 	bl	800326c <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dfc:	f7fd fa36 	bl	800326c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b64      	cmp	r3, #100	; 0x64
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e276      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e0e:	4b92      	ldr	r3, [pc, #584]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x2a8>
 8005e1a:	e014      	b.n	8005e46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fd fa26 	bl	800326c <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e24:	f7fd fa22 	bl	800326c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	; 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e262      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e36:	4b88      	ldr	r3, [pc, #544]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x2d0>
 8005e42:	e000      	b.n	8005e46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d060      	beq.n	8005f14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d005      	beq.n	8005e64 <HAL_RCC_OscConfig+0x310>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d119      	bne.n	8005e92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d116      	bne.n	8005e92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e64:	4b7c      	ldr	r3, [pc, #496]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_OscConfig+0x328>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e23f      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b76      	ldr	r3, [pc, #472]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	061b      	lsls	r3, r3, #24
 8005e8a:	4973      	ldr	r1, [pc, #460]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e90:	e040      	b.n	8005f14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d023      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e9a:	4b6f      	ldr	r3, [pc, #444]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a6e      	ldr	r2, [pc, #440]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea6:	f7fd f9e1 	bl	800326c <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eae:	f7fd f9dd 	bl	800326c <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e21d      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ec0:	4b65      	ldr	r3, [pc, #404]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ecc:	4b62      	ldr	r3, [pc, #392]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	061b      	lsls	r3, r3, #24
 8005eda:	495f      	ldr	r1, [pc, #380]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	604b      	str	r3, [r1, #4]
 8005ee0:	e018      	b.n	8005f14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee2:	4b5d      	ldr	r3, [pc, #372]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5c      	ldr	r2, [pc, #368]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eee:	f7fd f9bd 	bl	800326c <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef6:	f7fd f9b9 	bl	800326c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1f9      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f08:	4b53      	ldr	r3, [pc, #332]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d03c      	beq.n	8005f9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01c      	beq.n	8005f62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f28:	4b4b      	ldr	r3, [pc, #300]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f2e:	4a4a      	ldr	r2, [pc, #296]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f38:	f7fd f998 	bl	800326c <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f40:	f7fd f994 	bl	800326c <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e1d4      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ef      	beq.n	8005f40 <HAL_RCC_OscConfig+0x3ec>
 8005f60:	e01b      	b.n	8005f9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f62:	4b3d      	ldr	r3, [pc, #244]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f68:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f72:	f7fd f97b 	bl	800326c <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f7a:	f7fd f977 	bl	800326c <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e1b7      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f8c:	4b32      	ldr	r3, [pc, #200]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1ef      	bne.n	8005f7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 80a6 	beq.w	80060f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fac:	4b2a      	ldr	r3, [pc, #168]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb8:	4b27      	ldr	r3, [pc, #156]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbc:	4a26      	ldr	r2, [pc, #152]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8005fc4:	4b24      	ldr	r3, [pc, #144]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd4:	4b21      	ldr	r3, [pc, #132]	; (800605c <HAL_RCC_OscConfig+0x508>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d118      	bne.n	8006012 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fe0:	4b1e      	ldr	r3, [pc, #120]	; (800605c <HAL_RCC_OscConfig+0x508>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_RCC_OscConfig+0x508>)
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fec:	f7fd f93e 	bl	800326c <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff4:	f7fd f93a 	bl	800326c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e17a      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006006:	4b15      	ldr	r3, [pc, #84]	; (800605c <HAL_RCC_OscConfig+0x508>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d108      	bne.n	800602c <HAL_RCC_OscConfig+0x4d8>
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 800601c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006020:	4a0d      	ldr	r2, [pc, #52]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800602a:	e029      	b.n	8006080 <HAL_RCC_OscConfig+0x52c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b05      	cmp	r3, #5
 8006032:	d115      	bne.n	8006060 <HAL_RCC_OscConfig+0x50c>
 8006034:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	4a07      	ldr	r2, [pc, #28]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006044:	4b04      	ldr	r3, [pc, #16]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	4a03      	ldr	r2, [pc, #12]	; (8006058 <HAL_RCC_OscConfig+0x504>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006054:	e014      	b.n	8006080 <HAL_RCC_OscConfig+0x52c>
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000
 800605c:	40007000 	.word	0x40007000
 8006060:	4b9c      	ldr	r3, [pc, #624]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	4a9b      	ldr	r2, [pc, #620]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006068:	f023 0301 	bic.w	r3, r3, #1
 800606c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006070:	4b98      	ldr	r3, [pc, #608]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	4a97      	ldr	r2, [pc, #604]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006078:	f023 0304 	bic.w	r3, r3, #4
 800607c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d016      	beq.n	80060b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fd f8f0 	bl	800326c <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fd f8ec 	bl	800326c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	; 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e12a      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a6:	4b8b      	ldr	r3, [pc, #556]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ed      	beq.n	8006090 <HAL_RCC_OscConfig+0x53c>
 80060b4:	e015      	b.n	80060e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fd f8d9 	bl	800326c <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fd f8d5 	bl	800326c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e113      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d4:	4b7f      	ldr	r3, [pc, #508]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1ed      	bne.n	80060be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e8:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	4a79      	ldr	r2, [pc, #484]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80fe 	beq.w	80062fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	2b02      	cmp	r3, #2
 8006104:	f040 80d0 	bne.w	80062a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006108:	4b72      	ldr	r3, [pc, #456]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f003 0203 	and.w	r2, r3, #3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	429a      	cmp	r2, r3
 800611a:	d130      	bne.n	800617e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	3b01      	subs	r3, #1
 8006128:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800612a:	429a      	cmp	r2, r3
 800612c:	d127      	bne.n	800617e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d11f      	bne.n	800617e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006148:	2a07      	cmp	r2, #7
 800614a:	bf14      	ite	ne
 800614c:	2201      	movne	r2, #1
 800614e:	2200      	moveq	r2, #0
 8006150:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006152:	4293      	cmp	r3, r2
 8006154:	d113      	bne.n	800617e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	3b01      	subs	r3, #1
 8006164:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006166:	429a      	cmp	r2, r3
 8006168:	d109      	bne.n	800617e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	3b01      	subs	r3, #1
 8006178:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800617a:	429a      	cmp	r2, r3
 800617c:	d06e      	beq.n	800625c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b0c      	cmp	r3, #12
 8006182:	d069      	beq.n	8006258 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006184:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d105      	bne.n	800619c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006190:	4b50      	ldr	r3, [pc, #320]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0ad      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061a0:	4b4c      	ldr	r3, [pc, #304]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a4b      	ldr	r2, [pc, #300]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80061a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061ac:	f7fd f85e 	bl	800326c <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fd f85a 	bl	800326c <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e09a      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d2:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	4b40      	ldr	r3, [pc, #256]	; (80062d8 <HAL_RCC_OscConfig+0x784>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061e2:	3a01      	subs	r2, #1
 80061e4:	0112      	lsls	r2, r2, #4
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061ec:	0212      	lsls	r2, r2, #8
 80061ee:	4311      	orrs	r1, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061f4:	0852      	lsrs	r2, r2, #1
 80061f6:	3a01      	subs	r2, #1
 80061f8:	0552      	lsls	r2, r2, #21
 80061fa:	4311      	orrs	r1, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006200:	0852      	lsrs	r2, r2, #1
 8006202:	3a01      	subs	r2, #1
 8006204:	0652      	lsls	r2, r2, #25
 8006206:	4311      	orrs	r1, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800620c:	0912      	lsrs	r2, r2, #4
 800620e:	0452      	lsls	r2, r2, #17
 8006210:	430a      	orrs	r2, r1
 8006212:	4930      	ldr	r1, [pc, #192]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006214:	4313      	orrs	r3, r2
 8006216:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006218:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2d      	ldr	r2, [pc, #180]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800621e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006222:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006224:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800622a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800622e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006230:	f7fd f81c 	bl	800326c <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fd f818 	bl	800326c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e058      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800624a:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006256:	e050      	b.n	80062fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e04f      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625c:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d148      	bne.n	80062fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800626e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006272:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	4a16      	ldr	r2, [pc, #88]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800627a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800627e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006280:	f7fc fff4 	bl	800326c <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006288:	f7fc fff0 	bl	800326c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e030      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0x734>
 80062a6:	e028      	b.n	80062fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d023      	beq.n	80062f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <HAL_RCC_OscConfig+0x780>)
 80062b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ba:	f7fc ffd7 	bl	800326c <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c0:	e00c      	b.n	80062dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c2:	f7fc ffd3 	bl	800326c <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d905      	bls.n	80062dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e013      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
 80062d4:	40021000 	.word	0x40021000
 80062d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_OscConfig+0x7b0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ec      	bne.n	80062c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_RCC_OscConfig+0x7b0>)
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	4905      	ldr	r1, [pc, #20]	; (8006304 <HAL_RCC_OscConfig+0x7b0>)
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_RCC_OscConfig+0x7b4>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60cb      	str	r3, [r1, #12]
 80062f4:	e001      	b.n	80062fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40021000 	.word	0x40021000
 8006308:	feeefffc 	.word	0xfeeefffc

0800630c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0e7      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006320:	4b75      	ldr	r3, [pc, #468]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d910      	bls.n	8006350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b72      	ldr	r3, [pc, #456]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 0207 	bic.w	r2, r3, #7
 8006336:	4970      	ldr	r1, [pc, #448]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b6e      	ldr	r3, [pc, #440]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0cf      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d010      	beq.n	800637e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	4b66      	ldr	r3, [pc, #408]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006368:	429a      	cmp	r2, r3
 800636a:	d908      	bls.n	800637e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800636c:	4b63      	ldr	r3, [pc, #396]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4960      	ldr	r1, [pc, #384]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d04c      	beq.n	8006424 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d107      	bne.n	80063a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006392:	4b5a      	ldr	r3, [pc, #360]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d121      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e0a6      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d107      	bne.n	80063ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063aa:	4b54      	ldr	r3, [pc, #336]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d115      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e09a      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063c2:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e08e      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063d2:	4b4a      	ldr	r3, [pc, #296]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e086      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063e2:	4b46      	ldr	r3, [pc, #280]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f023 0203 	bic.w	r2, r3, #3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4943      	ldr	r1, [pc, #268]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f4:	f7fc ff3a 	bl	800326c <HAL_GetTick>
 80063f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fa:	e00a      	b.n	8006412 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063fc:	f7fc ff36 	bl	800326c <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	f241 3288 	movw	r2, #5000	; 0x1388
 800640a:	4293      	cmp	r3, r2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e06e      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006412:	4b3a      	ldr	r3, [pc, #232]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 020c 	and.w	r2, r3, #12
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	429a      	cmp	r2, r3
 8006422:	d1eb      	bne.n	80063fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d010      	beq.n	8006452 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	4b31      	ldr	r3, [pc, #196]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643c:	429a      	cmp	r2, r3
 800643e:	d208      	bcs.n	8006452 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006440:	4b2e      	ldr	r3, [pc, #184]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	492b      	ldr	r1, [pc, #172]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 800644e:	4313      	orrs	r3, r2
 8006450:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d210      	bcs.n	8006482 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f023 0207 	bic.w	r2, r3, #7
 8006468:	4923      	ldr	r1, [pc, #140]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	4313      	orrs	r3, r2
 800646e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006470:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <HAL_RCC_ClockConfig+0x1ec>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d001      	beq.n	8006482 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e036      	b.n	80064f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800648e:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4918      	ldr	r1, [pc, #96]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 800649c:	4313      	orrs	r3, r2
 800649e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4910      	ldr	r1, [pc, #64]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064c0:	f000 f824 	bl	800650c <HAL_RCC_GetSysClockFreq>
 80064c4:	4602      	mov	r2, r0
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <HAL_RCC_ClockConfig+0x1f0>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	091b      	lsrs	r3, r3, #4
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	490b      	ldr	r1, [pc, #44]	; (8006500 <HAL_RCC_ClockConfig+0x1f4>)
 80064d2:	5ccb      	ldrb	r3, [r1, r3]
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	4a09      	ldr	r2, [pc, #36]	; (8006504 <HAL_RCC_ClockConfig+0x1f8>)
 80064de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <HAL_RCC_ClockConfig+0x1fc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fc fb99 	bl	8002c1c <HAL_InitTick>
 80064ea:	4603      	mov	r3, r0
 80064ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80064ee:	7afb      	ldrb	r3, [r7, #11]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40022000 	.word	0x40022000
 80064fc:	40021000 	.word	0x40021000
 8006500:	08012278 	.word	0x08012278
 8006504:	2000022c 	.word	0x2000022c
 8006508:	20000230 	.word	0x20000230

0800650c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800651a:	4b3e      	ldr	r3, [pc, #248]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 030c 	and.w	r3, r3, #12
 8006522:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006524:	4b3b      	ldr	r3, [pc, #236]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x34>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b0c      	cmp	r3, #12
 8006538:	d121      	bne.n	800657e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d11e      	bne.n	800657e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006540:	4b34      	ldr	r3, [pc, #208]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d107      	bne.n	800655c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800654c:	4b31      	ldr	r3, [pc, #196]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 800654e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f003 030f 	and.w	r3, r3, #15
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e005      	b.n	8006568 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006568:	4a2b      	ldr	r2, [pc, #172]	; (8006618 <HAL_RCC_GetSysClockFreq+0x10c>)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006570:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10d      	bne.n	8006594 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800657c:	e00a      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d102      	bne.n	800658a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006584:	4b25      	ldr	r3, [pc, #148]	; (800661c <HAL_RCC_GetSysClockFreq+0x110>)
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	e004      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b08      	cmp	r3, #8
 800658e:	d101      	bne.n	8006594 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006590:	4b23      	ldr	r3, [pc, #140]	; (8006620 <HAL_RCC_GetSysClockFreq+0x114>)
 8006592:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d134      	bne.n	8006604 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800659a:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d003      	beq.n	80065b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d003      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0xac>
 80065b0:	e005      	b.n	80065be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065b2:	4b1a      	ldr	r3, [pc, #104]	; (800661c <HAL_RCC_GetSysClockFreq+0x110>)
 80065b4:	617b      	str	r3, [r7, #20]
      break;
 80065b6:	e005      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <HAL_RCC_GetSysClockFreq+0x114>)
 80065ba:	617b      	str	r3, [r7, #20]
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	617b      	str	r3, [r7, #20]
      break;
 80065c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065c4:	4b13      	ldr	r3, [pc, #76]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	3301      	adds	r3, #1
 80065d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	fb03 f202 	mul.w	r2, r3, r2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065ea:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <HAL_RCC_GetSysClockFreq+0x108>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	0e5b      	lsrs	r3, r3, #25
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	3301      	adds	r3, #1
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006604:	69bb      	ldr	r3, [r7, #24]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3724      	adds	r7, #36	; 0x24
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000
 8006618:	08012290 	.word	0x08012290
 800661c:	00f42400 	.word	0x00f42400
 8006620:	007a1200 	.word	0x007a1200

08006624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006628:	4b03      	ldr	r3, [pc, #12]	; (8006638 <HAL_RCC_GetHCLKFreq+0x14>)
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	2000022c 	.word	0x2000022c

0800663c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006640:	f7ff fff0 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4904      	ldr	r1, [pc, #16]	; (8006664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	f003 031f 	and.w	r3, r3, #31
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40021000 	.word	0x40021000
 8006664:	08012288 	.word	0x08012288

08006668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800666c:	f7ff ffda 	bl	8006624 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0adb      	lsrs	r3, r3, #11
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4904      	ldr	r1, [pc, #16]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	08012288 	.word	0x08012288

08006694 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	220f      	movs	r2, #15
 80066a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80066a4:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <HAL_RCC_GetClockConfig+0x5c>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 0203 	and.w	r2, r3, #3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <HAL_RCC_GetClockConfig+0x5c>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <HAL_RCC_GetClockConfig+0x5c>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80066c8:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <HAL_RCC_GetClockConfig+0x5c>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	08db      	lsrs	r3, r3, #3
 80066ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <HAL_RCC_GetClockConfig+0x60>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0207 	and.w	r2, r3, #7
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	601a      	str	r2, [r3, #0]
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40022000 	.word	0x40022000

080066f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006704:	4b2a      	ldr	r3, [pc, #168]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006710:	f7ff f9bc 	bl	8005a8c <HAL_PWREx_GetVoltageRange>
 8006714:	6178      	str	r0, [r7, #20]
 8006716:	e014      	b.n	8006742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006718:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	4a24      	ldr	r2, [pc, #144]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800671e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006722:	6593      	str	r3, [r2, #88]	; 0x58
 8006724:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006730:	f7ff f9ac 	bl	8005a8c <HAL_PWREx_GetVoltageRange>
 8006734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	4a1d      	ldr	r2, [pc, #116]	; (80067b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800673c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006748:	d10b      	bne.n	8006762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b80      	cmp	r3, #128	; 0x80
 800674e:	d919      	bls.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2ba0      	cmp	r3, #160	; 0xa0
 8006754:	d902      	bls.n	800675c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006756:	2302      	movs	r3, #2
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	e013      	b.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800675c:	2301      	movs	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	e010      	b.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d902      	bls.n	800676e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006768:	2303      	movs	r3, #3
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	e00a      	b.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d102      	bne.n	800677a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006774:	2302      	movs	r3, #2
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	e004      	b.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b70      	cmp	r3, #112	; 0x70
 800677e:	d101      	bne.n	8006784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006780:	2301      	movs	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f023 0207 	bic.w	r2, r3, #7
 800678c:	4909      	ldr	r1, [pc, #36]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d001      	beq.n	80067a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40021000 	.word	0x40021000
 80067b4:	40022000 	.word	0x40022000

080067b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067c0:	2300      	movs	r3, #0
 80067c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067c4:	2300      	movs	r3, #0
 80067c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d041      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067dc:	d02a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80067de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80067e2:	d824      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067e8:	d008      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80067ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ee:	d81e      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80067f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f8:	d010      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067fa:	e018      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067fc:	4b86      	ldr	r3, [pc, #536]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4a85      	ldr	r2, [pc, #532]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006806:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006808:	e015      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3304      	adds	r3, #4
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fabb 	bl	8006d8c <RCCEx_PLLSAI1_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800681a:	e00c      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3320      	adds	r3, #32
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fba6 	bl	8006f74 <RCCEx_PLLSAI2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	74fb      	strb	r3, [r7, #19]
      break;
 8006832:	e000      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006836:	7cfb      	ldrb	r3, [r7, #19]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800683c:	4b76      	ldr	r3, [pc, #472]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684a:	4973      	ldr	r1, [pc, #460]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006852:	e001      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006854:	7cfb      	ldrb	r3, [r7, #19]
 8006856:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d041      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800686c:	d02a      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800686e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006872:	d824      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006878:	d008      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800687a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800687e:	d81e      	bhi.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006888:	d010      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800688a:	e018      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800688c:	4b62      	ldr	r3, [pc, #392]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4a61      	ldr	r2, [pc, #388]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006896:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006898:	e015      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3304      	adds	r3, #4
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fa73 	bl	8006d8c <RCCEx_PLLSAI1_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068aa:	e00c      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3320      	adds	r3, #32
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fb5e 	bl	8006f74 <RCCEx_PLLSAI2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	74fb      	strb	r3, [r7, #19]
      break;
 80068c2:	e000      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80068c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c6:	7cfb      	ldrb	r3, [r7, #19]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068cc:	4b52      	ldr	r3, [pc, #328]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068da:	494f      	ldr	r1, [pc, #316]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068e2:	e001      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e4:	7cfb      	ldrb	r3, [r7, #19]
 80068e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80a0 	beq.w	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068f6:	2300      	movs	r3, #0
 80068f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068fa:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006910:	4b41      	ldr	r3, [pc, #260]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	4a40      	ldr	r2, [pc, #256]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691a:	6593      	str	r3, [r2, #88]	; 0x58
 800691c:	4b3e      	ldr	r3, [pc, #248]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006928:	2301      	movs	r3, #1
 800692a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800692c:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3a      	ldr	r2, [pc, #232]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006938:	f7fc fc98 	bl	800326c <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800693e:	e009      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006940:	f7fc fc94 	bl	800326c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d902      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	74fb      	strb	r3, [r7, #19]
        break;
 8006952:	e005      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006954:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0ef      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006960:	7cfb      	ldrb	r3, [r7, #19]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d15c      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006966:	4b2c      	ldr	r3, [pc, #176]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006970:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01f      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	429a      	cmp	r2, r3
 8006982:	d019      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006984:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006990:	4b21      	ldr	r3, [pc, #132]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	4a20      	ldr	r2, [pc, #128]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a0:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069b0:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fc fc53 	bl	800326c <HAL_GetTick>
 80069c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069c8:	e00b      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fc fc4f 	bl	800326c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d902      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	74fb      	strb	r3, [r7, #19]
            break;
 80069e0:	e006      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e2:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ec      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10c      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f6:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a06:	4904      	ldr	r1, [pc, #16]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a0e:	e009      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a10:	7cfb      	ldrb	r3, [r7, #19]
 8006a12:	74bb      	strb	r3, [r7, #18]
 8006a14:	e006      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006a16:	bf00      	nop
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	7cfb      	ldrb	r3, [r7, #19]
 8006a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a24:	7c7b      	ldrb	r3, [r7, #17]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a2a:	4b9e      	ldr	r3, [pc, #632]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	4a9d      	ldr	r2, [pc, #628]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a42:	4b98      	ldr	r3, [pc, #608]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f023 0203 	bic.w	r2, r3, #3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	4994      	ldr	r1, [pc, #592]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a64:	4b8f      	ldr	r3, [pc, #572]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	f023 020c 	bic.w	r2, r3, #12
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	498c      	ldr	r1, [pc, #560]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a86:	4b87      	ldr	r3, [pc, #540]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	4983      	ldr	r1, [pc, #524]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006aa8:	4b7e      	ldr	r3, [pc, #504]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab6:	497b      	ldr	r1, [pc, #492]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006aca:	4b76      	ldr	r3, [pc, #472]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad8:	4972      	ldr	r1, [pc, #456]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006aec:	4b6d      	ldr	r3, [pc, #436]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afa:	496a      	ldr	r1, [pc, #424]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b0e:	4b65      	ldr	r3, [pc, #404]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1c:	4961      	ldr	r1, [pc, #388]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b30:	4b5c      	ldr	r3, [pc, #368]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3e:	4959      	ldr	r1, [pc, #356]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b52:	4b54      	ldr	r3, [pc, #336]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	4950      	ldr	r1, [pc, #320]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b74:	4b4b      	ldr	r3, [pc, #300]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	4948      	ldr	r1, [pc, #288]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b96:	4b43      	ldr	r3, [pc, #268]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	493f      	ldr	r1, [pc, #252]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d028      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bb8:	4b3a      	ldr	r3, [pc, #232]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bc6:	4937      	ldr	r1, [pc, #220]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd6:	d106      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd8:	4b32      	ldr	r3, [pc, #200]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4a31      	ldr	r2, [pc, #196]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be2:	60d3      	str	r3, [r2, #12]
 8006be4:	e011      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bee:	d10c      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 f8c8 	bl	8006d8c <RCCEx_PLLSAI1_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
 8006c08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d028      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c16:	4b23      	ldr	r3, [pc, #140]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c24:	491f      	ldr	r1, [pc, #124]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c34:	d106      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c36:	4b1b      	ldr	r3, [pc, #108]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c40:	60d3      	str	r3, [r2, #12]
 8006c42:	e011      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c4c:	d10c      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3304      	adds	r3, #4
 8006c52:	2101      	movs	r1, #1
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f899 	bl	8006d8c <RCCEx_PLLSAI1_Config>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006c64:	7cfb      	ldrb	r3, [r7, #19]
 8006c66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02b      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c82:	4908      	ldr	r1, [pc, #32]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c92:	d109      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c94:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	4a02      	ldr	r2, [pc, #8]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9e:	60d3      	str	r3, [r2, #12]
 8006ca0:	e014      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006ca2:	bf00      	nop
 8006ca4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f867 	bl	8006d8c <RCCEx_PLLSAI1_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cc2:	7cfb      	ldrb	r3, [r7, #19]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d02f      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ce6:	4928      	ldr	r1, [pc, #160]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf6:	d10d      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f844 	bl	8006d8c <RCCEx_PLLSAI1_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d08:	7cfb      	ldrb	r3, [r7, #19]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d014      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d0e:	7cfb      	ldrb	r3, [r7, #19]
 8006d10:	74bb      	strb	r3, [r7, #18]
 8006d12:	e011      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3320      	adds	r3, #32
 8006d22:	2102      	movs	r1, #2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 f925 	bl	8006f74 <RCCEx_PLLSAI2_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d2e:	7cfb      	ldrb	r3, [r7, #19]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d34:	7cfb      	ldrb	r3, [r7, #19]
 8006d36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d52:	490d      	ldr	r1, [pc, #52]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d76:	4904      	ldr	r1, [pc, #16]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40021000 	.word	0x40021000

08006d8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d9a:	4b75      	ldr	r3, [pc, #468]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006da6:	4b72      	ldr	r3, [pc, #456]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0203 	and.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d10d      	bne.n	8006dd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
       ||
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006dbe:	4b6c      	ldr	r3, [pc, #432]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
       ||
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d047      	beq.n	8006e62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
 8006dd6:	e044      	b.n	8006e62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d018      	beq.n	8006e12 <RCCEx_PLLSAI1_Config+0x86>
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d825      	bhi.n	8006e30 <RCCEx_PLLSAI1_Config+0xa4>
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d002      	beq.n	8006dee <RCCEx_PLLSAI1_Config+0x62>
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d009      	beq.n	8006e00 <RCCEx_PLLSAI1_Config+0x74>
 8006dec:	e020      	b.n	8006e30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dee:	4b60      	ldr	r3, [pc, #384]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11d      	bne.n	8006e36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dfe:	e01a      	b.n	8006e36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e00:	4b5b      	ldr	r3, [pc, #364]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d116      	bne.n	8006e3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e10:	e013      	b.n	8006e3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e12:	4b57      	ldr	r3, [pc, #348]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10f      	bne.n	8006e3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e1e:	4b54      	ldr	r3, [pc, #336]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e2e:	e006      	b.n	8006e3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
      break;
 8006e34:	e004      	b.n	8006e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10d      	bne.n	8006e62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e46:	4b4a      	ldr	r3, [pc, #296]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	4944      	ldr	r1, [pc, #272]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d17d      	bne.n	8006f64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e68:	4b41      	ldr	r3, [pc, #260]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a40      	ldr	r2, [pc, #256]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e74:	f7fc f9fa 	bl	800326c <HAL_GetTick>
 8006e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e7a:	e009      	b.n	8006e90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e7c:	f7fc f9f6 	bl	800326c <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d902      	bls.n	8006e90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e8e:	e005      	b.n	8006e9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e90:	4b37      	ldr	r3, [pc, #220]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ef      	bne.n	8006e7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d160      	bne.n	8006f64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d111      	bne.n	8006ecc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ea8:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6892      	ldr	r2, [r2, #8]
 8006eb8:	0211      	lsls	r1, r2, #8
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68d2      	ldr	r2, [r2, #12]
 8006ebe:	0912      	lsrs	r2, r2, #4
 8006ec0:	0452      	lsls	r2, r2, #17
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	492a      	ldr	r1, [pc, #168]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	610b      	str	r3, [r1, #16]
 8006eca:	e027      	b.n	8006f1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d112      	bne.n	8006ef8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ed2:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006eda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6892      	ldr	r2, [r2, #8]
 8006ee2:	0211      	lsls	r1, r2, #8
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6912      	ldr	r2, [r2, #16]
 8006ee8:	0852      	lsrs	r2, r2, #1
 8006eea:	3a01      	subs	r2, #1
 8006eec:	0552      	lsls	r2, r2, #21
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	491f      	ldr	r1, [pc, #124]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	610b      	str	r3, [r1, #16]
 8006ef6:	e011      	b.n	8006f1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006f00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6892      	ldr	r2, [r2, #8]
 8006f08:	0211      	lsls	r1, r2, #8
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6952      	ldr	r2, [r2, #20]
 8006f0e:	0852      	lsrs	r2, r2, #1
 8006f10:	3a01      	subs	r2, #1
 8006f12:	0652      	lsls	r2, r2, #25
 8006f14:	430a      	orrs	r2, r1
 8006f16:	4916      	ldr	r1, [pc, #88]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f1c:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f28:	f7fc f9a0 	bl	800326c <HAL_GetTick>
 8006f2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f2e:	e009      	b.n	8006f44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f30:	f7fc f99c 	bl	800326c <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d902      	bls.n	8006f44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	73fb      	strb	r3, [r7, #15]
          break;
 8006f42:	e005      	b.n	8006f50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f44:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0ef      	beq.n	8006f30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f56:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	4904      	ldr	r1, [pc, #16]	; (8006f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40021000 	.word	0x40021000

08006f74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f82:	4b6a      	ldr	r3, [pc, #424]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f8e:	4b67      	ldr	r3, [pc, #412]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0203 	and.w	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d10d      	bne.n	8006fba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006fa6:	4b61      	ldr	r3, [pc, #388]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	091b      	lsrs	r3, r3, #4
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d047      	beq.n	800704a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
 8006fbe:	e044      	b.n	800704a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d018      	beq.n	8006ffa <RCCEx_PLLSAI2_Config+0x86>
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d825      	bhi.n	8007018 <RCCEx_PLLSAI2_Config+0xa4>
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d002      	beq.n	8006fd6 <RCCEx_PLLSAI2_Config+0x62>
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d009      	beq.n	8006fe8 <RCCEx_PLLSAI2_Config+0x74>
 8006fd4:	e020      	b.n	8007018 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fd6:	4b55      	ldr	r3, [pc, #340]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d11d      	bne.n	800701e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fe6:	e01a      	b.n	800701e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fe8:	4b50      	ldr	r3, [pc, #320]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d116      	bne.n	8007022 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ff8:	e013      	b.n	8007022 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ffa:	4b4c      	ldr	r3, [pc, #304]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10f      	bne.n	8007026 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007006:	4b49      	ldr	r3, [pc, #292]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007016:	e006      	b.n	8007026 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	e004      	b.n	8007028 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800701e:	bf00      	nop
 8007020:	e002      	b.n	8007028 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007022:	bf00      	nop
 8007024:	e000      	b.n	8007028 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007026:	bf00      	nop
    }

    if(status == HAL_OK)
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10d      	bne.n	800704a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800702e:	4b3f      	ldr	r3, [pc, #252]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6819      	ldr	r1, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	3b01      	subs	r3, #1
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	430b      	orrs	r3, r1
 8007044:	4939      	ldr	r1, [pc, #228]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007046:	4313      	orrs	r3, r2
 8007048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d167      	bne.n	8007120 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007050:	4b36      	ldr	r3, [pc, #216]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a35      	ldr	r2, [pc, #212]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800705a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705c:	f7fc f906 	bl	800326c <HAL_GetTick>
 8007060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007062:	e009      	b.n	8007078 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007064:	f7fc f902 	bl	800326c <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d902      	bls.n	8007078 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	73fb      	strb	r3, [r7, #15]
        break;
 8007076:	e005      	b.n	8007084 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007078:	4b2c      	ldr	r3, [pc, #176]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ef      	bne.n	8007064 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d14a      	bne.n	8007120 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d111      	bne.n	80070b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007090:	4b26      	ldr	r3, [pc, #152]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6892      	ldr	r2, [r2, #8]
 80070a0:	0211      	lsls	r1, r2, #8
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68d2      	ldr	r2, [r2, #12]
 80070a6:	0912      	lsrs	r2, r2, #4
 80070a8:	0452      	lsls	r2, r2, #17
 80070aa:	430a      	orrs	r2, r1
 80070ac:	491f      	ldr	r1, [pc, #124]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	614b      	str	r3, [r1, #20]
 80070b2:	e011      	b.n	80070d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070b4:	4b1d      	ldr	r3, [pc, #116]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6892      	ldr	r2, [r2, #8]
 80070c4:	0211      	lsls	r1, r2, #8
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6912      	ldr	r2, [r2, #16]
 80070ca:	0852      	lsrs	r2, r2, #1
 80070cc:	3a01      	subs	r2, #1
 80070ce:	0652      	lsls	r2, r2, #25
 80070d0:	430a      	orrs	r2, r1
 80070d2:	4916      	ldr	r1, [pc, #88]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a13      	ldr	r2, [pc, #76]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e4:	f7fc f8c2 	bl	800326c <HAL_GetTick>
 80070e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070ea:	e009      	b.n	8007100 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80070ec:	f7fc f8be 	bl	800326c <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d902      	bls.n	8007100 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	73fb      	strb	r3, [r7, #15]
          break;
 80070fe:	e005      	b.n	800710c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0ef      	beq.n	80070ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	4904      	ldr	r1, [pc, #16]	; (800712c <RCCEx_PLLSAI2_Config+0x1b8>)
 800711c:	4313      	orrs	r3, r2
 800711e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40021000 	.word	0x40021000

08007130 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e049      	b.n	80071d6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fb fc3e 	bl	80029d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0204 	orr.w	r2, r2, #4
 800716c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d104      	bne.n	8007186 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2204      	movs	r2, #4
 8007180:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e027      	b.n	80071d6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007186:	f7fc f871 	bl	800326c <HAL_GetTick>
 800718a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800718c:	e015      	b.n	80071ba <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800718e:	f7fc f86d 	bl	800326c <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d90e      	bls.n	80071ba <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2204      	movs	r2, #4
 80071ae:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e00d      	b.n	80071d6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d0e2      	beq.n	800718e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e049      	b.n	8007284 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fb fc05 	bl	8002a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f000 fbf9 	bl	8007a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b01      	cmp	r3, #1
 800729e:	d001      	beq.n	80072a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e047      	b.n	8007334 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a23      	ldr	r2, [pc, #140]	; (8007340 <HAL_TIM_Base_Start+0xb4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01d      	beq.n	80072f2 <HAL_TIM_Base_Start+0x66>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d018      	beq.n	80072f2 <HAL_TIM_Base_Start+0x66>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1f      	ldr	r2, [pc, #124]	; (8007344 <HAL_TIM_Base_Start+0xb8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIM_Base_Start+0x66>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1e      	ldr	r2, [pc, #120]	; (8007348 <HAL_TIM_Base_Start+0xbc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIM_Base_Start+0x66>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1c      	ldr	r2, [pc, #112]	; (800734c <HAL_TIM_Base_Start+0xc0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIM_Base_Start+0x66>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1b      	ldr	r2, [pc, #108]	; (8007350 <HAL_TIM_Base_Start+0xc4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIM_Base_Start+0x66>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a19      	ldr	r2, [pc, #100]	; (8007354 <HAL_TIM_Base_Start+0xc8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d115      	bne.n	800731e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	4b17      	ldr	r3, [pc, #92]	; (8007358 <HAL_TIM_Base_Start+0xcc>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b06      	cmp	r3, #6
 8007302:	d015      	beq.n	8007330 <HAL_TIM_Base_Start+0xa4>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730a:	d011      	beq.n	8007330 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731c:	e008      	b.n	8007330 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0201 	orr.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e000      	b.n	8007332 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40012c00 	.word	0x40012c00
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40013400 	.word	0x40013400
 8007354:	40014000 	.word	0x40014000
 8007358:	00010007 	.word	0x00010007

0800735c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b01      	cmp	r3, #1
 800736e:	d001      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e04f      	b.n	8007414 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a23      	ldr	r2, [pc, #140]	; (8007420 <HAL_TIM_Base_Start_IT+0xc4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d01d      	beq.n	80073d2 <HAL_TIM_Base_Start_IT+0x76>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739e:	d018      	beq.n	80073d2 <HAL_TIM_Base_Start_IT+0x76>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <HAL_TIM_Base_Start_IT+0xc8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <HAL_TIM_Base_Start_IT+0x76>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <HAL_TIM_Base_Start_IT+0xcc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00e      	beq.n	80073d2 <HAL_TIM_Base_Start_IT+0x76>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1c      	ldr	r2, [pc, #112]	; (800742c <HAL_TIM_Base_Start_IT+0xd0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <HAL_TIM_Base_Start_IT+0x76>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <HAL_TIM_Base_Start_IT+0xd4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_TIM_Base_Start_IT+0x76>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a19      	ldr	r2, [pc, #100]	; (8007434 <HAL_TIM_Base_Start_IT+0xd8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d115      	bne.n	80073fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	4b17      	ldr	r3, [pc, #92]	; (8007438 <HAL_TIM_Base_Start_IT+0xdc>)
 80073da:	4013      	ands	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	d015      	beq.n	8007410 <HAL_TIM_Base_Start_IT+0xb4>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ea:	d011      	beq.n	8007410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fc:	e008      	b.n	8007410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0201 	orr.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	e000      	b.n	8007412 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007410:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40000c00 	.word	0x40000c00
 8007430:	40013400 	.word	0x40013400
 8007434:	40014000 	.word	0x40014000
 8007438:	00010007 	.word	0x00010007

0800743c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e049      	b.n	80074e2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f841 	bl	80074ea <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f000 faca 	bl	8007a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b02      	cmp	r3, #2
 8007512:	d122      	bne.n	800755a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b02      	cmp	r3, #2
 8007520:	d11b      	bne.n	800755a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f06f 0202 	mvn.w	r2, #2
 800752a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa48 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 8007546:	e005      	b.n	8007554 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa3a 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa4b 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d122      	bne.n	80075ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b04      	cmp	r3, #4
 8007574:	d11b      	bne.n	80075ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f06f 0204 	mvn.w	r2, #4
 800757e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa1e 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 800759a:	e005      	b.n	80075a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa10 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa21 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d122      	bne.n	8007602 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d11b      	bne.n	8007602 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f06f 0208 	mvn.w	r2, #8
 80075d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2204      	movs	r2, #4
 80075d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9f4 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 80075ee:	e005      	b.n	80075fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f9e6 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9f7 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b10      	cmp	r3, #16
 800760e:	d122      	bne.n	8007656 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b10      	cmp	r3, #16
 800761c:	d11b      	bne.n	8007656 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f06f 0210 	mvn.w	r2, #16
 8007626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2208      	movs	r2, #8
 800762c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9ca 	bl	80079d6 <HAL_TIM_IC_CaptureCallback>
 8007642:	e005      	b.n	8007650 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9bc 	bl	80079c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9cd 	bl	80079ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b01      	cmp	r3, #1
 8007662:	d10e      	bne.n	8007682 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b01      	cmp	r3, #1
 8007670:	d107      	bne.n	8007682 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f06f 0201 	mvn.w	r2, #1
 800767a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fa fdb7 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768c:	2b80      	cmp	r3, #128	; 0x80
 800768e:	d10e      	bne.n	80076ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b80      	cmp	r3, #128	; 0x80
 800769c:	d107      	bne.n	80076ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fe4f 	bl	800834c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076bc:	d10e      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c8:	2b80      	cmp	r3, #128	; 0x80
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fe42 	bl	8008360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d10e      	bne.n	8007708 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	d107      	bne.n	8007708 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f97b 	bl	80079fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b20      	cmp	r3, #32
 8007714:	d10e      	bne.n	8007734 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b20      	cmp	r3, #32
 8007722:	d107      	bne.n	8007734 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0220 	mvn.w	r2, #32
 800772c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fe02 	bl	8008338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007756:	2302      	movs	r3, #2
 8007758:	e066      	b.n	8007828 <HAL_TIM_OC_ConfigChannel+0xec>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b14      	cmp	r3, #20
 8007766:	d857      	bhi.n	8007818 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <HAL_TIM_OC_ConfigChannel+0x34>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	080077c5 	.word	0x080077c5
 8007774:	08007819 	.word	0x08007819
 8007778:	08007819 	.word	0x08007819
 800777c:	08007819 	.word	0x08007819
 8007780:	080077d3 	.word	0x080077d3
 8007784:	08007819 	.word	0x08007819
 8007788:	08007819 	.word	0x08007819
 800778c:	08007819 	.word	0x08007819
 8007790:	080077e1 	.word	0x080077e1
 8007794:	08007819 	.word	0x08007819
 8007798:	08007819 	.word	0x08007819
 800779c:	08007819 	.word	0x08007819
 80077a0:	080077ef 	.word	0x080077ef
 80077a4:	08007819 	.word	0x08007819
 80077a8:	08007819 	.word	0x08007819
 80077ac:	08007819 	.word	0x08007819
 80077b0:	080077fd 	.word	0x080077fd
 80077b4:	08007819 	.word	0x08007819
 80077b8:	08007819 	.word	0x08007819
 80077bc:	08007819 	.word	0x08007819
 80077c0:	0800780b 	.word	0x0800780b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f9bc 	bl	8007b48 <TIM_OC1_SetConfig>
      break;
 80077d0:	e025      	b.n	800781e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fa45 	bl	8007c68 <TIM_OC2_SetConfig>
      break;
 80077de:	e01e      	b.n	800781e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fac8 	bl	8007d7c <TIM_OC3_SetConfig>
      break;
 80077ec:	e017      	b.n	800781e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fb49 	bl	8007e8c <TIM_OC4_SetConfig>
      break;
 80077fa:	e010      	b.n	800781e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fbac 	bl	8007f60 <TIM_OC5_SetConfig>
      break;
 8007808:	e009      	b.n	800781e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fc09 	bl	8008028 <TIM_OC6_SetConfig>
      break;
 8007816:	e002      	b.n	800781e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
      break;
 800781c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_TIM_ConfigClockSource+0x1c>
 8007848:	2302      	movs	r3, #2
 800784a:	e0b6      	b.n	80079ba <HAL_TIM_ConfigClockSource+0x18a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800786e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007876:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007888:	d03e      	beq.n	8007908 <HAL_TIM_ConfigClockSource+0xd8>
 800788a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800788e:	f200 8087 	bhi.w	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 8007892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007896:	f000 8086 	beq.w	80079a6 <HAL_TIM_ConfigClockSource+0x176>
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789e:	d87f      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078a0:	2b70      	cmp	r3, #112	; 0x70
 80078a2:	d01a      	beq.n	80078da <HAL_TIM_ConfigClockSource+0xaa>
 80078a4:	2b70      	cmp	r3, #112	; 0x70
 80078a6:	d87b      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078a8:	2b60      	cmp	r3, #96	; 0x60
 80078aa:	d050      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x11e>
 80078ac:	2b60      	cmp	r3, #96	; 0x60
 80078ae:	d877      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078b0:	2b50      	cmp	r3, #80	; 0x50
 80078b2:	d03c      	beq.n	800792e <HAL_TIM_ConfigClockSource+0xfe>
 80078b4:	2b50      	cmp	r3, #80	; 0x50
 80078b6:	d873      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	d058      	beq.n	800796e <HAL_TIM_ConfigClockSource+0x13e>
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d86f      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078c0:	2b30      	cmp	r3, #48	; 0x30
 80078c2:	d064      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15e>
 80078c4:	2b30      	cmp	r3, #48	; 0x30
 80078c6:	d86b      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d060      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15e>
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d867      	bhi.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05c      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15e>
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d05a      	beq.n	800798e <HAL_TIM_ConfigClockSource+0x15e>
 80078d8:	e062      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6899      	ldr	r1, [r3, #8]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f000 fc7d 	bl	80081e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	609a      	str	r2, [r3, #8]
      break;
 8007906:	e04f      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	6899      	ldr	r1, [r3, #8]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f000 fc66 	bl	80081e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792a:	609a      	str	r2, [r3, #8]
      break;
 800792c:	e03c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	461a      	mov	r2, r3
 800793c:	f000 fbda 	bl	80080f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2150      	movs	r1, #80	; 0x50
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fc33 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 800794c:	e02c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6859      	ldr	r1, [r3, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	461a      	mov	r2, r3
 800795c:	f000 fbf9 	bl	8008152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2160      	movs	r1, #96	; 0x60
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fc23 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 800796c:	e01c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6859      	ldr	r1, [r3, #4]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	461a      	mov	r2, r3
 800797c:	f000 fbba 	bl	80080f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2140      	movs	r1, #64	; 0x40
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fc13 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 800798c:	e00c      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4619      	mov	r1, r3
 8007998:	4610      	mov	r0, r2
 800799a:	f000 fc0a 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 800799e:	e003      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
      break;
 80079a4:	e000      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80079a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a40      	ldr	r2, [pc, #256]	; (8007b28 <TIM_Base_SetConfig+0x114>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a32:	d00f      	beq.n	8007a54 <TIM_Base_SetConfig+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a3d      	ldr	r2, [pc, #244]	; (8007b2c <TIM_Base_SetConfig+0x118>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00b      	beq.n	8007a54 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a3c      	ldr	r2, [pc, #240]	; (8007b30 <TIM_Base_SetConfig+0x11c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d007      	beq.n	8007a54 <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a3b      	ldr	r2, [pc, #236]	; (8007b34 <TIM_Base_SetConfig+0x120>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a3a      	ldr	r2, [pc, #232]	; (8007b38 <TIM_Base_SetConfig+0x124>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d108      	bne.n	8007a66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2f      	ldr	r2, [pc, #188]	; (8007b28 <TIM_Base_SetConfig+0x114>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01f      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a74:	d01b      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <TIM_Base_SetConfig+0x118>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d017      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <TIM_Base_SetConfig+0x11c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2a      	ldr	r2, [pc, #168]	; (8007b34 <TIM_Base_SetConfig+0x120>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00f      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a29      	ldr	r2, [pc, #164]	; (8007b38 <TIM_Base_SetConfig+0x124>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00b      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a28      	ldr	r2, [pc, #160]	; (8007b3c <TIM_Base_SetConfig+0x128>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d007      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a27      	ldr	r2, [pc, #156]	; (8007b40 <TIM_Base_SetConfig+0x12c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a26      	ldr	r2, [pc, #152]	; (8007b44 <TIM_Base_SetConfig+0x130>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d108      	bne.n	8007ac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <TIM_Base_SetConfig+0x114>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00f      	beq.n	8007b0c <TIM_Base_SetConfig+0xf8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <TIM_Base_SetConfig+0x124>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00b      	beq.n	8007b0c <TIM_Base_SetConfig+0xf8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a11      	ldr	r2, [pc, #68]	; (8007b3c <TIM_Base_SetConfig+0x128>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d007      	beq.n	8007b0c <TIM_Base_SetConfig+0xf8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a10      	ldr	r2, [pc, #64]	; (8007b40 <TIM_Base_SetConfig+0x12c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_Base_SetConfig+0xf8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a0f      	ldr	r2, [pc, #60]	; (8007b44 <TIM_Base_SetConfig+0x130>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d103      	bne.n	8007b14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	615a      	str	r2, [r3, #20]
}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40000c00 	.word	0x40000c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0201 	bic.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0303 	bic.w	r3, r3, #3
 8007b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f023 0302 	bic.w	r3, r3, #2
 8007b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a2c      	ldr	r2, [pc, #176]	; (8007c54 <TIM_OC1_SetConfig+0x10c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00f      	beq.n	8007bc8 <TIM_OC1_SetConfig+0x80>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a2b      	ldr	r2, [pc, #172]	; (8007c58 <TIM_OC1_SetConfig+0x110>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00b      	beq.n	8007bc8 <TIM_OC1_SetConfig+0x80>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a2a      	ldr	r2, [pc, #168]	; (8007c5c <TIM_OC1_SetConfig+0x114>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d007      	beq.n	8007bc8 <TIM_OC1_SetConfig+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a29      	ldr	r2, [pc, #164]	; (8007c60 <TIM_OC1_SetConfig+0x118>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_OC1_SetConfig+0x80>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <TIM_OC1_SetConfig+0x11c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d10c      	bne.n	8007be2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 0308 	bic.w	r3, r3, #8
 8007bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f023 0304 	bic.w	r3, r3, #4
 8007be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1b      	ldr	r2, [pc, #108]	; (8007c54 <TIM_OC1_SetConfig+0x10c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00f      	beq.n	8007c0a <TIM_OC1_SetConfig+0xc2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1a      	ldr	r2, [pc, #104]	; (8007c58 <TIM_OC1_SetConfig+0x110>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <TIM_OC1_SetConfig+0xc2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a19      	ldr	r2, [pc, #100]	; (8007c5c <TIM_OC1_SetConfig+0x114>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d007      	beq.n	8007c0a <TIM_OC1_SetConfig+0xc2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a18      	ldr	r2, [pc, #96]	; (8007c60 <TIM_OC1_SetConfig+0x118>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC1_SetConfig+0xc2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <TIM_OC1_SetConfig+0x11c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d111      	bne.n	8007c2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	621a      	str	r2, [r3, #32]
}
 8007c48:	bf00      	nop
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800

08007c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f023 0210 	bic.w	r2, r3, #16
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f023 0320 	bic.w	r3, r3, #32
 8007cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a28      	ldr	r2, [pc, #160]	; (8007d68 <TIM_OC2_SetConfig+0x100>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d003      	beq.n	8007cd4 <TIM_OC2_SetConfig+0x6c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a27      	ldr	r2, [pc, #156]	; (8007d6c <TIM_OC2_SetConfig+0x104>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10d      	bne.n	8007cf0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <TIM_OC2_SetConfig+0x100>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00f      	beq.n	8007d18 <TIM_OC2_SetConfig+0xb0>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <TIM_OC2_SetConfig+0x104>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_OC2_SetConfig+0xb0>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a1b      	ldr	r2, [pc, #108]	; (8007d70 <TIM_OC2_SetConfig+0x108>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_OC2_SetConfig+0xb0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a1a      	ldr	r2, [pc, #104]	; (8007d74 <TIM_OC2_SetConfig+0x10c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC2_SetConfig+0xb0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a19      	ldr	r2, [pc, #100]	; (8007d78 <TIM_OC2_SetConfig+0x110>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d113      	bne.n	8007d40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	621a      	str	r2, [r3, #32]
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400
 8007d78:	40014800 	.word	0x40014800

08007d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0303 	bic.w	r3, r3, #3
 8007db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a27      	ldr	r2, [pc, #156]	; (8007e78 <TIM_OC3_SetConfig+0xfc>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d003      	beq.n	8007de6 <TIM_OC3_SetConfig+0x6a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a26      	ldr	r2, [pc, #152]	; (8007e7c <TIM_OC3_SetConfig+0x100>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d10d      	bne.n	8007e02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1c      	ldr	r2, [pc, #112]	; (8007e78 <TIM_OC3_SetConfig+0xfc>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00f      	beq.n	8007e2a <TIM_OC3_SetConfig+0xae>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <TIM_OC3_SetConfig+0x100>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_OC3_SetConfig+0xae>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1a      	ldr	r2, [pc, #104]	; (8007e80 <TIM_OC3_SetConfig+0x104>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_OC3_SetConfig+0xae>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a19      	ldr	r2, [pc, #100]	; (8007e84 <TIM_OC3_SetConfig+0x108>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_OC3_SetConfig+0xae>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <TIM_OC3_SetConfig+0x10c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d113      	bne.n	8007e52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	621a      	str	r2, [r3, #32]
}
 8007e6c:	bf00      	nop
 8007e6e:	371c      	adds	r7, #28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40013400 	.word	0x40013400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800

08007e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	031b      	lsls	r3, r3, #12
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a18      	ldr	r2, [pc, #96]	; (8007f4c <TIM_OC4_SetConfig+0xc0>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00f      	beq.n	8007f10 <TIM_OC4_SetConfig+0x84>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <TIM_OC4_SetConfig+0xc4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00b      	beq.n	8007f10 <TIM_OC4_SetConfig+0x84>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <TIM_OC4_SetConfig+0xc8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d007      	beq.n	8007f10 <TIM_OC4_SetConfig+0x84>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <TIM_OC4_SetConfig+0xcc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_OC4_SetConfig+0x84>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <TIM_OC4_SetConfig+0xd0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d109      	bne.n	8007f24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	019b      	lsls	r3, r3, #6
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40012c00 	.word	0x40012c00
 8007f50:	40013400 	.word	0x40013400
 8007f54:	40014000 	.word	0x40014000
 8007f58:	40014400 	.word	0x40014400
 8007f5c:	40014800 	.word	0x40014800

08007f60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a17      	ldr	r2, [pc, #92]	; (8008014 <TIM_OC5_SetConfig+0xb4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00f      	beq.n	8007fda <TIM_OC5_SetConfig+0x7a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a16      	ldr	r2, [pc, #88]	; (8008018 <TIM_OC5_SetConfig+0xb8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00b      	beq.n	8007fda <TIM_OC5_SetConfig+0x7a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <TIM_OC5_SetConfig+0xbc>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d007      	beq.n	8007fda <TIM_OC5_SetConfig+0x7a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a14      	ldr	r2, [pc, #80]	; (8008020 <TIM_OC5_SetConfig+0xc0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_OC5_SetConfig+0x7a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <TIM_OC5_SetConfig+0xc4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d109      	bne.n	8007fee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	40012c00 	.word	0x40012c00
 8008018:	40013400 	.word	0x40013400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800

08008028 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	021b      	lsls	r3, r3, #8
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800806e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	051b      	lsls	r3, r3, #20
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a18      	ldr	r2, [pc, #96]	; (80080e0 <TIM_OC6_SetConfig+0xb8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00f      	beq.n	80080a4 <TIM_OC6_SetConfig+0x7c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a17      	ldr	r2, [pc, #92]	; (80080e4 <TIM_OC6_SetConfig+0xbc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00b      	beq.n	80080a4 <TIM_OC6_SetConfig+0x7c>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a16      	ldr	r2, [pc, #88]	; (80080e8 <TIM_OC6_SetConfig+0xc0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d007      	beq.n	80080a4 <TIM_OC6_SetConfig+0x7c>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a15      	ldr	r2, [pc, #84]	; (80080ec <TIM_OC6_SetConfig+0xc4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d003      	beq.n	80080a4 <TIM_OC6_SetConfig+0x7c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a14      	ldr	r2, [pc, #80]	; (80080f0 <TIM_OC6_SetConfig+0xc8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d109      	bne.n	80080b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40012c00 	.word	0x40012c00
 80080e4:	40013400 	.word	0x40013400
 80080e8:	40014000 	.word	0x40014000
 80080ec:	40014400 	.word	0x40014400
 80080f0:	40014800 	.word	0x40014800

080080f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800811e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f023 030a 	bic.w	r3, r3, #10
 8008130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008152:	b480      	push	{r7}
 8008154:	b087      	sub	sp, #28
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f023 0210 	bic.w	r2, r3, #16
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800817c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	031b      	lsls	r3, r3, #12
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	4313      	orrs	r3, r2
 8008186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800818e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f043 0307 	orr.w	r3, r3, #7
 80081d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	609a      	str	r2, [r3, #8]
}
 80081dc:	bf00      	nop
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	021a      	lsls	r2, r3, #8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	431a      	orrs	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4313      	orrs	r3, r2
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	609a      	str	r2, [r3, #8]
}
 800821c:	bf00      	nop
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800823c:	2302      	movs	r3, #2
 800823e:	e068      	b.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a2e      	ldr	r2, [pc, #184]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a2d      	ldr	r2, [pc, #180]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d108      	bne.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800827a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01d      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b2:	d018      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1b      	ldr	r2, [pc, #108]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1a      	ldr	r2, [pc, #104]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00e      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a18      	ldr	r2, [pc, #96]	; (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a13      	ldr	r2, [pc, #76]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d004      	beq.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a14      	ldr	r2, [pc, #80]	; (8008334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d10c      	bne.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40012c00 	.word	0x40012c00
 8008324:	40013400 	.word	0x40013400
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	40014000 	.word	0x40014000

08008338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e040      	b.n	8008408 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fa fb96 	bl	8002ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2224      	movs	r2, #36	; 0x24
 80083a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0201 	bic.w	r2, r2, #1
 80083b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fbf2 	bl	8008b9c <UART_SetConfig>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e022      	b.n	8008408 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fe9e 	bl	800910c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689a      	ldr	r2, [r3, #8]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 ff25 	bl	8009250 <UART_CheckIdleState>
 8008406:	4603      	mov	r3, r0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008410:	b480      	push	{r7}
 8008412:	b08b      	sub	sp, #44	; 0x2c
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008422:	2b20      	cmp	r3, #32
 8008424:	d156      	bne.n	80084d4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_UART_Transmit_IT+0x22>
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e04f      	b.n	80084d6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_UART_Transmit_IT+0x34>
 8008440:	2302      	movs	r3, #2
 8008442:	e048      	b.n	80084d6 <HAL_UART_Transmit_IT+0xc6>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	88fa      	ldrh	r2, [r7, #6]
 8008456:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2221      	movs	r2, #33	; 0x21
 8008474:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	d107      	bne.n	8008490 <HAL_UART_Transmit_IT+0x80>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4a16      	ldr	r2, [pc, #88]	; (80084e4 <HAL_UART_Transmit_IT+0xd4>)
 800848c:	669a      	str	r2, [r3, #104]	; 0x68
 800848e:	e002      	b.n	8008496 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <HAL_UART_Transmit_IT+0xd8>)
 8008494:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	613b      	str	r3, [r7, #16]
   return(result);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	623b      	str	r3, [r7, #32]
 80084be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	69f9      	ldr	r1, [r7, #28]
 80084c2:	6a3a      	ldr	r2, [r7, #32]
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e6      	bne.n	800849e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	e000      	b.n	80084d6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	372c      	adds	r7, #44	; 0x2c
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	080097ab 	.word	0x080097ab
 80084e8:	080096f3 	.word	0x080096f3

080084ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d142      	bne.n	8008588 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <HAL_UART_Receive_IT+0x22>
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e03b      	b.n	800858a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_UART_Receive_IT+0x34>
 800851c:	2302      	movs	r3, #2
 800851e:	e034      	b.n	800858a <HAL_UART_Receive_IT+0x9e>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a18      	ldr	r2, [pc, #96]	; (8008594 <HAL_UART_Receive_IT+0xa8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d01f      	beq.n	8008578 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d018      	beq.n	8008578 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	613b      	str	r3, [r7, #16]
   return(result);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	623b      	str	r3, [r7, #32]
 8008566:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	69f9      	ldr	r1, [r7, #28]
 800856a:	6a3a      	ldr	r2, [r7, #32]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	61bb      	str	r3, [r7, #24]
   return(result);
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e6      	bne.n	8008546 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	461a      	mov	r2, r3
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 ff74 	bl	800946c <UART_Start_Receive_IT>
 8008584:	4603      	mov	r3, r0
 8008586:	e000      	b.n	800858a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3728      	adds	r7, #40	; 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40008000 	.word	0x40008000

08008598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b0ba      	sub	sp, #232	; 0xe8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80085c6:	4013      	ands	r3, r2
 80085c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80085cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d115      	bne.n	8008600 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00f      	beq.n	8008600 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d009      	beq.n	8008600 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 82a6 	beq.w	8008b42 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	4798      	blx	r3
      }
      return;
 80085fe:	e2a0      	b.n	8008b42 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 8117 	beq.w	8008838 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800860a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800861a:	4b85      	ldr	r3, [pc, #532]	; (8008830 <HAL_UART_IRQHandler+0x298>)
 800861c:	4013      	ands	r3, r2
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 810a 	beq.w	8008838 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d011      	beq.n	8008654 <HAL_UART_IRQHandler+0xbc>
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864a:	f043 0201 	orr.w	r2, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d011      	beq.n	8008684 <HAL_UART_IRQHandler+0xec>
 8008660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2202      	movs	r2, #2
 8008672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800867a:	f043 0204 	orr.w	r2, r3, #4
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d011      	beq.n	80086b4 <HAL_UART_IRQHandler+0x11c>
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00b      	beq.n	80086b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2204      	movs	r2, #4
 80086a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086aa:	f043 0202 	orr.w	r2, r3, #2
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d017      	beq.n	80086f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d105      	bne.n	80086d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2208      	movs	r2, #8
 80086de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e6:	f043 0208 	orr.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d012      	beq.n	8008722 <HAL_UART_IRQHandler+0x18a>
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008718:	f043 0220 	orr.w	r2, r3, #32
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 820c 	beq.w	8008b46 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800872e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00d      	beq.n	8008756 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800873a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800875c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d005      	beq.n	800877a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800876e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008776:	2b00      	cmp	r3, #0
 8008778:	d04f      	beq.n	800881a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 ff40 	bl	8009600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878a:	2b40      	cmp	r3, #64	; 0x40
 800878c:	d141      	bne.n	8008812 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1d9      	bne.n	800878e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d013      	beq.n	800880a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e6:	4a13      	ldr	r2, [pc, #76]	; (8008834 <HAL_UART_IRQHandler+0x29c>)
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fc fe82 	bl	80054f8 <HAL_DMA_Abort_IT>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008808:	e00f      	b.n	800882a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f9b0 	bl	8008b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008810:	e00b      	b.n	800882a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9ac 	bl	8008b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008818:	e007      	b.n	800882a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9a8 	bl	8008b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008828:	e18d      	b.n	8008b46 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882a:	bf00      	nop
    return;
 800882c:	e18b      	b.n	8008b46 <HAL_UART_IRQHandler+0x5ae>
 800882e:	bf00      	nop
 8008830:	04000120 	.word	0x04000120
 8008834:	080096c7 	.word	0x080096c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883c:	2b01      	cmp	r3, #1
 800883e:	f040 8146 	bne.w	8008ace <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 813f 	beq.w	8008ace <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8138 	beq.w	8008ace <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2210      	movs	r2, #16
 8008864:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	f040 80b4 	bne.w	80089de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008882:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 815f 	beq.w	8008b4a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008896:	429a      	cmp	r2, r3
 8008898:	f080 8157 	bcs.w	8008b4a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 8085 	bne.w	80089c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1da      	bne.n	80088b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008914:	f023 0301 	bic.w	r3, r3, #1
 8008918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800892a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800892e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e1      	bne.n	8008902 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800894e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e3      	bne.n	800893e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008992:	f023 0310 	bic.w	r3, r3, #16
 8008996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e4      	bne.n	8008982 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fc fd5d 	bl	800547c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8d4 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089dc:	e0b5      	b.n	8008b4a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80a7 	beq.w	8008b4e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80a2 	beq.w	8008b4e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e4      	bne.n	8008a0a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a64:	633a      	str	r2, [r7, #48]	; 0x30
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e3      	bne.n	8008a40 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0310 	bic.w	r3, r3, #16
 8008a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	69b9      	ldr	r1, [r7, #24]
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e4      	bne.n	8008a8a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f85c 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008acc:	e03f      	b.n	8008b4e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <HAL_UART_IRQHandler+0x560>
 8008ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008aee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 f844 	bl	8009b7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008af6:	e02d      	b.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00e      	beq.n	8008b22 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01c      	beq.n	8008b52 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
    }
    return;
 8008b20:	e017      	b.n	8008b52 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d012      	beq.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
 8008b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00c      	beq.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fe95 	bl	800986a <UART_EndTransmit_IT>
    return;
 8008b40:	e008      	b.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b42:	bf00      	nop
 8008b44:	e006      	b.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008b46:	bf00      	nop
 8008b48:	e004      	b.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b4a:	bf00      	nop
 8008b4c:	e002      	b.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b4e:	bf00      	nop
 8008b50:	e000      	b.n	8008b54 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008b52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b54:	37e8      	adds	r7, #232	; 0xe8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop

08008b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba0:	b08a      	sub	sp, #40	; 0x28
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	4ba4      	ldr	r3, [pc, #656]	; (8008e5c <UART_SetConfig+0x2c0>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a99      	ldr	r2, [pc, #612]	; (8008e60 <UART_SetConfig+0x2c4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c04:	4313      	orrs	r3, r2
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a90      	ldr	r2, [pc, #576]	; (8008e64 <UART_SetConfig+0x2c8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d126      	bne.n	8008c74 <UART_SetConfig+0xd8>
 8008c26:	4b90      	ldr	r3, [pc, #576]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d81b      	bhi.n	8008c6c <UART_SetConfig+0xd0>
 8008c34:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <UART_SetConfig+0xa0>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008c4d 	.word	0x08008c4d
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c65 	.word	0x08008c65
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c52:	e116      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5a:	e112      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c62:	e10e      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6a:	e10a      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c72:	e106      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a7c      	ldr	r2, [pc, #496]	; (8008e6c <UART_SetConfig+0x2d0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d138      	bne.n	8008cf0 <UART_SetConfig+0x154>
 8008c7e:	4b7a      	ldr	r3, [pc, #488]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c84:	f003 030c 	and.w	r3, r3, #12
 8008c88:	2b0c      	cmp	r3, #12
 8008c8a:	d82d      	bhi.n	8008ce8 <UART_SetConfig+0x14c>
 8008c8c:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <UART_SetConfig+0xf8>)
 8008c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c92:	bf00      	nop
 8008c94:	08008cc9 	.word	0x08008cc9
 8008c98:	08008ce9 	.word	0x08008ce9
 8008c9c:	08008ce9 	.word	0x08008ce9
 8008ca0:	08008ce9 	.word	0x08008ce9
 8008ca4:	08008cd9 	.word	0x08008cd9
 8008ca8:	08008ce9 	.word	0x08008ce9
 8008cac:	08008ce9 	.word	0x08008ce9
 8008cb0:	08008ce9 	.word	0x08008ce9
 8008cb4:	08008cd1 	.word	0x08008cd1
 8008cb8:	08008ce9 	.word	0x08008ce9
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	08008ce9 	.word	0x08008ce9
 8008cc4:	08008ce1 	.word	0x08008ce1
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cce:	e0d8      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cd6:	e0d4      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cde:	e0d0      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008ce0:	2308      	movs	r3, #8
 8008ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ce6:	e0cc      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cee:	e0c8      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a5e      	ldr	r2, [pc, #376]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d125      	bne.n	8008d46 <UART_SetConfig+0x1aa>
 8008cfa:	4b5b      	ldr	r3, [pc, #364]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d04:	2b30      	cmp	r3, #48	; 0x30
 8008d06:	d016      	beq.n	8008d36 <UART_SetConfig+0x19a>
 8008d08:	2b30      	cmp	r3, #48	; 0x30
 8008d0a:	d818      	bhi.n	8008d3e <UART_SetConfig+0x1a2>
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d00a      	beq.n	8008d26 <UART_SetConfig+0x18a>
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d814      	bhi.n	8008d3e <UART_SetConfig+0x1a2>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <UART_SetConfig+0x182>
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d008      	beq.n	8008d2e <UART_SetConfig+0x192>
 8008d1c:	e00f      	b.n	8008d3e <UART_SetConfig+0x1a2>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d24:	e0ad      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d26:	2302      	movs	r3, #2
 8008d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d2c:	e0a9      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d2e:	2304      	movs	r3, #4
 8008d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d34:	e0a5      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d36:	2308      	movs	r3, #8
 8008d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d3c:	e0a1      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d3e:	2310      	movs	r3, #16
 8008d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d44:	e09d      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a4a      	ldr	r2, [pc, #296]	; (8008e74 <UART_SetConfig+0x2d8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d125      	bne.n	8008d9c <UART_SetConfig+0x200>
 8008d50:	4b45      	ldr	r3, [pc, #276]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008d5c:	d016      	beq.n	8008d8c <UART_SetConfig+0x1f0>
 8008d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d60:	d818      	bhi.n	8008d94 <UART_SetConfig+0x1f8>
 8008d62:	2b80      	cmp	r3, #128	; 0x80
 8008d64:	d00a      	beq.n	8008d7c <UART_SetConfig+0x1e0>
 8008d66:	2b80      	cmp	r3, #128	; 0x80
 8008d68:	d814      	bhi.n	8008d94 <UART_SetConfig+0x1f8>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <UART_SetConfig+0x1d8>
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d008      	beq.n	8008d84 <UART_SetConfig+0x1e8>
 8008d72:	e00f      	b.n	8008d94 <UART_SetConfig+0x1f8>
 8008d74:	2300      	movs	r3, #0
 8008d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7a:	e082      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d82:	e07e      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d84:	2304      	movs	r3, #4
 8008d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d8a:	e07a      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d8c:	2308      	movs	r3, #8
 8008d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d92:	e076      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d94:	2310      	movs	r3, #16
 8008d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d9a:	e072      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a35      	ldr	r2, [pc, #212]	; (8008e78 <UART_SetConfig+0x2dc>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d12a      	bne.n	8008dfc <UART_SetConfig+0x260>
 8008da6:	4b30      	ldr	r3, [pc, #192]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db4:	d01a      	beq.n	8008dec <UART_SetConfig+0x250>
 8008db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dba:	d81b      	bhi.n	8008df4 <UART_SetConfig+0x258>
 8008dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc0:	d00c      	beq.n	8008ddc <UART_SetConfig+0x240>
 8008dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc6:	d815      	bhi.n	8008df4 <UART_SetConfig+0x258>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <UART_SetConfig+0x238>
 8008dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd0:	d008      	beq.n	8008de4 <UART_SetConfig+0x248>
 8008dd2:	e00f      	b.n	8008df4 <UART_SetConfig+0x258>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dda:	e052      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de2:	e04e      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008de4:	2304      	movs	r3, #4
 8008de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dea:	e04a      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008dec:	2308      	movs	r3, #8
 8008dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008df2:	e046      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008df4:	2310      	movs	r3, #16
 8008df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dfa:	e042      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a17      	ldr	r2, [pc, #92]	; (8008e60 <UART_SetConfig+0x2c4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d13a      	bne.n	8008e7c <UART_SetConfig+0x2e0>
 8008e06:	4b18      	ldr	r3, [pc, #96]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e14:	d01a      	beq.n	8008e4c <UART_SetConfig+0x2b0>
 8008e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e1a:	d81b      	bhi.n	8008e54 <UART_SetConfig+0x2b8>
 8008e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e20:	d00c      	beq.n	8008e3c <UART_SetConfig+0x2a0>
 8008e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e26:	d815      	bhi.n	8008e54 <UART_SetConfig+0x2b8>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <UART_SetConfig+0x298>
 8008e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e30:	d008      	beq.n	8008e44 <UART_SetConfig+0x2a8>
 8008e32:	e00f      	b.n	8008e54 <UART_SetConfig+0x2b8>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e3a:	e022      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e42:	e01e      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e4a:	e01a      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e52:	e016      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e5a:	e012      	b.n	8008e82 <UART_SetConfig+0x2e6>
 8008e5c:	efff69f3 	.word	0xefff69f3
 8008e60:	40008000 	.word	0x40008000
 8008e64:	40013800 	.word	0x40013800
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	40004400 	.word	0x40004400
 8008e70:	40004800 	.word	0x40004800
 8008e74:	40004c00 	.word	0x40004c00
 8008e78:	40005000 	.word	0x40005000
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a9f      	ldr	r2, [pc, #636]	; (8009104 <UART_SetConfig+0x568>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d17a      	bne.n	8008f82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d824      	bhi.n	8008ede <UART_SetConfig+0x342>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <UART_SetConfig+0x300>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008edf 	.word	0x08008edf
 8008ea4:	08008ec9 	.word	0x08008ec9
 8008ea8:	08008edf 	.word	0x08008edf
 8008eac:	08008ecf 	.word	0x08008ecf
 8008eb0:	08008edf 	.word	0x08008edf
 8008eb4:	08008edf 	.word	0x08008edf
 8008eb8:	08008edf 	.word	0x08008edf
 8008ebc:	08008ed7 	.word	0x08008ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec0:	f7fd fbbc 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8008ec4:	61f8      	str	r0, [r7, #28]
        break;
 8008ec6:	e010      	b.n	8008eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec8:	4b8f      	ldr	r3, [pc, #572]	; (8009108 <UART_SetConfig+0x56c>)
 8008eca:	61fb      	str	r3, [r7, #28]
        break;
 8008ecc:	e00d      	b.n	8008eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ece:	f7fd fb1d 	bl	800650c <HAL_RCC_GetSysClockFreq>
 8008ed2:	61f8      	str	r0, [r7, #28]
        break;
 8008ed4:	e009      	b.n	8008eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eda:	61fb      	str	r3, [r7, #28]
        break;
 8008edc:	e005      	b.n	8008eea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ee8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80fb 	beq.w	80090e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4413      	add	r3, r2
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d305      	bcc.n	8008f0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d903      	bls.n	8008f16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f14:	e0e8      	b.n	80090e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	461c      	mov	r4, r3
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	022b      	lsls	r3, r5, #8
 8008f28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f2c:	0222      	lsls	r2, r4, #8
 8008f2e:	68f9      	ldr	r1, [r7, #12]
 8008f30:	6849      	ldr	r1, [r1, #4]
 8008f32:	0849      	lsrs	r1, r1, #1
 8008f34:	2000      	movs	r0, #0
 8008f36:	4688      	mov	r8, r1
 8008f38:	4681      	mov	r9, r0
 8008f3a:	eb12 0a08 	adds.w	sl, r2, r8
 8008f3e:	eb43 0b09 	adc.w	fp, r3, r9
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	603b      	str	r3, [r7, #0]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f50:	4650      	mov	r0, sl
 8008f52:	4659      	mov	r1, fp
 8008f54:	f7f7 fea8 	bl	8000ca8 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f66:	d308      	bcc.n	8008f7a <UART_SetConfig+0x3de>
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6e:	d204      	bcs.n	8008f7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	60da      	str	r2, [r3, #12]
 8008f78:	e0b6      	b.n	80090e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f80:	e0b2      	b.n	80090e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8a:	d15e      	bne.n	800904a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	d828      	bhi.n	8008fe6 <UART_SetConfig+0x44a>
 8008f94:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <UART_SetConfig+0x400>)
 8008f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9a:	bf00      	nop
 8008f9c:	08008fc1 	.word	0x08008fc1
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	08008fd1 	.word	0x08008fd1
 8008fa8:	08008fe7 	.word	0x08008fe7
 8008fac:	08008fd7 	.word	0x08008fd7
 8008fb0:	08008fe7 	.word	0x08008fe7
 8008fb4:	08008fe7 	.word	0x08008fe7
 8008fb8:	08008fe7 	.word	0x08008fe7
 8008fbc:	08008fdf 	.word	0x08008fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc0:	f7fd fb3c 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8008fc4:	61f8      	str	r0, [r7, #28]
        break;
 8008fc6:	e014      	b.n	8008ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc8:	f7fd fb4e 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 8008fcc:	61f8      	str	r0, [r7, #28]
        break;
 8008fce:	e010      	b.n	8008ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fd0:	4b4d      	ldr	r3, [pc, #308]	; (8009108 <UART_SetConfig+0x56c>)
 8008fd2:	61fb      	str	r3, [r7, #28]
        break;
 8008fd4:	e00d      	b.n	8008ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fd6:	f7fd fa99 	bl	800650c <HAL_RCC_GetSysClockFreq>
 8008fda:	61f8      	str	r0, [r7, #28]
        break;
 8008fdc:	e009      	b.n	8008ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fe2:	61fb      	str	r3, [r7, #28]
        break;
 8008fe4:	e005      	b.n	8008ff2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d077      	beq.n	80090e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	005a      	lsls	r2, r3, #1
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	441a      	add	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	fbb2 f3f3 	udiv	r3, r2, r3
 800900c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b0f      	cmp	r3, #15
 8009012:	d916      	bls.n	8009042 <UART_SetConfig+0x4a6>
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901a:	d212      	bcs.n	8009042 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	b29b      	uxth	r3, r3
 8009020:	f023 030f 	bic.w	r3, r3, #15
 8009024:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	085b      	lsrs	r3, r3, #1
 800902a:	b29b      	uxth	r3, r3
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	b29a      	uxth	r2, r3
 8009032:	8afb      	ldrh	r3, [r7, #22]
 8009034:	4313      	orrs	r3, r2
 8009036:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	8afa      	ldrh	r2, [r7, #22]
 800903e:	60da      	str	r2, [r3, #12]
 8009040:	e052      	b.n	80090e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009048:	e04e      	b.n	80090e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800904a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800904e:	2b08      	cmp	r3, #8
 8009050:	d827      	bhi.n	80090a2 <UART_SetConfig+0x506>
 8009052:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <UART_SetConfig+0x4bc>)
 8009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009085 	.word	0x08009085
 8009060:	0800908d 	.word	0x0800908d
 8009064:	080090a3 	.word	0x080090a3
 8009068:	08009093 	.word	0x08009093
 800906c:	080090a3 	.word	0x080090a3
 8009070:	080090a3 	.word	0x080090a3
 8009074:	080090a3 	.word	0x080090a3
 8009078:	0800909b 	.word	0x0800909b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800907c:	f7fd fade 	bl	800663c <HAL_RCC_GetPCLK1Freq>
 8009080:	61f8      	str	r0, [r7, #28]
        break;
 8009082:	e014      	b.n	80090ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009084:	f7fd faf0 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 8009088:	61f8      	str	r0, [r7, #28]
        break;
 800908a:	e010      	b.n	80090ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800908c:	4b1e      	ldr	r3, [pc, #120]	; (8009108 <UART_SetConfig+0x56c>)
 800908e:	61fb      	str	r3, [r7, #28]
        break;
 8009090:	e00d      	b.n	80090ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009092:	f7fd fa3b 	bl	800650c <HAL_RCC_GetSysClockFreq>
 8009096:	61f8      	str	r0, [r7, #28]
        break;
 8009098:	e009      	b.n	80090ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800909a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800909e:	61fb      	str	r3, [r7, #28]
        break;
 80090a0:	e005      	b.n	80090ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090ac:	bf00      	nop
    }

    if (pclk != 0U)
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d019      	beq.n	80090e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	085a      	lsrs	r2, r3, #1
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	441a      	add	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	d909      	bls.n	80090e2 <UART_SetConfig+0x546>
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d4:	d205      	bcs.n	80090e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60da      	str	r2, [r3, #12]
 80090e0:	e002      	b.n	80090e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80090f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3728      	adds	r7, #40	; 0x28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009102:	bf00      	nop
 8009104:	40008000 	.word	0x40008000
 8009108:	00f42400 	.word	0x00f42400

0800910c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00a      	beq.n	8009136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	f003 0310 	and.w	r3, r3, #16
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d01a      	beq.n	8009222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920a:	d10a      	bne.n	8009222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00a      	beq.n	8009244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	605a      	str	r2, [r3, #4]
  }
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af02      	add	r7, sp, #8
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009260:	f7fa f804 	bl	800326c <HAL_GetTick>
 8009264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	2b08      	cmp	r3, #8
 8009272:	d10e      	bne.n	8009292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f82d 	bl	80092e2 <UART_WaitOnFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e023      	b.n	80092da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b04      	cmp	r3, #4
 800929e:	d10e      	bne.n	80092be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f817 	bl	80092e2 <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e00d      	b.n	80092da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b09c      	sub	sp, #112	; 0x70
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	60f8      	str	r0, [r7, #12]
 80092ea:	60b9      	str	r1, [r7, #8]
 80092ec:	603b      	str	r3, [r7, #0]
 80092ee:	4613      	mov	r3, r2
 80092f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092f2:	e0a5      	b.n	8009440 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fa:	f000 80a1 	beq.w	8009440 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092fe:	f7f9 ffb5 	bl	800326c <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800930a:	429a      	cmp	r2, r3
 800930c:	d302      	bcc.n	8009314 <UART_WaitOnFlagUntilTimeout+0x32>
 800930e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009310:	2b00      	cmp	r3, #0
 8009312:	d13e      	bne.n	8009392 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009328:	667b      	str	r3, [r7, #100]	; 0x64
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009334:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e6      	bne.n	8009314 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3308      	adds	r3, #8
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	663b      	str	r3, [r7, #96]	; 0x60
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009366:	64ba      	str	r2, [r7, #72]	; 0x48
 8009368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800936c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e5      	bne.n	8009346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2220      	movs	r2, #32
 800937e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e067      	b.n	8009462 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d04f      	beq.n	8009440 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ae:	d147      	bne.n	8009440 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
 80093da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e6      	bne.n	80093ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	613b      	str	r3, [r7, #16]
   return(result);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	66bb      	str	r3, [r7, #104]	; 0x68
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3308      	adds	r3, #8
 800940a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800940c:	623a      	str	r2, [r7, #32]
 800940e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	69f9      	ldr	r1, [r7, #28]
 8009412:	6a3a      	ldr	r2, [r7, #32]
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	61bb      	str	r3, [r7, #24]
   return(result);
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e5      	bne.n	80093ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2220      	movs	r2, #32
 8009424:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2220      	movs	r2, #32
 800942a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2220      	movs	r2, #32
 8009430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e010      	b.n	8009462 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	4013      	ands	r3, r2
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	429a      	cmp	r2, r3
 800944e:	bf0c      	ite	eq
 8009450:	2301      	moveq	r3, #1
 8009452:	2300      	movne	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	461a      	mov	r2, r3
 8009458:	79fb      	ldrb	r3, [r7, #7]
 800945a:	429a      	cmp	r2, r3
 800945c:	f43f af4a 	beq.w	80092f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3770      	adds	r7, #112	; 0x70
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800946c:	b480      	push	{r7}
 800946e:	b097      	sub	sp, #92	; 0x5c
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	88fa      	ldrh	r2, [r7, #6]
 8009484:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	88fa      	ldrh	r2, [r7, #6]
 800948c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949e:	d10e      	bne.n	80094be <UART_Start_Receive_IT+0x52>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d105      	bne.n	80094b4 <UART_Start_Receive_IT+0x48>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80094ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094b2:	e02d      	b.n	8009510 <UART_Start_Receive_IT+0xa4>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	22ff      	movs	r2, #255	; 0xff
 80094b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094bc:	e028      	b.n	8009510 <UART_Start_Receive_IT+0xa4>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10d      	bne.n	80094e2 <UART_Start_Receive_IT+0x76>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <UART_Start_Receive_IT+0x6c>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	22ff      	movs	r2, #255	; 0xff
 80094d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094d6:	e01b      	b.n	8009510 <UART_Start_Receive_IT+0xa4>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	227f      	movs	r2, #127	; 0x7f
 80094dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094e0:	e016      	b.n	8009510 <UART_Start_Receive_IT+0xa4>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ea:	d10d      	bne.n	8009508 <UART_Start_Receive_IT+0x9c>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d104      	bne.n	80094fe <UART_Start_Receive_IT+0x92>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	227f      	movs	r2, #127	; 0x7f
 80094f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094fc:	e008      	b.n	8009510 <UART_Start_Receive_IT+0xa4>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	223f      	movs	r2, #63	; 0x3f
 8009502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009506:	e003      	b.n	8009510 <UART_Start_Receive_IT+0xa4>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2222      	movs	r2, #34	; 0x22
 800951c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	f043 0301 	orr.w	r3, r3, #1
 8009534:	657b      	str	r3, [r7, #84]	; 0x54
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800953e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955a:	d107      	bne.n	800956c <UART_Start_Receive_IT+0x100>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4a24      	ldr	r2, [pc, #144]	; (80095f8 <UART_Start_Receive_IT+0x18c>)
 8009568:	665a      	str	r2, [r3, #100]	; 0x64
 800956a:	e002      	b.n	8009572 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a23      	ldr	r2, [pc, #140]	; (80095fc <UART_Start_Receive_IT+0x190>)
 8009570:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d019      	beq.n	80095b6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
 80095a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <UART_Start_Receive_IT+0x116>
 80095b4:	e018      	b.n	80095e8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	613b      	str	r3, [r7, #16]
   return(result);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f043 0320 	orr.w	r3, r3, #32
 80095ca:	653b      	str	r3, [r7, #80]	; 0x50
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d4:	623b      	str	r3, [r7, #32]
 80095d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	69f9      	ldr	r1, [r7, #28]
 80095da:	6a3a      	ldr	r2, [r7, #32]
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e6      	bne.n	80095b6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	375c      	adds	r7, #92	; 0x5c
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	08009a1f 	.word	0x08009a1f
 80095fc:	080098bf 	.word	0x080098bf

08009600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b095      	sub	sp, #84	; 0x54
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800961c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009626:	643b      	str	r3, [r7, #64]	; 0x40
 8009628:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800962c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e6      	bne.n	8009608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	61fb      	str	r3, [r7, #28]
   return(result);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	64bb      	str	r3, [r7, #72]	; 0x48
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800965a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800965c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e5      	bne.n	800963a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009672:	2b01      	cmp	r3, #1
 8009674:	d118      	bne.n	80096a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	60bb      	str	r3, [r7, #8]
   return(result);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f023 0310 	bic.w	r3, r3, #16
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009694:	61bb      	str	r3, [r7, #24]
 8009696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6979      	ldr	r1, [r7, #20]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	613b      	str	r3, [r7, #16]
   return(result);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80096ba:	bf00      	nop
 80096bc:	3754      	adds	r7, #84	; 0x54
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff fa43 	bl	8008b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b08f      	sub	sp, #60	; 0x3c
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096fe:	2b21      	cmp	r3, #33	; 0x21
 8009700:	d14d      	bne.n	800979e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009708:	b29b      	uxth	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d132      	bne.n	8009774 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	61fb      	str	r3, [r7, #28]
   return(result);
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009722:	637b      	str	r3, [r7, #52]	; 0x34
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800972e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e6      	bne.n	800970e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	60bb      	str	r3, [r7, #8]
   return(result);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009754:	633b      	str	r3, [r7, #48]	; 0x30
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	461a      	mov	r2, r3
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	61bb      	str	r3, [r7, #24]
 8009760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6979      	ldr	r1, [r7, #20]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	613b      	str	r3, [r7, #16]
   return(result);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e6      	bne.n	8009740 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009772:	e014      	b.n	800979e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	b292      	uxth	r2, r2
 8009780:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009792:	b29b      	uxth	r3, r3
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800979e:	bf00      	nop
 80097a0:	373c      	adds	r7, #60	; 0x3c
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b091      	sub	sp, #68	; 0x44
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097b6:	2b21      	cmp	r3, #33	; 0x21
 80097b8:	d151      	bne.n	800985e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d132      	bne.n	800982c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	623b      	str	r3, [r7, #32]
   return(result);
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097da:	63bb      	str	r3, [r7, #56]	; 0x38
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	633b      	str	r3, [r7, #48]	; 0x30
 80097e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	60fb      	str	r3, [r7, #12]
   return(result);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980c:	637b      	str	r3, [r7, #52]	; 0x34
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	69b9      	ldr	r1, [r7, #24]
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	617b      	str	r3, [r7, #20]
   return(result);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e6      	bne.n	80097f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800982a:	e018      	b.n	800985e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009834:	881a      	ldrh	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800983e:	b292      	uxth	r2, r2
 8009840:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	1c9a      	adds	r2, r3, #2
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009852:	b29b      	uxth	r3, r3
 8009854:	3b01      	subs	r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800985e:	bf00      	nop
 8009860:	3744      	adds	r7, #68	; 0x44
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b088      	sub	sp, #32
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009886:	61fb      	str	r3, [r7, #28]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6979      	ldr	r1, [r7, #20]
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	613b      	str	r3, [r7, #16]
   return(result);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff f953 	bl	8008b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b6:	bf00      	nop
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b096      	sub	sp, #88	; 0x58
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d4:	2b22      	cmp	r3, #34	; 0x22
 80098d6:	f040 8094 	bne.w	8009a02 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80098e8:	b2d9      	uxtb	r1, r3
 80098ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f4:	400a      	ands	r2, r1
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800990a:	b29b      	uxth	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800991c:	b29b      	uxth	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d179      	bne.n	8009a16 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009936:	653b      	str	r3, [r7, #80]	; 0x50
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009940:	647b      	str	r3, [r7, #68]	; 0x44
 8009942:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800994e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e6      	bne.n	8009922 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3308      	adds	r3, #8
 800995a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	e853 3f00 	ldrex	r3, [r3]
 8009962:	623b      	str	r3, [r7, #32]
   return(result);
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	f023 0301 	bic.w	r3, r3, #1
 800996a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3308      	adds	r3, #8
 8009972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009974:	633a      	str	r2, [r7, #48]	; 0x30
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800997a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e5      	bne.n	8009954 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009998:	2b01      	cmp	r3, #1
 800999a:	d12e      	bne.n	80099fa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0310 	bic.w	r3, r3, #16
 80099b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	69b9      	ldr	r1, [r7, #24]
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	617b      	str	r3, [r7, #20]
   return(result);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	f003 0310 	and.w	r3, r3, #16
 80099de:	2b10      	cmp	r3, #16
 80099e0:	d103      	bne.n	80099ea <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2210      	movs	r2, #16
 80099e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff f8c6 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099f8:	e00d      	b.n	8009a16 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7f9 fb70 	bl	80030e0 <HAL_UART_RxCpltCallback>
}
 8009a00:	e009      	b.n	8009a16 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	8b1b      	ldrh	r3, [r3, #24]
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f042 0208 	orr.w	r2, r2, #8
 8009a12:	b292      	uxth	r2, r2
 8009a14:	831a      	strh	r2, [r3, #24]
}
 8009a16:	bf00      	nop
 8009a18:	3758      	adds	r7, #88	; 0x58
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b096      	sub	sp, #88	; 0x58
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a34:	2b22      	cmp	r3, #34	; 0x22
 8009a36:	f040 8094 	bne.w	8009b62 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a4a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009a4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a52:	4013      	ands	r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5e:	1c9a      	adds	r2, r3, #2
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d179      	bne.n	8009b76 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8a:	e853 3f00 	ldrex	r3, [r3]
 8009a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e6      	bne.n	8009a82 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	f023 0301 	bic.w	r3, r3, #1
 8009aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e5      	bne.n	8009ab4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2220      	movs	r2, #32
 8009aec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d12e      	bne.n	8009b5a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	f023 0310 	bic.w	r3, r3, #16
 8009b16:	647b      	str	r3, [r7, #68]	; 0x44
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b20:	61bb      	str	r3, [r7, #24]
 8009b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6979      	ldr	r1, [r7, #20]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e6      	bne.n	8009b02 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	f003 0310 	and.w	r3, r3, #16
 8009b3e:	2b10      	cmp	r3, #16
 8009b40:	d103      	bne.n	8009b4a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2210      	movs	r2, #16
 8009b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff f816 	bl	8008b84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b58:	e00d      	b.n	8009b76 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7f9 fac0 	bl	80030e0 <HAL_UART_RxCpltCallback>
}
 8009b60:	e009      	b.n	8009b76 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	8b1b      	ldrh	r3, [r3, #24]
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0208 	orr.w	r2, r2, #8
 8009b72:	b292      	uxth	r2, r2
 8009b74:	831a      	strh	r2, [r3, #24]
}
 8009b76:	bf00      	nop
 8009b78:	3758      	adds	r7, #88	; 0x58
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	4603      	mov	r3, r0
 8009b9a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ba4:	2b84      	cmp	r3, #132	; 0x84
 8009ba6:	d005      	beq.n	8009bb4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ba8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	3303      	adds	r3, #3
 8009bb2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009bc6:	f000 fec3 	bl	800a950 <vTaskStartScheduler>
  
  return osOK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd2:	b089      	sub	sp, #36	; 0x24
 8009bd4:	af04      	add	r7, sp, #16
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d020      	beq.n	8009c24 <osThreadCreate+0x54>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d01c      	beq.n	8009c24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685c      	ldr	r4, [r3, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681d      	ldr	r5, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691e      	ldr	r6, [r3, #16]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7ff ffc8 	bl	8009b92 <makeFreeRtosPriority>
 8009c02:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c0c:	9202      	str	r2, [sp, #8]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	9100      	str	r1, [sp, #0]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	4632      	mov	r2, r6
 8009c16:	4629      	mov	r1, r5
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fcbb 	bl	800a594 <xTaskCreateStatic>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	e01c      	b.n	8009c5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685c      	ldr	r4, [r3, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c30:	b29e      	uxth	r6, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff ffaa 	bl	8009b92 <makeFreeRtosPriority>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	9200      	str	r2, [sp, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	4632      	mov	r2, r6
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 fcfd 	bl	800a64e <xTaskCreate>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d001      	beq.n	8009c5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e000      	b.n	8009c60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <osDelay+0x16>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	e000      	b.n	8009c80 <osDelay+0x18>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fe31 	bl	800a8e8 <vTaskDelay>
  
  return osOK;
 8009c86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f103 0208 	add.w	r2, r3, #8
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f103 0208 	add.w	r2, r3, #8
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f103 0208 	add.w	r2, r3, #8
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cde:	bf00      	nop
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	601a      	str	r2, [r3, #0]
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d32:	b480      	push	{r7}
 8009d34:	b085      	sub	sp, #20
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d103      	bne.n	8009d52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e00c      	b.n	8009d6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3308      	adds	r3, #8
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	e002      	b.n	8009d60 <vListInsert+0x2e>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d2f6      	bcs.n	8009d5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	601a      	str	r2, [r3, #0]
}
 8009d98:	bf00      	nop
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	6892      	ldr	r2, [r2, #8]
 8009dba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6852      	ldr	r2, [r2, #4]
 8009dc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d103      	bne.n	8009dd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	1e5a      	subs	r2, r3, #1
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e22:	f001 fbdf 	bl	800b5e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2e:	68f9      	ldr	r1, [r7, #12]
 8009e30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e32:	fb01 f303 	mul.w	r3, r1, r3
 8009e36:	441a      	add	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e52:	3b01      	subs	r3, #1
 8009e54:	68f9      	ldr	r1, [r7, #12]
 8009e56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e58:	fb01 f303 	mul.w	r3, r1, r3
 8009e5c:	441a      	add	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	22ff      	movs	r2, #255	; 0xff
 8009e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	; 0xff
 8009e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d114      	bne.n	8009ea2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01a      	beq.n	8009eb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3310      	adds	r3, #16
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 ffb5 	bl	800adf4 <xTaskRemoveFromEventList>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d012      	beq.n	8009eb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <xQueueGenericReset+0xcc>)
 8009e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	e009      	b.n	8009eb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3310      	adds	r3, #16
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fef2 	bl	8009c90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3324      	adds	r3, #36	; 0x24
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff feed 	bl	8009c90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009eb6:	f001 fbc5 	bl	800b644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009eba:	2301      	movs	r3, #1
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	e000ed04 	.word	0xe000ed04

08009ec8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	af02      	add	r7, sp, #8
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10a      	bne.n	8009ef2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	613b      	str	r3, [r7, #16]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	fb02 f303 	mul.w	r3, r2, r3
 8009efa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	3348      	adds	r3, #72	; 0x48
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 fc51 	bl	800b7a8 <pvPortMalloc>
 8009f06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d011      	beq.n	8009f32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	3348      	adds	r3, #72	; 0x48
 8009f16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f20:	79fa      	ldrb	r2, [r7, #7]
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	4613      	mov	r3, r2
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	68b9      	ldr	r1, [r7, #8]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f805 	bl	8009f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f32:	69bb      	ldr	r3, [r7, #24]
	}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3720      	adds	r7, #32
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d103      	bne.n	8009f58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	e002      	b.n	8009f5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	69b8      	ldr	r0, [r7, #24]
 8009f6e:	f7ff ff43 	bl	8009df8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
	...

08009f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08e      	sub	sp, #56	; 0x38
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xQueueGenericSend+0x32>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d103      	bne.n	8009fbc <xQueueGenericSend+0x40>
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <xQueueGenericSend+0x44>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <xQueueGenericSend+0x46>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <xQueueGenericSend+0x60>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fd8:	bf00      	nop
 8009fda:	e7fe      	b.n	8009fda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d103      	bne.n	8009fea <xQueueGenericSend+0x6e>
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <xQueueGenericSend+0x72>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <xQueueGenericSend+0x74>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <xQueueGenericSend+0x8e>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	623b      	str	r3, [r7, #32]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a00a:	f001 f8b3 	bl	800b174 <xTaskGetSchedulerState>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <xQueueGenericSend+0x9e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <xQueueGenericSend+0xa2>
 800a01a:	2301      	movs	r3, #1
 800a01c:	e000      	b.n	800a020 <xQueueGenericSend+0xa4>
 800a01e:	2300      	movs	r3, #0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericSend+0xbe>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	61fb      	str	r3, [r7, #28]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a03a:	f001 fad3 	bl	800b5e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a046:	429a      	cmp	r2, r3
 800a048:	d302      	bcc.n	800a050 <xQueueGenericSend+0xd4>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d129      	bne.n	800a0a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a056:	f000 f98d 	bl	800a374 <prvCopyDataToQueue>
 800a05a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b00      	cmp	r3, #0
 800a062:	d010      	beq.n	800a086 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	3324      	adds	r3, #36	; 0x24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fec3 	bl	800adf4 <xTaskRemoveFromEventList>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d013      	beq.n	800a09c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a074:	4b3f      	ldr	r3, [pc, #252]	; (800a174 <xQueueGenericSend+0x1f8>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	e00a      	b.n	800a09c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a08c:	4b39      	ldr	r3, [pc, #228]	; (800a174 <xQueueGenericSend+0x1f8>)
 800a08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a09c:	f001 fad2 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e063      	b.n	800a16c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0aa:	f001 facb 	bl	800b644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e05c      	b.n	800a16c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0b8:	f107 0314 	add.w	r3, r7, #20
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fefb 	bl	800aeb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0c6:	f001 fabd 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ca:	f000 fcab 	bl	800aa24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0ce:	f001 fa89 	bl	800b5e4 <vPortEnterCritical>
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0d8:	b25b      	sxtb	r3, r3
 800a0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0de:	d103      	bne.n	800a0e8 <xQueueGenericSend+0x16c>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ee:	b25b      	sxtb	r3, r3
 800a0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f4:	d103      	bne.n	800a0fe <xQueueGenericSend+0x182>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0fe:	f001 faa1 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a102:	1d3a      	adds	r2, r7, #4
 800a104:	f107 0314 	add.w	r3, r7, #20
 800a108:	4611      	mov	r1, r2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 feea 	bl	800aee4 <xTaskCheckForTimeOut>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d124      	bne.n	800a160 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a118:	f000 fa24 	bl	800a564 <prvIsQueueFull>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d018      	beq.n	800a154 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	3310      	adds	r3, #16
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 fe3e 	bl	800adac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a132:	f000 f9af 	bl	800a494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a136:	f000 fc83 	bl	800aa40 <xTaskResumeAll>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f af7c 	bne.w	800a03a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a142:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <xQueueGenericSend+0x1f8>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	e772      	b.n	800a03a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a156:	f000 f99d 	bl	800a494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a15a:	f000 fc71 	bl	800aa40 <xTaskResumeAll>
 800a15e:	e76c      	b.n	800a03a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a162:	f000 f997 	bl	800a494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a166:	f000 fc6b 	bl	800aa40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a16a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3738      	adds	r7, #56	; 0x38
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08c      	sub	sp, #48	; 0x30
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a184:	2300      	movs	r3, #0
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10a      	bne.n	800a1a8 <xQueueReceive+0x30>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	623b      	str	r3, [r7, #32]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d103      	bne.n	800a1b6 <xQueueReceive+0x3e>
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <xQueueReceive+0x42>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <xQueueReceive+0x44>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <xQueueReceive+0x5e>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	61fb      	str	r3, [r7, #28]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1d6:	f000 ffcd 	bl	800b174 <xTaskGetSchedulerState>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <xQueueReceive+0x6e>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <xQueueReceive+0x72>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <xQueueReceive+0x74>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueReceive+0x8e>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	61bb      	str	r3, [r7, #24]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a206:	f001 f9ed 	bl	800b5e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	2b00      	cmp	r3, #0
 800a214:	d01f      	beq.n	800a256 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21a:	f000 f915 	bl	800a448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	1e5a      	subs	r2, r3, #1
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00f      	beq.n	800a24e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	3310      	adds	r3, #16
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fdde 	bl	800adf4 <xTaskRemoveFromEventList>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a23e:	4b3d      	ldr	r3, [pc, #244]	; (800a334 <xQueueReceive+0x1bc>)
 800a240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a24e:	f001 f9f9 	bl	800b644 <vPortExitCritical>
				return pdPASS;
 800a252:	2301      	movs	r3, #1
 800a254:	e069      	b.n	800a32a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d103      	bne.n	800a264 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a25c:	f001 f9f2 	bl	800b644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a260:	2300      	movs	r3, #0
 800a262:	e062      	b.n	800a32a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d106      	bne.n	800a278 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a26a:	f107 0310 	add.w	r3, r7, #16
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fe22 	bl	800aeb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a278:	f001 f9e4 	bl	800b644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a27c:	f000 fbd2 	bl	800aa24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a280:	f001 f9b0 	bl	800b5e4 <vPortEnterCritical>
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a28a:	b25b      	sxtb	r3, r3
 800a28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a290:	d103      	bne.n	800a29a <xQueueReceive+0x122>
 800a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a0:	b25b      	sxtb	r3, r3
 800a2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a6:	d103      	bne.n	800a2b0 <xQueueReceive+0x138>
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2b0:	f001 f9c8 	bl	800b644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2b4:	1d3a      	adds	r2, r7, #4
 800a2b6:	f107 0310 	add.w	r3, r7, #16
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fe11 	bl	800aee4 <xTaskCheckForTimeOut>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d123      	bne.n	800a310 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ca:	f000 f935 	bl	800a538 <prvIsQueueEmpty>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d017      	beq.n	800a304 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	3324      	adds	r3, #36	; 0x24
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fd65 	bl	800adac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e4:	f000 f8d6 	bl	800a494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2e8:	f000 fbaa 	bl	800aa40 <xTaskResumeAll>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d189      	bne.n	800a206 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2f2:	4b10      	ldr	r3, [pc, #64]	; (800a334 <xQueueReceive+0x1bc>)
 800a2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	e780      	b.n	800a206 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a306:	f000 f8c5 	bl	800a494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a30a:	f000 fb99 	bl	800aa40 <xTaskResumeAll>
 800a30e:	e77a      	b.n	800a206 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a312:	f000 f8bf 	bl	800a494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a316:	f000 fb93 	bl	800aa40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a31c:	f000 f90c 	bl	800a538 <prvIsQueueEmpty>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	f43f af6f 	beq.w	800a206 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3730      	adds	r7, #48	; 0x30
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	e000ed04 	.word	0xe000ed04

0800a338 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10a      	bne.n	800a35c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60bb      	str	r3, [r7, #8]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a35c:	f001 f942 	bl	800b5e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a366:	f001 f96d 	bl	800b644 <vPortExitCritical>

	return uxReturn;
 800a36a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10d      	bne.n	800a3ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d14d      	bne.n	800a436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 ff06 	bl	800b1b0 <xTaskPriorityDisinherit>
 800a3a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	609a      	str	r2, [r3, #8]
 800a3ac:	e043      	b.n	800a436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d119      	bne.n	800a3e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6858      	ldr	r0, [r3, #4]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68b9      	ldr	r1, [r7, #8]
 800a3c0:	f001 fd37 	bl	800be32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d32b      	bcc.n	800a436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
 800a3e6:	e026      	b.n	800a436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68d8      	ldr	r0, [r3, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	f001 fd1d 	bl	800be32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a400:	425b      	negs	r3, r3
 800a402:	441a      	add	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	68da      	ldr	r2, [r3, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	429a      	cmp	r2, r3
 800a412:	d207      	bcs.n	800a424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41c:	425b      	negs	r3, r3
 800a41e:	441a      	add	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b02      	cmp	r3, #2
 800a428:	d105      	bne.n	800a436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	3b01      	subs	r3, #1
 800a434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a43e:	697b      	ldr	r3, [r7, #20]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d018      	beq.n	800a48c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	441a      	add	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68da      	ldr	r2, [r3, #12]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	429a      	cmp	r2, r3
 800a472:	d303      	bcc.n	800a47c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68d9      	ldr	r1, [r3, #12]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	461a      	mov	r2, r3
 800a486:	6838      	ldr	r0, [r7, #0]
 800a488:	f001 fcd3 	bl	800be32 <memcpy>
	}
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a49c:	f001 f8a2 	bl	800b5e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4a8:	e011      	b.n	800a4ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d012      	beq.n	800a4d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3324      	adds	r3, #36	; 0x24
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fc9c 	bl	800adf4 <xTaskRemoveFromEventList>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4c2:	f000 fd71 	bl	800afa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	dce9      	bgt.n	800a4aa <prvUnlockQueue+0x16>
 800a4d6:	e000      	b.n	800a4da <prvUnlockQueue+0x46>
					break;
 800a4d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	22ff      	movs	r2, #255	; 0xff
 800a4de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4e2:	f001 f8af 	bl	800b644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4e6:	f001 f87d 	bl	800b5e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4f2:	e011      	b.n	800a518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d012      	beq.n	800a522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	3310      	adds	r3, #16
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fc77 	bl	800adf4 <xTaskRemoveFromEventList>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a50c:	f000 fd4c 	bl	800afa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	3b01      	subs	r3, #1
 800a514:	b2db      	uxtb	r3, r3
 800a516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dce9      	bgt.n	800a4f4 <prvUnlockQueue+0x60>
 800a520:	e000      	b.n	800a524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	22ff      	movs	r2, #255	; 0xff
 800a528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a52c:	f001 f88a 	bl	800b644 <vPortExitCritical>
}
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a540:	f001 f850 	bl	800b5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	e001      	b.n	800a556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a556:	f001 f875 	bl	800b644 <vPortExitCritical>

	return xReturn;
 800a55a:	68fb      	ldr	r3, [r7, #12]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a56c:	f001 f83a 	bl	800b5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a578:	429a      	cmp	r2, r3
 800a57a:	d102      	bne.n	800a582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	e001      	b.n	800a586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a586:	f001 f85d 	bl	800b644 <vPortExitCritical>

	return xReturn;
 800a58a:	68fb      	ldr	r3, [r7, #12]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08e      	sub	sp, #56	; 0x38
 800a598:	af04      	add	r7, sp, #16
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	623b      	str	r3, [r7, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10a      	bne.n	800a5da <xTaskCreateStatic+0x46>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	61fb      	str	r3, [r7, #28]
}
 800a5d6:	bf00      	nop
 800a5d8:	e7fe      	b.n	800a5d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5da:	23b4      	movs	r3, #180	; 0xb4
 800a5dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2bb4      	cmp	r3, #180	; 0xb4
 800a5e2:	d00a      	beq.n	800a5fa <xTaskCreateStatic+0x66>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	61bb      	str	r3, [r7, #24]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d01e      	beq.n	800a640 <xTaskCreateStatic+0xac>
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01b      	beq.n	800a640 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a610:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	2202      	movs	r2, #2
 800a616:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a61a:	2300      	movs	r3, #0
 800a61c:	9303      	str	r3, [sp, #12]
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	9302      	str	r3, [sp, #8]
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f850 	bl	800a6d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a63a:	f000 f8eb 	bl	800a814 <prvAddNewTaskToReadyList>
 800a63e:	e001      	b.n	800a644 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a644:	697b      	ldr	r3, [r7, #20]
	}
 800a646:	4618      	mov	r0, r3
 800a648:	3728      	adds	r7, #40	; 0x28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b08c      	sub	sp, #48	; 0x30
 800a652:	af04      	add	r7, sp, #16
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	603b      	str	r3, [r7, #0]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4618      	mov	r0, r3
 800a664:	f001 f8a0 	bl	800b7a8 <pvPortMalloc>
 800a668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00e      	beq.n	800a68e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a670:	20b4      	movs	r0, #180	; 0xb4
 800a672:	f001 f899 	bl	800b7a8 <pvPortMalloc>
 800a676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	631a      	str	r2, [r3, #48]	; 0x30
 800a684:	e005      	b.n	800a692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a686:	6978      	ldr	r0, [r7, #20]
 800a688:	f001 f95a 	bl	800b940 <vPortFree>
 800a68c:	e001      	b.n	800a692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d017      	beq.n	800a6c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6a0:	88fa      	ldrh	r2, [r7, #6]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	9302      	str	r3, [sp, #8]
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f80e 	bl	800a6d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6bc:	69f8      	ldr	r0, [r7, #28]
 800a6be:	f000 f8a9 	bl	800a814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	e002      	b.n	800a6ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6ce:	69bb      	ldr	r3, [r7, #24]
	}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3720      	adds	r7, #32
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	617b      	str	r3, [r7, #20]
}
 800a71c:	bf00      	nop
 800a71e:	e7fe      	b.n	800a71e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d01f      	beq.n	800a766 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
 800a72a:	e012      	b.n	800a752 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	7819      	ldrb	r1, [r3, #0]
 800a734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	4413      	add	r3, r2
 800a73a:	3334      	adds	r3, #52	; 0x34
 800a73c:	460a      	mov	r2, r1
 800a73e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	4413      	add	r3, r2
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d006      	beq.n	800a75a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	3301      	adds	r3, #1
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	2b0f      	cmp	r3, #15
 800a756:	d9e9      	bls.n	800a72c <prvInitialiseNewTask+0x54>
 800a758:	e000      	b.n	800a75c <prvInitialiseNewTask+0x84>
			{
				break;
 800a75a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a764:	e003      	b.n	800a76e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	2b06      	cmp	r3, #6
 800a772:	d901      	bls.n	800a778 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a774:	2306      	movs	r3, #6
 800a776:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a77c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a782:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	2200      	movs	r2, #0
 800a788:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	3304      	adds	r3, #4
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fa9e 	bl	8009cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	3318      	adds	r3, #24
 800a798:	4618      	mov	r0, r3
 800a79a:	f7ff fa99 	bl	8009cd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	f1c3 0207 	rsb	r2, r3, #7
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	334c      	adds	r3, #76	; 0x4c
 800a7c8:	2260      	movs	r2, #96	; 0x60
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 fb3e 	bl	800be4e <memset>
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	4a0c      	ldr	r2, [pc, #48]	; (800a808 <prvInitialiseNewTask+0x130>)
 800a7d6:	651a      	str	r2, [r3, #80]	; 0x50
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	4a0c      	ldr	r2, [pc, #48]	; (800a80c <prvInitialiseNewTask+0x134>)
 800a7dc:	655a      	str	r2, [r3, #84]	; 0x54
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	4a0b      	ldr	r2, [pc, #44]	; (800a810 <prvInitialiseNewTask+0x138>)
 800a7e2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	68f9      	ldr	r1, [r7, #12]
 800a7e8:	69b8      	ldr	r0, [r7, #24]
 800a7ea:	f000 fdcd 	bl	800b388 <pxPortInitialiseStack>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a800:	bf00      	nop
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	08012420 	.word	0x08012420
 800a80c:	08012440 	.word	0x08012440
 800a810:	08012400 	.word	0x08012400

0800a814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a81c:	f000 fee2 	bl	800b5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a820:	4b2a      	ldr	r3, [pc, #168]	; (800a8cc <prvAddNewTaskToReadyList+0xb8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	4a29      	ldr	r2, [pc, #164]	; (800a8cc <prvAddNewTaskToReadyList+0xb8>)
 800a828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a82a:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d109      	bne.n	800a846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a832:	4a27      	ldr	r2, [pc, #156]	; (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a838:	4b24      	ldr	r3, [pc, #144]	; (800a8cc <prvAddNewTaskToReadyList+0xb8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d110      	bne.n	800a862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a840:	f000 fbd6 	bl	800aff0 <prvInitialiseTaskLists>
 800a844:	e00d      	b.n	800a862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a846:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <prvAddNewTaskToReadyList+0xc0>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a84e:	4b20      	ldr	r3, [pc, #128]	; (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a858:	429a      	cmp	r2, r3
 800a85a:	d802      	bhi.n	800a862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a85c:	4a1c      	ldr	r2, [pc, #112]	; (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a862:	4b1d      	ldr	r3, [pc, #116]	; (800a8d8 <prvAddNewTaskToReadyList+0xc4>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3301      	adds	r3, #1
 800a868:	4a1b      	ldr	r2, [pc, #108]	; (800a8d8 <prvAddNewTaskToReadyList+0xc4>)
 800a86a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a870:	2201      	movs	r2, #1
 800a872:	409a      	lsls	r2, r3
 800a874:	4b19      	ldr	r3, [pc, #100]	; (800a8dc <prvAddNewTaskToReadyList+0xc8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4313      	orrs	r3, r2
 800a87a:	4a18      	ldr	r2, [pc, #96]	; (800a8dc <prvAddNewTaskToReadyList+0xc8>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a15      	ldr	r2, [pc, #84]	; (800a8e0 <prvAddNewTaskToReadyList+0xcc>)
 800a88c:	441a      	add	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7ff fa28 	bl	8009cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a89a:	f000 fed3 	bl	800b644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a89e:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <prvAddNewTaskToReadyList+0xc0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00e      	beq.n	800a8c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <prvAddNewTaskToReadyList+0xbc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d207      	bcs.n	800a8c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8b4:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <prvAddNewTaskToReadyList+0xd0>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	2000bd08 	.word	0x2000bd08
 800a8d0:	2000bc08 	.word	0x2000bc08
 800a8d4:	2000bd14 	.word	0x2000bd14
 800a8d8:	2000bd24 	.word	0x2000bd24
 800a8dc:	2000bd10 	.word	0x2000bd10
 800a8e0:	2000bc0c 	.word	0x2000bc0c
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d017      	beq.n	800a92a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8fa:	4b13      	ldr	r3, [pc, #76]	; (800a948 <vTaskDelay+0x60>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00a      	beq.n	800a918 <vTaskDelay+0x30>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	60bb      	str	r3, [r7, #8]
}
 800a914:	bf00      	nop
 800a916:	e7fe      	b.n	800a916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a918:	f000 f884 	bl	800aa24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fccc 	bl	800b2bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a924:	f000 f88c 	bl	800aa40 <xTaskResumeAll>
 800a928:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d107      	bne.n	800a940 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a930:	4b06      	ldr	r3, [pc, #24]	; (800a94c <vTaskDelay+0x64>)
 800a932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a940:	bf00      	nop
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	2000bd30 	.word	0x2000bd30
 800a94c:	e000ed04 	.word	0xe000ed04

0800a950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08a      	sub	sp, #40	; 0x28
 800a954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a956:	2300      	movs	r3, #0
 800a958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a95e:	463a      	mov	r2, r7
 800a960:	1d39      	adds	r1, r7, #4
 800a962:	f107 0308 	add.w	r3, r7, #8
 800a966:	4618      	mov	r0, r3
 800a968:	f7f7 f844 	bl	80019f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	9202      	str	r2, [sp, #8]
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	2300      	movs	r3, #0
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	2300      	movs	r3, #0
 800a97c:	460a      	mov	r2, r1
 800a97e:	4921      	ldr	r1, [pc, #132]	; (800aa04 <vTaskStartScheduler+0xb4>)
 800a980:	4821      	ldr	r0, [pc, #132]	; (800aa08 <vTaskStartScheduler+0xb8>)
 800a982:	f7ff fe07 	bl	800a594 <xTaskCreateStatic>
 800a986:	4603      	mov	r3, r0
 800a988:	4a20      	ldr	r2, [pc, #128]	; (800aa0c <vTaskStartScheduler+0xbc>)
 800a98a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a98c:	4b1f      	ldr	r3, [pc, #124]	; (800aa0c <vTaskStartScheduler+0xbc>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a994:	2301      	movs	r3, #1
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	e001      	b.n	800a99e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d11b      	bne.n	800a9dc <vTaskStartScheduler+0x8c>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	613b      	str	r3, [r7, #16]
}
 800a9b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9b8:	4b15      	ldr	r3, [pc, #84]	; (800aa10 <vTaskStartScheduler+0xc0>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	334c      	adds	r3, #76	; 0x4c
 800a9be:	4a15      	ldr	r2, [pc, #84]	; (800aa14 <vTaskStartScheduler+0xc4>)
 800a9c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9c2:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <vTaskStartScheduler+0xc8>)
 800a9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9ca:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <vTaskStartScheduler+0xcc>)
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9d0:	4b13      	ldr	r3, [pc, #76]	; (800aa20 <vTaskStartScheduler+0xd0>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9d6:	f000 fd63 	bl	800b4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9da:	e00e      	b.n	800a9fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d10a      	bne.n	800a9fa <vTaskStartScheduler+0xaa>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	60fb      	str	r3, [r7, #12]
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <vTaskStartScheduler+0xa8>
}
 800a9fa:	bf00      	nop
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	08012208 	.word	0x08012208
 800aa08:	0800afc1 	.word	0x0800afc1
 800aa0c:	2000bd2c 	.word	0x2000bd2c
 800aa10:	2000bc08 	.word	0x2000bc08
 800aa14:	2000023c 	.word	0x2000023c
 800aa18:	2000bd28 	.word	0x2000bd28
 800aa1c:	2000bd14 	.word	0x2000bd14
 800aa20:	2000bd0c 	.word	0x2000bd0c

0800aa24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa28:	4b04      	ldr	r3, [pc, #16]	; (800aa3c <vTaskSuspendAll+0x18>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	4a03      	ldr	r2, [pc, #12]	; (800aa3c <vTaskSuspendAll+0x18>)
 800aa30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa32:	bf00      	nop
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	2000bd30 	.word	0x2000bd30

0800aa40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa4e:	4b41      	ldr	r3, [pc, #260]	; (800ab54 <xTaskResumeAll+0x114>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <xTaskResumeAll+0x2c>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	603b      	str	r3, [r7, #0]
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa6c:	f000 fdba 	bl	800b5e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa70:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <xTaskResumeAll+0x114>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3b01      	subs	r3, #1
 800aa76:	4a37      	ldr	r2, [pc, #220]	; (800ab54 <xTaskResumeAll+0x114>)
 800aa78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7a:	4b36      	ldr	r3, [pc, #216]	; (800ab54 <xTaskResumeAll+0x114>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d161      	bne.n	800ab46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa82:	4b35      	ldr	r3, [pc, #212]	; (800ab58 <xTaskResumeAll+0x118>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d05d      	beq.n	800ab46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa8a:	e02e      	b.n	800aaea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8c:	4b33      	ldr	r3, [pc, #204]	; (800ab5c <xTaskResumeAll+0x11c>)
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3318      	adds	r3, #24
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff f983 	bl	8009da4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff f97e 	bl	8009da4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	2201      	movs	r2, #1
 800aaae:	409a      	lsls	r2, r3
 800aab0:	4b2b      	ldr	r3, [pc, #172]	; (800ab60 <xTaskResumeAll+0x120>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	4a2a      	ldr	r2, [pc, #168]	; (800ab60 <xTaskResumeAll+0x120>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4a27      	ldr	r2, [pc, #156]	; (800ab64 <xTaskResumeAll+0x124>)
 800aac8:	441a      	add	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7ff f90a 	bl	8009cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aada:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <xTaskResumeAll+0x128>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d302      	bcc.n	800aaea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800aae4:	4b21      	ldr	r3, [pc, #132]	; (800ab6c <xTaskResumeAll+0x12c>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaea:	4b1c      	ldr	r3, [pc, #112]	; (800ab5c <xTaskResumeAll+0x11c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1cc      	bne.n	800aa8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aaf8:	f000 fb1c 	bl	800b134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aafc:	4b1c      	ldr	r3, [pc, #112]	; (800ab70 <xTaskResumeAll+0x130>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d010      	beq.n	800ab2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab08:	f000 f836 	bl	800ab78 <xTaskIncrementTick>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ab12:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <xTaskResumeAll+0x12c>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f1      	bne.n	800ab08 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ab24:	4b12      	ldr	r3, [pc, #72]	; (800ab70 <xTaskResumeAll+0x130>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab2a:	4b10      	ldr	r3, [pc, #64]	; (800ab6c <xTaskResumeAll+0x12c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab36:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <xTaskResumeAll+0x134>)
 800ab38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab46:	f000 fd7d 	bl	800b644 <vPortExitCritical>

	return xAlreadyYielded;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	2000bd30 	.word	0x2000bd30
 800ab58:	2000bd08 	.word	0x2000bd08
 800ab5c:	2000bcc8 	.word	0x2000bcc8
 800ab60:	2000bd10 	.word	0x2000bd10
 800ab64:	2000bc0c 	.word	0x2000bc0c
 800ab68:	2000bc08 	.word	0x2000bc08
 800ab6c:	2000bd1c 	.word	0x2000bd1c
 800ab70:	2000bd18 	.word	0x2000bd18
 800ab74:	e000ed04 	.word	0xe000ed04

0800ab78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab82:	4b4e      	ldr	r3, [pc, #312]	; (800acbc <xTaskIncrementTick+0x144>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f040 808e 	bne.w	800aca8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab8c:	4b4c      	ldr	r3, [pc, #304]	; (800acc0 <xTaskIncrementTick+0x148>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3301      	adds	r3, #1
 800ab92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab94:	4a4a      	ldr	r2, [pc, #296]	; (800acc0 <xTaskIncrementTick+0x148>)
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d120      	bne.n	800abe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aba0:	4b48      	ldr	r3, [pc, #288]	; (800acc4 <xTaskIncrementTick+0x14c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <xTaskIncrementTick+0x48>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	603b      	str	r3, [r7, #0]
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <xTaskIncrementTick+0x46>
 800abc0:	4b40      	ldr	r3, [pc, #256]	; (800acc4 <xTaskIncrementTick+0x14c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	4b40      	ldr	r3, [pc, #256]	; (800acc8 <xTaskIncrementTick+0x150>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a3e      	ldr	r2, [pc, #248]	; (800acc4 <xTaskIncrementTick+0x14c>)
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	4a3e      	ldr	r2, [pc, #248]	; (800acc8 <xTaskIncrementTick+0x150>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6013      	str	r3, [r2, #0]
 800abd4:	4b3d      	ldr	r3, [pc, #244]	; (800accc <xTaskIncrementTick+0x154>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	4a3c      	ldr	r2, [pc, #240]	; (800accc <xTaskIncrementTick+0x154>)
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	f000 faa9 	bl	800b134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abe2:	4b3b      	ldr	r3, [pc, #236]	; (800acd0 <xTaskIncrementTick+0x158>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d348      	bcc.n	800ac7e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abec:	4b35      	ldr	r3, [pc, #212]	; (800acc4 <xTaskIncrementTick+0x14c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d104      	bne.n	800ac00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abf6:	4b36      	ldr	r3, [pc, #216]	; (800acd0 <xTaskIncrementTick+0x158>)
 800abf8:	f04f 32ff 	mov.w	r2, #4294967295
 800abfc:	601a      	str	r2, [r3, #0]
					break;
 800abfe:	e03e      	b.n	800ac7e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac00:	4b30      	ldr	r3, [pc, #192]	; (800acc4 <xTaskIncrementTick+0x14c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d203      	bcs.n	800ac20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac18:	4a2d      	ldr	r2, [pc, #180]	; (800acd0 <xTaskIncrementTick+0x158>)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac1e:	e02e      	b.n	800ac7e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff f8bd 	bl	8009da4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d004      	beq.n	800ac3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	3318      	adds	r3, #24
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff f8b4 	bl	8009da4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	2201      	movs	r2, #1
 800ac42:	409a      	lsls	r2, r3
 800ac44:	4b23      	ldr	r3, [pc, #140]	; (800acd4 <xTaskIncrementTick+0x15c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	4a22      	ldr	r2, [pc, #136]	; (800acd4 <xTaskIncrementTick+0x15c>)
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4a1f      	ldr	r2, [pc, #124]	; (800acd8 <xTaskIncrementTick+0x160>)
 800ac5c:	441a      	add	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3304      	adds	r3, #4
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7ff f840 	bl	8009cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6e:	4b1b      	ldr	r3, [pc, #108]	; (800acdc <xTaskIncrementTick+0x164>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d3b9      	bcc.n	800abec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac7c:	e7b6      	b.n	800abec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac7e:	4b17      	ldr	r3, [pc, #92]	; (800acdc <xTaskIncrementTick+0x164>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4914      	ldr	r1, [pc, #80]	; (800acd8 <xTaskIncrementTick+0x160>)
 800ac86:	4613      	mov	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	440b      	add	r3, r1
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d901      	bls.n	800ac9a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac9a:	4b11      	ldr	r3, [pc, #68]	; (800ace0 <xTaskIncrementTick+0x168>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aca2:	2301      	movs	r3, #1
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	e004      	b.n	800acb2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aca8:	4b0e      	ldr	r3, [pc, #56]	; (800ace4 <xTaskIncrementTick+0x16c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3301      	adds	r3, #1
 800acae:	4a0d      	ldr	r2, [pc, #52]	; (800ace4 <xTaskIncrementTick+0x16c>)
 800acb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800acb2:	697b      	ldr	r3, [r7, #20]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	2000bd30 	.word	0x2000bd30
 800acc0:	2000bd0c 	.word	0x2000bd0c
 800acc4:	2000bcc0 	.word	0x2000bcc0
 800acc8:	2000bcc4 	.word	0x2000bcc4
 800accc:	2000bd20 	.word	0x2000bd20
 800acd0:	2000bd28 	.word	0x2000bd28
 800acd4:	2000bd10 	.word	0x2000bd10
 800acd8:	2000bc0c 	.word	0x2000bc0c
 800acdc:	2000bc08 	.word	0x2000bc08
 800ace0:	2000bd1c 	.word	0x2000bd1c
 800ace4:	2000bd18 	.word	0x2000bd18

0800ace8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acee:	4b29      	ldr	r3, [pc, #164]	; (800ad94 <vTaskSwitchContext+0xac>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800acf6:	4b28      	ldr	r3, [pc, #160]	; (800ad98 <vTaskSwitchContext+0xb0>)
 800acf8:	2201      	movs	r2, #1
 800acfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800acfc:	e044      	b.n	800ad88 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800acfe:	4b26      	ldr	r3, [pc, #152]	; (800ad98 <vTaskSwitchContext+0xb0>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad04:	4b25      	ldr	r3, [pc, #148]	; (800ad9c <vTaskSwitchContext+0xb4>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	fab3 f383 	clz	r3, r3
 800ad10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	f1c3 031f 	rsb	r3, r3, #31
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	4921      	ldr	r1, [pc, #132]	; (800ada0 <vTaskSwitchContext+0xb8>)
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	440b      	add	r3, r1
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	607b      	str	r3, [r7, #4]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <vTaskSwitchContext+0x5a>
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4613      	mov	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4a14      	ldr	r2, [pc, #80]	; (800ada0 <vTaskSwitchContext+0xb8>)
 800ad50:	4413      	add	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	605a      	str	r2, [r3, #4]
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	3308      	adds	r3, #8
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d104      	bne.n	800ad74 <vTaskSwitchContext+0x8c>
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	605a      	str	r2, [r3, #4]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	4a0a      	ldr	r2, [pc, #40]	; (800ada4 <vTaskSwitchContext+0xbc>)
 800ad7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad7e:	4b09      	ldr	r3, [pc, #36]	; (800ada4 <vTaskSwitchContext+0xbc>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	334c      	adds	r3, #76	; 0x4c
 800ad84:	4a08      	ldr	r2, [pc, #32]	; (800ada8 <vTaskSwitchContext+0xc0>)
 800ad86:	6013      	str	r3, [r2, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	371c      	adds	r7, #28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	2000bd30 	.word	0x2000bd30
 800ad98:	2000bd1c 	.word	0x2000bd1c
 800ad9c:	2000bd10 	.word	0x2000bd10
 800ada0:	2000bc0c 	.word	0x2000bc0c
 800ada4:	2000bc08 	.word	0x2000bc08
 800ada8:	2000023c 	.word	0x2000023c

0800adac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	60fb      	str	r3, [r7, #12]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800add2:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <vTaskPlaceOnEventList+0x44>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3318      	adds	r3, #24
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7fe ffa9 	bl	8009d32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ade0:	2101      	movs	r1, #1
 800ade2:	6838      	ldr	r0, [r7, #0]
 800ade4:	f000 fa6a 	bl	800b2bc <prvAddCurrentTaskToDelayedList>
}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	2000bc08 	.word	0x2000bc08

0800adf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	60fb      	str	r3, [r7, #12]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	3318      	adds	r3, #24
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe ffbd 	bl	8009da4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae2a:	4b1d      	ldr	r3, [pc, #116]	; (800aea0 <xTaskRemoveFromEventList+0xac>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d11c      	bne.n	800ae6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	3304      	adds	r3, #4
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe ffb4 	bl	8009da4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	2201      	movs	r2, #1
 800ae42:	409a      	lsls	r2, r3
 800ae44:	4b17      	ldr	r3, [pc, #92]	; (800aea4 <xTaskRemoveFromEventList+0xb0>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	4a16      	ldr	r2, [pc, #88]	; (800aea4 <xTaskRemoveFromEventList+0xb0>)
 800ae4c:	6013      	str	r3, [r2, #0]
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4a13      	ldr	r2, [pc, #76]	; (800aea8 <xTaskRemoveFromEventList+0xb4>)
 800ae5c:	441a      	add	r2, r3
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3304      	adds	r3, #4
 800ae62:	4619      	mov	r1, r3
 800ae64:	4610      	mov	r0, r2
 800ae66:	f7fe ff40 	bl	8009cea <vListInsertEnd>
 800ae6a:	e005      	b.n	800ae78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	3318      	adds	r3, #24
 800ae70:	4619      	mov	r1, r3
 800ae72:	480e      	ldr	r0, [pc, #56]	; (800aeac <xTaskRemoveFromEventList+0xb8>)
 800ae74:	f7fe ff39 	bl	8009cea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <xTaskRemoveFromEventList+0xbc>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d905      	bls.n	800ae92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae86:	2301      	movs	r3, #1
 800ae88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <xTaskRemoveFromEventList+0xc0>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	e001      	b.n	800ae96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae96:	697b      	ldr	r3, [r7, #20]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	2000bd30 	.word	0x2000bd30
 800aea4:	2000bd10 	.word	0x2000bd10
 800aea8:	2000bc0c 	.word	0x2000bc0c
 800aeac:	2000bcc8 	.word	0x2000bcc8
 800aeb0:	2000bc08 	.word	0x2000bc08
 800aeb4:	2000bd1c 	.word	0x2000bd1c

0800aeb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <vTaskInternalSetTimeOutState+0x24>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <vTaskInternalSetTimeOutState+0x28>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	605a      	str	r2, [r3, #4]
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	2000bd20 	.word	0x2000bd20
 800aee0:	2000bd0c 	.word	0x2000bd0c

0800aee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	613b      	str	r3, [r7, #16]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	60fb      	str	r3, [r7, #12]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af26:	f000 fb5d 	bl	800b5e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <xTaskCheckForTimeOut+0xbc>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af42:	d102      	bne.n	800af4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af44:	2300      	movs	r3, #0
 800af46:	61fb      	str	r3, [r7, #28]
 800af48:	e023      	b.n	800af92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b15      	ldr	r3, [pc, #84]	; (800afa4 <xTaskCheckForTimeOut+0xc0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	429a      	cmp	r2, r3
 800af54:	d007      	beq.n	800af66 <xTaskCheckForTimeOut+0x82>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d302      	bcc.n	800af66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	61fb      	str	r3, [r7, #28]
 800af64:	e015      	b.n	800af92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d20b      	bcs.n	800af88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	1ad2      	subs	r2, r2, r3
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7ff ff9b 	bl	800aeb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af82:	2300      	movs	r3, #0
 800af84:	61fb      	str	r3, [r7, #28]
 800af86:	e004      	b.n	800af92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af8e:	2301      	movs	r3, #1
 800af90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af92:	f000 fb57 	bl	800b644 <vPortExitCritical>

	return xReturn;
 800af96:	69fb      	ldr	r3, [r7, #28]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	2000bd0c 	.word	0x2000bd0c
 800afa4:	2000bd20 	.word	0x2000bd20

0800afa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800afac:	4b03      	ldr	r3, [pc, #12]	; (800afbc <vTaskMissedYield+0x14>)
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
}
 800afb2:	bf00      	nop
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	2000bd1c 	.word	0x2000bd1c

0800afc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afc8:	f000 f852 	bl	800b070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afcc:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <prvIdleTask+0x28>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d9f9      	bls.n	800afc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <prvIdleTask+0x2c>)
 800afd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afe4:	e7f0      	b.n	800afc8 <prvIdleTask+0x8>
 800afe6:	bf00      	nop
 800afe8:	2000bc0c 	.word	0x2000bc0c
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aff6:	2300      	movs	r3, #0
 800aff8:	607b      	str	r3, [r7, #4]
 800affa:	e00c      	b.n	800b016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4a12      	ldr	r2, [pc, #72]	; (800b050 <prvInitialiseTaskLists+0x60>)
 800b008:	4413      	add	r3, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fe40 	bl	8009c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3301      	adds	r3, #1
 800b014:	607b      	str	r3, [r7, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b06      	cmp	r3, #6
 800b01a:	d9ef      	bls.n	800affc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b01c:	480d      	ldr	r0, [pc, #52]	; (800b054 <prvInitialiseTaskLists+0x64>)
 800b01e:	f7fe fe37 	bl	8009c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b022:	480d      	ldr	r0, [pc, #52]	; (800b058 <prvInitialiseTaskLists+0x68>)
 800b024:	f7fe fe34 	bl	8009c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b028:	480c      	ldr	r0, [pc, #48]	; (800b05c <prvInitialiseTaskLists+0x6c>)
 800b02a:	f7fe fe31 	bl	8009c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b02e:	480c      	ldr	r0, [pc, #48]	; (800b060 <prvInitialiseTaskLists+0x70>)
 800b030:	f7fe fe2e 	bl	8009c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b034:	480b      	ldr	r0, [pc, #44]	; (800b064 <prvInitialiseTaskLists+0x74>)
 800b036:	f7fe fe2b 	bl	8009c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b03a:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <prvInitialiseTaskLists+0x78>)
 800b03c:	4a05      	ldr	r2, [pc, #20]	; (800b054 <prvInitialiseTaskLists+0x64>)
 800b03e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <prvInitialiseTaskLists+0x7c>)
 800b042:	4a05      	ldr	r2, [pc, #20]	; (800b058 <prvInitialiseTaskLists+0x68>)
 800b044:	601a      	str	r2, [r3, #0]
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	2000bc0c 	.word	0x2000bc0c
 800b054:	2000bc98 	.word	0x2000bc98
 800b058:	2000bcac 	.word	0x2000bcac
 800b05c:	2000bcc8 	.word	0x2000bcc8
 800b060:	2000bcdc 	.word	0x2000bcdc
 800b064:	2000bcf4 	.word	0x2000bcf4
 800b068:	2000bcc0 	.word	0x2000bcc0
 800b06c:	2000bcc4 	.word	0x2000bcc4

0800b070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b076:	e019      	b.n	800b0ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b078:	f000 fab4 	bl	800b5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07c:	4b10      	ldr	r3, [pc, #64]	; (800b0c0 <prvCheckTasksWaitingTermination+0x50>)
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3304      	adds	r3, #4
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fe8b 	bl	8009da4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b08e:	4b0d      	ldr	r3, [pc, #52]	; (800b0c4 <prvCheckTasksWaitingTermination+0x54>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3b01      	subs	r3, #1
 800b094:	4a0b      	ldr	r2, [pc, #44]	; (800b0c4 <prvCheckTasksWaitingTermination+0x54>)
 800b096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <prvCheckTasksWaitingTermination+0x58>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4a0a      	ldr	r2, [pc, #40]	; (800b0c8 <prvCheckTasksWaitingTermination+0x58>)
 800b0a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b0a2:	f000 facf 	bl	800b644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f810 	bl	800b0cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <prvCheckTasksWaitingTermination+0x58>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e1      	bne.n	800b078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	2000bcdc 	.word	0x2000bcdc
 800b0c4:	2000bd08 	.word	0x2000bd08
 800b0c8:	2000bcf0 	.word	0x2000bcf0

0800b0cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	334c      	adds	r3, #76	; 0x4c
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 ff37 	bl	800cf4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d108      	bne.n	800b0fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 fc27 	bl	800b940 <vPortFree>
				vPortFree( pxTCB );
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fc24 	bl	800b940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0f8:	e018      	b.n	800b12c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b100:	2b01      	cmp	r3, #1
 800b102:	d103      	bne.n	800b10c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc1b 	bl	800b940 <vPortFree>
	}
 800b10a:	e00f      	b.n	800b12c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b112:	2b02      	cmp	r3, #2
 800b114:	d00a      	beq.n	800b12c <prvDeleteTCB+0x60>
	__asm volatile
 800b116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11a:	f383 8811 	msr	BASEPRI, r3
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	60fb      	str	r3, [r7, #12]
}
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <prvDeleteTCB+0x5e>
	}
 800b12c:	bf00      	nop
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b13a:	4b0c      	ldr	r3, [pc, #48]	; (800b16c <prvResetNextTaskUnblockTime+0x38>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d104      	bne.n	800b14e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b144:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <prvResetNextTaskUnblockTime+0x3c>)
 800b146:	f04f 32ff 	mov.w	r2, #4294967295
 800b14a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b14c:	e008      	b.n	800b160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b14e:	4b07      	ldr	r3, [pc, #28]	; (800b16c <prvResetNextTaskUnblockTime+0x38>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4a04      	ldr	r2, [pc, #16]	; (800b170 <prvResetNextTaskUnblockTime+0x3c>)
 800b15e:	6013      	str	r3, [r2, #0]
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	2000bcc0 	.word	0x2000bcc0
 800b170:	2000bd28 	.word	0x2000bd28

0800b174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b17a:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <xTaskGetSchedulerState+0x34>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d102      	bne.n	800b188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b182:	2301      	movs	r3, #1
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	e008      	b.n	800b19a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b188:	4b08      	ldr	r3, [pc, #32]	; (800b1ac <xTaskGetSchedulerState+0x38>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d102      	bne.n	800b196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b190:	2302      	movs	r3, #2
 800b192:	607b      	str	r3, [r7, #4]
 800b194:	e001      	b.n	800b19a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b196:	2300      	movs	r3, #0
 800b198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b19a:	687b      	ldr	r3, [r7, #4]
	}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	2000bd14 	.word	0x2000bd14
 800b1ac:	2000bd30 	.word	0x2000bd30

0800b1b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d06e      	beq.n	800b2a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1c6:	4b3a      	ldr	r3, [pc, #232]	; (800b2b0 <xTaskPriorityDisinherit+0x100>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d00a      	beq.n	800b1e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	60bb      	str	r3, [r7, #8]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b208:	1e5a      	subs	r2, r3, #1
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b216:	429a      	cmp	r2, r3
 800b218:	d044      	beq.n	800b2a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d140      	bne.n	800b2a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	3304      	adds	r3, #4
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fdbc 	bl	8009da4 <uxListRemove>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d115      	bne.n	800b25e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	491f      	ldr	r1, [pc, #124]	; (800b2b4 <xTaskPriorityDisinherit+0x104>)
 800b238:	4613      	mov	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	440b      	add	r3, r1
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTaskPriorityDisinherit+0xae>
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	2201      	movs	r2, #1
 800b24e:	fa02 f303 	lsl.w	r3, r2, r3
 800b252:	43da      	mvns	r2, r3
 800b254:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <xTaskPriorityDisinherit+0x108>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4013      	ands	r3, r2
 800b25a:	4a17      	ldr	r2, [pc, #92]	; (800b2b8 <xTaskPriorityDisinherit+0x108>)
 800b25c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26a:	f1c3 0207 	rsb	r2, r3, #7
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	2201      	movs	r2, #1
 800b278:	409a      	lsls	r2, r3
 800b27a:	4b0f      	ldr	r3, [pc, #60]	; (800b2b8 <xTaskPriorityDisinherit+0x108>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4313      	orrs	r3, r2
 800b280:	4a0d      	ldr	r2, [pc, #52]	; (800b2b8 <xTaskPriorityDisinherit+0x108>)
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4a08      	ldr	r2, [pc, #32]	; (800b2b4 <xTaskPriorityDisinherit+0x104>)
 800b292:	441a      	add	r2, r3
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	3304      	adds	r3, #4
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7fe fd25 	bl	8009cea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2a4:	697b      	ldr	r3, [r7, #20]
	}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	2000bc08 	.word	0x2000bc08
 800b2b4:	2000bc0c 	.word	0x2000bc0c
 800b2b8:	2000bd10 	.word	0x2000bd10

0800b2bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2c6:	4b29      	ldr	r3, [pc, #164]	; (800b36c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2cc:	4b28      	ldr	r3, [pc, #160]	; (800b370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fd66 	bl	8009da4 <uxListRemove>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10b      	bne.n	800b2f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b2de:	4b24      	ldr	r3, [pc, #144]	; (800b370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ea:	43da      	mvns	r2, r3
 800b2ec:	4b21      	ldr	r3, [pc, #132]	; (800b374 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	4a20      	ldr	r2, [pc, #128]	; (800b374 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b2f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d10a      	bne.n	800b314 <prvAddCurrentTaskToDelayedList+0x58>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b304:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3304      	adds	r3, #4
 800b30a:	4619      	mov	r1, r3
 800b30c:	481a      	ldr	r0, [pc, #104]	; (800b378 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b30e:	f7fe fcec 	bl	8009cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b312:	e026      	b.n	800b362 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4413      	add	r3, r2
 800b31a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b31c:	4b14      	ldr	r3, [pc, #80]	; (800b370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d209      	bcs.n	800b340 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b32c:	4b13      	ldr	r3, [pc, #76]	; (800b37c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3304      	adds	r3, #4
 800b336:	4619      	mov	r1, r3
 800b338:	4610      	mov	r0, r2
 800b33a:	f7fe fcfa 	bl	8009d32 <vListInsert>
}
 800b33e:	e010      	b.n	800b362 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b340:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3304      	adds	r3, #4
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f7fe fcf0 	bl	8009d32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b352:	4b0c      	ldr	r3, [pc, #48]	; (800b384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d202      	bcs.n	800b362 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b35c:	4a09      	ldr	r2, [pc, #36]	; (800b384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	6013      	str	r3, [r2, #0]
}
 800b362:	bf00      	nop
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000bd0c 	.word	0x2000bd0c
 800b370:	2000bc08 	.word	0x2000bc08
 800b374:	2000bd10 	.word	0x2000bd10
 800b378:	2000bcf4 	.word	0x2000bcf4
 800b37c:	2000bcc4 	.word	0x2000bcc4
 800b380:	2000bcc0 	.word	0x2000bcc0
 800b384:	2000bd28 	.word	0x2000bd28

0800b388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3b04      	subs	r3, #4
 800b398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3b04      	subs	r3, #4
 800b3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f023 0201 	bic.w	r2, r3, #1
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3b04      	subs	r3, #4
 800b3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3b8:	4a0c      	ldr	r2, [pc, #48]	; (800b3ec <pxPortInitialiseStack+0x64>)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3b14      	subs	r3, #20
 800b3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3b04      	subs	r3, #4
 800b3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f06f 0202 	mvn.w	r2, #2
 800b3d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3b20      	subs	r3, #32
 800b3dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3de:	68fb      	ldr	r3, [r7, #12]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	0800b3f1 	.word	0x0800b3f1

0800b3f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3fa:	4b12      	ldr	r3, [pc, #72]	; (800b444 <prvTaskExitError+0x54>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b402:	d00a      	beq.n	800b41a <prvTaskExitError+0x2a>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <prvTaskExitError+0x28>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	60bb      	str	r3, [r7, #8]
}
 800b42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b42e:	bf00      	nop
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0fc      	beq.n	800b430 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	20000238 	.word	0x20000238
	...

0800b450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <pxCurrentTCBConst2>)
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	6808      	ldr	r0, [r1, #0]
 800b456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45a:	f380 8809 	msr	PSP, r0
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f04f 0000 	mov.w	r0, #0
 800b466:	f380 8811 	msr	BASEPRI, r0
 800b46a:	4770      	bx	lr
 800b46c:	f3af 8000 	nop.w

0800b470 <pxCurrentTCBConst2>:
 800b470:	2000bc08 	.word	0x2000bc08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop

0800b478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b478:	4808      	ldr	r0, [pc, #32]	; (800b49c <prvPortStartFirstTask+0x24>)
 800b47a:	6800      	ldr	r0, [r0, #0]
 800b47c:	6800      	ldr	r0, [r0, #0]
 800b47e:	f380 8808 	msr	MSP, r0
 800b482:	f04f 0000 	mov.w	r0, #0
 800b486:	f380 8814 	msr	CONTROL, r0
 800b48a:	b662      	cpsie	i
 800b48c:	b661      	cpsie	f
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	df00      	svc	0
 800b498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b49a:	bf00      	nop
 800b49c:	e000ed08 	.word	0xe000ed08

0800b4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4a6:	4b46      	ldr	r3, [pc, #280]	; (800b5c0 <xPortStartScheduler+0x120>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a46      	ldr	r2, [pc, #280]	; (800b5c4 <xPortStartScheduler+0x124>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d10a      	bne.n	800b4c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	613b      	str	r3, [r7, #16]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	; (800b5c0 <xPortStartScheduler+0x120>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a3f      	ldr	r2, [pc, #252]	; (800b5c8 <xPortStartScheduler+0x128>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10a      	bne.n	800b4e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	60fb      	str	r3, [r7, #12]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4e6:	4b39      	ldr	r3, [pc, #228]	; (800b5cc <xPortStartScheduler+0x12c>)
 800b4e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	22ff      	movs	r2, #255	; 0xff
 800b4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <xPortStartScheduler+0x130>)
 800b50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b50e:	4b31      	ldr	r3, [pc, #196]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b510:	2207      	movs	r2, #7
 800b512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b514:	e009      	b.n	800b52a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b516:	4b2f      	ldr	r3, [pc, #188]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	4a2d      	ldr	r2, [pc, #180]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	b2db      	uxtb	r3, r3
 800b528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b532:	2b80      	cmp	r3, #128	; 0x80
 800b534:	d0ef      	beq.n	800b516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b536:	4b27      	ldr	r3, [pc, #156]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f1c3 0307 	rsb	r3, r3, #7
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d00a      	beq.n	800b558 <xPortStartScheduler+0xb8>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	60bb      	str	r3, [r7, #8]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b558:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b562:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b56a:	4a1a      	ldr	r2, [pc, #104]	; (800b5d4 <xPortStartScheduler+0x134>)
 800b56c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	b2da      	uxtb	r2, r3
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b576:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a17      	ldr	r2, [pc, #92]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b57c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b582:	4b15      	ldr	r3, [pc, #84]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a14      	ldr	r2, [pc, #80]	; (800b5d8 <xPortStartScheduler+0x138>)
 800b588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b58c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b58e:	f000 f8dd 	bl	800b74c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b592:	4b12      	ldr	r3, [pc, #72]	; (800b5dc <xPortStartScheduler+0x13c>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b598:	f000 f8fc 	bl	800b794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <xPortStartScheduler+0x140>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a0f      	ldr	r2, [pc, #60]	; (800b5e0 <xPortStartScheduler+0x140>)
 800b5a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5a8:	f7ff ff66 	bl	800b478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5ac:	f7ff fb9c 	bl	800ace8 <vTaskSwitchContext>
	prvTaskExitError();
 800b5b0:	f7ff ff1e 	bl	800b3f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	e000ed00 	.word	0xe000ed00
 800b5c4:	410fc271 	.word	0x410fc271
 800b5c8:	410fc270 	.word	0x410fc270
 800b5cc:	e000e400 	.word	0xe000e400
 800b5d0:	2000bd34 	.word	0x2000bd34
 800b5d4:	2000bd38 	.word	0x2000bd38
 800b5d8:	e000ed20 	.word	0xe000ed20
 800b5dc:	20000238 	.word	0x20000238
 800b5e0:	e000ef34 	.word	0xe000ef34

0800b5e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	607b      	str	r3, [r7, #4]
}
 800b5fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <vPortEnterCritical+0x58>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	4a0d      	ldr	r2, [pc, #52]	; (800b63c <vPortEnterCritical+0x58>)
 800b606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b608:	4b0c      	ldr	r3, [pc, #48]	; (800b63c <vPortEnterCritical+0x58>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d10f      	bne.n	800b630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <vPortEnterCritical+0x5c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <vPortEnterCritical+0x4c>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	603b      	str	r3, [r7, #0]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <vPortEnterCritical+0x4a>
	}
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	20000238 	.word	0x20000238
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b64a:	4b12      	ldr	r3, [pc, #72]	; (800b694 <vPortExitCritical+0x50>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <vPortExitCritical+0x24>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	607b      	str	r3, [r7, #4]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <vPortExitCritical+0x50>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	4a09      	ldr	r2, [pc, #36]	; (800b694 <vPortExitCritical+0x50>)
 800b670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b672:	4b08      	ldr	r3, [pc, #32]	; (800b694 <vPortExitCritical+0x50>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d105      	bne.n	800b686 <vPortExitCritical+0x42>
 800b67a:	2300      	movs	r3, #0
 800b67c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000238 	.word	0x20000238
	...

0800b6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6a0:	f3ef 8009 	mrs	r0, PSP
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	4b15      	ldr	r3, [pc, #84]	; (800b700 <pxCurrentTCBConst>)
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	f01e 0f10 	tst.w	lr, #16
 800b6b0:	bf08      	it	eq
 800b6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ba:	6010      	str	r0, [r2, #0]
 800b6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6c4:	f380 8811 	msr	BASEPRI, r0
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f7ff fb0a 	bl	800ace8 <vTaskSwitchContext>
 800b6d4:	f04f 0000 	mov.w	r0, #0
 800b6d8:	f380 8811 	msr	BASEPRI, r0
 800b6dc:	bc09      	pop	{r0, r3}
 800b6de:	6819      	ldr	r1, [r3, #0]
 800b6e0:	6808      	ldr	r0, [r1, #0]
 800b6e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e6:	f01e 0f10 	tst.w	lr, #16
 800b6ea:	bf08      	it	eq
 800b6ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6f0:	f380 8809 	msr	PSP, r0
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	f3af 8000 	nop.w

0800b700 <pxCurrentTCBConst>:
 800b700:	2000bc08 	.word	0x2000bc08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b704:	bf00      	nop
 800b706:	bf00      	nop

0800b708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b722:	f7ff fa29 	bl	800ab78 <xTaskIncrementTick>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <SysTick_Handler+0x40>)
 800b72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	2300      	movs	r3, #0
 800b736:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f383 8811 	msr	BASEPRI, r3
}
 800b73e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <vPortSetupTimerInterrupt+0x34>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <vPortSetupTimerInterrupt+0x38>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b75c:	4b0a      	ldr	r3, [pc, #40]	; (800b788 <vPortSetupTimerInterrupt+0x3c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a0a      	ldr	r2, [pc, #40]	; (800b78c <vPortSetupTimerInterrupt+0x40>)
 800b762:	fba2 2303 	umull	r2, r3, r2, r3
 800b766:	099b      	lsrs	r3, r3, #6
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <vPortSetupTimerInterrupt+0x44>)
 800b76a:	3b01      	subs	r3, #1
 800b76c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b76e:	4b04      	ldr	r3, [pc, #16]	; (800b780 <vPortSetupTimerInterrupt+0x34>)
 800b770:	2207      	movs	r2, #7
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	e000e010 	.word	0xe000e010
 800b784:	e000e018 	.word	0xe000e018
 800b788:	2000022c 	.word	0x2000022c
 800b78c:	10624dd3 	.word	0x10624dd3
 800b790:	e000e014 	.word	0xe000e014

0800b794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7a4 <vPortEnableVFP+0x10>
 800b798:	6801      	ldr	r1, [r0, #0]
 800b79a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b79e:	6001      	str	r1, [r0, #0]
 800b7a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7a2:	bf00      	nop
 800b7a4:	e000ed88 	.word	0xe000ed88

0800b7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08a      	sub	sp, #40	; 0x28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7b4:	f7ff f936 	bl	800aa24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7b8:	4b5b      	ldr	r3, [pc, #364]	; (800b928 <pvPortMalloc+0x180>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7c0:	f000 f920 	bl	800ba04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7c4:	4b59      	ldr	r3, [pc, #356]	; (800b92c <pvPortMalloc+0x184>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 8093 	bne.w	800b8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01d      	beq.n	800b814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7d8:	2208      	movs	r2, #8
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f003 0307 	and.w	r3, r3, #7
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d014      	beq.n	800b814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f023 0307 	bic.w	r3, r3, #7
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <pvPortMalloc+0x6c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	617b      	str	r3, [r7, #20]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d06e      	beq.n	800b8f8 <pvPortMalloc+0x150>
 800b81a:	4b45      	ldr	r3, [pc, #276]	; (800b930 <pvPortMalloc+0x188>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d869      	bhi.n	800b8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b824:	4b43      	ldr	r3, [pc, #268]	; (800b934 <pvPortMalloc+0x18c>)
 800b826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b828:	4b42      	ldr	r3, [pc, #264]	; (800b934 <pvPortMalloc+0x18c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b82e:	e004      	b.n	800b83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <pvPortMalloc+0xa4>
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f1      	bne.n	800b830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b84c:	4b36      	ldr	r3, [pc, #216]	; (800b928 <pvPortMalloc+0x180>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b852:	429a      	cmp	r2, r3
 800b854:	d050      	beq.n	800b8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2208      	movs	r2, #8
 800b85c:	4413      	add	r3, r2
 800b85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	2308      	movs	r3, #8
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	d91f      	bls.n	800b8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4413      	add	r3, r2
 800b87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	613b      	str	r3, [r7, #16]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1ad2      	subs	r2, r2, r3
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8b2:	69b8      	ldr	r0, [r7, #24]
 800b8b4:	f000 f908 	bl	800bac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8b8:	4b1d      	ldr	r3, [pc, #116]	; (800b930 <pvPortMalloc+0x188>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	4a1b      	ldr	r2, [pc, #108]	; (800b930 <pvPortMalloc+0x188>)
 800b8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8c6:	4b1a      	ldr	r3, [pc, #104]	; (800b930 <pvPortMalloc+0x188>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <pvPortMalloc+0x190>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d203      	bcs.n	800b8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8d2:	4b17      	ldr	r3, [pc, #92]	; (800b930 <pvPortMalloc+0x188>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a18      	ldr	r2, [pc, #96]	; (800b938 <pvPortMalloc+0x190>)
 800b8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <pvPortMalloc+0x184>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	431a      	orrs	r2, r3
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8ee:	4b13      	ldr	r3, [pc, #76]	; (800b93c <pvPortMalloc+0x194>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	4a11      	ldr	r2, [pc, #68]	; (800b93c <pvPortMalloc+0x194>)
 800b8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8f8:	f7ff f8a2 	bl	800aa40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <pvPortMalloc+0x174>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60fb      	str	r3, [r7, #12]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <pvPortMalloc+0x172>
	return pvReturn;
 800b91c:	69fb      	ldr	r3, [r7, #28]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	; 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20013274 	.word	0x20013274
 800b92c:	20013288 	.word	0x20013288
 800b930:	20013278 	.word	0x20013278
 800b934:	2001326c 	.word	0x2001326c
 800b938:	2001327c 	.word	0x2001327c
 800b93c:	20013280 	.word	0x20013280

0800b940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d04d      	beq.n	800b9ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b952:	2308      	movs	r3, #8
 800b954:	425b      	negs	r3, r3
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4413      	add	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	4b24      	ldr	r3, [pc, #144]	; (800b9f8 <vPortFree+0xb8>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4013      	ands	r3, r2
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <vPortFree+0x44>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	60fb      	str	r3, [r7, #12]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <vPortFree+0x62>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60bb      	str	r3, [r7, #8]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	4b14      	ldr	r3, [pc, #80]	; (800b9f8 <vPortFree+0xb8>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01e      	beq.n	800b9ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11a      	bne.n	800b9ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <vPortFree+0xb8>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	43db      	mvns	r3, r3
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9c8:	f7ff f82c 	bl	800aa24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <vPortFree+0xbc>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4a09      	ldr	r2, [pc, #36]	; (800b9fc <vPortFree+0xbc>)
 800b9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9da:	6938      	ldr	r0, [r7, #16]
 800b9dc:	f000 f874 	bl	800bac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <vPortFree+0xc0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	4a06      	ldr	r2, [pc, #24]	; (800ba00 <vPortFree+0xc0>)
 800b9e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9ea:	f7ff f829 	bl	800aa40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9ee:	bf00      	nop
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20013288 	.word	0x20013288
 800b9fc:	20013278 	.word	0x20013278
 800ba00:	20013284 	.word	0x20013284

0800ba04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba0a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ba0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba10:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <prvHeapInit+0xac>)
 800ba12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00c      	beq.n	800ba38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3307      	adds	r3, #7
 800ba22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	4a1f      	ldr	r2, [pc, #124]	; (800bab0 <prvHeapInit+0xac>)
 800ba34:	4413      	add	r3, r2
 800ba36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	; (800bab4 <prvHeapInit+0xb0>)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba42:	4b1c      	ldr	r3, [pc, #112]	; (800bab4 <prvHeapInit+0xb0>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba50:	2208      	movs	r2, #8
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 0307 	bic.w	r3, r3, #7
 800ba5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <prvHeapInit+0xb4>)
 800ba64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba66:	4b14      	ldr	r3, [pc, #80]	; (800bab8 <prvHeapInit+0xb4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba6e:	4b12      	ldr	r3, [pc, #72]	; (800bab8 <prvHeapInit+0xb4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <prvHeapInit+0xb4>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a0a      	ldr	r2, [pc, #40]	; (800babc <prvHeapInit+0xb8>)
 800ba92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4a09      	ldr	r2, [pc, #36]	; (800bac0 <prvHeapInit+0xbc>)
 800ba9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <prvHeapInit+0xc0>)
 800ba9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baa2:	601a      	str	r2, [r3, #0]
}
 800baa4:	bf00      	nop
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	2000bd3c 	.word	0x2000bd3c
 800bab4:	2001326c 	.word	0x2001326c
 800bab8:	20013274 	.word	0x20013274
 800babc:	2001327c 	.word	0x2001327c
 800bac0:	20013278 	.word	0x20013278
 800bac4:	20013288 	.word	0x20013288

0800bac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bad0:	4b28      	ldr	r3, [pc, #160]	; (800bb74 <prvInsertBlockIntoFreeList+0xac>)
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	e002      	b.n	800badc <prvInsertBlockIntoFreeList+0x14>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d8f7      	bhi.n	800bad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	4413      	add	r3, r2
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d108      	bne.n	800bb0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	441a      	add	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d118      	bne.n	800bb50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4b15      	ldr	r3, [pc, #84]	; (800bb78 <prvInsertBlockIntoFreeList+0xb0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d00d      	beq.n	800bb46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	441a      	add	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	e008      	b.n	800bb58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <prvInsertBlockIntoFreeList+0xb0>)
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	e003      	b.n	800bb58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d002      	beq.n	800bb66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb66:	bf00      	nop
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	2001326c 	.word	0x2001326c
 800bb78:	20013274 	.word	0x20013274

0800bb7c <__assert_func>:
 800bb7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb7e:	4614      	mov	r4, r2
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <__assert_func+0x2c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4605      	mov	r5, r0
 800bb88:	68d8      	ldr	r0, [r3, #12]
 800bb8a:	b14c      	cbz	r4, 800bba0 <__assert_func+0x24>
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <__assert_func+0x30>)
 800bb8e:	9100      	str	r1, [sp, #0]
 800bb90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb94:	4906      	ldr	r1, [pc, #24]	; (800bbb0 <__assert_func+0x34>)
 800bb96:	462b      	mov	r3, r5
 800bb98:	f000 f8f2 	bl	800bd80 <fiprintf>
 800bb9c:	f002 fa78 	bl	800e090 <abort>
 800bba0:	4b04      	ldr	r3, [pc, #16]	; (800bbb4 <__assert_func+0x38>)
 800bba2:	461c      	mov	r4, r3
 800bba4:	e7f3      	b.n	800bb8e <__assert_func+0x12>
 800bba6:	bf00      	nop
 800bba8:	2000023c 	.word	0x2000023c
 800bbac:	080122c0 	.word	0x080122c0
 800bbb0:	080122cd 	.word	0x080122cd
 800bbb4:	080122fb 	.word	0x080122fb

0800bbb8 <atof>:
 800bbb8:	2100      	movs	r1, #0
 800bbba:	f002 b8fd 	b.w	800ddb8 <strtod>

0800bbbe <atoi>:
 800bbbe:	220a      	movs	r2, #10
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	f002 b989 	b.w	800ded8 <strtol>
	...

0800bbc8 <__errno>:
 800bbc8:	4b01      	ldr	r3, [pc, #4]	; (800bbd0 <__errno+0x8>)
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	2000023c 	.word	0x2000023c

0800bbd4 <std>:
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	b510      	push	{r4, lr}
 800bbd8:	4604      	mov	r4, r0
 800bbda:	e9c0 3300 	strd	r3, r3, [r0]
 800bbde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbe2:	6083      	str	r3, [r0, #8]
 800bbe4:	8181      	strh	r1, [r0, #12]
 800bbe6:	6643      	str	r3, [r0, #100]	; 0x64
 800bbe8:	81c2      	strh	r2, [r0, #14]
 800bbea:	6183      	str	r3, [r0, #24]
 800bbec:	4619      	mov	r1, r3
 800bbee:	2208      	movs	r2, #8
 800bbf0:	305c      	adds	r0, #92	; 0x5c
 800bbf2:	f000 f92c 	bl	800be4e <memset>
 800bbf6:	4b05      	ldr	r3, [pc, #20]	; (800bc0c <std+0x38>)
 800bbf8:	6263      	str	r3, [r4, #36]	; 0x24
 800bbfa:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <std+0x3c>)
 800bbfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbfe:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <std+0x40>)
 800bc00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc02:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <std+0x44>)
 800bc04:	6224      	str	r4, [r4, #32]
 800bc06:	6323      	str	r3, [r4, #48]	; 0x30
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	bf00      	nop
 800bc0c:	0800d0c9 	.word	0x0800d0c9
 800bc10:	0800d0ef 	.word	0x0800d0ef
 800bc14:	0800d127 	.word	0x0800d127
 800bc18:	0800d14b 	.word	0x0800d14b

0800bc1c <_cleanup_r>:
 800bc1c:	4901      	ldr	r1, [pc, #4]	; (800bc24 <_cleanup_r+0x8>)
 800bc1e:	f000 b8c1 	b.w	800bda4 <_fwalk_reent>
 800bc22:	bf00      	nop
 800bc24:	0800eec1 	.word	0x0800eec1

0800bc28 <__sfmoreglue>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	2268      	movs	r2, #104	; 0x68
 800bc2c:	1e4d      	subs	r5, r1, #1
 800bc2e:	4355      	muls	r5, r2
 800bc30:	460e      	mov	r6, r1
 800bc32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc36:	f000 f933 	bl	800bea0 <_malloc_r>
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	b140      	cbz	r0, 800bc50 <__sfmoreglue+0x28>
 800bc3e:	2100      	movs	r1, #0
 800bc40:	e9c0 1600 	strd	r1, r6, [r0]
 800bc44:	300c      	adds	r0, #12
 800bc46:	60a0      	str	r0, [r4, #8]
 800bc48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc4c:	f000 f8ff 	bl	800be4e <memset>
 800bc50:	4620      	mov	r0, r4
 800bc52:	bd70      	pop	{r4, r5, r6, pc}

0800bc54 <__sfp_lock_acquire>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__sfp_lock_acquire+0x8>)
 800bc56:	f000 b8ea 	b.w	800be2e <__retarget_lock_acquire_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	2001328d 	.word	0x2001328d

0800bc60 <__sfp_lock_release>:
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <__sfp_lock_release+0x8>)
 800bc62:	f000 b8e5 	b.w	800be30 <__retarget_lock_release_recursive>
 800bc66:	bf00      	nop
 800bc68:	2001328d 	.word	0x2001328d

0800bc6c <__sinit_lock_acquire>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	; (800bc74 <__sinit_lock_acquire+0x8>)
 800bc6e:	f000 b8de 	b.w	800be2e <__retarget_lock_acquire_recursive>
 800bc72:	bf00      	nop
 800bc74:	2001328e 	.word	0x2001328e

0800bc78 <__sinit_lock_release>:
 800bc78:	4801      	ldr	r0, [pc, #4]	; (800bc80 <__sinit_lock_release+0x8>)
 800bc7a:	f000 b8d9 	b.w	800be30 <__retarget_lock_release_recursive>
 800bc7e:	bf00      	nop
 800bc80:	2001328e 	.word	0x2001328e

0800bc84 <__sinit>:
 800bc84:	b510      	push	{r4, lr}
 800bc86:	4604      	mov	r4, r0
 800bc88:	f7ff fff0 	bl	800bc6c <__sinit_lock_acquire>
 800bc8c:	69a3      	ldr	r3, [r4, #24]
 800bc8e:	b11b      	cbz	r3, 800bc98 <__sinit+0x14>
 800bc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc94:	f7ff bff0 	b.w	800bc78 <__sinit_lock_release>
 800bc98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc9c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc9e:	4b13      	ldr	r3, [pc, #76]	; (800bcec <__sinit+0x68>)
 800bca0:	4a13      	ldr	r2, [pc, #76]	; (800bcf0 <__sinit+0x6c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bca6:	42a3      	cmp	r3, r4
 800bca8:	bf04      	itt	eq
 800bcaa:	2301      	moveq	r3, #1
 800bcac:	61a3      	streq	r3, [r4, #24]
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f000 f820 	bl	800bcf4 <__sfp>
 800bcb4:	6060      	str	r0, [r4, #4]
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 f81c 	bl	800bcf4 <__sfp>
 800bcbc:	60a0      	str	r0, [r4, #8]
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 f818 	bl	800bcf4 <__sfp>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	60e0      	str	r0, [r4, #12]
 800bcc8:	2104      	movs	r1, #4
 800bcca:	6860      	ldr	r0, [r4, #4]
 800bccc:	f7ff ff82 	bl	800bbd4 <std>
 800bcd0:	68a0      	ldr	r0, [r4, #8]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	2109      	movs	r1, #9
 800bcd6:	f7ff ff7d 	bl	800bbd4 <std>
 800bcda:	68e0      	ldr	r0, [r4, #12]
 800bcdc:	2202      	movs	r2, #2
 800bcde:	2112      	movs	r1, #18
 800bce0:	f7ff ff78 	bl	800bbd4 <std>
 800bce4:	2301      	movs	r3, #1
 800bce6:	61a3      	str	r3, [r4, #24]
 800bce8:	e7d2      	b.n	800bc90 <__sinit+0xc>
 800bcea:	bf00      	nop
 800bcec:	08012460 	.word	0x08012460
 800bcf0:	0800bc1d 	.word	0x0800bc1d

0800bcf4 <__sfp>:
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	f7ff ffac 	bl	800bc54 <__sfp_lock_acquire>
 800bcfc:	4b1e      	ldr	r3, [pc, #120]	; (800bd78 <__sfp+0x84>)
 800bcfe:	681e      	ldr	r6, [r3, #0]
 800bd00:	69b3      	ldr	r3, [r6, #24]
 800bd02:	b913      	cbnz	r3, 800bd0a <__sfp+0x16>
 800bd04:	4630      	mov	r0, r6
 800bd06:	f7ff ffbd 	bl	800bc84 <__sinit>
 800bd0a:	3648      	adds	r6, #72	; 0x48
 800bd0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	d503      	bpl.n	800bd1c <__sfp+0x28>
 800bd14:	6833      	ldr	r3, [r6, #0]
 800bd16:	b30b      	cbz	r3, 800bd5c <__sfp+0x68>
 800bd18:	6836      	ldr	r6, [r6, #0]
 800bd1a:	e7f7      	b.n	800bd0c <__sfp+0x18>
 800bd1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd20:	b9d5      	cbnz	r5, 800bd58 <__sfp+0x64>
 800bd22:	4b16      	ldr	r3, [pc, #88]	; (800bd7c <__sfp+0x88>)
 800bd24:	60e3      	str	r3, [r4, #12]
 800bd26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd2a:	6665      	str	r5, [r4, #100]	; 0x64
 800bd2c:	f000 f87e 	bl	800be2c <__retarget_lock_init_recursive>
 800bd30:	f7ff ff96 	bl	800bc60 <__sfp_lock_release>
 800bd34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd3c:	6025      	str	r5, [r4, #0]
 800bd3e:	61a5      	str	r5, [r4, #24]
 800bd40:	2208      	movs	r2, #8
 800bd42:	4629      	mov	r1, r5
 800bd44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd48:	f000 f881 	bl	800be4e <memset>
 800bd4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd54:	4620      	mov	r0, r4
 800bd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd58:	3468      	adds	r4, #104	; 0x68
 800bd5a:	e7d9      	b.n	800bd10 <__sfp+0x1c>
 800bd5c:	2104      	movs	r1, #4
 800bd5e:	4638      	mov	r0, r7
 800bd60:	f7ff ff62 	bl	800bc28 <__sfmoreglue>
 800bd64:	4604      	mov	r4, r0
 800bd66:	6030      	str	r0, [r6, #0]
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1d5      	bne.n	800bd18 <__sfp+0x24>
 800bd6c:	f7ff ff78 	bl	800bc60 <__sfp_lock_release>
 800bd70:	230c      	movs	r3, #12
 800bd72:	603b      	str	r3, [r7, #0]
 800bd74:	e7ee      	b.n	800bd54 <__sfp+0x60>
 800bd76:	bf00      	nop
 800bd78:	08012460 	.word	0x08012460
 800bd7c:	ffff0001 	.word	0xffff0001

0800bd80 <fiprintf>:
 800bd80:	b40e      	push	{r1, r2, r3}
 800bd82:	b503      	push	{r0, r1, lr}
 800bd84:	4601      	mov	r1, r0
 800bd86:	ab03      	add	r3, sp, #12
 800bd88:	4805      	ldr	r0, [pc, #20]	; (800bda0 <fiprintf+0x20>)
 800bd8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8e:	6800      	ldr	r0, [r0, #0]
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	f000 f923 	bl	800bfdc <_vfiprintf_r>
 800bd96:	b002      	add	sp, #8
 800bd98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd9c:	b003      	add	sp, #12
 800bd9e:	4770      	bx	lr
 800bda0:	2000023c 	.word	0x2000023c

0800bda4 <_fwalk_reent>:
 800bda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda8:	4606      	mov	r6, r0
 800bdaa:	4688      	mov	r8, r1
 800bdac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdb0:	2700      	movs	r7, #0
 800bdb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdb6:	f1b9 0901 	subs.w	r9, r9, #1
 800bdba:	d505      	bpl.n	800bdc8 <_fwalk_reent+0x24>
 800bdbc:	6824      	ldr	r4, [r4, #0]
 800bdbe:	2c00      	cmp	r4, #0
 800bdc0:	d1f7      	bne.n	800bdb2 <_fwalk_reent+0xe>
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdc8:	89ab      	ldrh	r3, [r5, #12]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d907      	bls.n	800bdde <_fwalk_reent+0x3a>
 800bdce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	d003      	beq.n	800bdde <_fwalk_reent+0x3a>
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4630      	mov	r0, r6
 800bdda:	47c0      	blx	r8
 800bddc:	4307      	orrs	r7, r0
 800bdde:	3568      	adds	r5, #104	; 0x68
 800bde0:	e7e9      	b.n	800bdb6 <_fwalk_reent+0x12>
	...

0800bde4 <__libc_init_array>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	4d0d      	ldr	r5, [pc, #52]	; (800be1c <__libc_init_array+0x38>)
 800bde8:	4c0d      	ldr	r4, [pc, #52]	; (800be20 <__libc_init_array+0x3c>)
 800bdea:	1b64      	subs	r4, r4, r5
 800bdec:	10a4      	asrs	r4, r4, #2
 800bdee:	2600      	movs	r6, #0
 800bdf0:	42a6      	cmp	r6, r4
 800bdf2:	d109      	bne.n	800be08 <__libc_init_array+0x24>
 800bdf4:	4d0b      	ldr	r5, [pc, #44]	; (800be24 <__libc_init_array+0x40>)
 800bdf6:	4c0c      	ldr	r4, [pc, #48]	; (800be28 <__libc_init_array+0x44>)
 800bdf8:	f006 f878 	bl	8011eec <_init>
 800bdfc:	1b64      	subs	r4, r4, r5
 800bdfe:	10a4      	asrs	r4, r4, #2
 800be00:	2600      	movs	r6, #0
 800be02:	42a6      	cmp	r6, r4
 800be04:	d105      	bne.n	800be12 <__libc_init_array+0x2e>
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	f855 3b04 	ldr.w	r3, [r5], #4
 800be0c:	4798      	blx	r3
 800be0e:	3601      	adds	r6, #1
 800be10:	e7ee      	b.n	800bdf0 <__libc_init_array+0xc>
 800be12:	f855 3b04 	ldr.w	r3, [r5], #4
 800be16:	4798      	blx	r3
 800be18:	3601      	adds	r6, #1
 800be1a:	e7f2      	b.n	800be02 <__libc_init_array+0x1e>
 800be1c:	08012960 	.word	0x08012960
 800be20:	08012960 	.word	0x08012960
 800be24:	08012960 	.word	0x08012960
 800be28:	08012964 	.word	0x08012964

0800be2c <__retarget_lock_init_recursive>:
 800be2c:	4770      	bx	lr

0800be2e <__retarget_lock_acquire_recursive>:
 800be2e:	4770      	bx	lr

0800be30 <__retarget_lock_release_recursive>:
 800be30:	4770      	bx	lr

0800be32 <memcpy>:
 800be32:	440a      	add	r2, r1
 800be34:	4291      	cmp	r1, r2
 800be36:	f100 33ff 	add.w	r3, r0, #4294967295
 800be3a:	d100      	bne.n	800be3e <memcpy+0xc>
 800be3c:	4770      	bx	lr
 800be3e:	b510      	push	{r4, lr}
 800be40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be48:	4291      	cmp	r1, r2
 800be4a:	d1f9      	bne.n	800be40 <memcpy+0xe>
 800be4c:	bd10      	pop	{r4, pc}

0800be4e <memset>:
 800be4e:	4402      	add	r2, r0
 800be50:	4603      	mov	r3, r0
 800be52:	4293      	cmp	r3, r2
 800be54:	d100      	bne.n	800be58 <memset+0xa>
 800be56:	4770      	bx	lr
 800be58:	f803 1b01 	strb.w	r1, [r3], #1
 800be5c:	e7f9      	b.n	800be52 <memset+0x4>
	...

0800be60 <sbrk_aligned>:
 800be60:	b570      	push	{r4, r5, r6, lr}
 800be62:	4e0e      	ldr	r6, [pc, #56]	; (800be9c <sbrk_aligned+0x3c>)
 800be64:	460c      	mov	r4, r1
 800be66:	6831      	ldr	r1, [r6, #0]
 800be68:	4605      	mov	r5, r0
 800be6a:	b911      	cbnz	r1, 800be72 <sbrk_aligned+0x12>
 800be6c:	f001 f8ca 	bl	800d004 <_sbrk_r>
 800be70:	6030      	str	r0, [r6, #0]
 800be72:	4621      	mov	r1, r4
 800be74:	4628      	mov	r0, r5
 800be76:	f001 f8c5 	bl	800d004 <_sbrk_r>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	d00a      	beq.n	800be94 <sbrk_aligned+0x34>
 800be7e:	1cc4      	adds	r4, r0, #3
 800be80:	f024 0403 	bic.w	r4, r4, #3
 800be84:	42a0      	cmp	r0, r4
 800be86:	d007      	beq.n	800be98 <sbrk_aligned+0x38>
 800be88:	1a21      	subs	r1, r4, r0
 800be8a:	4628      	mov	r0, r5
 800be8c:	f001 f8ba 	bl	800d004 <_sbrk_r>
 800be90:	3001      	adds	r0, #1
 800be92:	d101      	bne.n	800be98 <sbrk_aligned+0x38>
 800be94:	f04f 34ff 	mov.w	r4, #4294967295
 800be98:	4620      	mov	r0, r4
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	20013294 	.word	0x20013294

0800bea0 <_malloc_r>:
 800bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	1ccd      	adds	r5, r1, #3
 800bea6:	f025 0503 	bic.w	r5, r5, #3
 800beaa:	3508      	adds	r5, #8
 800beac:	2d0c      	cmp	r5, #12
 800beae:	bf38      	it	cc
 800beb0:	250c      	movcc	r5, #12
 800beb2:	2d00      	cmp	r5, #0
 800beb4:	4607      	mov	r7, r0
 800beb6:	db01      	blt.n	800bebc <_malloc_r+0x1c>
 800beb8:	42a9      	cmp	r1, r5
 800beba:	d905      	bls.n	800bec8 <_malloc_r+0x28>
 800bebc:	230c      	movs	r3, #12
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	2600      	movs	r6, #0
 800bec2:	4630      	mov	r0, r6
 800bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec8:	4e2e      	ldr	r6, [pc, #184]	; (800bf84 <_malloc_r+0xe4>)
 800beca:	f003 fc55 	bl	800f778 <__malloc_lock>
 800bece:	6833      	ldr	r3, [r6, #0]
 800bed0:	461c      	mov	r4, r3
 800bed2:	bb34      	cbnz	r4, 800bf22 <_malloc_r+0x82>
 800bed4:	4629      	mov	r1, r5
 800bed6:	4638      	mov	r0, r7
 800bed8:	f7ff ffc2 	bl	800be60 <sbrk_aligned>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	4604      	mov	r4, r0
 800bee0:	d14d      	bne.n	800bf7e <_malloc_r+0xde>
 800bee2:	6834      	ldr	r4, [r6, #0]
 800bee4:	4626      	mov	r6, r4
 800bee6:	2e00      	cmp	r6, #0
 800bee8:	d140      	bne.n	800bf6c <_malloc_r+0xcc>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	4631      	mov	r1, r6
 800beee:	4638      	mov	r0, r7
 800bef0:	eb04 0803 	add.w	r8, r4, r3
 800bef4:	f001 f886 	bl	800d004 <_sbrk_r>
 800bef8:	4580      	cmp	r8, r0
 800befa:	d13a      	bne.n	800bf72 <_malloc_r+0xd2>
 800befc:	6821      	ldr	r1, [r4, #0]
 800befe:	3503      	adds	r5, #3
 800bf00:	1a6d      	subs	r5, r5, r1
 800bf02:	f025 0503 	bic.w	r5, r5, #3
 800bf06:	3508      	adds	r5, #8
 800bf08:	2d0c      	cmp	r5, #12
 800bf0a:	bf38      	it	cc
 800bf0c:	250c      	movcc	r5, #12
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4638      	mov	r0, r7
 800bf12:	f7ff ffa5 	bl	800be60 <sbrk_aligned>
 800bf16:	3001      	adds	r0, #1
 800bf18:	d02b      	beq.n	800bf72 <_malloc_r+0xd2>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	442b      	add	r3, r5
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	e00e      	b.n	800bf40 <_malloc_r+0xa0>
 800bf22:	6822      	ldr	r2, [r4, #0]
 800bf24:	1b52      	subs	r2, r2, r5
 800bf26:	d41e      	bmi.n	800bf66 <_malloc_r+0xc6>
 800bf28:	2a0b      	cmp	r2, #11
 800bf2a:	d916      	bls.n	800bf5a <_malloc_r+0xba>
 800bf2c:	1961      	adds	r1, r4, r5
 800bf2e:	42a3      	cmp	r3, r4
 800bf30:	6025      	str	r5, [r4, #0]
 800bf32:	bf18      	it	ne
 800bf34:	6059      	strne	r1, [r3, #4]
 800bf36:	6863      	ldr	r3, [r4, #4]
 800bf38:	bf08      	it	eq
 800bf3a:	6031      	streq	r1, [r6, #0]
 800bf3c:	5162      	str	r2, [r4, r5]
 800bf3e:	604b      	str	r3, [r1, #4]
 800bf40:	4638      	mov	r0, r7
 800bf42:	f104 060b 	add.w	r6, r4, #11
 800bf46:	f003 fc1d 	bl	800f784 <__malloc_unlock>
 800bf4a:	f026 0607 	bic.w	r6, r6, #7
 800bf4e:	1d23      	adds	r3, r4, #4
 800bf50:	1af2      	subs	r2, r6, r3
 800bf52:	d0b6      	beq.n	800bec2 <_malloc_r+0x22>
 800bf54:	1b9b      	subs	r3, r3, r6
 800bf56:	50a3      	str	r3, [r4, r2]
 800bf58:	e7b3      	b.n	800bec2 <_malloc_r+0x22>
 800bf5a:	6862      	ldr	r2, [r4, #4]
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	bf0c      	ite	eq
 800bf60:	6032      	streq	r2, [r6, #0]
 800bf62:	605a      	strne	r2, [r3, #4]
 800bf64:	e7ec      	b.n	800bf40 <_malloc_r+0xa0>
 800bf66:	4623      	mov	r3, r4
 800bf68:	6864      	ldr	r4, [r4, #4]
 800bf6a:	e7b2      	b.n	800bed2 <_malloc_r+0x32>
 800bf6c:	4634      	mov	r4, r6
 800bf6e:	6876      	ldr	r6, [r6, #4]
 800bf70:	e7b9      	b.n	800bee6 <_malloc_r+0x46>
 800bf72:	230c      	movs	r3, #12
 800bf74:	603b      	str	r3, [r7, #0]
 800bf76:	4638      	mov	r0, r7
 800bf78:	f003 fc04 	bl	800f784 <__malloc_unlock>
 800bf7c:	e7a1      	b.n	800bec2 <_malloc_r+0x22>
 800bf7e:	6025      	str	r5, [r4, #0]
 800bf80:	e7de      	b.n	800bf40 <_malloc_r+0xa0>
 800bf82:	bf00      	nop
 800bf84:	20013290 	.word	0x20013290

0800bf88 <__sfputc_r>:
 800bf88:	6893      	ldr	r3, [r2, #8]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	b410      	push	{r4}
 800bf90:	6093      	str	r3, [r2, #8]
 800bf92:	da08      	bge.n	800bfa6 <__sfputc_r+0x1e>
 800bf94:	6994      	ldr	r4, [r2, #24]
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	db01      	blt.n	800bf9e <__sfputc_r+0x16>
 800bf9a:	290a      	cmp	r1, #10
 800bf9c:	d103      	bne.n	800bfa6 <__sfputc_r+0x1e>
 800bf9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfa2:	f001 bfa3 	b.w	800deec <__swbuf_r>
 800bfa6:	6813      	ldr	r3, [r2, #0]
 800bfa8:	1c58      	adds	r0, r3, #1
 800bfaa:	6010      	str	r0, [r2, #0]
 800bfac:	7019      	strb	r1, [r3, #0]
 800bfae:	4608      	mov	r0, r1
 800bfb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <__sfputs_r>:
 800bfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb8:	4606      	mov	r6, r0
 800bfba:	460f      	mov	r7, r1
 800bfbc:	4614      	mov	r4, r2
 800bfbe:	18d5      	adds	r5, r2, r3
 800bfc0:	42ac      	cmp	r4, r5
 800bfc2:	d101      	bne.n	800bfc8 <__sfputs_r+0x12>
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	e007      	b.n	800bfd8 <__sfputs_r+0x22>
 800bfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfcc:	463a      	mov	r2, r7
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7ff ffda 	bl	800bf88 <__sfputc_r>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	d1f3      	bne.n	800bfc0 <__sfputs_r+0xa>
 800bfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfdc <_vfiprintf_r>:
 800bfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	b09d      	sub	sp, #116	; 0x74
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	4698      	mov	r8, r3
 800bfe8:	4606      	mov	r6, r0
 800bfea:	b118      	cbz	r0, 800bff4 <_vfiprintf_r+0x18>
 800bfec:	6983      	ldr	r3, [r0, #24]
 800bfee:	b90b      	cbnz	r3, 800bff4 <_vfiprintf_r+0x18>
 800bff0:	f7ff fe48 	bl	800bc84 <__sinit>
 800bff4:	4b89      	ldr	r3, [pc, #548]	; (800c21c <_vfiprintf_r+0x240>)
 800bff6:	429d      	cmp	r5, r3
 800bff8:	d11b      	bne.n	800c032 <_vfiprintf_r+0x56>
 800bffa:	6875      	ldr	r5, [r6, #4]
 800bffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bffe:	07d9      	lsls	r1, r3, #31
 800c000:	d405      	bmi.n	800c00e <_vfiprintf_r+0x32>
 800c002:	89ab      	ldrh	r3, [r5, #12]
 800c004:	059a      	lsls	r2, r3, #22
 800c006:	d402      	bmi.n	800c00e <_vfiprintf_r+0x32>
 800c008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c00a:	f7ff ff10 	bl	800be2e <__retarget_lock_acquire_recursive>
 800c00e:	89ab      	ldrh	r3, [r5, #12]
 800c010:	071b      	lsls	r3, r3, #28
 800c012:	d501      	bpl.n	800c018 <_vfiprintf_r+0x3c>
 800c014:	692b      	ldr	r3, [r5, #16]
 800c016:	b9eb      	cbnz	r3, 800c054 <_vfiprintf_r+0x78>
 800c018:	4629      	mov	r1, r5
 800c01a:	4630      	mov	r0, r6
 800c01c:	f001 ffca 	bl	800dfb4 <__swsetup_r>
 800c020:	b1c0      	cbz	r0, 800c054 <_vfiprintf_r+0x78>
 800c022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c024:	07dc      	lsls	r4, r3, #31
 800c026:	d50e      	bpl.n	800c046 <_vfiprintf_r+0x6a>
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	b01d      	add	sp, #116	; 0x74
 800c02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c032:	4b7b      	ldr	r3, [pc, #492]	; (800c220 <_vfiprintf_r+0x244>)
 800c034:	429d      	cmp	r5, r3
 800c036:	d101      	bne.n	800c03c <_vfiprintf_r+0x60>
 800c038:	68b5      	ldr	r5, [r6, #8]
 800c03a:	e7df      	b.n	800bffc <_vfiprintf_r+0x20>
 800c03c:	4b79      	ldr	r3, [pc, #484]	; (800c224 <_vfiprintf_r+0x248>)
 800c03e:	429d      	cmp	r5, r3
 800c040:	bf08      	it	eq
 800c042:	68f5      	ldreq	r5, [r6, #12]
 800c044:	e7da      	b.n	800bffc <_vfiprintf_r+0x20>
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	0598      	lsls	r0, r3, #22
 800c04a:	d4ed      	bmi.n	800c028 <_vfiprintf_r+0x4c>
 800c04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c04e:	f7ff feef 	bl	800be30 <__retarget_lock_release_recursive>
 800c052:	e7e9      	b.n	800c028 <_vfiprintf_r+0x4c>
 800c054:	2300      	movs	r3, #0
 800c056:	9309      	str	r3, [sp, #36]	; 0x24
 800c058:	2320      	movs	r3, #32
 800c05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c062:	2330      	movs	r3, #48	; 0x30
 800c064:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c228 <_vfiprintf_r+0x24c>
 800c068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c06c:	f04f 0901 	mov.w	r9, #1
 800c070:	4623      	mov	r3, r4
 800c072:	469a      	mov	sl, r3
 800c074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c078:	b10a      	cbz	r2, 800c07e <_vfiprintf_r+0xa2>
 800c07a:	2a25      	cmp	r2, #37	; 0x25
 800c07c:	d1f9      	bne.n	800c072 <_vfiprintf_r+0x96>
 800c07e:	ebba 0b04 	subs.w	fp, sl, r4
 800c082:	d00b      	beq.n	800c09c <_vfiprintf_r+0xc0>
 800c084:	465b      	mov	r3, fp
 800c086:	4622      	mov	r2, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7ff ff93 	bl	800bfb6 <__sfputs_r>
 800c090:	3001      	adds	r0, #1
 800c092:	f000 80aa 	beq.w	800c1ea <_vfiprintf_r+0x20e>
 800c096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c098:	445a      	add	r2, fp
 800c09a:	9209      	str	r2, [sp, #36]	; 0x24
 800c09c:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 80a2 	beq.w	800c1ea <_vfiprintf_r+0x20e>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b0:	f10a 0a01 	add.w	sl, sl, #1
 800c0b4:	9304      	str	r3, [sp, #16]
 800c0b6:	9307      	str	r3, [sp, #28]
 800c0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c0be:	4654      	mov	r4, sl
 800c0c0:	2205      	movs	r2, #5
 800c0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c6:	4858      	ldr	r0, [pc, #352]	; (800c228 <_vfiprintf_r+0x24c>)
 800c0c8:	f7f4 f89a 	bl	8000200 <memchr>
 800c0cc:	9a04      	ldr	r2, [sp, #16]
 800c0ce:	b9d8      	cbnz	r0, 800c108 <_vfiprintf_r+0x12c>
 800c0d0:	06d1      	lsls	r1, r2, #27
 800c0d2:	bf44      	itt	mi
 800c0d4:	2320      	movmi	r3, #32
 800c0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0da:	0713      	lsls	r3, r2, #28
 800c0dc:	bf44      	itt	mi
 800c0de:	232b      	movmi	r3, #43	; 0x2b
 800c0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ea:	d015      	beq.n	800c118 <_vfiprintf_r+0x13c>
 800c0ec:	9a07      	ldr	r2, [sp, #28]
 800c0ee:	4654      	mov	r4, sl
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f04f 0c0a 	mov.w	ip, #10
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0fc:	3b30      	subs	r3, #48	; 0x30
 800c0fe:	2b09      	cmp	r3, #9
 800c100:	d94e      	bls.n	800c1a0 <_vfiprintf_r+0x1c4>
 800c102:	b1b0      	cbz	r0, 800c132 <_vfiprintf_r+0x156>
 800c104:	9207      	str	r2, [sp, #28]
 800c106:	e014      	b.n	800c132 <_vfiprintf_r+0x156>
 800c108:	eba0 0308 	sub.w	r3, r0, r8
 800c10c:	fa09 f303 	lsl.w	r3, r9, r3
 800c110:	4313      	orrs	r3, r2
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	46a2      	mov	sl, r4
 800c116:	e7d2      	b.n	800c0be <_vfiprintf_r+0xe2>
 800c118:	9b03      	ldr	r3, [sp, #12]
 800c11a:	1d19      	adds	r1, r3, #4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	9103      	str	r1, [sp, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	bfbb      	ittet	lt
 800c124:	425b      	neglt	r3, r3
 800c126:	f042 0202 	orrlt.w	r2, r2, #2
 800c12a:	9307      	strge	r3, [sp, #28]
 800c12c:	9307      	strlt	r3, [sp, #28]
 800c12e:	bfb8      	it	lt
 800c130:	9204      	strlt	r2, [sp, #16]
 800c132:	7823      	ldrb	r3, [r4, #0]
 800c134:	2b2e      	cmp	r3, #46	; 0x2e
 800c136:	d10c      	bne.n	800c152 <_vfiprintf_r+0x176>
 800c138:	7863      	ldrb	r3, [r4, #1]
 800c13a:	2b2a      	cmp	r3, #42	; 0x2a
 800c13c:	d135      	bne.n	800c1aa <_vfiprintf_r+0x1ce>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	1d1a      	adds	r2, r3, #4
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	9203      	str	r2, [sp, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfb8      	it	lt
 800c14a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c14e:	3402      	adds	r4, #2
 800c150:	9305      	str	r3, [sp, #20]
 800c152:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c238 <_vfiprintf_r+0x25c>
 800c156:	7821      	ldrb	r1, [r4, #0]
 800c158:	2203      	movs	r2, #3
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7f4 f850 	bl	8000200 <memchr>
 800c160:	b140      	cbz	r0, 800c174 <_vfiprintf_r+0x198>
 800c162:	2340      	movs	r3, #64	; 0x40
 800c164:	eba0 000a 	sub.w	r0, r0, sl
 800c168:	fa03 f000 	lsl.w	r0, r3, r0
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	4303      	orrs	r3, r0
 800c170:	3401      	adds	r4, #1
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c178:	482c      	ldr	r0, [pc, #176]	; (800c22c <_vfiprintf_r+0x250>)
 800c17a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c17e:	2206      	movs	r2, #6
 800c180:	f7f4 f83e 	bl	8000200 <memchr>
 800c184:	2800      	cmp	r0, #0
 800c186:	d03f      	beq.n	800c208 <_vfiprintf_r+0x22c>
 800c188:	4b29      	ldr	r3, [pc, #164]	; (800c230 <_vfiprintf_r+0x254>)
 800c18a:	bb1b      	cbnz	r3, 800c1d4 <_vfiprintf_r+0x1f8>
 800c18c:	9b03      	ldr	r3, [sp, #12]
 800c18e:	3307      	adds	r3, #7
 800c190:	f023 0307 	bic.w	r3, r3, #7
 800c194:	3308      	adds	r3, #8
 800c196:	9303      	str	r3, [sp, #12]
 800c198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19a:	443b      	add	r3, r7
 800c19c:	9309      	str	r3, [sp, #36]	; 0x24
 800c19e:	e767      	b.n	800c070 <_vfiprintf_r+0x94>
 800c1a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	2001      	movs	r0, #1
 800c1a8:	e7a5      	b.n	800c0f6 <_vfiprintf_r+0x11a>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	3401      	adds	r4, #1
 800c1ae:	9305      	str	r3, [sp, #20]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	f04f 0c0a 	mov.w	ip, #10
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1bc:	3a30      	subs	r2, #48	; 0x30
 800c1be:	2a09      	cmp	r2, #9
 800c1c0:	d903      	bls.n	800c1ca <_vfiprintf_r+0x1ee>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0c5      	beq.n	800c152 <_vfiprintf_r+0x176>
 800c1c6:	9105      	str	r1, [sp, #20]
 800c1c8:	e7c3      	b.n	800c152 <_vfiprintf_r+0x176>
 800c1ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e7f0      	b.n	800c1b6 <_vfiprintf_r+0x1da>
 800c1d4:	ab03      	add	r3, sp, #12
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	462a      	mov	r2, r5
 800c1da:	4b16      	ldr	r3, [pc, #88]	; (800c234 <_vfiprintf_r+0x258>)
 800c1dc:	a904      	add	r1, sp, #16
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f000 f8cc 	bl	800c37c <_printf_float>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	1c78      	adds	r0, r7, #1
 800c1e8:	d1d6      	bne.n	800c198 <_vfiprintf_r+0x1bc>
 800c1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ec:	07d9      	lsls	r1, r3, #31
 800c1ee:	d405      	bmi.n	800c1fc <_vfiprintf_r+0x220>
 800c1f0:	89ab      	ldrh	r3, [r5, #12]
 800c1f2:	059a      	lsls	r2, r3, #22
 800c1f4:	d402      	bmi.n	800c1fc <_vfiprintf_r+0x220>
 800c1f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1f8:	f7ff fe1a 	bl	800be30 <__retarget_lock_release_recursive>
 800c1fc:	89ab      	ldrh	r3, [r5, #12]
 800c1fe:	065b      	lsls	r3, r3, #25
 800c200:	f53f af12 	bmi.w	800c028 <_vfiprintf_r+0x4c>
 800c204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c206:	e711      	b.n	800c02c <_vfiprintf_r+0x50>
 800c208:	ab03      	add	r3, sp, #12
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	462a      	mov	r2, r5
 800c20e:	4b09      	ldr	r3, [pc, #36]	; (800c234 <_vfiprintf_r+0x258>)
 800c210:	a904      	add	r1, sp, #16
 800c212:	4630      	mov	r0, r6
 800c214:	f000 fb56 	bl	800c8c4 <_printf_i>
 800c218:	e7e4      	b.n	800c1e4 <_vfiprintf_r+0x208>
 800c21a:	bf00      	nop
 800c21c:	08012420 	.word	0x08012420
 800c220:	08012440 	.word	0x08012440
 800c224:	08012400 	.word	0x08012400
 800c228:	08012464 	.word	0x08012464
 800c22c:	0801246e 	.word	0x0801246e
 800c230:	0800c37d 	.word	0x0800c37d
 800c234:	0800bfb7 	.word	0x0800bfb7
 800c238:	0801246a 	.word	0x0801246a

0800c23c <__cvt>:
 800c23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c240:	ec55 4b10 	vmov	r4, r5, d0
 800c244:	2d00      	cmp	r5, #0
 800c246:	460e      	mov	r6, r1
 800c248:	4619      	mov	r1, r3
 800c24a:	462b      	mov	r3, r5
 800c24c:	bfbb      	ittet	lt
 800c24e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c252:	461d      	movlt	r5, r3
 800c254:	2300      	movge	r3, #0
 800c256:	232d      	movlt	r3, #45	; 0x2d
 800c258:	700b      	strb	r3, [r1, #0]
 800c25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c25c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c260:	4691      	mov	r9, r2
 800c262:	f023 0820 	bic.w	r8, r3, #32
 800c266:	bfbc      	itt	lt
 800c268:	4622      	movlt	r2, r4
 800c26a:	4614      	movlt	r4, r2
 800c26c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c270:	d005      	beq.n	800c27e <__cvt+0x42>
 800c272:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c276:	d100      	bne.n	800c27a <__cvt+0x3e>
 800c278:	3601      	adds	r6, #1
 800c27a:	2102      	movs	r1, #2
 800c27c:	e000      	b.n	800c280 <__cvt+0x44>
 800c27e:	2103      	movs	r1, #3
 800c280:	ab03      	add	r3, sp, #12
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	ab02      	add	r3, sp, #8
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	ec45 4b10 	vmov	d0, r4, r5
 800c28c:	4653      	mov	r3, sl
 800c28e:	4632      	mov	r2, r6
 800c290:	f001 ffa2 	bl	800e1d8 <_dtoa_r>
 800c294:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c298:	4607      	mov	r7, r0
 800c29a:	d102      	bne.n	800c2a2 <__cvt+0x66>
 800c29c:	f019 0f01 	tst.w	r9, #1
 800c2a0:	d022      	beq.n	800c2e8 <__cvt+0xac>
 800c2a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2a6:	eb07 0906 	add.w	r9, r7, r6
 800c2aa:	d110      	bne.n	800c2ce <__cvt+0x92>
 800c2ac:	783b      	ldrb	r3, [r7, #0]
 800c2ae:	2b30      	cmp	r3, #48	; 0x30
 800c2b0:	d10a      	bne.n	800c2c8 <__cvt+0x8c>
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7f4 fc15 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2be:	b918      	cbnz	r0, 800c2c8 <__cvt+0x8c>
 800c2c0:	f1c6 0601 	rsb	r6, r6, #1
 800c2c4:	f8ca 6000 	str.w	r6, [sl]
 800c2c8:	f8da 3000 	ldr.w	r3, [sl]
 800c2cc:	4499      	add	r9, r3
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f7f4 fc07 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2da:	b108      	cbz	r0, 800c2e0 <__cvt+0xa4>
 800c2dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2e0:	2230      	movs	r2, #48	; 0x30
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	454b      	cmp	r3, r9
 800c2e6:	d307      	bcc.n	800c2f8 <__cvt+0xbc>
 800c2e8:	9b03      	ldr	r3, [sp, #12]
 800c2ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2ec:	1bdb      	subs	r3, r3, r7
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	b004      	add	sp, #16
 800c2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2f8:	1c59      	adds	r1, r3, #1
 800c2fa:	9103      	str	r1, [sp, #12]
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	e7f0      	b.n	800c2e2 <__cvt+0xa6>

0800c300 <__exponent>:
 800c300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c302:	4603      	mov	r3, r0
 800c304:	2900      	cmp	r1, #0
 800c306:	bfb8      	it	lt
 800c308:	4249      	neglt	r1, r1
 800c30a:	f803 2b02 	strb.w	r2, [r3], #2
 800c30e:	bfb4      	ite	lt
 800c310:	222d      	movlt	r2, #45	; 0x2d
 800c312:	222b      	movge	r2, #43	; 0x2b
 800c314:	2909      	cmp	r1, #9
 800c316:	7042      	strb	r2, [r0, #1]
 800c318:	dd2a      	ble.n	800c370 <__exponent+0x70>
 800c31a:	f10d 0407 	add.w	r4, sp, #7
 800c31e:	46a4      	mov	ip, r4
 800c320:	270a      	movs	r7, #10
 800c322:	46a6      	mov	lr, r4
 800c324:	460a      	mov	r2, r1
 800c326:	fb91 f6f7 	sdiv	r6, r1, r7
 800c32a:	fb07 1516 	mls	r5, r7, r6, r1
 800c32e:	3530      	adds	r5, #48	; 0x30
 800c330:	2a63      	cmp	r2, #99	; 0x63
 800c332:	f104 34ff 	add.w	r4, r4, #4294967295
 800c336:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c33a:	4631      	mov	r1, r6
 800c33c:	dcf1      	bgt.n	800c322 <__exponent+0x22>
 800c33e:	3130      	adds	r1, #48	; 0x30
 800c340:	f1ae 0502 	sub.w	r5, lr, #2
 800c344:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c348:	1c44      	adds	r4, r0, #1
 800c34a:	4629      	mov	r1, r5
 800c34c:	4561      	cmp	r1, ip
 800c34e:	d30a      	bcc.n	800c366 <__exponent+0x66>
 800c350:	f10d 0209 	add.w	r2, sp, #9
 800c354:	eba2 020e 	sub.w	r2, r2, lr
 800c358:	4565      	cmp	r5, ip
 800c35a:	bf88      	it	hi
 800c35c:	2200      	movhi	r2, #0
 800c35e:	4413      	add	r3, r2
 800c360:	1a18      	subs	r0, r3, r0
 800c362:	b003      	add	sp, #12
 800c364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c36a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c36e:	e7ed      	b.n	800c34c <__exponent+0x4c>
 800c370:	2330      	movs	r3, #48	; 0x30
 800c372:	3130      	adds	r1, #48	; 0x30
 800c374:	7083      	strb	r3, [r0, #2]
 800c376:	70c1      	strb	r1, [r0, #3]
 800c378:	1d03      	adds	r3, r0, #4
 800c37a:	e7f1      	b.n	800c360 <__exponent+0x60>

0800c37c <_printf_float>:
 800c37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c380:	ed2d 8b02 	vpush	{d8}
 800c384:	b08d      	sub	sp, #52	; 0x34
 800c386:	460c      	mov	r4, r1
 800c388:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c38c:	4616      	mov	r6, r2
 800c38e:	461f      	mov	r7, r3
 800c390:	4605      	mov	r5, r0
 800c392:	f003 f941 	bl	800f618 <_localeconv_r>
 800c396:	f8d0 a000 	ldr.w	sl, [r0]
 800c39a:	4650      	mov	r0, sl
 800c39c:	f7f3 ff22 	bl	80001e4 <strlen>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a4:	6823      	ldr	r3, [r4, #0]
 800c3a6:	9305      	str	r3, [sp, #20]
 800c3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c3b0:	3307      	adds	r3, #7
 800c3b2:	f023 0307 	bic.w	r3, r3, #7
 800c3b6:	f103 0208 	add.w	r2, r3, #8
 800c3ba:	f8c8 2000 	str.w	r2, [r8]
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3ce:	9307      	str	r3, [sp, #28]
 800c3d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3d4:	ee08 0a10 	vmov	s16, r0
 800c3d8:	4b9f      	ldr	r3, [pc, #636]	; (800c658 <_printf_float+0x2dc>)
 800c3da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3de:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e2:	f7f4 fbb3 	bl	8000b4c <__aeabi_dcmpun>
 800c3e6:	bb88      	cbnz	r0, 800c44c <_printf_float+0xd0>
 800c3e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ec:	4b9a      	ldr	r3, [pc, #616]	; (800c658 <_printf_float+0x2dc>)
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f2:	f7f4 fb8d 	bl	8000b10 <__aeabi_dcmple>
 800c3f6:	bb48      	cbnz	r0, 800c44c <_printf_float+0xd0>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	f7f4 fb7c 	bl	8000afc <__aeabi_dcmplt>
 800c404:	b110      	cbz	r0, 800c40c <_printf_float+0x90>
 800c406:	232d      	movs	r3, #45	; 0x2d
 800c408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c40c:	4b93      	ldr	r3, [pc, #588]	; (800c65c <_printf_float+0x2e0>)
 800c40e:	4894      	ldr	r0, [pc, #592]	; (800c660 <_printf_float+0x2e4>)
 800c410:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c414:	bf94      	ite	ls
 800c416:	4698      	movls	r8, r3
 800c418:	4680      	movhi	r8, r0
 800c41a:	2303      	movs	r3, #3
 800c41c:	6123      	str	r3, [r4, #16]
 800c41e:	9b05      	ldr	r3, [sp, #20]
 800c420:	f023 0204 	bic.w	r2, r3, #4
 800c424:	6022      	str	r2, [r4, #0]
 800c426:	f04f 0900 	mov.w	r9, #0
 800c42a:	9700      	str	r7, [sp, #0]
 800c42c:	4633      	mov	r3, r6
 800c42e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c430:	4621      	mov	r1, r4
 800c432:	4628      	mov	r0, r5
 800c434:	f000 f9d8 	bl	800c7e8 <_printf_common>
 800c438:	3001      	adds	r0, #1
 800c43a:	f040 8090 	bne.w	800c55e <_printf_float+0x1e2>
 800c43e:	f04f 30ff 	mov.w	r0, #4294967295
 800c442:	b00d      	add	sp, #52	; 0x34
 800c444:	ecbd 8b02 	vpop	{d8}
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	4642      	mov	r2, r8
 800c44e:	464b      	mov	r3, r9
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	f7f4 fb7a 	bl	8000b4c <__aeabi_dcmpun>
 800c458:	b140      	cbz	r0, 800c46c <_printf_float+0xf0>
 800c45a:	464b      	mov	r3, r9
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	bfbc      	itt	lt
 800c460:	232d      	movlt	r3, #45	; 0x2d
 800c462:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c466:	487f      	ldr	r0, [pc, #508]	; (800c664 <_printf_float+0x2e8>)
 800c468:	4b7f      	ldr	r3, [pc, #508]	; (800c668 <_printf_float+0x2ec>)
 800c46a:	e7d1      	b.n	800c410 <_printf_float+0x94>
 800c46c:	6863      	ldr	r3, [r4, #4]
 800c46e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c472:	9206      	str	r2, [sp, #24]
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	d13f      	bne.n	800c4f8 <_printf_float+0x17c>
 800c478:	2306      	movs	r3, #6
 800c47a:	6063      	str	r3, [r4, #4]
 800c47c:	9b05      	ldr	r3, [sp, #20]
 800c47e:	6861      	ldr	r1, [r4, #4]
 800c480:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c484:	2300      	movs	r3, #0
 800c486:	9303      	str	r3, [sp, #12]
 800c488:	ab0a      	add	r3, sp, #40	; 0x28
 800c48a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c48e:	ab09      	add	r3, sp, #36	; 0x24
 800c490:	ec49 8b10 	vmov	d0, r8, r9
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	6022      	str	r2, [r4, #0]
 800c498:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c49c:	4628      	mov	r0, r5
 800c49e:	f7ff fecd 	bl	800c23c <__cvt>
 800c4a2:	9b06      	ldr	r3, [sp, #24]
 800c4a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4a6:	2b47      	cmp	r3, #71	; 0x47
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	d108      	bne.n	800c4be <_printf_float+0x142>
 800c4ac:	1cc8      	adds	r0, r1, #3
 800c4ae:	db02      	blt.n	800c4b6 <_printf_float+0x13a>
 800c4b0:	6863      	ldr	r3, [r4, #4]
 800c4b2:	4299      	cmp	r1, r3
 800c4b4:	dd41      	ble.n	800c53a <_printf_float+0x1be>
 800c4b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c4ba:	fa5f fb8b 	uxtb.w	fp, fp
 800c4be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4c2:	d820      	bhi.n	800c506 <_printf_float+0x18a>
 800c4c4:	3901      	subs	r1, #1
 800c4c6:	465a      	mov	r2, fp
 800c4c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4cc:	9109      	str	r1, [sp, #36]	; 0x24
 800c4ce:	f7ff ff17 	bl	800c300 <__exponent>
 800c4d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4d4:	1813      	adds	r3, r2, r0
 800c4d6:	2a01      	cmp	r2, #1
 800c4d8:	4681      	mov	r9, r0
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	dc02      	bgt.n	800c4e4 <_printf_float+0x168>
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	07d2      	lsls	r2, r2, #31
 800c4e2:	d501      	bpl.n	800c4e8 <_printf_float+0x16c>
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	6123      	str	r3, [r4, #16]
 800c4e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d09c      	beq.n	800c42a <_printf_float+0xae>
 800c4f0:	232d      	movs	r3, #45	; 0x2d
 800c4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4f6:	e798      	b.n	800c42a <_printf_float+0xae>
 800c4f8:	9a06      	ldr	r2, [sp, #24]
 800c4fa:	2a47      	cmp	r2, #71	; 0x47
 800c4fc:	d1be      	bne.n	800c47c <_printf_float+0x100>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1bc      	bne.n	800c47c <_printf_float+0x100>
 800c502:	2301      	movs	r3, #1
 800c504:	e7b9      	b.n	800c47a <_printf_float+0xfe>
 800c506:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c50a:	d118      	bne.n	800c53e <_printf_float+0x1c2>
 800c50c:	2900      	cmp	r1, #0
 800c50e:	6863      	ldr	r3, [r4, #4]
 800c510:	dd0b      	ble.n	800c52a <_printf_float+0x1ae>
 800c512:	6121      	str	r1, [r4, #16]
 800c514:	b913      	cbnz	r3, 800c51c <_printf_float+0x1a0>
 800c516:	6822      	ldr	r2, [r4, #0]
 800c518:	07d0      	lsls	r0, r2, #31
 800c51a:	d502      	bpl.n	800c522 <_printf_float+0x1a6>
 800c51c:	3301      	adds	r3, #1
 800c51e:	440b      	add	r3, r1
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	65a1      	str	r1, [r4, #88]	; 0x58
 800c524:	f04f 0900 	mov.w	r9, #0
 800c528:	e7de      	b.n	800c4e8 <_printf_float+0x16c>
 800c52a:	b913      	cbnz	r3, 800c532 <_printf_float+0x1b6>
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	07d2      	lsls	r2, r2, #31
 800c530:	d501      	bpl.n	800c536 <_printf_float+0x1ba>
 800c532:	3302      	adds	r3, #2
 800c534:	e7f4      	b.n	800c520 <_printf_float+0x1a4>
 800c536:	2301      	movs	r3, #1
 800c538:	e7f2      	b.n	800c520 <_printf_float+0x1a4>
 800c53a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c540:	4299      	cmp	r1, r3
 800c542:	db05      	blt.n	800c550 <_printf_float+0x1d4>
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	6121      	str	r1, [r4, #16]
 800c548:	07d8      	lsls	r0, r3, #31
 800c54a:	d5ea      	bpl.n	800c522 <_printf_float+0x1a6>
 800c54c:	1c4b      	adds	r3, r1, #1
 800c54e:	e7e7      	b.n	800c520 <_printf_float+0x1a4>
 800c550:	2900      	cmp	r1, #0
 800c552:	bfd4      	ite	le
 800c554:	f1c1 0202 	rsble	r2, r1, #2
 800c558:	2201      	movgt	r2, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	e7e0      	b.n	800c520 <_printf_float+0x1a4>
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	055a      	lsls	r2, r3, #21
 800c562:	d407      	bmi.n	800c574 <_printf_float+0x1f8>
 800c564:	6923      	ldr	r3, [r4, #16]
 800c566:	4642      	mov	r2, r8
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	d12c      	bne.n	800c5cc <_printf_float+0x250>
 800c572:	e764      	b.n	800c43e <_printf_float+0xc2>
 800c574:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c578:	f240 80e0 	bls.w	800c73c <_printf_float+0x3c0>
 800c57c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c580:	2200      	movs	r2, #0
 800c582:	2300      	movs	r3, #0
 800c584:	f7f4 fab0 	bl	8000ae8 <__aeabi_dcmpeq>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d034      	beq.n	800c5f6 <_printf_float+0x27a>
 800c58c:	4a37      	ldr	r2, [pc, #220]	; (800c66c <_printf_float+0x2f0>)
 800c58e:	2301      	movs	r3, #1
 800c590:	4631      	mov	r1, r6
 800c592:	4628      	mov	r0, r5
 800c594:	47b8      	blx	r7
 800c596:	3001      	adds	r0, #1
 800c598:	f43f af51 	beq.w	800c43e <_printf_float+0xc2>
 800c59c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	db02      	blt.n	800c5aa <_printf_float+0x22e>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	07d8      	lsls	r0, r3, #31
 800c5a8:	d510      	bpl.n	800c5cc <_printf_float+0x250>
 800c5aa:	ee18 3a10 	vmov	r3, s16
 800c5ae:	4652      	mov	r2, sl
 800c5b0:	4631      	mov	r1, r6
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	47b8      	blx	r7
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	f43f af41 	beq.w	800c43e <_printf_float+0xc2>
 800c5bc:	f04f 0800 	mov.w	r8, #0
 800c5c0:	f104 091a 	add.w	r9, r4, #26
 800c5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	4543      	cmp	r3, r8
 800c5ca:	dc09      	bgt.n	800c5e0 <_printf_float+0x264>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	079b      	lsls	r3, r3, #30
 800c5d0:	f100 8105 	bmi.w	800c7de <_printf_float+0x462>
 800c5d4:	68e0      	ldr	r0, [r4, #12]
 800c5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5d8:	4298      	cmp	r0, r3
 800c5da:	bfb8      	it	lt
 800c5dc:	4618      	movlt	r0, r3
 800c5de:	e730      	b.n	800c442 <_printf_float+0xc6>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	464a      	mov	r2, r9
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	47b8      	blx	r7
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	f43f af27 	beq.w	800c43e <_printf_float+0xc2>
 800c5f0:	f108 0801 	add.w	r8, r8, #1
 800c5f4:	e7e6      	b.n	800c5c4 <_printf_float+0x248>
 800c5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dc39      	bgt.n	800c670 <_printf_float+0x2f4>
 800c5fc:	4a1b      	ldr	r2, [pc, #108]	; (800c66c <_printf_float+0x2f0>)
 800c5fe:	2301      	movs	r3, #1
 800c600:	4631      	mov	r1, r6
 800c602:	4628      	mov	r0, r5
 800c604:	47b8      	blx	r7
 800c606:	3001      	adds	r0, #1
 800c608:	f43f af19 	beq.w	800c43e <_printf_float+0xc2>
 800c60c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c610:	4313      	orrs	r3, r2
 800c612:	d102      	bne.n	800c61a <_printf_float+0x29e>
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	07d9      	lsls	r1, r3, #31
 800c618:	d5d8      	bpl.n	800c5cc <_printf_float+0x250>
 800c61a:	ee18 3a10 	vmov	r3, s16
 800c61e:	4652      	mov	r2, sl
 800c620:	4631      	mov	r1, r6
 800c622:	4628      	mov	r0, r5
 800c624:	47b8      	blx	r7
 800c626:	3001      	adds	r0, #1
 800c628:	f43f af09 	beq.w	800c43e <_printf_float+0xc2>
 800c62c:	f04f 0900 	mov.w	r9, #0
 800c630:	f104 0a1a 	add.w	sl, r4, #26
 800c634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c636:	425b      	negs	r3, r3
 800c638:	454b      	cmp	r3, r9
 800c63a:	dc01      	bgt.n	800c640 <_printf_float+0x2c4>
 800c63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c63e:	e792      	b.n	800c566 <_printf_float+0x1ea>
 800c640:	2301      	movs	r3, #1
 800c642:	4652      	mov	r2, sl
 800c644:	4631      	mov	r1, r6
 800c646:	4628      	mov	r0, r5
 800c648:	47b8      	blx	r7
 800c64a:	3001      	adds	r0, #1
 800c64c:	f43f aef7 	beq.w	800c43e <_printf_float+0xc2>
 800c650:	f109 0901 	add.w	r9, r9, #1
 800c654:	e7ee      	b.n	800c634 <_printf_float+0x2b8>
 800c656:	bf00      	nop
 800c658:	7fefffff 	.word	0x7fefffff
 800c65c:	08012475 	.word	0x08012475
 800c660:	08012479 	.word	0x08012479
 800c664:	08012481 	.word	0x08012481
 800c668:	0801247d 	.word	0x0801247d
 800c66c:	08012768 	.word	0x08012768
 800c670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c674:	429a      	cmp	r2, r3
 800c676:	bfa8      	it	ge
 800c678:	461a      	movge	r2, r3
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	4691      	mov	r9, r2
 800c67e:	dc37      	bgt.n	800c6f0 <_printf_float+0x374>
 800c680:	f04f 0b00 	mov.w	fp, #0
 800c684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c688:	f104 021a 	add.w	r2, r4, #26
 800c68c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c68e:	9305      	str	r3, [sp, #20]
 800c690:	eba3 0309 	sub.w	r3, r3, r9
 800c694:	455b      	cmp	r3, fp
 800c696:	dc33      	bgt.n	800c700 <_printf_float+0x384>
 800c698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c69c:	429a      	cmp	r2, r3
 800c69e:	db3b      	blt.n	800c718 <_printf_float+0x39c>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	07da      	lsls	r2, r3, #31
 800c6a4:	d438      	bmi.n	800c718 <_printf_float+0x39c>
 800c6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a8:	9a05      	ldr	r2, [sp, #20]
 800c6aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6ac:	1a9a      	subs	r2, r3, r2
 800c6ae:	eba3 0901 	sub.w	r9, r3, r1
 800c6b2:	4591      	cmp	r9, r2
 800c6b4:	bfa8      	it	ge
 800c6b6:	4691      	movge	r9, r2
 800c6b8:	f1b9 0f00 	cmp.w	r9, #0
 800c6bc:	dc35      	bgt.n	800c72a <_printf_float+0x3ae>
 800c6be:	f04f 0800 	mov.w	r8, #0
 800c6c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6c6:	f104 0a1a 	add.w	sl, r4, #26
 800c6ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6ce:	1a9b      	subs	r3, r3, r2
 800c6d0:	eba3 0309 	sub.w	r3, r3, r9
 800c6d4:	4543      	cmp	r3, r8
 800c6d6:	f77f af79 	ble.w	800c5cc <_printf_float+0x250>
 800c6da:	2301      	movs	r3, #1
 800c6dc:	4652      	mov	r2, sl
 800c6de:	4631      	mov	r1, r6
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b8      	blx	r7
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	f43f aeaa 	beq.w	800c43e <_printf_float+0xc2>
 800c6ea:	f108 0801 	add.w	r8, r8, #1
 800c6ee:	e7ec      	b.n	800c6ca <_printf_float+0x34e>
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	47b8      	blx	r7
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	d1c0      	bne.n	800c680 <_printf_float+0x304>
 800c6fe:	e69e      	b.n	800c43e <_printf_float+0xc2>
 800c700:	2301      	movs	r3, #1
 800c702:	4631      	mov	r1, r6
 800c704:	4628      	mov	r0, r5
 800c706:	9205      	str	r2, [sp, #20]
 800c708:	47b8      	blx	r7
 800c70a:	3001      	adds	r0, #1
 800c70c:	f43f ae97 	beq.w	800c43e <_printf_float+0xc2>
 800c710:	9a05      	ldr	r2, [sp, #20]
 800c712:	f10b 0b01 	add.w	fp, fp, #1
 800c716:	e7b9      	b.n	800c68c <_printf_float+0x310>
 800c718:	ee18 3a10 	vmov	r3, s16
 800c71c:	4652      	mov	r2, sl
 800c71e:	4631      	mov	r1, r6
 800c720:	4628      	mov	r0, r5
 800c722:	47b8      	blx	r7
 800c724:	3001      	adds	r0, #1
 800c726:	d1be      	bne.n	800c6a6 <_printf_float+0x32a>
 800c728:	e689      	b.n	800c43e <_printf_float+0xc2>
 800c72a:	9a05      	ldr	r2, [sp, #20]
 800c72c:	464b      	mov	r3, r9
 800c72e:	4442      	add	r2, r8
 800c730:	4631      	mov	r1, r6
 800c732:	4628      	mov	r0, r5
 800c734:	47b8      	blx	r7
 800c736:	3001      	adds	r0, #1
 800c738:	d1c1      	bne.n	800c6be <_printf_float+0x342>
 800c73a:	e680      	b.n	800c43e <_printf_float+0xc2>
 800c73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c73e:	2a01      	cmp	r2, #1
 800c740:	dc01      	bgt.n	800c746 <_printf_float+0x3ca>
 800c742:	07db      	lsls	r3, r3, #31
 800c744:	d538      	bpl.n	800c7b8 <_printf_float+0x43c>
 800c746:	2301      	movs	r3, #1
 800c748:	4642      	mov	r2, r8
 800c74a:	4631      	mov	r1, r6
 800c74c:	4628      	mov	r0, r5
 800c74e:	47b8      	blx	r7
 800c750:	3001      	adds	r0, #1
 800c752:	f43f ae74 	beq.w	800c43e <_printf_float+0xc2>
 800c756:	ee18 3a10 	vmov	r3, s16
 800c75a:	4652      	mov	r2, sl
 800c75c:	4631      	mov	r1, r6
 800c75e:	4628      	mov	r0, r5
 800c760:	47b8      	blx	r7
 800c762:	3001      	adds	r0, #1
 800c764:	f43f ae6b 	beq.w	800c43e <_printf_float+0xc2>
 800c768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c76c:	2200      	movs	r2, #0
 800c76e:	2300      	movs	r3, #0
 800c770:	f7f4 f9ba 	bl	8000ae8 <__aeabi_dcmpeq>
 800c774:	b9d8      	cbnz	r0, 800c7ae <_printf_float+0x432>
 800c776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c778:	f108 0201 	add.w	r2, r8, #1
 800c77c:	3b01      	subs	r3, #1
 800c77e:	4631      	mov	r1, r6
 800c780:	4628      	mov	r0, r5
 800c782:	47b8      	blx	r7
 800c784:	3001      	adds	r0, #1
 800c786:	d10e      	bne.n	800c7a6 <_printf_float+0x42a>
 800c788:	e659      	b.n	800c43e <_printf_float+0xc2>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4652      	mov	r2, sl
 800c78e:	4631      	mov	r1, r6
 800c790:	4628      	mov	r0, r5
 800c792:	47b8      	blx	r7
 800c794:	3001      	adds	r0, #1
 800c796:	f43f ae52 	beq.w	800c43e <_printf_float+0xc2>
 800c79a:	f108 0801 	add.w	r8, r8, #1
 800c79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	4543      	cmp	r3, r8
 800c7a4:	dcf1      	bgt.n	800c78a <_printf_float+0x40e>
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7ac:	e6dc      	b.n	800c568 <_printf_float+0x1ec>
 800c7ae:	f04f 0800 	mov.w	r8, #0
 800c7b2:	f104 0a1a 	add.w	sl, r4, #26
 800c7b6:	e7f2      	b.n	800c79e <_printf_float+0x422>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	4642      	mov	r2, r8
 800c7bc:	e7df      	b.n	800c77e <_printf_float+0x402>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	464a      	mov	r2, r9
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	47b8      	blx	r7
 800c7c8:	3001      	adds	r0, #1
 800c7ca:	f43f ae38 	beq.w	800c43e <_printf_float+0xc2>
 800c7ce:	f108 0801 	add.w	r8, r8, #1
 800c7d2:	68e3      	ldr	r3, [r4, #12]
 800c7d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7d6:	1a5b      	subs	r3, r3, r1
 800c7d8:	4543      	cmp	r3, r8
 800c7da:	dcf0      	bgt.n	800c7be <_printf_float+0x442>
 800c7dc:	e6fa      	b.n	800c5d4 <_printf_float+0x258>
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	f104 0919 	add.w	r9, r4, #25
 800c7e6:	e7f4      	b.n	800c7d2 <_printf_float+0x456>

0800c7e8 <_printf_common>:
 800c7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	4699      	mov	r9, r3
 800c7f0:	688a      	ldr	r2, [r1, #8]
 800c7f2:	690b      	ldr	r3, [r1, #16]
 800c7f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	bfb8      	it	lt
 800c7fc:	4613      	movlt	r3, r2
 800c7fe:	6033      	str	r3, [r6, #0]
 800c800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c804:	4607      	mov	r7, r0
 800c806:	460c      	mov	r4, r1
 800c808:	b10a      	cbz	r2, 800c80e <_printf_common+0x26>
 800c80a:	3301      	adds	r3, #1
 800c80c:	6033      	str	r3, [r6, #0]
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	0699      	lsls	r1, r3, #26
 800c812:	bf42      	ittt	mi
 800c814:	6833      	ldrmi	r3, [r6, #0]
 800c816:	3302      	addmi	r3, #2
 800c818:	6033      	strmi	r3, [r6, #0]
 800c81a:	6825      	ldr	r5, [r4, #0]
 800c81c:	f015 0506 	ands.w	r5, r5, #6
 800c820:	d106      	bne.n	800c830 <_printf_common+0x48>
 800c822:	f104 0a19 	add.w	sl, r4, #25
 800c826:	68e3      	ldr	r3, [r4, #12]
 800c828:	6832      	ldr	r2, [r6, #0]
 800c82a:	1a9b      	subs	r3, r3, r2
 800c82c:	42ab      	cmp	r3, r5
 800c82e:	dc26      	bgt.n	800c87e <_printf_common+0x96>
 800c830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c834:	1e13      	subs	r3, r2, #0
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	bf18      	it	ne
 800c83a:	2301      	movne	r3, #1
 800c83c:	0692      	lsls	r2, r2, #26
 800c83e:	d42b      	bmi.n	800c898 <_printf_common+0xb0>
 800c840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c844:	4649      	mov	r1, r9
 800c846:	4638      	mov	r0, r7
 800c848:	47c0      	blx	r8
 800c84a:	3001      	adds	r0, #1
 800c84c:	d01e      	beq.n	800c88c <_printf_common+0xa4>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	68e5      	ldr	r5, [r4, #12]
 800c852:	6832      	ldr	r2, [r6, #0]
 800c854:	f003 0306 	and.w	r3, r3, #6
 800c858:	2b04      	cmp	r3, #4
 800c85a:	bf08      	it	eq
 800c85c:	1aad      	subeq	r5, r5, r2
 800c85e:	68a3      	ldr	r3, [r4, #8]
 800c860:	6922      	ldr	r2, [r4, #16]
 800c862:	bf0c      	ite	eq
 800c864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c868:	2500      	movne	r5, #0
 800c86a:	4293      	cmp	r3, r2
 800c86c:	bfc4      	itt	gt
 800c86e:	1a9b      	subgt	r3, r3, r2
 800c870:	18ed      	addgt	r5, r5, r3
 800c872:	2600      	movs	r6, #0
 800c874:	341a      	adds	r4, #26
 800c876:	42b5      	cmp	r5, r6
 800c878:	d11a      	bne.n	800c8b0 <_printf_common+0xc8>
 800c87a:	2000      	movs	r0, #0
 800c87c:	e008      	b.n	800c890 <_printf_common+0xa8>
 800c87e:	2301      	movs	r3, #1
 800c880:	4652      	mov	r2, sl
 800c882:	4649      	mov	r1, r9
 800c884:	4638      	mov	r0, r7
 800c886:	47c0      	blx	r8
 800c888:	3001      	adds	r0, #1
 800c88a:	d103      	bne.n	800c894 <_printf_common+0xac>
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c894:	3501      	adds	r5, #1
 800c896:	e7c6      	b.n	800c826 <_printf_common+0x3e>
 800c898:	18e1      	adds	r1, r4, r3
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	2030      	movs	r0, #48	; 0x30
 800c89e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8a2:	4422      	add	r2, r4
 800c8a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	e7c7      	b.n	800c840 <_printf_common+0x58>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	47c0      	blx	r8
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	d0e6      	beq.n	800c88c <_printf_common+0xa4>
 800c8be:	3601      	adds	r6, #1
 800c8c0:	e7d9      	b.n	800c876 <_printf_common+0x8e>
	...

0800c8c4 <_printf_i>:
 800c8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c8:	7e0f      	ldrb	r7, [r1, #24]
 800c8ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8cc:	2f78      	cmp	r7, #120	; 0x78
 800c8ce:	4691      	mov	r9, r2
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8da:	d807      	bhi.n	800c8ec <_printf_i+0x28>
 800c8dc:	2f62      	cmp	r7, #98	; 0x62
 800c8de:	d80a      	bhi.n	800c8f6 <_printf_i+0x32>
 800c8e0:	2f00      	cmp	r7, #0
 800c8e2:	f000 80d8 	beq.w	800ca96 <_printf_i+0x1d2>
 800c8e6:	2f58      	cmp	r7, #88	; 0x58
 800c8e8:	f000 80a3 	beq.w	800ca32 <_printf_i+0x16e>
 800c8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8f4:	e03a      	b.n	800c96c <_printf_i+0xa8>
 800c8f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8fa:	2b15      	cmp	r3, #21
 800c8fc:	d8f6      	bhi.n	800c8ec <_printf_i+0x28>
 800c8fe:	a101      	add	r1, pc, #4	; (adr r1, 800c904 <_printf_i+0x40>)
 800c900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c904:	0800c95d 	.word	0x0800c95d
 800c908:	0800c971 	.word	0x0800c971
 800c90c:	0800c8ed 	.word	0x0800c8ed
 800c910:	0800c8ed 	.word	0x0800c8ed
 800c914:	0800c8ed 	.word	0x0800c8ed
 800c918:	0800c8ed 	.word	0x0800c8ed
 800c91c:	0800c971 	.word	0x0800c971
 800c920:	0800c8ed 	.word	0x0800c8ed
 800c924:	0800c8ed 	.word	0x0800c8ed
 800c928:	0800c8ed 	.word	0x0800c8ed
 800c92c:	0800c8ed 	.word	0x0800c8ed
 800c930:	0800ca7d 	.word	0x0800ca7d
 800c934:	0800c9a1 	.word	0x0800c9a1
 800c938:	0800ca5f 	.word	0x0800ca5f
 800c93c:	0800c8ed 	.word	0x0800c8ed
 800c940:	0800c8ed 	.word	0x0800c8ed
 800c944:	0800ca9f 	.word	0x0800ca9f
 800c948:	0800c8ed 	.word	0x0800c8ed
 800c94c:	0800c9a1 	.word	0x0800c9a1
 800c950:	0800c8ed 	.word	0x0800c8ed
 800c954:	0800c8ed 	.word	0x0800c8ed
 800c958:	0800ca67 	.word	0x0800ca67
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	1d1a      	adds	r2, r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	602a      	str	r2, [r5, #0]
 800c964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c96c:	2301      	movs	r3, #1
 800c96e:	e0a3      	b.n	800cab8 <_printf_i+0x1f4>
 800c970:	6820      	ldr	r0, [r4, #0]
 800c972:	6829      	ldr	r1, [r5, #0]
 800c974:	0606      	lsls	r6, r0, #24
 800c976:	f101 0304 	add.w	r3, r1, #4
 800c97a:	d50a      	bpl.n	800c992 <_printf_i+0xce>
 800c97c:	680e      	ldr	r6, [r1, #0]
 800c97e:	602b      	str	r3, [r5, #0]
 800c980:	2e00      	cmp	r6, #0
 800c982:	da03      	bge.n	800c98c <_printf_i+0xc8>
 800c984:	232d      	movs	r3, #45	; 0x2d
 800c986:	4276      	negs	r6, r6
 800c988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c98c:	485e      	ldr	r0, [pc, #376]	; (800cb08 <_printf_i+0x244>)
 800c98e:	230a      	movs	r3, #10
 800c990:	e019      	b.n	800c9c6 <_printf_i+0x102>
 800c992:	680e      	ldr	r6, [r1, #0]
 800c994:	602b      	str	r3, [r5, #0]
 800c996:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c99a:	bf18      	it	ne
 800c99c:	b236      	sxthne	r6, r6
 800c99e:	e7ef      	b.n	800c980 <_printf_i+0xbc>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	6820      	ldr	r0, [r4, #0]
 800c9a4:	1d19      	adds	r1, r3, #4
 800c9a6:	6029      	str	r1, [r5, #0]
 800c9a8:	0601      	lsls	r1, r0, #24
 800c9aa:	d501      	bpl.n	800c9b0 <_printf_i+0xec>
 800c9ac:	681e      	ldr	r6, [r3, #0]
 800c9ae:	e002      	b.n	800c9b6 <_printf_i+0xf2>
 800c9b0:	0646      	lsls	r6, r0, #25
 800c9b2:	d5fb      	bpl.n	800c9ac <_printf_i+0xe8>
 800c9b4:	881e      	ldrh	r6, [r3, #0]
 800c9b6:	4854      	ldr	r0, [pc, #336]	; (800cb08 <_printf_i+0x244>)
 800c9b8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9ba:	bf0c      	ite	eq
 800c9bc:	2308      	moveq	r3, #8
 800c9be:	230a      	movne	r3, #10
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9c6:	6865      	ldr	r5, [r4, #4]
 800c9c8:	60a5      	str	r5, [r4, #8]
 800c9ca:	2d00      	cmp	r5, #0
 800c9cc:	bfa2      	ittt	ge
 800c9ce:	6821      	ldrge	r1, [r4, #0]
 800c9d0:	f021 0104 	bicge.w	r1, r1, #4
 800c9d4:	6021      	strge	r1, [r4, #0]
 800c9d6:	b90e      	cbnz	r6, 800c9dc <_printf_i+0x118>
 800c9d8:	2d00      	cmp	r5, #0
 800c9da:	d04d      	beq.n	800ca78 <_printf_i+0x1b4>
 800c9dc:	4615      	mov	r5, r2
 800c9de:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9e2:	fb03 6711 	mls	r7, r3, r1, r6
 800c9e6:	5dc7      	ldrb	r7, [r0, r7]
 800c9e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9ec:	4637      	mov	r7, r6
 800c9ee:	42bb      	cmp	r3, r7
 800c9f0:	460e      	mov	r6, r1
 800c9f2:	d9f4      	bls.n	800c9de <_printf_i+0x11a>
 800c9f4:	2b08      	cmp	r3, #8
 800c9f6:	d10b      	bne.n	800ca10 <_printf_i+0x14c>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	07de      	lsls	r6, r3, #31
 800c9fc:	d508      	bpl.n	800ca10 <_printf_i+0x14c>
 800c9fe:	6923      	ldr	r3, [r4, #16]
 800ca00:	6861      	ldr	r1, [r4, #4]
 800ca02:	4299      	cmp	r1, r3
 800ca04:	bfde      	ittt	le
 800ca06:	2330      	movle	r3, #48	; 0x30
 800ca08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca10:	1b52      	subs	r2, r2, r5
 800ca12:	6122      	str	r2, [r4, #16]
 800ca14:	f8cd a000 	str.w	sl, [sp]
 800ca18:	464b      	mov	r3, r9
 800ca1a:	aa03      	add	r2, sp, #12
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	4640      	mov	r0, r8
 800ca20:	f7ff fee2 	bl	800c7e8 <_printf_common>
 800ca24:	3001      	adds	r0, #1
 800ca26:	d14c      	bne.n	800cac2 <_printf_i+0x1fe>
 800ca28:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2c:	b004      	add	sp, #16
 800ca2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca32:	4835      	ldr	r0, [pc, #212]	; (800cb08 <_printf_i+0x244>)
 800ca34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca38:	6829      	ldr	r1, [r5, #0]
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca40:	6029      	str	r1, [r5, #0]
 800ca42:	061d      	lsls	r5, r3, #24
 800ca44:	d514      	bpl.n	800ca70 <_printf_i+0x1ac>
 800ca46:	07df      	lsls	r7, r3, #31
 800ca48:	bf44      	itt	mi
 800ca4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca4e:	6023      	strmi	r3, [r4, #0]
 800ca50:	b91e      	cbnz	r6, 800ca5a <_printf_i+0x196>
 800ca52:	6823      	ldr	r3, [r4, #0]
 800ca54:	f023 0320 	bic.w	r3, r3, #32
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	2310      	movs	r3, #16
 800ca5c:	e7b0      	b.n	800c9c0 <_printf_i+0xfc>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	f043 0320 	orr.w	r3, r3, #32
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	2378      	movs	r3, #120	; 0x78
 800ca68:	4828      	ldr	r0, [pc, #160]	; (800cb0c <_printf_i+0x248>)
 800ca6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca6e:	e7e3      	b.n	800ca38 <_printf_i+0x174>
 800ca70:	0659      	lsls	r1, r3, #25
 800ca72:	bf48      	it	mi
 800ca74:	b2b6      	uxthmi	r6, r6
 800ca76:	e7e6      	b.n	800ca46 <_printf_i+0x182>
 800ca78:	4615      	mov	r5, r2
 800ca7a:	e7bb      	b.n	800c9f4 <_printf_i+0x130>
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	6826      	ldr	r6, [r4, #0]
 800ca80:	6961      	ldr	r1, [r4, #20]
 800ca82:	1d18      	adds	r0, r3, #4
 800ca84:	6028      	str	r0, [r5, #0]
 800ca86:	0635      	lsls	r5, r6, #24
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	d501      	bpl.n	800ca90 <_printf_i+0x1cc>
 800ca8c:	6019      	str	r1, [r3, #0]
 800ca8e:	e002      	b.n	800ca96 <_printf_i+0x1d2>
 800ca90:	0670      	lsls	r0, r6, #25
 800ca92:	d5fb      	bpl.n	800ca8c <_printf_i+0x1c8>
 800ca94:	8019      	strh	r1, [r3, #0]
 800ca96:	2300      	movs	r3, #0
 800ca98:	6123      	str	r3, [r4, #16]
 800ca9a:	4615      	mov	r5, r2
 800ca9c:	e7ba      	b.n	800ca14 <_printf_i+0x150>
 800ca9e:	682b      	ldr	r3, [r5, #0]
 800caa0:	1d1a      	adds	r2, r3, #4
 800caa2:	602a      	str	r2, [r5, #0]
 800caa4:	681d      	ldr	r5, [r3, #0]
 800caa6:	6862      	ldr	r2, [r4, #4]
 800caa8:	2100      	movs	r1, #0
 800caaa:	4628      	mov	r0, r5
 800caac:	f7f3 fba8 	bl	8000200 <memchr>
 800cab0:	b108      	cbz	r0, 800cab6 <_printf_i+0x1f2>
 800cab2:	1b40      	subs	r0, r0, r5
 800cab4:	6060      	str	r0, [r4, #4]
 800cab6:	6863      	ldr	r3, [r4, #4]
 800cab8:	6123      	str	r3, [r4, #16]
 800caba:	2300      	movs	r3, #0
 800cabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cac0:	e7a8      	b.n	800ca14 <_printf_i+0x150>
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	462a      	mov	r2, r5
 800cac6:	4649      	mov	r1, r9
 800cac8:	4640      	mov	r0, r8
 800caca:	47d0      	blx	sl
 800cacc:	3001      	adds	r0, #1
 800cace:	d0ab      	beq.n	800ca28 <_printf_i+0x164>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	079b      	lsls	r3, r3, #30
 800cad4:	d413      	bmi.n	800cafe <_printf_i+0x23a>
 800cad6:	68e0      	ldr	r0, [r4, #12]
 800cad8:	9b03      	ldr	r3, [sp, #12]
 800cada:	4298      	cmp	r0, r3
 800cadc:	bfb8      	it	lt
 800cade:	4618      	movlt	r0, r3
 800cae0:	e7a4      	b.n	800ca2c <_printf_i+0x168>
 800cae2:	2301      	movs	r3, #1
 800cae4:	4632      	mov	r2, r6
 800cae6:	4649      	mov	r1, r9
 800cae8:	4640      	mov	r0, r8
 800caea:	47d0      	blx	sl
 800caec:	3001      	adds	r0, #1
 800caee:	d09b      	beq.n	800ca28 <_printf_i+0x164>
 800caf0:	3501      	adds	r5, #1
 800caf2:	68e3      	ldr	r3, [r4, #12]
 800caf4:	9903      	ldr	r1, [sp, #12]
 800caf6:	1a5b      	subs	r3, r3, r1
 800caf8:	42ab      	cmp	r3, r5
 800cafa:	dcf2      	bgt.n	800cae2 <_printf_i+0x21e>
 800cafc:	e7eb      	b.n	800cad6 <_printf_i+0x212>
 800cafe:	2500      	movs	r5, #0
 800cb00:	f104 0619 	add.w	r6, r4, #25
 800cb04:	e7f5      	b.n	800caf2 <_printf_i+0x22e>
 800cb06:	bf00      	nop
 800cb08:	08012485 	.word	0x08012485
 800cb0c:	08012496 	.word	0x08012496

0800cb10 <_scanf_float>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	b087      	sub	sp, #28
 800cb16:	4617      	mov	r7, r2
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	688b      	ldr	r3, [r1, #8]
 800cb1c:	1e5a      	subs	r2, r3, #1
 800cb1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb22:	bf83      	ittte	hi
 800cb24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cb28:	195b      	addhi	r3, r3, r5
 800cb2a:	9302      	strhi	r3, [sp, #8]
 800cb2c:	2300      	movls	r3, #0
 800cb2e:	bf86      	itte	hi
 800cb30:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cb34:	608b      	strhi	r3, [r1, #8]
 800cb36:	9302      	strls	r3, [sp, #8]
 800cb38:	680b      	ldr	r3, [r1, #0]
 800cb3a:	468b      	mov	fp, r1
 800cb3c:	2500      	movs	r5, #0
 800cb3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cb42:	f84b 3b1c 	str.w	r3, [fp], #28
 800cb46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb4a:	4680      	mov	r8, r0
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	465e      	mov	r6, fp
 800cb50:	46aa      	mov	sl, r5
 800cb52:	46a9      	mov	r9, r5
 800cb54:	9501      	str	r5, [sp, #4]
 800cb56:	68a2      	ldr	r2, [r4, #8]
 800cb58:	b152      	cbz	r2, 800cb70 <_scanf_float+0x60>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b4e      	cmp	r3, #78	; 0x4e
 800cb60:	d864      	bhi.n	800cc2c <_scanf_float+0x11c>
 800cb62:	2b40      	cmp	r3, #64	; 0x40
 800cb64:	d83c      	bhi.n	800cbe0 <_scanf_float+0xd0>
 800cb66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cb6a:	b2c8      	uxtb	r0, r1
 800cb6c:	280e      	cmp	r0, #14
 800cb6e:	d93a      	bls.n	800cbe6 <_scanf_float+0xd6>
 800cb70:	f1b9 0f00 	cmp.w	r9, #0
 800cb74:	d003      	beq.n	800cb7e <_scanf_float+0x6e>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb82:	f1ba 0f01 	cmp.w	sl, #1
 800cb86:	f200 8113 	bhi.w	800cdb0 <_scanf_float+0x2a0>
 800cb8a:	455e      	cmp	r6, fp
 800cb8c:	f200 8105 	bhi.w	800cd9a <_scanf_float+0x28a>
 800cb90:	2501      	movs	r5, #1
 800cb92:	4628      	mov	r0, r5
 800cb94:	b007      	add	sp, #28
 800cb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cb9e:	2a0d      	cmp	r2, #13
 800cba0:	d8e6      	bhi.n	800cb70 <_scanf_float+0x60>
 800cba2:	a101      	add	r1, pc, #4	; (adr r1, 800cba8 <_scanf_float+0x98>)
 800cba4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cba8:	0800cce7 	.word	0x0800cce7
 800cbac:	0800cb71 	.word	0x0800cb71
 800cbb0:	0800cb71 	.word	0x0800cb71
 800cbb4:	0800cb71 	.word	0x0800cb71
 800cbb8:	0800cd47 	.word	0x0800cd47
 800cbbc:	0800cd1f 	.word	0x0800cd1f
 800cbc0:	0800cb71 	.word	0x0800cb71
 800cbc4:	0800cb71 	.word	0x0800cb71
 800cbc8:	0800ccf5 	.word	0x0800ccf5
 800cbcc:	0800cb71 	.word	0x0800cb71
 800cbd0:	0800cb71 	.word	0x0800cb71
 800cbd4:	0800cb71 	.word	0x0800cb71
 800cbd8:	0800cb71 	.word	0x0800cb71
 800cbdc:	0800ccad 	.word	0x0800ccad
 800cbe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cbe4:	e7db      	b.n	800cb9e <_scanf_float+0x8e>
 800cbe6:	290e      	cmp	r1, #14
 800cbe8:	d8c2      	bhi.n	800cb70 <_scanf_float+0x60>
 800cbea:	a001      	add	r0, pc, #4	; (adr r0, 800cbf0 <_scanf_float+0xe0>)
 800cbec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cbf0:	0800cc9f 	.word	0x0800cc9f
 800cbf4:	0800cb71 	.word	0x0800cb71
 800cbf8:	0800cc9f 	.word	0x0800cc9f
 800cbfc:	0800cd33 	.word	0x0800cd33
 800cc00:	0800cb71 	.word	0x0800cb71
 800cc04:	0800cc4d 	.word	0x0800cc4d
 800cc08:	0800cc89 	.word	0x0800cc89
 800cc0c:	0800cc89 	.word	0x0800cc89
 800cc10:	0800cc89 	.word	0x0800cc89
 800cc14:	0800cc89 	.word	0x0800cc89
 800cc18:	0800cc89 	.word	0x0800cc89
 800cc1c:	0800cc89 	.word	0x0800cc89
 800cc20:	0800cc89 	.word	0x0800cc89
 800cc24:	0800cc89 	.word	0x0800cc89
 800cc28:	0800cc89 	.word	0x0800cc89
 800cc2c:	2b6e      	cmp	r3, #110	; 0x6e
 800cc2e:	d809      	bhi.n	800cc44 <_scanf_float+0x134>
 800cc30:	2b60      	cmp	r3, #96	; 0x60
 800cc32:	d8b2      	bhi.n	800cb9a <_scanf_float+0x8a>
 800cc34:	2b54      	cmp	r3, #84	; 0x54
 800cc36:	d077      	beq.n	800cd28 <_scanf_float+0x218>
 800cc38:	2b59      	cmp	r3, #89	; 0x59
 800cc3a:	d199      	bne.n	800cb70 <_scanf_float+0x60>
 800cc3c:	2d07      	cmp	r5, #7
 800cc3e:	d197      	bne.n	800cb70 <_scanf_float+0x60>
 800cc40:	2508      	movs	r5, #8
 800cc42:	e029      	b.n	800cc98 <_scanf_float+0x188>
 800cc44:	2b74      	cmp	r3, #116	; 0x74
 800cc46:	d06f      	beq.n	800cd28 <_scanf_float+0x218>
 800cc48:	2b79      	cmp	r3, #121	; 0x79
 800cc4a:	e7f6      	b.n	800cc3a <_scanf_float+0x12a>
 800cc4c:	6821      	ldr	r1, [r4, #0]
 800cc4e:	05c8      	lsls	r0, r1, #23
 800cc50:	d51a      	bpl.n	800cc88 <_scanf_float+0x178>
 800cc52:	9b02      	ldr	r3, [sp, #8]
 800cc54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cc58:	6021      	str	r1, [r4, #0]
 800cc5a:	f109 0901 	add.w	r9, r9, #1
 800cc5e:	b11b      	cbz	r3, 800cc68 <_scanf_float+0x158>
 800cc60:	3b01      	subs	r3, #1
 800cc62:	3201      	adds	r2, #1
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	60a2      	str	r2, [r4, #8]
 800cc68:	68a3      	ldr	r3, [r4, #8]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	60a3      	str	r3, [r4, #8]
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	3301      	adds	r3, #1
 800cc72:	6123      	str	r3, [r4, #16]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	f340 8084 	ble.w	800cd88 <_scanf_float+0x278>
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	3301      	adds	r3, #1
 800cc84:	603b      	str	r3, [r7, #0]
 800cc86:	e766      	b.n	800cb56 <_scanf_float+0x46>
 800cc88:	eb1a 0f05 	cmn.w	sl, r5
 800cc8c:	f47f af70 	bne.w	800cb70 <_scanf_float+0x60>
 800cc90:	6822      	ldr	r2, [r4, #0]
 800cc92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cc96:	6022      	str	r2, [r4, #0]
 800cc98:	f806 3b01 	strb.w	r3, [r6], #1
 800cc9c:	e7e4      	b.n	800cc68 <_scanf_float+0x158>
 800cc9e:	6822      	ldr	r2, [r4, #0]
 800cca0:	0610      	lsls	r0, r2, #24
 800cca2:	f57f af65 	bpl.w	800cb70 <_scanf_float+0x60>
 800cca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccaa:	e7f4      	b.n	800cc96 <_scanf_float+0x186>
 800ccac:	f1ba 0f00 	cmp.w	sl, #0
 800ccb0:	d10e      	bne.n	800ccd0 <_scanf_float+0x1c0>
 800ccb2:	f1b9 0f00 	cmp.w	r9, #0
 800ccb6:	d10e      	bne.n	800ccd6 <_scanf_float+0x1c6>
 800ccb8:	6822      	ldr	r2, [r4, #0]
 800ccba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ccbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ccc2:	d108      	bne.n	800ccd6 <_scanf_float+0x1c6>
 800ccc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ccc8:	6022      	str	r2, [r4, #0]
 800ccca:	f04f 0a01 	mov.w	sl, #1
 800ccce:	e7e3      	b.n	800cc98 <_scanf_float+0x188>
 800ccd0:	f1ba 0f02 	cmp.w	sl, #2
 800ccd4:	d055      	beq.n	800cd82 <_scanf_float+0x272>
 800ccd6:	2d01      	cmp	r5, #1
 800ccd8:	d002      	beq.n	800cce0 <_scanf_float+0x1d0>
 800ccda:	2d04      	cmp	r5, #4
 800ccdc:	f47f af48 	bne.w	800cb70 <_scanf_float+0x60>
 800cce0:	3501      	adds	r5, #1
 800cce2:	b2ed      	uxtb	r5, r5
 800cce4:	e7d8      	b.n	800cc98 <_scanf_float+0x188>
 800cce6:	f1ba 0f01 	cmp.w	sl, #1
 800ccea:	f47f af41 	bne.w	800cb70 <_scanf_float+0x60>
 800ccee:	f04f 0a02 	mov.w	sl, #2
 800ccf2:	e7d1      	b.n	800cc98 <_scanf_float+0x188>
 800ccf4:	b97d      	cbnz	r5, 800cd16 <_scanf_float+0x206>
 800ccf6:	f1b9 0f00 	cmp.w	r9, #0
 800ccfa:	f47f af3c 	bne.w	800cb76 <_scanf_float+0x66>
 800ccfe:	6822      	ldr	r2, [r4, #0]
 800cd00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd08:	f47f af39 	bne.w	800cb7e <_scanf_float+0x6e>
 800cd0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	2501      	movs	r5, #1
 800cd14:	e7c0      	b.n	800cc98 <_scanf_float+0x188>
 800cd16:	2d03      	cmp	r5, #3
 800cd18:	d0e2      	beq.n	800cce0 <_scanf_float+0x1d0>
 800cd1a:	2d05      	cmp	r5, #5
 800cd1c:	e7de      	b.n	800ccdc <_scanf_float+0x1cc>
 800cd1e:	2d02      	cmp	r5, #2
 800cd20:	f47f af26 	bne.w	800cb70 <_scanf_float+0x60>
 800cd24:	2503      	movs	r5, #3
 800cd26:	e7b7      	b.n	800cc98 <_scanf_float+0x188>
 800cd28:	2d06      	cmp	r5, #6
 800cd2a:	f47f af21 	bne.w	800cb70 <_scanf_float+0x60>
 800cd2e:	2507      	movs	r5, #7
 800cd30:	e7b2      	b.n	800cc98 <_scanf_float+0x188>
 800cd32:	6822      	ldr	r2, [r4, #0]
 800cd34:	0591      	lsls	r1, r2, #22
 800cd36:	f57f af1b 	bpl.w	800cb70 <_scanf_float+0x60>
 800cd3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cd3e:	6022      	str	r2, [r4, #0]
 800cd40:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd44:	e7a8      	b.n	800cc98 <_scanf_float+0x188>
 800cd46:	6822      	ldr	r2, [r4, #0]
 800cd48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cd4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cd50:	d006      	beq.n	800cd60 <_scanf_float+0x250>
 800cd52:	0550      	lsls	r0, r2, #21
 800cd54:	f57f af0c 	bpl.w	800cb70 <_scanf_float+0x60>
 800cd58:	f1b9 0f00 	cmp.w	r9, #0
 800cd5c:	f43f af0f 	beq.w	800cb7e <_scanf_float+0x6e>
 800cd60:	0591      	lsls	r1, r2, #22
 800cd62:	bf58      	it	pl
 800cd64:	9901      	ldrpl	r1, [sp, #4]
 800cd66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd6a:	bf58      	it	pl
 800cd6c:	eba9 0101 	subpl.w	r1, r9, r1
 800cd70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cd74:	bf58      	it	pl
 800cd76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd7a:	6022      	str	r2, [r4, #0]
 800cd7c:	f04f 0900 	mov.w	r9, #0
 800cd80:	e78a      	b.n	800cc98 <_scanf_float+0x188>
 800cd82:	f04f 0a03 	mov.w	sl, #3
 800cd86:	e787      	b.n	800cc98 <_scanf_float+0x188>
 800cd88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4640      	mov	r0, r8
 800cd90:	4798      	blx	r3
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f43f aedf 	beq.w	800cb56 <_scanf_float+0x46>
 800cd98:	e6ea      	b.n	800cb70 <_scanf_float+0x60>
 800cd9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cda2:	463a      	mov	r2, r7
 800cda4:	4640      	mov	r0, r8
 800cda6:	4798      	blx	r3
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	6123      	str	r3, [r4, #16]
 800cdae:	e6ec      	b.n	800cb8a <_scanf_float+0x7a>
 800cdb0:	1e6b      	subs	r3, r5, #1
 800cdb2:	2b06      	cmp	r3, #6
 800cdb4:	d825      	bhi.n	800ce02 <_scanf_float+0x2f2>
 800cdb6:	2d02      	cmp	r5, #2
 800cdb8:	d836      	bhi.n	800ce28 <_scanf_float+0x318>
 800cdba:	455e      	cmp	r6, fp
 800cdbc:	f67f aee8 	bls.w	800cb90 <_scanf_float+0x80>
 800cdc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdc8:	463a      	mov	r2, r7
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4798      	blx	r3
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	e7f1      	b.n	800cdba <_scanf_float+0x2aa>
 800cdd6:	9802      	ldr	r0, [sp, #8]
 800cdd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cddc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cde0:	9002      	str	r0, [sp, #8]
 800cde2:	463a      	mov	r2, r7
 800cde4:	4640      	mov	r0, r8
 800cde6:	4798      	blx	r3
 800cde8:	6923      	ldr	r3, [r4, #16]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdf2:	fa5f fa8a 	uxtb.w	sl, sl
 800cdf6:	f1ba 0f02 	cmp.w	sl, #2
 800cdfa:	d1ec      	bne.n	800cdd6 <_scanf_float+0x2c6>
 800cdfc:	3d03      	subs	r5, #3
 800cdfe:	b2ed      	uxtb	r5, r5
 800ce00:	1b76      	subs	r6, r6, r5
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	05da      	lsls	r2, r3, #23
 800ce06:	d52f      	bpl.n	800ce68 <_scanf_float+0x358>
 800ce08:	055b      	lsls	r3, r3, #21
 800ce0a:	d510      	bpl.n	800ce2e <_scanf_float+0x31e>
 800ce0c:	455e      	cmp	r6, fp
 800ce0e:	f67f aebf 	bls.w	800cb90 <_scanf_float+0x80>
 800ce12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce1a:	463a      	mov	r2, r7
 800ce1c:	4640      	mov	r0, r8
 800ce1e:	4798      	blx	r3
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	6123      	str	r3, [r4, #16]
 800ce26:	e7f1      	b.n	800ce0c <_scanf_float+0x2fc>
 800ce28:	46aa      	mov	sl, r5
 800ce2a:	9602      	str	r6, [sp, #8]
 800ce2c:	e7df      	b.n	800cdee <_scanf_float+0x2de>
 800ce2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	2965      	cmp	r1, #101	; 0x65
 800ce36:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce3a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	d00c      	beq.n	800ce5c <_scanf_float+0x34c>
 800ce42:	2945      	cmp	r1, #69	; 0x45
 800ce44:	d00a      	beq.n	800ce5c <_scanf_float+0x34c>
 800ce46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce4a:	463a      	mov	r2, r7
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4798      	blx	r3
 800ce50:	6923      	ldr	r3, [r4, #16]
 800ce52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce56:	3b01      	subs	r3, #1
 800ce58:	1eb5      	subs	r5, r6, #2
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce60:	463a      	mov	r2, r7
 800ce62:	4640      	mov	r0, r8
 800ce64:	4798      	blx	r3
 800ce66:	462e      	mov	r6, r5
 800ce68:	6825      	ldr	r5, [r4, #0]
 800ce6a:	f015 0510 	ands.w	r5, r5, #16
 800ce6e:	d159      	bne.n	800cf24 <_scanf_float+0x414>
 800ce70:	7035      	strb	r5, [r6, #0]
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce7c:	d11b      	bne.n	800ceb6 <_scanf_float+0x3a6>
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	454b      	cmp	r3, r9
 800ce82:	eba3 0209 	sub.w	r2, r3, r9
 800ce86:	d123      	bne.n	800ced0 <_scanf_float+0x3c0>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4659      	mov	r1, fp
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	f000 ff8d 	bl	800ddac <_strtod_r>
 800ce92:	6822      	ldr	r2, [r4, #0]
 800ce94:	9b03      	ldr	r3, [sp, #12]
 800ce96:	f012 0f02 	tst.w	r2, #2
 800ce9a:	ec57 6b10 	vmov	r6, r7, d0
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	d021      	beq.n	800cee6 <_scanf_float+0x3d6>
 800cea2:	9903      	ldr	r1, [sp, #12]
 800cea4:	1d1a      	adds	r2, r3, #4
 800cea6:	600a      	str	r2, [r1, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	e9c3 6700 	strd	r6, r7, [r3]
 800ceae:	68e3      	ldr	r3, [r4, #12]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	60e3      	str	r3, [r4, #12]
 800ceb4:	e66d      	b.n	800cb92 <_scanf_float+0x82>
 800ceb6:	9b04      	ldr	r3, [sp, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d0e5      	beq.n	800ce88 <_scanf_float+0x378>
 800cebc:	9905      	ldr	r1, [sp, #20]
 800cebe:	230a      	movs	r3, #10
 800cec0:	462a      	mov	r2, r5
 800cec2:	3101      	adds	r1, #1
 800cec4:	4640      	mov	r0, r8
 800cec6:	f001 f805 	bl	800ded4 <_strtol_r>
 800ceca:	9b04      	ldr	r3, [sp, #16]
 800cecc:	9e05      	ldr	r6, [sp, #20]
 800cece:	1ac2      	subs	r2, r0, r3
 800ced0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ced4:	429e      	cmp	r6, r3
 800ced6:	bf28      	it	cs
 800ced8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cedc:	4912      	ldr	r1, [pc, #72]	; (800cf28 <_scanf_float+0x418>)
 800cede:	4630      	mov	r0, r6
 800cee0:	f000 f8a6 	bl	800d030 <siprintf>
 800cee4:	e7d0      	b.n	800ce88 <_scanf_float+0x378>
 800cee6:	9903      	ldr	r1, [sp, #12]
 800cee8:	f012 0f04 	tst.w	r2, #4
 800ceec:	f103 0204 	add.w	r2, r3, #4
 800cef0:	600a      	str	r2, [r1, #0]
 800cef2:	d1d9      	bne.n	800cea8 <_scanf_float+0x398>
 800cef4:	f8d3 8000 	ldr.w	r8, [r3]
 800cef8:	ee10 2a10 	vmov	r2, s0
 800cefc:	ee10 0a10 	vmov	r0, s0
 800cf00:	463b      	mov	r3, r7
 800cf02:	4639      	mov	r1, r7
 800cf04:	f7f3 fe22 	bl	8000b4c <__aeabi_dcmpun>
 800cf08:	b128      	cbz	r0, 800cf16 <_scanf_float+0x406>
 800cf0a:	4808      	ldr	r0, [pc, #32]	; (800cf2c <_scanf_float+0x41c>)
 800cf0c:	f000 f88a 	bl	800d024 <nanf>
 800cf10:	ed88 0a00 	vstr	s0, [r8]
 800cf14:	e7cb      	b.n	800ceae <_scanf_float+0x39e>
 800cf16:	4630      	mov	r0, r6
 800cf18:	4639      	mov	r1, r7
 800cf1a:	f7f3 fe75 	bl	8000c08 <__aeabi_d2f>
 800cf1e:	f8c8 0000 	str.w	r0, [r8]
 800cf22:	e7c4      	b.n	800ceae <_scanf_float+0x39e>
 800cf24:	2500      	movs	r5, #0
 800cf26:	e634      	b.n	800cb92 <_scanf_float+0x82>
 800cf28:	080124a7 	.word	0x080124a7
 800cf2c:	080122fb 	.word	0x080122fb

0800cf30 <cleanup_glue>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	460c      	mov	r4, r1
 800cf34:	6809      	ldr	r1, [r1, #0]
 800cf36:	4605      	mov	r5, r0
 800cf38:	b109      	cbz	r1, 800cf3e <cleanup_glue+0xe>
 800cf3a:	f7ff fff9 	bl	800cf30 <cleanup_glue>
 800cf3e:	4621      	mov	r1, r4
 800cf40:	4628      	mov	r0, r5
 800cf42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf46:	f003 b8fb 	b.w	8010140 <_free_r>
	...

0800cf4c <_reclaim_reent>:
 800cf4c:	4b2c      	ldr	r3, [pc, #176]	; (800d000 <_reclaim_reent+0xb4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4283      	cmp	r3, r0
 800cf52:	b570      	push	{r4, r5, r6, lr}
 800cf54:	4604      	mov	r4, r0
 800cf56:	d051      	beq.n	800cffc <_reclaim_reent+0xb0>
 800cf58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cf5a:	b143      	cbz	r3, 800cf6e <_reclaim_reent+0x22>
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d14a      	bne.n	800cff8 <_reclaim_reent+0xac>
 800cf62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf64:	6819      	ldr	r1, [r3, #0]
 800cf66:	b111      	cbz	r1, 800cf6e <_reclaim_reent+0x22>
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f003 f8e9 	bl	8010140 <_free_r>
 800cf6e:	6961      	ldr	r1, [r4, #20]
 800cf70:	b111      	cbz	r1, 800cf78 <_reclaim_reent+0x2c>
 800cf72:	4620      	mov	r0, r4
 800cf74:	f003 f8e4 	bl	8010140 <_free_r>
 800cf78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cf7a:	b111      	cbz	r1, 800cf82 <_reclaim_reent+0x36>
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f003 f8df 	bl	8010140 <_free_r>
 800cf82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf84:	b111      	cbz	r1, 800cf8c <_reclaim_reent+0x40>
 800cf86:	4620      	mov	r0, r4
 800cf88:	f003 f8da 	bl	8010140 <_free_r>
 800cf8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cf8e:	b111      	cbz	r1, 800cf96 <_reclaim_reent+0x4a>
 800cf90:	4620      	mov	r0, r4
 800cf92:	f003 f8d5 	bl	8010140 <_free_r>
 800cf96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cf98:	b111      	cbz	r1, 800cfa0 <_reclaim_reent+0x54>
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f003 f8d0 	bl	8010140 <_free_r>
 800cfa0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cfa2:	b111      	cbz	r1, 800cfaa <_reclaim_reent+0x5e>
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f003 f8cb 	bl	8010140 <_free_r>
 800cfaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cfac:	b111      	cbz	r1, 800cfb4 <_reclaim_reent+0x68>
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f003 f8c6 	bl	8010140 <_free_r>
 800cfb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfb6:	b111      	cbz	r1, 800cfbe <_reclaim_reent+0x72>
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f003 f8c1 	bl	8010140 <_free_r>
 800cfbe:	69a3      	ldr	r3, [r4, #24]
 800cfc0:	b1e3      	cbz	r3, 800cffc <_reclaim_reent+0xb0>
 800cfc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4798      	blx	r3
 800cfc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cfca:	b1b9      	cbz	r1, 800cffc <_reclaim_reent+0xb0>
 800cfcc:	4620      	mov	r0, r4
 800cfce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfd2:	f7ff bfad 	b.w	800cf30 <cleanup_glue>
 800cfd6:	5949      	ldr	r1, [r1, r5]
 800cfd8:	b941      	cbnz	r1, 800cfec <_reclaim_reent+0xa0>
 800cfda:	3504      	adds	r5, #4
 800cfdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfde:	2d80      	cmp	r5, #128	; 0x80
 800cfe0:	68d9      	ldr	r1, [r3, #12]
 800cfe2:	d1f8      	bne.n	800cfd6 <_reclaim_reent+0x8a>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f003 f8ab 	bl	8010140 <_free_r>
 800cfea:	e7ba      	b.n	800cf62 <_reclaim_reent+0x16>
 800cfec:	680e      	ldr	r6, [r1, #0]
 800cfee:	4620      	mov	r0, r4
 800cff0:	f003 f8a6 	bl	8010140 <_free_r>
 800cff4:	4631      	mov	r1, r6
 800cff6:	e7ef      	b.n	800cfd8 <_reclaim_reent+0x8c>
 800cff8:	2500      	movs	r5, #0
 800cffa:	e7ef      	b.n	800cfdc <_reclaim_reent+0x90>
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
 800cffe:	bf00      	nop
 800d000:	2000023c 	.word	0x2000023c

0800d004 <_sbrk_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d06      	ldr	r5, [pc, #24]	; (800d020 <_sbrk_r+0x1c>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	602b      	str	r3, [r5, #0]
 800d010:	f7f5 ff56 	bl	8002ec0 <_sbrk>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	d102      	bne.n	800d01e <_sbrk_r+0x1a>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	b103      	cbz	r3, 800d01e <_sbrk_r+0x1a>
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	20013298 	.word	0x20013298

0800d024 <nanf>:
 800d024:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d02c <nanf+0x8>
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	7fc00000 	.word	0x7fc00000

0800d030 <siprintf>:
 800d030:	b40e      	push	{r1, r2, r3}
 800d032:	b500      	push	{lr}
 800d034:	b09c      	sub	sp, #112	; 0x70
 800d036:	ab1d      	add	r3, sp, #116	; 0x74
 800d038:	9002      	str	r0, [sp, #8]
 800d03a:	9006      	str	r0, [sp, #24]
 800d03c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d040:	4809      	ldr	r0, [pc, #36]	; (800d068 <siprintf+0x38>)
 800d042:	9107      	str	r1, [sp, #28]
 800d044:	9104      	str	r1, [sp, #16]
 800d046:	4909      	ldr	r1, [pc, #36]	; (800d06c <siprintf+0x3c>)
 800d048:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04c:	9105      	str	r1, [sp, #20]
 800d04e:	6800      	ldr	r0, [r0, #0]
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	a902      	add	r1, sp, #8
 800d054:	f003 f94a 	bl	80102ec <_svfiprintf_r>
 800d058:	9b02      	ldr	r3, [sp, #8]
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
 800d05e:	b01c      	add	sp, #112	; 0x70
 800d060:	f85d eb04 	ldr.w	lr, [sp], #4
 800d064:	b003      	add	sp, #12
 800d066:	4770      	bx	lr
 800d068:	2000023c 	.word	0x2000023c
 800d06c:	ffff0208 	.word	0xffff0208

0800d070 <siscanf>:
 800d070:	b40e      	push	{r1, r2, r3}
 800d072:	b510      	push	{r4, lr}
 800d074:	b09f      	sub	sp, #124	; 0x7c
 800d076:	ac21      	add	r4, sp, #132	; 0x84
 800d078:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d07c:	f854 2b04 	ldr.w	r2, [r4], #4
 800d080:	9201      	str	r2, [sp, #4]
 800d082:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d086:	9004      	str	r0, [sp, #16]
 800d088:	9008      	str	r0, [sp, #32]
 800d08a:	f7f3 f8ab 	bl	80001e4 <strlen>
 800d08e:	4b0c      	ldr	r3, [pc, #48]	; (800d0c0 <siscanf+0x50>)
 800d090:	9005      	str	r0, [sp, #20]
 800d092:	9009      	str	r0, [sp, #36]	; 0x24
 800d094:	930d      	str	r3, [sp, #52]	; 0x34
 800d096:	480b      	ldr	r0, [pc, #44]	; (800d0c4 <siscanf+0x54>)
 800d098:	9a01      	ldr	r2, [sp, #4]
 800d09a:	6800      	ldr	r0, [r0, #0]
 800d09c:	9403      	str	r4, [sp, #12]
 800d09e:	2300      	movs	r3, #0
 800d0a0:	9311      	str	r3, [sp, #68]	; 0x44
 800d0a2:	9316      	str	r3, [sp, #88]	; 0x58
 800d0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d0ac:	a904      	add	r1, sp, #16
 800d0ae:	4623      	mov	r3, r4
 800d0b0:	f003 fa76 	bl	80105a0 <__ssvfiscanf_r>
 800d0b4:	b01f      	add	sp, #124	; 0x7c
 800d0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ba:	b003      	add	sp, #12
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop
 800d0c0:	0800d0eb 	.word	0x0800d0eb
 800d0c4:	2000023c 	.word	0x2000023c

0800d0c8 <__sread>:
 800d0c8:	b510      	push	{r4, lr}
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d0:	f003 fd30 	bl	8010b34 <_read_r>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	bfab      	itete	ge
 800d0d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0da:	89a3      	ldrhlt	r3, [r4, #12]
 800d0dc:	181b      	addge	r3, r3, r0
 800d0de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0e2:	bfac      	ite	ge
 800d0e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0e6:	81a3      	strhlt	r3, [r4, #12]
 800d0e8:	bd10      	pop	{r4, pc}

0800d0ea <__seofread>:
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	4770      	bx	lr

0800d0ee <__swrite>:
 800d0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	461f      	mov	r7, r3
 800d0f4:	898b      	ldrh	r3, [r1, #12]
 800d0f6:	05db      	lsls	r3, r3, #23
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	4616      	mov	r6, r2
 800d0fe:	d505      	bpl.n	800d10c <__swrite+0x1e>
 800d100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d104:	2302      	movs	r3, #2
 800d106:	2200      	movs	r2, #0
 800d108:	f002 fa8a 	bl	800f620 <_lseek_r>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	4632      	mov	r2, r6
 800d11a:	463b      	mov	r3, r7
 800d11c:	4628      	mov	r0, r5
 800d11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	f000 bf35 	b.w	800df90 <_write_r>

0800d126 <__sseek>:
 800d126:	b510      	push	{r4, lr}
 800d128:	460c      	mov	r4, r1
 800d12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12e:	f002 fa77 	bl	800f620 <_lseek_r>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	bf15      	itete	ne
 800d138:	6560      	strne	r0, [r4, #84]	; 0x54
 800d13a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d13e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d142:	81a3      	strheq	r3, [r4, #12]
 800d144:	bf18      	it	ne
 800d146:	81a3      	strhne	r3, [r4, #12]
 800d148:	bd10      	pop	{r4, pc}

0800d14a <__sclose>:
 800d14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14e:	f000 bfa7 	b.w	800e0a0 <_close_r>

0800d152 <strcpy>:
 800d152:	4603      	mov	r3, r0
 800d154:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d158:	f803 2b01 	strb.w	r2, [r3], #1
 800d15c:	2a00      	cmp	r2, #0
 800d15e:	d1f9      	bne.n	800d154 <strcpy+0x2>
 800d160:	4770      	bx	lr

0800d162 <sulp>:
 800d162:	b570      	push	{r4, r5, r6, lr}
 800d164:	4604      	mov	r4, r0
 800d166:	460d      	mov	r5, r1
 800d168:	ec45 4b10 	vmov	d0, r4, r5
 800d16c:	4616      	mov	r6, r2
 800d16e:	f002 fe81 	bl	800fe74 <__ulp>
 800d172:	ec51 0b10 	vmov	r0, r1, d0
 800d176:	b17e      	cbz	r6, 800d198 <sulp+0x36>
 800d178:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d17c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d180:	2b00      	cmp	r3, #0
 800d182:	dd09      	ble.n	800d198 <sulp+0x36>
 800d184:	051b      	lsls	r3, r3, #20
 800d186:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d18a:	2400      	movs	r4, #0
 800d18c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d190:	4622      	mov	r2, r4
 800d192:	462b      	mov	r3, r5
 800d194:	f7f3 fa40 	bl	8000618 <__aeabi_dmul>
 800d198:	bd70      	pop	{r4, r5, r6, pc}
 800d19a:	0000      	movs	r0, r0
 800d19c:	0000      	movs	r0, r0
	...

0800d1a0 <_strtod_l>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	ed2d 8b02 	vpush	{d8}
 800d1a8:	b09d      	sub	sp, #116	; 0x74
 800d1aa:	461f      	mov	r7, r3
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9318      	str	r3, [sp, #96]	; 0x60
 800d1b0:	4ba2      	ldr	r3, [pc, #648]	; (800d43c <_strtod_l+0x29c>)
 800d1b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	9305      	str	r3, [sp, #20]
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	4688      	mov	r8, r1
 800d1be:	f7f3 f811 	bl	80001e4 <strlen>
 800d1c2:	f04f 0a00 	mov.w	sl, #0
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	f04f 0b00 	mov.w	fp, #0
 800d1cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d1d2:	781a      	ldrb	r2, [r3, #0]
 800d1d4:	2a2b      	cmp	r2, #43	; 0x2b
 800d1d6:	d04e      	beq.n	800d276 <_strtod_l+0xd6>
 800d1d8:	d83b      	bhi.n	800d252 <_strtod_l+0xb2>
 800d1da:	2a0d      	cmp	r2, #13
 800d1dc:	d834      	bhi.n	800d248 <_strtod_l+0xa8>
 800d1de:	2a08      	cmp	r2, #8
 800d1e0:	d834      	bhi.n	800d24c <_strtod_l+0xac>
 800d1e2:	2a00      	cmp	r2, #0
 800d1e4:	d03e      	beq.n	800d264 <_strtod_l+0xc4>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	930a      	str	r3, [sp, #40]	; 0x28
 800d1ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d1ec:	7833      	ldrb	r3, [r6, #0]
 800d1ee:	2b30      	cmp	r3, #48	; 0x30
 800d1f0:	f040 80b0 	bne.w	800d354 <_strtod_l+0x1b4>
 800d1f4:	7873      	ldrb	r3, [r6, #1]
 800d1f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d1fa:	2b58      	cmp	r3, #88	; 0x58
 800d1fc:	d168      	bne.n	800d2d0 <_strtod_l+0x130>
 800d1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	ab18      	add	r3, sp, #96	; 0x60
 800d204:	9702      	str	r7, [sp, #8]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	4a8d      	ldr	r2, [pc, #564]	; (800d440 <_strtod_l+0x2a0>)
 800d20a:	ab19      	add	r3, sp, #100	; 0x64
 800d20c:	a917      	add	r1, sp, #92	; 0x5c
 800d20e:	4620      	mov	r0, r4
 800d210:	f001 fefa 	bl	800f008 <__gethex>
 800d214:	f010 0707 	ands.w	r7, r0, #7
 800d218:	4605      	mov	r5, r0
 800d21a:	d005      	beq.n	800d228 <_strtod_l+0x88>
 800d21c:	2f06      	cmp	r7, #6
 800d21e:	d12c      	bne.n	800d27a <_strtod_l+0xda>
 800d220:	3601      	adds	r6, #1
 800d222:	2300      	movs	r3, #0
 800d224:	9617      	str	r6, [sp, #92]	; 0x5c
 800d226:	930a      	str	r3, [sp, #40]	; 0x28
 800d228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f040 8590 	bne.w	800dd50 <_strtod_l+0xbb0>
 800d230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d232:	b1eb      	cbz	r3, 800d270 <_strtod_l+0xd0>
 800d234:	4652      	mov	r2, sl
 800d236:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d23a:	ec43 2b10 	vmov	d0, r2, r3
 800d23e:	b01d      	add	sp, #116	; 0x74
 800d240:	ecbd 8b02 	vpop	{d8}
 800d244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d248:	2a20      	cmp	r2, #32
 800d24a:	d1cc      	bne.n	800d1e6 <_strtod_l+0x46>
 800d24c:	3301      	adds	r3, #1
 800d24e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d250:	e7be      	b.n	800d1d0 <_strtod_l+0x30>
 800d252:	2a2d      	cmp	r2, #45	; 0x2d
 800d254:	d1c7      	bne.n	800d1e6 <_strtod_l+0x46>
 800d256:	2201      	movs	r2, #1
 800d258:	920a      	str	r2, [sp, #40]	; 0x28
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d25e:	785b      	ldrb	r3, [r3, #1]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1c2      	bne.n	800d1ea <_strtod_l+0x4a>
 800d264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d266:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f040 856e 	bne.w	800dd4c <_strtod_l+0xbac>
 800d270:	4652      	mov	r2, sl
 800d272:	465b      	mov	r3, fp
 800d274:	e7e1      	b.n	800d23a <_strtod_l+0x9a>
 800d276:	2200      	movs	r2, #0
 800d278:	e7ee      	b.n	800d258 <_strtod_l+0xb8>
 800d27a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d27c:	b13a      	cbz	r2, 800d28e <_strtod_l+0xee>
 800d27e:	2135      	movs	r1, #53	; 0x35
 800d280:	a81a      	add	r0, sp, #104	; 0x68
 800d282:	f002 ff02 	bl	801008a <__copybits>
 800d286:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d288:	4620      	mov	r0, r4
 800d28a:	f002 fac1 	bl	800f810 <_Bfree>
 800d28e:	3f01      	subs	r7, #1
 800d290:	2f04      	cmp	r7, #4
 800d292:	d806      	bhi.n	800d2a2 <_strtod_l+0x102>
 800d294:	e8df f007 	tbb	[pc, r7]
 800d298:	1714030a 	.word	0x1714030a
 800d29c:	0a          	.byte	0x0a
 800d29d:	00          	.byte	0x00
 800d29e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d2a2:	0728      	lsls	r0, r5, #28
 800d2a4:	d5c0      	bpl.n	800d228 <_strtod_l+0x88>
 800d2a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d2aa:	e7bd      	b.n	800d228 <_strtod_l+0x88>
 800d2ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d2b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d2b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d2b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d2ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d2be:	e7f0      	b.n	800d2a2 <_strtod_l+0x102>
 800d2c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d444 <_strtod_l+0x2a4>
 800d2c4:	e7ed      	b.n	800d2a2 <_strtod_l+0x102>
 800d2c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d2ca:	f04f 3aff 	mov.w	sl, #4294967295
 800d2ce:	e7e8      	b.n	800d2a2 <_strtod_l+0x102>
 800d2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2d2:	1c5a      	adds	r2, r3, #1
 800d2d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2d6:	785b      	ldrb	r3, [r3, #1]
 800d2d8:	2b30      	cmp	r3, #48	; 0x30
 800d2da:	d0f9      	beq.n	800d2d0 <_strtod_l+0x130>
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0a3      	beq.n	800d228 <_strtod_l+0x88>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	f04f 0900 	mov.w	r9, #0
 800d2e6:	9304      	str	r3, [sp, #16]
 800d2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2ea:	9308      	str	r3, [sp, #32]
 800d2ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800d2f0:	464f      	mov	r7, r9
 800d2f2:	220a      	movs	r2, #10
 800d2f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d2f6:	7806      	ldrb	r6, [r0, #0]
 800d2f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d2fc:	b2d9      	uxtb	r1, r3
 800d2fe:	2909      	cmp	r1, #9
 800d300:	d92a      	bls.n	800d358 <_strtod_l+0x1b8>
 800d302:	9905      	ldr	r1, [sp, #20]
 800d304:	462a      	mov	r2, r5
 800d306:	f003 fcab 	bl	8010c60 <strncmp>
 800d30a:	b398      	cbz	r0, 800d374 <_strtod_l+0x1d4>
 800d30c:	2000      	movs	r0, #0
 800d30e:	4632      	mov	r2, r6
 800d310:	463d      	mov	r5, r7
 800d312:	9005      	str	r0, [sp, #20]
 800d314:	4603      	mov	r3, r0
 800d316:	2a65      	cmp	r2, #101	; 0x65
 800d318:	d001      	beq.n	800d31e <_strtod_l+0x17e>
 800d31a:	2a45      	cmp	r2, #69	; 0x45
 800d31c:	d118      	bne.n	800d350 <_strtod_l+0x1b0>
 800d31e:	b91d      	cbnz	r5, 800d328 <_strtod_l+0x188>
 800d320:	9a04      	ldr	r2, [sp, #16]
 800d322:	4302      	orrs	r2, r0
 800d324:	d09e      	beq.n	800d264 <_strtod_l+0xc4>
 800d326:	2500      	movs	r5, #0
 800d328:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d32c:	f108 0201 	add.w	r2, r8, #1
 800d330:	9217      	str	r2, [sp, #92]	; 0x5c
 800d332:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d336:	2a2b      	cmp	r2, #43	; 0x2b
 800d338:	d075      	beq.n	800d426 <_strtod_l+0x286>
 800d33a:	2a2d      	cmp	r2, #45	; 0x2d
 800d33c:	d07b      	beq.n	800d436 <_strtod_l+0x296>
 800d33e:	f04f 0c00 	mov.w	ip, #0
 800d342:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d346:	2909      	cmp	r1, #9
 800d348:	f240 8082 	bls.w	800d450 <_strtod_l+0x2b0>
 800d34c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d350:	2600      	movs	r6, #0
 800d352:	e09d      	b.n	800d490 <_strtod_l+0x2f0>
 800d354:	2300      	movs	r3, #0
 800d356:	e7c4      	b.n	800d2e2 <_strtod_l+0x142>
 800d358:	2f08      	cmp	r7, #8
 800d35a:	bfd8      	it	le
 800d35c:	9907      	ldrle	r1, [sp, #28]
 800d35e:	f100 0001 	add.w	r0, r0, #1
 800d362:	bfda      	itte	le
 800d364:	fb02 3301 	mlale	r3, r2, r1, r3
 800d368:	9307      	strle	r3, [sp, #28]
 800d36a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d36e:	3701      	adds	r7, #1
 800d370:	9017      	str	r0, [sp, #92]	; 0x5c
 800d372:	e7bf      	b.n	800d2f4 <_strtod_l+0x154>
 800d374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d376:	195a      	adds	r2, r3, r5
 800d378:	9217      	str	r2, [sp, #92]	; 0x5c
 800d37a:	5d5a      	ldrb	r2, [r3, r5]
 800d37c:	2f00      	cmp	r7, #0
 800d37e:	d037      	beq.n	800d3f0 <_strtod_l+0x250>
 800d380:	9005      	str	r0, [sp, #20]
 800d382:	463d      	mov	r5, r7
 800d384:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d388:	2b09      	cmp	r3, #9
 800d38a:	d912      	bls.n	800d3b2 <_strtod_l+0x212>
 800d38c:	2301      	movs	r3, #1
 800d38e:	e7c2      	b.n	800d316 <_strtod_l+0x176>
 800d390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	9217      	str	r2, [sp, #92]	; 0x5c
 800d396:	785a      	ldrb	r2, [r3, #1]
 800d398:	3001      	adds	r0, #1
 800d39a:	2a30      	cmp	r2, #48	; 0x30
 800d39c:	d0f8      	beq.n	800d390 <_strtod_l+0x1f0>
 800d39e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d3a2:	2b08      	cmp	r3, #8
 800d3a4:	f200 84d9 	bhi.w	800dd5a <_strtod_l+0xbba>
 800d3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3aa:	9005      	str	r0, [sp, #20]
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	9308      	str	r3, [sp, #32]
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	3a30      	subs	r2, #48	; 0x30
 800d3b4:	f100 0301 	add.w	r3, r0, #1
 800d3b8:	d014      	beq.n	800d3e4 <_strtod_l+0x244>
 800d3ba:	9905      	ldr	r1, [sp, #20]
 800d3bc:	4419      	add	r1, r3
 800d3be:	9105      	str	r1, [sp, #20]
 800d3c0:	462b      	mov	r3, r5
 800d3c2:	eb00 0e05 	add.w	lr, r0, r5
 800d3c6:	210a      	movs	r1, #10
 800d3c8:	4573      	cmp	r3, lr
 800d3ca:	d113      	bne.n	800d3f4 <_strtod_l+0x254>
 800d3cc:	182b      	adds	r3, r5, r0
 800d3ce:	2b08      	cmp	r3, #8
 800d3d0:	f105 0501 	add.w	r5, r5, #1
 800d3d4:	4405      	add	r5, r0
 800d3d6:	dc1c      	bgt.n	800d412 <_strtod_l+0x272>
 800d3d8:	9907      	ldr	r1, [sp, #28]
 800d3da:	230a      	movs	r3, #10
 800d3dc:	fb03 2301 	mla	r3, r3, r1, r2
 800d3e0:	9307      	str	r3, [sp, #28]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d3e6:	1c51      	adds	r1, r2, #1
 800d3e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d3ea:	7852      	ldrb	r2, [r2, #1]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	e7c9      	b.n	800d384 <_strtod_l+0x1e4>
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	e7d2      	b.n	800d39a <_strtod_l+0x1fa>
 800d3f4:	2b08      	cmp	r3, #8
 800d3f6:	dc04      	bgt.n	800d402 <_strtod_l+0x262>
 800d3f8:	9e07      	ldr	r6, [sp, #28]
 800d3fa:	434e      	muls	r6, r1
 800d3fc:	9607      	str	r6, [sp, #28]
 800d3fe:	3301      	adds	r3, #1
 800d400:	e7e2      	b.n	800d3c8 <_strtod_l+0x228>
 800d402:	f103 0c01 	add.w	ip, r3, #1
 800d406:	f1bc 0f10 	cmp.w	ip, #16
 800d40a:	bfd8      	it	le
 800d40c:	fb01 f909 	mulle.w	r9, r1, r9
 800d410:	e7f5      	b.n	800d3fe <_strtod_l+0x25e>
 800d412:	2d10      	cmp	r5, #16
 800d414:	bfdc      	itt	le
 800d416:	230a      	movle	r3, #10
 800d418:	fb03 2909 	mlale	r9, r3, r9, r2
 800d41c:	e7e1      	b.n	800d3e2 <_strtod_l+0x242>
 800d41e:	2300      	movs	r3, #0
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	2301      	movs	r3, #1
 800d424:	e77c      	b.n	800d320 <_strtod_l+0x180>
 800d426:	f04f 0c00 	mov.w	ip, #0
 800d42a:	f108 0202 	add.w	r2, r8, #2
 800d42e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d430:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d434:	e785      	b.n	800d342 <_strtod_l+0x1a2>
 800d436:	f04f 0c01 	mov.w	ip, #1
 800d43a:	e7f6      	b.n	800d42a <_strtod_l+0x28a>
 800d43c:	080125f8 	.word	0x080125f8
 800d440:	080124ac 	.word	0x080124ac
 800d444:	7ff00000 	.word	0x7ff00000
 800d448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d44a:	1c51      	adds	r1, r2, #1
 800d44c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d44e:	7852      	ldrb	r2, [r2, #1]
 800d450:	2a30      	cmp	r2, #48	; 0x30
 800d452:	d0f9      	beq.n	800d448 <_strtod_l+0x2a8>
 800d454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d458:	2908      	cmp	r1, #8
 800d45a:	f63f af79 	bhi.w	800d350 <_strtod_l+0x1b0>
 800d45e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d464:	9206      	str	r2, [sp, #24]
 800d466:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d468:	1c51      	adds	r1, r2, #1
 800d46a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d46c:	7852      	ldrb	r2, [r2, #1]
 800d46e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d472:	2e09      	cmp	r6, #9
 800d474:	d937      	bls.n	800d4e6 <_strtod_l+0x346>
 800d476:	9e06      	ldr	r6, [sp, #24]
 800d478:	1b89      	subs	r1, r1, r6
 800d47a:	2908      	cmp	r1, #8
 800d47c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d480:	dc02      	bgt.n	800d488 <_strtod_l+0x2e8>
 800d482:	4576      	cmp	r6, lr
 800d484:	bfa8      	it	ge
 800d486:	4676      	movge	r6, lr
 800d488:	f1bc 0f00 	cmp.w	ip, #0
 800d48c:	d000      	beq.n	800d490 <_strtod_l+0x2f0>
 800d48e:	4276      	negs	r6, r6
 800d490:	2d00      	cmp	r5, #0
 800d492:	d14d      	bne.n	800d530 <_strtod_l+0x390>
 800d494:	9904      	ldr	r1, [sp, #16]
 800d496:	4301      	orrs	r1, r0
 800d498:	f47f aec6 	bne.w	800d228 <_strtod_l+0x88>
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f47f aee1 	bne.w	800d264 <_strtod_l+0xc4>
 800d4a2:	2a69      	cmp	r2, #105	; 0x69
 800d4a4:	d027      	beq.n	800d4f6 <_strtod_l+0x356>
 800d4a6:	dc24      	bgt.n	800d4f2 <_strtod_l+0x352>
 800d4a8:	2a49      	cmp	r2, #73	; 0x49
 800d4aa:	d024      	beq.n	800d4f6 <_strtod_l+0x356>
 800d4ac:	2a4e      	cmp	r2, #78	; 0x4e
 800d4ae:	f47f aed9 	bne.w	800d264 <_strtod_l+0xc4>
 800d4b2:	499f      	ldr	r1, [pc, #636]	; (800d730 <_strtod_l+0x590>)
 800d4b4:	a817      	add	r0, sp, #92	; 0x5c
 800d4b6:	f001 ffff 	bl	800f4b8 <__match>
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	f43f aed2 	beq.w	800d264 <_strtod_l+0xc4>
 800d4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b28      	cmp	r3, #40	; 0x28
 800d4c6:	d12d      	bne.n	800d524 <_strtod_l+0x384>
 800d4c8:	499a      	ldr	r1, [pc, #616]	; (800d734 <_strtod_l+0x594>)
 800d4ca:	aa1a      	add	r2, sp, #104	; 0x68
 800d4cc:	a817      	add	r0, sp, #92	; 0x5c
 800d4ce:	f002 f807 	bl	800f4e0 <__hexnan>
 800d4d2:	2805      	cmp	r0, #5
 800d4d4:	d126      	bne.n	800d524 <_strtod_l+0x384>
 800d4d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d4dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d4e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d4e4:	e6a0      	b.n	800d228 <_strtod_l+0x88>
 800d4e6:	210a      	movs	r1, #10
 800d4e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d4ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d4f0:	e7b9      	b.n	800d466 <_strtod_l+0x2c6>
 800d4f2:	2a6e      	cmp	r2, #110	; 0x6e
 800d4f4:	e7db      	b.n	800d4ae <_strtod_l+0x30e>
 800d4f6:	4990      	ldr	r1, [pc, #576]	; (800d738 <_strtod_l+0x598>)
 800d4f8:	a817      	add	r0, sp, #92	; 0x5c
 800d4fa:	f001 ffdd 	bl	800f4b8 <__match>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	f43f aeb0 	beq.w	800d264 <_strtod_l+0xc4>
 800d504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d506:	498d      	ldr	r1, [pc, #564]	; (800d73c <_strtod_l+0x59c>)
 800d508:	3b01      	subs	r3, #1
 800d50a:	a817      	add	r0, sp, #92	; 0x5c
 800d50c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d50e:	f001 ffd3 	bl	800f4b8 <__match>
 800d512:	b910      	cbnz	r0, 800d51a <_strtod_l+0x37a>
 800d514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d516:	3301      	adds	r3, #1
 800d518:	9317      	str	r3, [sp, #92]	; 0x5c
 800d51a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d74c <_strtod_l+0x5ac>
 800d51e:	f04f 0a00 	mov.w	sl, #0
 800d522:	e681      	b.n	800d228 <_strtod_l+0x88>
 800d524:	4886      	ldr	r0, [pc, #536]	; (800d740 <_strtod_l+0x5a0>)
 800d526:	f003 fb17 	bl	8010b58 <nan>
 800d52a:	ec5b ab10 	vmov	sl, fp, d0
 800d52e:	e67b      	b.n	800d228 <_strtod_l+0x88>
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	9807      	ldr	r0, [sp, #28]
 800d534:	1af3      	subs	r3, r6, r3
 800d536:	2f00      	cmp	r7, #0
 800d538:	bf08      	it	eq
 800d53a:	462f      	moveq	r7, r5
 800d53c:	2d10      	cmp	r5, #16
 800d53e:	9306      	str	r3, [sp, #24]
 800d540:	46a8      	mov	r8, r5
 800d542:	bfa8      	it	ge
 800d544:	f04f 0810 	movge.w	r8, #16
 800d548:	f7f2 ffec 	bl	8000524 <__aeabi_ui2d>
 800d54c:	2d09      	cmp	r5, #9
 800d54e:	4682      	mov	sl, r0
 800d550:	468b      	mov	fp, r1
 800d552:	dd13      	ble.n	800d57c <_strtod_l+0x3dc>
 800d554:	4b7b      	ldr	r3, [pc, #492]	; (800d744 <_strtod_l+0x5a4>)
 800d556:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d55a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d55e:	f7f3 f85b 	bl	8000618 <__aeabi_dmul>
 800d562:	4682      	mov	sl, r0
 800d564:	4648      	mov	r0, r9
 800d566:	468b      	mov	fp, r1
 800d568:	f7f2 ffdc 	bl	8000524 <__aeabi_ui2d>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4650      	mov	r0, sl
 800d572:	4659      	mov	r1, fp
 800d574:	f7f2 fe9a 	bl	80002ac <__adddf3>
 800d578:	4682      	mov	sl, r0
 800d57a:	468b      	mov	fp, r1
 800d57c:	2d0f      	cmp	r5, #15
 800d57e:	dc38      	bgt.n	800d5f2 <_strtod_l+0x452>
 800d580:	9b06      	ldr	r3, [sp, #24]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f43f ae50 	beq.w	800d228 <_strtod_l+0x88>
 800d588:	dd24      	ble.n	800d5d4 <_strtod_l+0x434>
 800d58a:	2b16      	cmp	r3, #22
 800d58c:	dc0b      	bgt.n	800d5a6 <_strtod_l+0x406>
 800d58e:	496d      	ldr	r1, [pc, #436]	; (800d744 <_strtod_l+0x5a4>)
 800d590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d598:	4652      	mov	r2, sl
 800d59a:	465b      	mov	r3, fp
 800d59c:	f7f3 f83c 	bl	8000618 <__aeabi_dmul>
 800d5a0:	4682      	mov	sl, r0
 800d5a2:	468b      	mov	fp, r1
 800d5a4:	e640      	b.n	800d228 <_strtod_l+0x88>
 800d5a6:	9a06      	ldr	r2, [sp, #24]
 800d5a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	db20      	blt.n	800d5f2 <_strtod_l+0x452>
 800d5b0:	4c64      	ldr	r4, [pc, #400]	; (800d744 <_strtod_l+0x5a4>)
 800d5b2:	f1c5 050f 	rsb	r5, r5, #15
 800d5b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d5ba:	4652      	mov	r2, sl
 800d5bc:	465b      	mov	r3, fp
 800d5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5c2:	f7f3 f829 	bl	8000618 <__aeabi_dmul>
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	1b5d      	subs	r5, r3, r5
 800d5ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d5ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5d2:	e7e3      	b.n	800d59c <_strtod_l+0x3fc>
 800d5d4:	9b06      	ldr	r3, [sp, #24]
 800d5d6:	3316      	adds	r3, #22
 800d5d8:	db0b      	blt.n	800d5f2 <_strtod_l+0x452>
 800d5da:	9b05      	ldr	r3, [sp, #20]
 800d5dc:	1b9e      	subs	r6, r3, r6
 800d5de:	4b59      	ldr	r3, [pc, #356]	; (800d744 <_strtod_l+0x5a4>)
 800d5e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	4659      	mov	r1, fp
 800d5ec:	f7f3 f93e 	bl	800086c <__aeabi_ddiv>
 800d5f0:	e7d6      	b.n	800d5a0 <_strtod_l+0x400>
 800d5f2:	9b06      	ldr	r3, [sp, #24]
 800d5f4:	eba5 0808 	sub.w	r8, r5, r8
 800d5f8:	4498      	add	r8, r3
 800d5fa:	f1b8 0f00 	cmp.w	r8, #0
 800d5fe:	dd74      	ble.n	800d6ea <_strtod_l+0x54a>
 800d600:	f018 030f 	ands.w	r3, r8, #15
 800d604:	d00a      	beq.n	800d61c <_strtod_l+0x47c>
 800d606:	494f      	ldr	r1, [pc, #316]	; (800d744 <_strtod_l+0x5a4>)
 800d608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d60c:	4652      	mov	r2, sl
 800d60e:	465b      	mov	r3, fp
 800d610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d614:	f7f3 f800 	bl	8000618 <__aeabi_dmul>
 800d618:	4682      	mov	sl, r0
 800d61a:	468b      	mov	fp, r1
 800d61c:	f038 080f 	bics.w	r8, r8, #15
 800d620:	d04f      	beq.n	800d6c2 <_strtod_l+0x522>
 800d622:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d626:	dd22      	ble.n	800d66e <_strtod_l+0x4ce>
 800d628:	2500      	movs	r5, #0
 800d62a:	462e      	mov	r6, r5
 800d62c:	9507      	str	r5, [sp, #28]
 800d62e:	9505      	str	r5, [sp, #20]
 800d630:	2322      	movs	r3, #34	; 0x22
 800d632:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d74c <_strtod_l+0x5ac>
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	f04f 0a00 	mov.w	sl, #0
 800d63c:	9b07      	ldr	r3, [sp, #28]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f43f adf2 	beq.w	800d228 <_strtod_l+0x88>
 800d644:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d646:	4620      	mov	r0, r4
 800d648:	f002 f8e2 	bl	800f810 <_Bfree>
 800d64c:	9905      	ldr	r1, [sp, #20]
 800d64e:	4620      	mov	r0, r4
 800d650:	f002 f8de 	bl	800f810 <_Bfree>
 800d654:	4631      	mov	r1, r6
 800d656:	4620      	mov	r0, r4
 800d658:	f002 f8da 	bl	800f810 <_Bfree>
 800d65c:	9907      	ldr	r1, [sp, #28]
 800d65e:	4620      	mov	r0, r4
 800d660:	f002 f8d6 	bl	800f810 <_Bfree>
 800d664:	4629      	mov	r1, r5
 800d666:	4620      	mov	r0, r4
 800d668:	f002 f8d2 	bl	800f810 <_Bfree>
 800d66c:	e5dc      	b.n	800d228 <_strtod_l+0x88>
 800d66e:	4b36      	ldr	r3, [pc, #216]	; (800d748 <_strtod_l+0x5a8>)
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	2300      	movs	r3, #0
 800d674:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d678:	4650      	mov	r0, sl
 800d67a:	4659      	mov	r1, fp
 800d67c:	4699      	mov	r9, r3
 800d67e:	f1b8 0f01 	cmp.w	r8, #1
 800d682:	dc21      	bgt.n	800d6c8 <_strtod_l+0x528>
 800d684:	b10b      	cbz	r3, 800d68a <_strtod_l+0x4ea>
 800d686:	4682      	mov	sl, r0
 800d688:	468b      	mov	fp, r1
 800d68a:	4b2f      	ldr	r3, [pc, #188]	; (800d748 <_strtod_l+0x5a8>)
 800d68c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d690:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d694:	4652      	mov	r2, sl
 800d696:	465b      	mov	r3, fp
 800d698:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d69c:	f7f2 ffbc 	bl	8000618 <__aeabi_dmul>
 800d6a0:	4b2a      	ldr	r3, [pc, #168]	; (800d74c <_strtod_l+0x5ac>)
 800d6a2:	460a      	mov	r2, r1
 800d6a4:	400b      	ands	r3, r1
 800d6a6:	492a      	ldr	r1, [pc, #168]	; (800d750 <_strtod_l+0x5b0>)
 800d6a8:	428b      	cmp	r3, r1
 800d6aa:	4682      	mov	sl, r0
 800d6ac:	d8bc      	bhi.n	800d628 <_strtod_l+0x488>
 800d6ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d6b2:	428b      	cmp	r3, r1
 800d6b4:	bf86      	itte	hi
 800d6b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d754 <_strtod_l+0x5b4>
 800d6ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800d6be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9304      	str	r3, [sp, #16]
 800d6c6:	e084      	b.n	800d7d2 <_strtod_l+0x632>
 800d6c8:	f018 0f01 	tst.w	r8, #1
 800d6cc:	d005      	beq.n	800d6da <_strtod_l+0x53a>
 800d6ce:	9b04      	ldr	r3, [sp, #16]
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f7f2 ffa0 	bl	8000618 <__aeabi_dmul>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	9a04      	ldr	r2, [sp, #16]
 800d6dc:	3208      	adds	r2, #8
 800d6de:	f109 0901 	add.w	r9, r9, #1
 800d6e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d6e6:	9204      	str	r2, [sp, #16]
 800d6e8:	e7c9      	b.n	800d67e <_strtod_l+0x4de>
 800d6ea:	d0ea      	beq.n	800d6c2 <_strtod_l+0x522>
 800d6ec:	f1c8 0800 	rsb	r8, r8, #0
 800d6f0:	f018 020f 	ands.w	r2, r8, #15
 800d6f4:	d00a      	beq.n	800d70c <_strtod_l+0x56c>
 800d6f6:	4b13      	ldr	r3, [pc, #76]	; (800d744 <_strtod_l+0x5a4>)
 800d6f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6fc:	4650      	mov	r0, sl
 800d6fe:	4659      	mov	r1, fp
 800d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d704:	f7f3 f8b2 	bl	800086c <__aeabi_ddiv>
 800d708:	4682      	mov	sl, r0
 800d70a:	468b      	mov	fp, r1
 800d70c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d710:	d0d7      	beq.n	800d6c2 <_strtod_l+0x522>
 800d712:	f1b8 0f1f 	cmp.w	r8, #31
 800d716:	dd1f      	ble.n	800d758 <_strtod_l+0x5b8>
 800d718:	2500      	movs	r5, #0
 800d71a:	462e      	mov	r6, r5
 800d71c:	9507      	str	r5, [sp, #28]
 800d71e:	9505      	str	r5, [sp, #20]
 800d720:	2322      	movs	r3, #34	; 0x22
 800d722:	f04f 0a00 	mov.w	sl, #0
 800d726:	f04f 0b00 	mov.w	fp, #0
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	e786      	b.n	800d63c <_strtod_l+0x49c>
 800d72e:	bf00      	nop
 800d730:	08012482 	.word	0x08012482
 800d734:	080124c0 	.word	0x080124c0
 800d738:	0801247a 	.word	0x0801247a
 800d73c:	08012503 	.word	0x08012503
 800d740:	080122fb 	.word	0x080122fb
 800d744:	08012690 	.word	0x08012690
 800d748:	08012668 	.word	0x08012668
 800d74c:	7ff00000 	.word	0x7ff00000
 800d750:	7ca00000 	.word	0x7ca00000
 800d754:	7fefffff 	.word	0x7fefffff
 800d758:	f018 0310 	ands.w	r3, r8, #16
 800d75c:	bf18      	it	ne
 800d75e:	236a      	movne	r3, #106	; 0x6a
 800d760:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800db10 <_strtod_l+0x970>
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	4650      	mov	r0, sl
 800d768:	4659      	mov	r1, fp
 800d76a:	2300      	movs	r3, #0
 800d76c:	f018 0f01 	tst.w	r8, #1
 800d770:	d004      	beq.n	800d77c <_strtod_l+0x5dc>
 800d772:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d776:	f7f2 ff4f 	bl	8000618 <__aeabi_dmul>
 800d77a:	2301      	movs	r3, #1
 800d77c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d780:	f109 0908 	add.w	r9, r9, #8
 800d784:	d1f2      	bne.n	800d76c <_strtod_l+0x5cc>
 800d786:	b10b      	cbz	r3, 800d78c <_strtod_l+0x5ec>
 800d788:	4682      	mov	sl, r0
 800d78a:	468b      	mov	fp, r1
 800d78c:	9b04      	ldr	r3, [sp, #16]
 800d78e:	b1c3      	cbz	r3, 800d7c2 <_strtod_l+0x622>
 800d790:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d794:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d798:	2b00      	cmp	r3, #0
 800d79a:	4659      	mov	r1, fp
 800d79c:	dd11      	ble.n	800d7c2 <_strtod_l+0x622>
 800d79e:	2b1f      	cmp	r3, #31
 800d7a0:	f340 8124 	ble.w	800d9ec <_strtod_l+0x84c>
 800d7a4:	2b34      	cmp	r3, #52	; 0x34
 800d7a6:	bfde      	ittt	le
 800d7a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d7ac:	f04f 33ff 	movle.w	r3, #4294967295
 800d7b0:	fa03 f202 	lslle.w	r2, r3, r2
 800d7b4:	f04f 0a00 	mov.w	sl, #0
 800d7b8:	bfcc      	ite	gt
 800d7ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d7be:	ea02 0b01 	andle.w	fp, r2, r1
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4650      	mov	r0, sl
 800d7c8:	4659      	mov	r1, fp
 800d7ca:	f7f3 f98d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d1a2      	bne.n	800d718 <_strtod_l+0x578>
 800d7d2:	9b07      	ldr	r3, [sp, #28]
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	9908      	ldr	r1, [sp, #32]
 800d7d8:	462b      	mov	r3, r5
 800d7da:	463a      	mov	r2, r7
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f002 f87f 	bl	800f8e0 <__s2b>
 800d7e2:	9007      	str	r0, [sp, #28]
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f43f af1f 	beq.w	800d628 <_strtod_l+0x488>
 800d7ea:	9b05      	ldr	r3, [sp, #20]
 800d7ec:	1b9e      	subs	r6, r3, r6
 800d7ee:	9b06      	ldr	r3, [sp, #24]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfb4      	ite	lt
 800d7f4:	4633      	movlt	r3, r6
 800d7f6:	2300      	movge	r3, #0
 800d7f8:	930c      	str	r3, [sp, #48]	; 0x30
 800d7fa:	9b06      	ldr	r3, [sp, #24]
 800d7fc:	2500      	movs	r5, #0
 800d7fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d802:	9312      	str	r3, [sp, #72]	; 0x48
 800d804:	462e      	mov	r6, r5
 800d806:	9b07      	ldr	r3, [sp, #28]
 800d808:	4620      	mov	r0, r4
 800d80a:	6859      	ldr	r1, [r3, #4]
 800d80c:	f001 ffc0 	bl	800f790 <_Balloc>
 800d810:	9005      	str	r0, [sp, #20]
 800d812:	2800      	cmp	r0, #0
 800d814:	f43f af0c 	beq.w	800d630 <_strtod_l+0x490>
 800d818:	9b07      	ldr	r3, [sp, #28]
 800d81a:	691a      	ldr	r2, [r3, #16]
 800d81c:	3202      	adds	r2, #2
 800d81e:	f103 010c 	add.w	r1, r3, #12
 800d822:	0092      	lsls	r2, r2, #2
 800d824:	300c      	adds	r0, #12
 800d826:	f7fe fb04 	bl	800be32 <memcpy>
 800d82a:	ec4b ab10 	vmov	d0, sl, fp
 800d82e:	aa1a      	add	r2, sp, #104	; 0x68
 800d830:	a919      	add	r1, sp, #100	; 0x64
 800d832:	4620      	mov	r0, r4
 800d834:	f002 fb9a 	bl	800ff6c <__d2b>
 800d838:	ec4b ab18 	vmov	d8, sl, fp
 800d83c:	9018      	str	r0, [sp, #96]	; 0x60
 800d83e:	2800      	cmp	r0, #0
 800d840:	f43f aef6 	beq.w	800d630 <_strtod_l+0x490>
 800d844:	2101      	movs	r1, #1
 800d846:	4620      	mov	r0, r4
 800d848:	f002 f8e4 	bl	800fa14 <__i2b>
 800d84c:	4606      	mov	r6, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	f43f aeee 	beq.w	800d630 <_strtod_l+0x490>
 800d854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d856:	9904      	ldr	r1, [sp, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	bfab      	itete	ge
 800d85c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d85e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d862:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d866:	bfac      	ite	ge
 800d868:	eb03 0902 	addge.w	r9, r3, r2
 800d86c:	1ad7      	sublt	r7, r2, r3
 800d86e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d870:	eba3 0801 	sub.w	r8, r3, r1
 800d874:	4490      	add	r8, r2
 800d876:	4ba1      	ldr	r3, [pc, #644]	; (800dafc <_strtod_l+0x95c>)
 800d878:	f108 38ff 	add.w	r8, r8, #4294967295
 800d87c:	4598      	cmp	r8, r3
 800d87e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d882:	f280 80c7 	bge.w	800da14 <_strtod_l+0x874>
 800d886:	eba3 0308 	sub.w	r3, r3, r8
 800d88a:	2b1f      	cmp	r3, #31
 800d88c:	eba2 0203 	sub.w	r2, r2, r3
 800d890:	f04f 0101 	mov.w	r1, #1
 800d894:	f300 80b1 	bgt.w	800d9fa <_strtod_l+0x85a>
 800d898:	fa01 f303 	lsl.w	r3, r1, r3
 800d89c:	930d      	str	r3, [sp, #52]	; 0x34
 800d89e:	2300      	movs	r3, #0
 800d8a0:	9308      	str	r3, [sp, #32]
 800d8a2:	eb09 0802 	add.w	r8, r9, r2
 800d8a6:	9b04      	ldr	r3, [sp, #16]
 800d8a8:	45c1      	cmp	r9, r8
 800d8aa:	4417      	add	r7, r2
 800d8ac:	441f      	add	r7, r3
 800d8ae:	464b      	mov	r3, r9
 800d8b0:	bfa8      	it	ge
 800d8b2:	4643      	movge	r3, r8
 800d8b4:	42bb      	cmp	r3, r7
 800d8b6:	bfa8      	it	ge
 800d8b8:	463b      	movge	r3, r7
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	bfc2      	ittt	gt
 800d8be:	eba8 0803 	subgt.w	r8, r8, r3
 800d8c2:	1aff      	subgt	r7, r7, r3
 800d8c4:	eba9 0903 	subgt.w	r9, r9, r3
 800d8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	dd17      	ble.n	800d8fe <_strtod_l+0x75e>
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f002 f95e 	bl	800fb94 <__pow5mult>
 800d8d8:	4606      	mov	r6, r0
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f43f aea8 	beq.w	800d630 <_strtod_l+0x490>
 800d8e0:	4601      	mov	r1, r0
 800d8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f002 f8ab 	bl	800fa40 <__multiply>
 800d8ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f43f ae9f 	beq.w	800d630 <_strtod_l+0x490>
 800d8f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f001 ff8b 	bl	800f810 <_Bfree>
 800d8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8fc:	9318      	str	r3, [sp, #96]	; 0x60
 800d8fe:	f1b8 0f00 	cmp.w	r8, #0
 800d902:	f300 808c 	bgt.w	800da1e <_strtod_l+0x87e>
 800d906:	9b06      	ldr	r3, [sp, #24]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	dd08      	ble.n	800d91e <_strtod_l+0x77e>
 800d90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d90e:	9905      	ldr	r1, [sp, #20]
 800d910:	4620      	mov	r0, r4
 800d912:	f002 f93f 	bl	800fb94 <__pow5mult>
 800d916:	9005      	str	r0, [sp, #20]
 800d918:	2800      	cmp	r0, #0
 800d91a:	f43f ae89 	beq.w	800d630 <_strtod_l+0x490>
 800d91e:	2f00      	cmp	r7, #0
 800d920:	dd08      	ble.n	800d934 <_strtod_l+0x794>
 800d922:	9905      	ldr	r1, [sp, #20]
 800d924:	463a      	mov	r2, r7
 800d926:	4620      	mov	r0, r4
 800d928:	f002 f98e 	bl	800fc48 <__lshift>
 800d92c:	9005      	str	r0, [sp, #20]
 800d92e:	2800      	cmp	r0, #0
 800d930:	f43f ae7e 	beq.w	800d630 <_strtod_l+0x490>
 800d934:	f1b9 0f00 	cmp.w	r9, #0
 800d938:	dd08      	ble.n	800d94c <_strtod_l+0x7ac>
 800d93a:	4631      	mov	r1, r6
 800d93c:	464a      	mov	r2, r9
 800d93e:	4620      	mov	r0, r4
 800d940:	f002 f982 	bl	800fc48 <__lshift>
 800d944:	4606      	mov	r6, r0
 800d946:	2800      	cmp	r0, #0
 800d948:	f43f ae72 	beq.w	800d630 <_strtod_l+0x490>
 800d94c:	9a05      	ldr	r2, [sp, #20]
 800d94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d950:	4620      	mov	r0, r4
 800d952:	f002 fa05 	bl	800fd60 <__mdiff>
 800d956:	4605      	mov	r5, r0
 800d958:	2800      	cmp	r0, #0
 800d95a:	f43f ae69 	beq.w	800d630 <_strtod_l+0x490>
 800d95e:	68c3      	ldr	r3, [r0, #12]
 800d960:	930b      	str	r3, [sp, #44]	; 0x2c
 800d962:	2300      	movs	r3, #0
 800d964:	60c3      	str	r3, [r0, #12]
 800d966:	4631      	mov	r1, r6
 800d968:	f002 f9de 	bl	800fd28 <__mcmp>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	da60      	bge.n	800da32 <_strtod_l+0x892>
 800d970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d972:	ea53 030a 	orrs.w	r3, r3, sl
 800d976:	f040 8082 	bne.w	800da7e <_strtod_l+0x8de>
 800d97a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d17d      	bne.n	800da7e <_strtod_l+0x8de>
 800d982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d986:	0d1b      	lsrs	r3, r3, #20
 800d988:	051b      	lsls	r3, r3, #20
 800d98a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d98e:	d976      	bls.n	800da7e <_strtod_l+0x8de>
 800d990:	696b      	ldr	r3, [r5, #20]
 800d992:	b913      	cbnz	r3, 800d99a <_strtod_l+0x7fa>
 800d994:	692b      	ldr	r3, [r5, #16]
 800d996:	2b01      	cmp	r3, #1
 800d998:	dd71      	ble.n	800da7e <_strtod_l+0x8de>
 800d99a:	4629      	mov	r1, r5
 800d99c:	2201      	movs	r2, #1
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f002 f952 	bl	800fc48 <__lshift>
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4605      	mov	r5, r0
 800d9a8:	f002 f9be 	bl	800fd28 <__mcmp>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	dd66      	ble.n	800da7e <_strtod_l+0x8de>
 800d9b0:	9904      	ldr	r1, [sp, #16]
 800d9b2:	4a53      	ldr	r2, [pc, #332]	; (800db00 <_strtod_l+0x960>)
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	f000 8081 	beq.w	800dabe <_strtod_l+0x91e>
 800d9bc:	ea02 010b 	and.w	r1, r2, fp
 800d9c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d9c4:	dc7b      	bgt.n	800dabe <_strtod_l+0x91e>
 800d9c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d9ca:	f77f aea9 	ble.w	800d720 <_strtod_l+0x580>
 800d9ce:	4b4d      	ldr	r3, [pc, #308]	; (800db04 <_strtod_l+0x964>)
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	4659      	mov	r1, fp
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f7f2 fe1f 	bl	8000618 <__aeabi_dmul>
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4303      	orrs	r3, r0
 800d9de:	bf08      	it	eq
 800d9e0:	2322      	moveq	r3, #34	; 0x22
 800d9e2:	4682      	mov	sl, r0
 800d9e4:	468b      	mov	fp, r1
 800d9e6:	bf08      	it	eq
 800d9e8:	6023      	streq	r3, [r4, #0]
 800d9ea:	e62b      	b.n	800d644 <_strtod_l+0x4a4>
 800d9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f4:	ea03 0a0a 	and.w	sl, r3, sl
 800d9f8:	e6e3      	b.n	800d7c2 <_strtod_l+0x622>
 800d9fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d9fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800da02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800da06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800da0a:	fa01 f308 	lsl.w	r3, r1, r8
 800da0e:	9308      	str	r3, [sp, #32]
 800da10:	910d      	str	r1, [sp, #52]	; 0x34
 800da12:	e746      	b.n	800d8a2 <_strtod_l+0x702>
 800da14:	2300      	movs	r3, #0
 800da16:	9308      	str	r3, [sp, #32]
 800da18:	2301      	movs	r3, #1
 800da1a:	930d      	str	r3, [sp, #52]	; 0x34
 800da1c:	e741      	b.n	800d8a2 <_strtod_l+0x702>
 800da1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da20:	4642      	mov	r2, r8
 800da22:	4620      	mov	r0, r4
 800da24:	f002 f910 	bl	800fc48 <__lshift>
 800da28:	9018      	str	r0, [sp, #96]	; 0x60
 800da2a:	2800      	cmp	r0, #0
 800da2c:	f47f af6b 	bne.w	800d906 <_strtod_l+0x766>
 800da30:	e5fe      	b.n	800d630 <_strtod_l+0x490>
 800da32:	465f      	mov	r7, fp
 800da34:	d16e      	bne.n	800db14 <_strtod_l+0x974>
 800da36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da3c:	b342      	cbz	r2, 800da90 <_strtod_l+0x8f0>
 800da3e:	4a32      	ldr	r2, [pc, #200]	; (800db08 <_strtod_l+0x968>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d128      	bne.n	800da96 <_strtod_l+0x8f6>
 800da44:	9b04      	ldr	r3, [sp, #16]
 800da46:	4651      	mov	r1, sl
 800da48:	b1eb      	cbz	r3, 800da86 <_strtod_l+0x8e6>
 800da4a:	4b2d      	ldr	r3, [pc, #180]	; (800db00 <_strtod_l+0x960>)
 800da4c:	403b      	ands	r3, r7
 800da4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da52:	f04f 32ff 	mov.w	r2, #4294967295
 800da56:	d819      	bhi.n	800da8c <_strtod_l+0x8ec>
 800da58:	0d1b      	lsrs	r3, r3, #20
 800da5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da5e:	fa02 f303 	lsl.w	r3, r2, r3
 800da62:	4299      	cmp	r1, r3
 800da64:	d117      	bne.n	800da96 <_strtod_l+0x8f6>
 800da66:	4b29      	ldr	r3, [pc, #164]	; (800db0c <_strtod_l+0x96c>)
 800da68:	429f      	cmp	r7, r3
 800da6a:	d102      	bne.n	800da72 <_strtod_l+0x8d2>
 800da6c:	3101      	adds	r1, #1
 800da6e:	f43f addf 	beq.w	800d630 <_strtod_l+0x490>
 800da72:	4b23      	ldr	r3, [pc, #140]	; (800db00 <_strtod_l+0x960>)
 800da74:	403b      	ands	r3, r7
 800da76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800da7a:	f04f 0a00 	mov.w	sl, #0
 800da7e:	9b04      	ldr	r3, [sp, #16]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1a4      	bne.n	800d9ce <_strtod_l+0x82e>
 800da84:	e5de      	b.n	800d644 <_strtod_l+0x4a4>
 800da86:	f04f 33ff 	mov.w	r3, #4294967295
 800da8a:	e7ea      	b.n	800da62 <_strtod_l+0x8c2>
 800da8c:	4613      	mov	r3, r2
 800da8e:	e7e8      	b.n	800da62 <_strtod_l+0x8c2>
 800da90:	ea53 030a 	orrs.w	r3, r3, sl
 800da94:	d08c      	beq.n	800d9b0 <_strtod_l+0x810>
 800da96:	9b08      	ldr	r3, [sp, #32]
 800da98:	b1db      	cbz	r3, 800dad2 <_strtod_l+0x932>
 800da9a:	423b      	tst	r3, r7
 800da9c:	d0ef      	beq.n	800da7e <_strtod_l+0x8de>
 800da9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa0:	9a04      	ldr	r2, [sp, #16]
 800daa2:	4650      	mov	r0, sl
 800daa4:	4659      	mov	r1, fp
 800daa6:	b1c3      	cbz	r3, 800dada <_strtod_l+0x93a>
 800daa8:	f7ff fb5b 	bl	800d162 <sulp>
 800daac:	4602      	mov	r2, r0
 800daae:	460b      	mov	r3, r1
 800dab0:	ec51 0b18 	vmov	r0, r1, d8
 800dab4:	f7f2 fbfa 	bl	80002ac <__adddf3>
 800dab8:	4682      	mov	sl, r0
 800daba:	468b      	mov	fp, r1
 800dabc:	e7df      	b.n	800da7e <_strtod_l+0x8de>
 800dabe:	4013      	ands	r3, r2
 800dac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dac4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dacc:	f04f 3aff 	mov.w	sl, #4294967295
 800dad0:	e7d5      	b.n	800da7e <_strtod_l+0x8de>
 800dad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dad4:	ea13 0f0a 	tst.w	r3, sl
 800dad8:	e7e0      	b.n	800da9c <_strtod_l+0x8fc>
 800dada:	f7ff fb42 	bl	800d162 <sulp>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	ec51 0b18 	vmov	r0, r1, d8
 800dae6:	f7f2 fbdf 	bl	80002a8 <__aeabi_dsub>
 800daea:	2200      	movs	r2, #0
 800daec:	2300      	movs	r3, #0
 800daee:	4682      	mov	sl, r0
 800daf0:	468b      	mov	fp, r1
 800daf2:	f7f2 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d0c1      	beq.n	800da7e <_strtod_l+0x8de>
 800dafa:	e611      	b.n	800d720 <_strtod_l+0x580>
 800dafc:	fffffc02 	.word	0xfffffc02
 800db00:	7ff00000 	.word	0x7ff00000
 800db04:	39500000 	.word	0x39500000
 800db08:	000fffff 	.word	0x000fffff
 800db0c:	7fefffff 	.word	0x7fefffff
 800db10:	080124d8 	.word	0x080124d8
 800db14:	4631      	mov	r1, r6
 800db16:	4628      	mov	r0, r5
 800db18:	f002 fa84 	bl	8010024 <__ratio>
 800db1c:	ec59 8b10 	vmov	r8, r9, d0
 800db20:	ee10 0a10 	vmov	r0, s0
 800db24:	2200      	movs	r2, #0
 800db26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db2a:	4649      	mov	r1, r9
 800db2c:	f7f2 fff0 	bl	8000b10 <__aeabi_dcmple>
 800db30:	2800      	cmp	r0, #0
 800db32:	d07a      	beq.n	800dc2a <_strtod_l+0xa8a>
 800db34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db36:	2b00      	cmp	r3, #0
 800db38:	d04a      	beq.n	800dbd0 <_strtod_l+0xa30>
 800db3a:	4b95      	ldr	r3, [pc, #596]	; (800dd90 <_strtod_l+0xbf0>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800db42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dd90 <_strtod_l+0xbf0>
 800db46:	f04f 0800 	mov.w	r8, #0
 800db4a:	4b92      	ldr	r3, [pc, #584]	; (800dd94 <_strtod_l+0xbf4>)
 800db4c:	403b      	ands	r3, r7
 800db4e:	930d      	str	r3, [sp, #52]	; 0x34
 800db50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db52:	4b91      	ldr	r3, [pc, #580]	; (800dd98 <_strtod_l+0xbf8>)
 800db54:	429a      	cmp	r2, r3
 800db56:	f040 80b0 	bne.w	800dcba <_strtod_l+0xb1a>
 800db5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800db62:	ec4b ab10 	vmov	d0, sl, fp
 800db66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db6a:	f002 f983 	bl	800fe74 <__ulp>
 800db6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800db72:	ec53 2b10 	vmov	r2, r3, d0
 800db76:	f7f2 fd4f 	bl	8000618 <__aeabi_dmul>
 800db7a:	4652      	mov	r2, sl
 800db7c:	465b      	mov	r3, fp
 800db7e:	f7f2 fb95 	bl	80002ac <__adddf3>
 800db82:	460b      	mov	r3, r1
 800db84:	4983      	ldr	r1, [pc, #524]	; (800dd94 <_strtod_l+0xbf4>)
 800db86:	4a85      	ldr	r2, [pc, #532]	; (800dd9c <_strtod_l+0xbfc>)
 800db88:	4019      	ands	r1, r3
 800db8a:	4291      	cmp	r1, r2
 800db8c:	4682      	mov	sl, r0
 800db8e:	d960      	bls.n	800dc52 <_strtod_l+0xab2>
 800db90:	ee18 3a90 	vmov	r3, s17
 800db94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800db98:	4293      	cmp	r3, r2
 800db9a:	d104      	bne.n	800dba6 <_strtod_l+0xa06>
 800db9c:	ee18 3a10 	vmov	r3, s16
 800dba0:	3301      	adds	r3, #1
 800dba2:	f43f ad45 	beq.w	800d630 <_strtod_l+0x490>
 800dba6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dda8 <_strtod_l+0xc08>
 800dbaa:	f04f 3aff 	mov.w	sl, #4294967295
 800dbae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f001 fe2d 	bl	800f810 <_Bfree>
 800dbb6:	9905      	ldr	r1, [sp, #20]
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f001 fe29 	bl	800f810 <_Bfree>
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f001 fe25 	bl	800f810 <_Bfree>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f001 fe21 	bl	800f810 <_Bfree>
 800dbce:	e61a      	b.n	800d806 <_strtod_l+0x666>
 800dbd0:	f1ba 0f00 	cmp.w	sl, #0
 800dbd4:	d11b      	bne.n	800dc0e <_strtod_l+0xa6e>
 800dbd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbda:	b9f3      	cbnz	r3, 800dc1a <_strtod_l+0xa7a>
 800dbdc:	4b6c      	ldr	r3, [pc, #432]	; (800dd90 <_strtod_l+0xbf0>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	f7f2 ff8a 	bl	8000afc <__aeabi_dcmplt>
 800dbe8:	b9d0      	cbnz	r0, 800dc20 <_strtod_l+0xa80>
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	4b6c      	ldr	r3, [pc, #432]	; (800dda0 <_strtod_l+0xc00>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f7f2 fd11 	bl	8000618 <__aeabi_dmul>
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	4689      	mov	r9, r1
 800dbfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dc02:	9315      	str	r3, [sp, #84]	; 0x54
 800dc04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dc08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc0c:	e79d      	b.n	800db4a <_strtod_l+0x9aa>
 800dc0e:	f1ba 0f01 	cmp.w	sl, #1
 800dc12:	d102      	bne.n	800dc1a <_strtod_l+0xa7a>
 800dc14:	2f00      	cmp	r7, #0
 800dc16:	f43f ad83 	beq.w	800d720 <_strtod_l+0x580>
 800dc1a:	4b62      	ldr	r3, [pc, #392]	; (800dda4 <_strtod_l+0xc04>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	e78e      	b.n	800db3e <_strtod_l+0x99e>
 800dc20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dda0 <_strtod_l+0xc00>
 800dc24:	f04f 0800 	mov.w	r8, #0
 800dc28:	e7e7      	b.n	800dbfa <_strtod_l+0xa5a>
 800dc2a:	4b5d      	ldr	r3, [pc, #372]	; (800dda0 <_strtod_l+0xc00>)
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	4649      	mov	r1, r9
 800dc30:	2200      	movs	r2, #0
 800dc32:	f7f2 fcf1 	bl	8000618 <__aeabi_dmul>
 800dc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc38:	4680      	mov	r8, r0
 800dc3a:	4689      	mov	r9, r1
 800dc3c:	b933      	cbnz	r3, 800dc4c <_strtod_l+0xaac>
 800dc3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc42:	900e      	str	r0, [sp, #56]	; 0x38
 800dc44:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dc4a:	e7dd      	b.n	800dc08 <_strtod_l+0xa68>
 800dc4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dc50:	e7f9      	b.n	800dc46 <_strtod_l+0xaa6>
 800dc52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1a8      	bne.n	800dbae <_strtod_l+0xa0e>
 800dc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc62:	0d1b      	lsrs	r3, r3, #20
 800dc64:	051b      	lsls	r3, r3, #20
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d1a1      	bne.n	800dbae <_strtod_l+0xa0e>
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	f7f3 f833 	bl	8000cd8 <__aeabi_d2lz>
 800dc72:	f7f2 fca3 	bl	80005bc <__aeabi_l2d>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4640      	mov	r0, r8
 800dc7c:	4649      	mov	r1, r9
 800dc7e:	f7f2 fb13 	bl	80002a8 <__aeabi_dsub>
 800dc82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc88:	ea43 030a 	orr.w	r3, r3, sl
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	4680      	mov	r8, r0
 800dc90:	4689      	mov	r9, r1
 800dc92:	d055      	beq.n	800dd40 <_strtod_l+0xba0>
 800dc94:	a336      	add	r3, pc, #216	; (adr r3, 800dd70 <_strtod_l+0xbd0>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f7f2 ff2f 	bl	8000afc <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f47f acd0 	bne.w	800d644 <_strtod_l+0x4a4>
 800dca4:	a334      	add	r3, pc, #208	; (adr r3, 800dd78 <_strtod_l+0xbd8>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4649      	mov	r1, r9
 800dcae:	f7f2 ff43 	bl	8000b38 <__aeabi_dcmpgt>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f43f af7b 	beq.w	800dbae <_strtod_l+0xa0e>
 800dcb8:	e4c4      	b.n	800d644 <_strtod_l+0x4a4>
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	b333      	cbz	r3, 800dd0c <_strtod_l+0xb6c>
 800dcbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dcc4:	d822      	bhi.n	800dd0c <_strtod_l+0xb6c>
 800dcc6:	a32e      	add	r3, pc, #184	; (adr r3, 800dd80 <_strtod_l+0xbe0>)
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	4640      	mov	r0, r8
 800dcce:	4649      	mov	r1, r9
 800dcd0:	f7f2 ff1e 	bl	8000b10 <__aeabi_dcmple>
 800dcd4:	b1a0      	cbz	r0, 800dd00 <_strtod_l+0xb60>
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	4640      	mov	r0, r8
 800dcda:	f7f2 ff75 	bl	8000bc8 <__aeabi_d2uiz>
 800dcde:	2801      	cmp	r0, #1
 800dce0:	bf38      	it	cc
 800dce2:	2001      	movcc	r0, #1
 800dce4:	f7f2 fc1e 	bl	8000524 <__aeabi_ui2d>
 800dce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcea:	4680      	mov	r8, r0
 800dcec:	4689      	mov	r9, r1
 800dcee:	bb23      	cbnz	r3, 800dd3a <_strtod_l+0xb9a>
 800dcf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcf4:	9010      	str	r0, [sp, #64]	; 0x40
 800dcf6:	9311      	str	r3, [sp, #68]	; 0x44
 800dcf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dcfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dd08:	1a9b      	subs	r3, r3, r2
 800dd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd10:	eeb0 0a48 	vmov.f32	s0, s16
 800dd14:	eef0 0a68 	vmov.f32	s1, s17
 800dd18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd1c:	f002 f8aa 	bl	800fe74 <__ulp>
 800dd20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd24:	ec53 2b10 	vmov	r2, r3, d0
 800dd28:	f7f2 fc76 	bl	8000618 <__aeabi_dmul>
 800dd2c:	ec53 2b18 	vmov	r2, r3, d8
 800dd30:	f7f2 fabc 	bl	80002ac <__adddf3>
 800dd34:	4682      	mov	sl, r0
 800dd36:	468b      	mov	fp, r1
 800dd38:	e78d      	b.n	800dc56 <_strtod_l+0xab6>
 800dd3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dd3e:	e7db      	b.n	800dcf8 <_strtod_l+0xb58>
 800dd40:	a311      	add	r3, pc, #68	; (adr r3, 800dd88 <_strtod_l+0xbe8>)
 800dd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd46:	f7f2 fed9 	bl	8000afc <__aeabi_dcmplt>
 800dd4a:	e7b2      	b.n	800dcb2 <_strtod_l+0xb12>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dd52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	f7ff ba6b 	b.w	800d230 <_strtod_l+0x90>
 800dd5a:	2a65      	cmp	r2, #101	; 0x65
 800dd5c:	f43f ab5f 	beq.w	800d41e <_strtod_l+0x27e>
 800dd60:	2a45      	cmp	r2, #69	; 0x45
 800dd62:	f43f ab5c 	beq.w	800d41e <_strtod_l+0x27e>
 800dd66:	2301      	movs	r3, #1
 800dd68:	f7ff bb94 	b.w	800d494 <_strtod_l+0x2f4>
 800dd6c:	f3af 8000 	nop.w
 800dd70:	94a03595 	.word	0x94a03595
 800dd74:	3fdfffff 	.word	0x3fdfffff
 800dd78:	35afe535 	.word	0x35afe535
 800dd7c:	3fe00000 	.word	0x3fe00000
 800dd80:	ffc00000 	.word	0xffc00000
 800dd84:	41dfffff 	.word	0x41dfffff
 800dd88:	94a03595 	.word	0x94a03595
 800dd8c:	3fcfffff 	.word	0x3fcfffff
 800dd90:	3ff00000 	.word	0x3ff00000
 800dd94:	7ff00000 	.word	0x7ff00000
 800dd98:	7fe00000 	.word	0x7fe00000
 800dd9c:	7c9fffff 	.word	0x7c9fffff
 800dda0:	3fe00000 	.word	0x3fe00000
 800dda4:	bff00000 	.word	0xbff00000
 800dda8:	7fefffff 	.word	0x7fefffff

0800ddac <_strtod_r>:
 800ddac:	4b01      	ldr	r3, [pc, #4]	; (800ddb4 <_strtod_r+0x8>)
 800ddae:	f7ff b9f7 	b.w	800d1a0 <_strtod_l>
 800ddb2:	bf00      	nop
 800ddb4:	200002a4 	.word	0x200002a4

0800ddb8 <strtod>:
 800ddb8:	460a      	mov	r2, r1
 800ddba:	4601      	mov	r1, r0
 800ddbc:	4802      	ldr	r0, [pc, #8]	; (800ddc8 <strtod+0x10>)
 800ddbe:	4b03      	ldr	r3, [pc, #12]	; (800ddcc <strtod+0x14>)
 800ddc0:	6800      	ldr	r0, [r0, #0]
 800ddc2:	f7ff b9ed 	b.w	800d1a0 <_strtod_l>
 800ddc6:	bf00      	nop
 800ddc8:	2000023c 	.word	0x2000023c
 800ddcc:	200002a4 	.word	0x200002a4

0800ddd0 <_strtol_l.constprop.0>:
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd6:	d001      	beq.n	800dddc <_strtol_l.constprop.0+0xc>
 800ddd8:	2b24      	cmp	r3, #36	; 0x24
 800ddda:	d906      	bls.n	800ddea <_strtol_l.constprop.0+0x1a>
 800dddc:	f7fd fef4 	bl	800bbc8 <__errno>
 800dde0:	2316      	movs	r3, #22
 800dde2:	6003      	str	r3, [r0, #0]
 800dde4:	2000      	movs	r0, #0
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ded0 <_strtol_l.constprop.0+0x100>
 800ddee:	460d      	mov	r5, r1
 800ddf0:	462e      	mov	r6, r5
 800ddf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddf6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ddfa:	f017 0708 	ands.w	r7, r7, #8
 800ddfe:	d1f7      	bne.n	800ddf0 <_strtol_l.constprop.0+0x20>
 800de00:	2c2d      	cmp	r4, #45	; 0x2d
 800de02:	d132      	bne.n	800de6a <_strtol_l.constprop.0+0x9a>
 800de04:	782c      	ldrb	r4, [r5, #0]
 800de06:	2701      	movs	r7, #1
 800de08:	1cb5      	adds	r5, r6, #2
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d05b      	beq.n	800dec6 <_strtol_l.constprop.0+0xf6>
 800de0e:	2b10      	cmp	r3, #16
 800de10:	d109      	bne.n	800de26 <_strtol_l.constprop.0+0x56>
 800de12:	2c30      	cmp	r4, #48	; 0x30
 800de14:	d107      	bne.n	800de26 <_strtol_l.constprop.0+0x56>
 800de16:	782c      	ldrb	r4, [r5, #0]
 800de18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800de1c:	2c58      	cmp	r4, #88	; 0x58
 800de1e:	d14d      	bne.n	800debc <_strtol_l.constprop.0+0xec>
 800de20:	786c      	ldrb	r4, [r5, #1]
 800de22:	2310      	movs	r3, #16
 800de24:	3502      	adds	r5, #2
 800de26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800de2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800de2e:	f04f 0c00 	mov.w	ip, #0
 800de32:	fbb8 f9f3 	udiv	r9, r8, r3
 800de36:	4666      	mov	r6, ip
 800de38:	fb03 8a19 	mls	sl, r3, r9, r8
 800de3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800de40:	f1be 0f09 	cmp.w	lr, #9
 800de44:	d816      	bhi.n	800de74 <_strtol_l.constprop.0+0xa4>
 800de46:	4674      	mov	r4, lr
 800de48:	42a3      	cmp	r3, r4
 800de4a:	dd24      	ble.n	800de96 <_strtol_l.constprop.0+0xc6>
 800de4c:	f1bc 0f00 	cmp.w	ip, #0
 800de50:	db1e      	blt.n	800de90 <_strtol_l.constprop.0+0xc0>
 800de52:	45b1      	cmp	r9, r6
 800de54:	d31c      	bcc.n	800de90 <_strtol_l.constprop.0+0xc0>
 800de56:	d101      	bne.n	800de5c <_strtol_l.constprop.0+0x8c>
 800de58:	45a2      	cmp	sl, r4
 800de5a:	db19      	blt.n	800de90 <_strtol_l.constprop.0+0xc0>
 800de5c:	fb06 4603 	mla	r6, r6, r3, r4
 800de60:	f04f 0c01 	mov.w	ip, #1
 800de64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de68:	e7e8      	b.n	800de3c <_strtol_l.constprop.0+0x6c>
 800de6a:	2c2b      	cmp	r4, #43	; 0x2b
 800de6c:	bf04      	itt	eq
 800de6e:	782c      	ldrbeq	r4, [r5, #0]
 800de70:	1cb5      	addeq	r5, r6, #2
 800de72:	e7ca      	b.n	800de0a <_strtol_l.constprop.0+0x3a>
 800de74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800de78:	f1be 0f19 	cmp.w	lr, #25
 800de7c:	d801      	bhi.n	800de82 <_strtol_l.constprop.0+0xb2>
 800de7e:	3c37      	subs	r4, #55	; 0x37
 800de80:	e7e2      	b.n	800de48 <_strtol_l.constprop.0+0x78>
 800de82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800de86:	f1be 0f19 	cmp.w	lr, #25
 800de8a:	d804      	bhi.n	800de96 <_strtol_l.constprop.0+0xc6>
 800de8c:	3c57      	subs	r4, #87	; 0x57
 800de8e:	e7db      	b.n	800de48 <_strtol_l.constprop.0+0x78>
 800de90:	f04f 3cff 	mov.w	ip, #4294967295
 800de94:	e7e6      	b.n	800de64 <_strtol_l.constprop.0+0x94>
 800de96:	f1bc 0f00 	cmp.w	ip, #0
 800de9a:	da05      	bge.n	800dea8 <_strtol_l.constprop.0+0xd8>
 800de9c:	2322      	movs	r3, #34	; 0x22
 800de9e:	6003      	str	r3, [r0, #0]
 800dea0:	4646      	mov	r6, r8
 800dea2:	b942      	cbnz	r2, 800deb6 <_strtol_l.constprop.0+0xe6>
 800dea4:	4630      	mov	r0, r6
 800dea6:	e79e      	b.n	800dde6 <_strtol_l.constprop.0+0x16>
 800dea8:	b107      	cbz	r7, 800deac <_strtol_l.constprop.0+0xdc>
 800deaa:	4276      	negs	r6, r6
 800deac:	2a00      	cmp	r2, #0
 800deae:	d0f9      	beq.n	800dea4 <_strtol_l.constprop.0+0xd4>
 800deb0:	f1bc 0f00 	cmp.w	ip, #0
 800deb4:	d000      	beq.n	800deb8 <_strtol_l.constprop.0+0xe8>
 800deb6:	1e69      	subs	r1, r5, #1
 800deb8:	6011      	str	r1, [r2, #0]
 800deba:	e7f3      	b.n	800dea4 <_strtol_l.constprop.0+0xd4>
 800debc:	2430      	movs	r4, #48	; 0x30
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1b1      	bne.n	800de26 <_strtol_l.constprop.0+0x56>
 800dec2:	2308      	movs	r3, #8
 800dec4:	e7af      	b.n	800de26 <_strtol_l.constprop.0+0x56>
 800dec6:	2c30      	cmp	r4, #48	; 0x30
 800dec8:	d0a5      	beq.n	800de16 <_strtol_l.constprop.0+0x46>
 800deca:	230a      	movs	r3, #10
 800decc:	e7ab      	b.n	800de26 <_strtol_l.constprop.0+0x56>
 800dece:	bf00      	nop
 800ded0:	080122fd 	.word	0x080122fd

0800ded4 <_strtol_r>:
 800ded4:	f7ff bf7c 	b.w	800ddd0 <_strtol_l.constprop.0>

0800ded8 <strtol>:
 800ded8:	4613      	mov	r3, r2
 800deda:	460a      	mov	r2, r1
 800dedc:	4601      	mov	r1, r0
 800dede:	4802      	ldr	r0, [pc, #8]	; (800dee8 <strtol+0x10>)
 800dee0:	6800      	ldr	r0, [r0, #0]
 800dee2:	f7ff bf75 	b.w	800ddd0 <_strtol_l.constprop.0>
 800dee6:	bf00      	nop
 800dee8:	2000023c 	.word	0x2000023c

0800deec <__swbuf_r>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	460e      	mov	r6, r1
 800def0:	4614      	mov	r4, r2
 800def2:	4605      	mov	r5, r0
 800def4:	b118      	cbz	r0, 800defe <__swbuf_r+0x12>
 800def6:	6983      	ldr	r3, [r0, #24]
 800def8:	b90b      	cbnz	r3, 800defe <__swbuf_r+0x12>
 800defa:	f7fd fec3 	bl	800bc84 <__sinit>
 800defe:	4b21      	ldr	r3, [pc, #132]	; (800df84 <__swbuf_r+0x98>)
 800df00:	429c      	cmp	r4, r3
 800df02:	d12b      	bne.n	800df5c <__swbuf_r+0x70>
 800df04:	686c      	ldr	r4, [r5, #4]
 800df06:	69a3      	ldr	r3, [r4, #24]
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	071a      	lsls	r2, r3, #28
 800df0e:	d52f      	bpl.n	800df70 <__swbuf_r+0x84>
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	b36b      	cbz	r3, 800df70 <__swbuf_r+0x84>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	6820      	ldr	r0, [r4, #0]
 800df18:	1ac0      	subs	r0, r0, r3
 800df1a:	6963      	ldr	r3, [r4, #20]
 800df1c:	b2f6      	uxtb	r6, r6
 800df1e:	4283      	cmp	r3, r0
 800df20:	4637      	mov	r7, r6
 800df22:	dc04      	bgt.n	800df2e <__swbuf_r+0x42>
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f000 ffca 	bl	800eec0 <_fflush_r>
 800df2c:	bb30      	cbnz	r0, 800df7c <__swbuf_r+0x90>
 800df2e:	68a3      	ldr	r3, [r4, #8]
 800df30:	3b01      	subs	r3, #1
 800df32:	60a3      	str	r3, [r4, #8]
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	6022      	str	r2, [r4, #0]
 800df3a:	701e      	strb	r6, [r3, #0]
 800df3c:	6963      	ldr	r3, [r4, #20]
 800df3e:	3001      	adds	r0, #1
 800df40:	4283      	cmp	r3, r0
 800df42:	d004      	beq.n	800df4e <__swbuf_r+0x62>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	07db      	lsls	r3, r3, #31
 800df48:	d506      	bpl.n	800df58 <__swbuf_r+0x6c>
 800df4a:	2e0a      	cmp	r6, #10
 800df4c:	d104      	bne.n	800df58 <__swbuf_r+0x6c>
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f000 ffb5 	bl	800eec0 <_fflush_r>
 800df56:	b988      	cbnz	r0, 800df7c <__swbuf_r+0x90>
 800df58:	4638      	mov	r0, r7
 800df5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <__swbuf_r+0x9c>)
 800df5e:	429c      	cmp	r4, r3
 800df60:	d101      	bne.n	800df66 <__swbuf_r+0x7a>
 800df62:	68ac      	ldr	r4, [r5, #8]
 800df64:	e7cf      	b.n	800df06 <__swbuf_r+0x1a>
 800df66:	4b09      	ldr	r3, [pc, #36]	; (800df8c <__swbuf_r+0xa0>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	bf08      	it	eq
 800df6c:	68ec      	ldreq	r4, [r5, #12]
 800df6e:	e7ca      	b.n	800df06 <__swbuf_r+0x1a>
 800df70:	4621      	mov	r1, r4
 800df72:	4628      	mov	r0, r5
 800df74:	f000 f81e 	bl	800dfb4 <__swsetup_r>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d0cb      	beq.n	800df14 <__swbuf_r+0x28>
 800df7c:	f04f 37ff 	mov.w	r7, #4294967295
 800df80:	e7ea      	b.n	800df58 <__swbuf_r+0x6c>
 800df82:	bf00      	nop
 800df84:	08012420 	.word	0x08012420
 800df88:	08012440 	.word	0x08012440
 800df8c:	08012400 	.word	0x08012400

0800df90 <_write_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	4d07      	ldr	r5, [pc, #28]	; (800dfb0 <_write_r+0x20>)
 800df94:	4604      	mov	r4, r0
 800df96:	4608      	mov	r0, r1
 800df98:	4611      	mov	r1, r2
 800df9a:	2200      	movs	r2, #0
 800df9c:	602a      	str	r2, [r5, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f7f4 ff3d 	bl	8002e1e <_write>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d102      	bne.n	800dfae <_write_r+0x1e>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	b103      	cbz	r3, 800dfae <_write_r+0x1e>
 800dfac:	6023      	str	r3, [r4, #0]
 800dfae:	bd38      	pop	{r3, r4, r5, pc}
 800dfb0:	20013298 	.word	0x20013298

0800dfb4 <__swsetup_r>:
 800dfb4:	4b32      	ldr	r3, [pc, #200]	; (800e080 <__swsetup_r+0xcc>)
 800dfb6:	b570      	push	{r4, r5, r6, lr}
 800dfb8:	681d      	ldr	r5, [r3, #0]
 800dfba:	4606      	mov	r6, r0
 800dfbc:	460c      	mov	r4, r1
 800dfbe:	b125      	cbz	r5, 800dfca <__swsetup_r+0x16>
 800dfc0:	69ab      	ldr	r3, [r5, #24]
 800dfc2:	b913      	cbnz	r3, 800dfca <__swsetup_r+0x16>
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	f7fd fe5d 	bl	800bc84 <__sinit>
 800dfca:	4b2e      	ldr	r3, [pc, #184]	; (800e084 <__swsetup_r+0xd0>)
 800dfcc:	429c      	cmp	r4, r3
 800dfce:	d10f      	bne.n	800dff0 <__swsetup_r+0x3c>
 800dfd0:	686c      	ldr	r4, [r5, #4]
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfd8:	0719      	lsls	r1, r3, #28
 800dfda:	d42c      	bmi.n	800e036 <__swsetup_r+0x82>
 800dfdc:	06dd      	lsls	r5, r3, #27
 800dfde:	d411      	bmi.n	800e004 <__swsetup_r+0x50>
 800dfe0:	2309      	movs	r3, #9
 800dfe2:	6033      	str	r3, [r6, #0]
 800dfe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
 800dfee:	e03e      	b.n	800e06e <__swsetup_r+0xba>
 800dff0:	4b25      	ldr	r3, [pc, #148]	; (800e088 <__swsetup_r+0xd4>)
 800dff2:	429c      	cmp	r4, r3
 800dff4:	d101      	bne.n	800dffa <__swsetup_r+0x46>
 800dff6:	68ac      	ldr	r4, [r5, #8]
 800dff8:	e7eb      	b.n	800dfd2 <__swsetup_r+0x1e>
 800dffa:	4b24      	ldr	r3, [pc, #144]	; (800e08c <__swsetup_r+0xd8>)
 800dffc:	429c      	cmp	r4, r3
 800dffe:	bf08      	it	eq
 800e000:	68ec      	ldreq	r4, [r5, #12]
 800e002:	e7e6      	b.n	800dfd2 <__swsetup_r+0x1e>
 800e004:	0758      	lsls	r0, r3, #29
 800e006:	d512      	bpl.n	800e02e <__swsetup_r+0x7a>
 800e008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e00a:	b141      	cbz	r1, 800e01e <__swsetup_r+0x6a>
 800e00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e010:	4299      	cmp	r1, r3
 800e012:	d002      	beq.n	800e01a <__swsetup_r+0x66>
 800e014:	4630      	mov	r0, r6
 800e016:	f002 f893 	bl	8010140 <_free_r>
 800e01a:	2300      	movs	r3, #0
 800e01c:	6363      	str	r3, [r4, #52]	; 0x34
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e024:	81a3      	strh	r3, [r4, #12]
 800e026:	2300      	movs	r3, #0
 800e028:	6063      	str	r3, [r4, #4]
 800e02a:	6923      	ldr	r3, [r4, #16]
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	89a3      	ldrh	r3, [r4, #12]
 800e030:	f043 0308 	orr.w	r3, r3, #8
 800e034:	81a3      	strh	r3, [r4, #12]
 800e036:	6923      	ldr	r3, [r4, #16]
 800e038:	b94b      	cbnz	r3, 800e04e <__swsetup_r+0x9a>
 800e03a:	89a3      	ldrh	r3, [r4, #12]
 800e03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e044:	d003      	beq.n	800e04e <__swsetup_r+0x9a>
 800e046:	4621      	mov	r1, r4
 800e048:	4630      	mov	r0, r6
 800e04a:	f001 fb21 	bl	800f690 <__smakebuf_r>
 800e04e:	89a0      	ldrh	r0, [r4, #12]
 800e050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e054:	f010 0301 	ands.w	r3, r0, #1
 800e058:	d00a      	beq.n	800e070 <__swsetup_r+0xbc>
 800e05a:	2300      	movs	r3, #0
 800e05c:	60a3      	str	r3, [r4, #8]
 800e05e:	6963      	ldr	r3, [r4, #20]
 800e060:	425b      	negs	r3, r3
 800e062:	61a3      	str	r3, [r4, #24]
 800e064:	6923      	ldr	r3, [r4, #16]
 800e066:	b943      	cbnz	r3, 800e07a <__swsetup_r+0xc6>
 800e068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e06c:	d1ba      	bne.n	800dfe4 <__swsetup_r+0x30>
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	0781      	lsls	r1, r0, #30
 800e072:	bf58      	it	pl
 800e074:	6963      	ldrpl	r3, [r4, #20]
 800e076:	60a3      	str	r3, [r4, #8]
 800e078:	e7f4      	b.n	800e064 <__swsetup_r+0xb0>
 800e07a:	2000      	movs	r0, #0
 800e07c:	e7f7      	b.n	800e06e <__swsetup_r+0xba>
 800e07e:	bf00      	nop
 800e080:	2000023c 	.word	0x2000023c
 800e084:	08012420 	.word	0x08012420
 800e088:	08012440 	.word	0x08012440
 800e08c:	08012400 	.word	0x08012400

0800e090 <abort>:
 800e090:	b508      	push	{r3, lr}
 800e092:	2006      	movs	r0, #6
 800e094:	f002 fdc8 	bl	8010c28 <raise>
 800e098:	2001      	movs	r0, #1
 800e09a:	f7f4 fe99 	bl	8002dd0 <_exit>
	...

0800e0a0 <_close_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d06      	ldr	r5, [pc, #24]	; (800e0bc <_close_r+0x1c>)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	4608      	mov	r0, r1
 800e0aa:	602b      	str	r3, [r5, #0]
 800e0ac:	f7f4 fed3 	bl	8002e56 <_close>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	d102      	bne.n	800e0ba <_close_r+0x1a>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	b103      	cbz	r3, 800e0ba <_close_r+0x1a>
 800e0b8:	6023      	str	r3, [r4, #0]
 800e0ba:	bd38      	pop	{r3, r4, r5, pc}
 800e0bc:	20013298 	.word	0x20013298

0800e0c0 <quorem>:
 800e0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c4:	6903      	ldr	r3, [r0, #16]
 800e0c6:	690c      	ldr	r4, [r1, #16]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	f2c0 8081 	blt.w	800e1d2 <quorem+0x112>
 800e0d0:	3c01      	subs	r4, #1
 800e0d2:	f101 0814 	add.w	r8, r1, #20
 800e0d6:	f100 0514 	add.w	r5, r0, #20
 800e0da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0f8:	d331      	bcc.n	800e15e <quorem+0x9e>
 800e0fa:	f04f 0e00 	mov.w	lr, #0
 800e0fe:	4640      	mov	r0, r8
 800e100:	46ac      	mov	ip, r5
 800e102:	46f2      	mov	sl, lr
 800e104:	f850 2b04 	ldr.w	r2, [r0], #4
 800e108:	b293      	uxth	r3, r2
 800e10a:	fb06 e303 	mla	r3, r6, r3, lr
 800e10e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e112:	b29b      	uxth	r3, r3
 800e114:	ebaa 0303 	sub.w	r3, sl, r3
 800e118:	f8dc a000 	ldr.w	sl, [ip]
 800e11c:	0c12      	lsrs	r2, r2, #16
 800e11e:	fa13 f38a 	uxtah	r3, r3, sl
 800e122:	fb06 e202 	mla	r2, r6, r2, lr
 800e126:	9300      	str	r3, [sp, #0]
 800e128:	9b00      	ldr	r3, [sp, #0]
 800e12a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e12e:	b292      	uxth	r2, r2
 800e130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e138:	f8bd 3000 	ldrh.w	r3, [sp]
 800e13c:	4581      	cmp	r9, r0
 800e13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e142:	f84c 3b04 	str.w	r3, [ip], #4
 800e146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e14a:	d2db      	bcs.n	800e104 <quorem+0x44>
 800e14c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e150:	b92b      	cbnz	r3, 800e15e <quorem+0x9e>
 800e152:	9b01      	ldr	r3, [sp, #4]
 800e154:	3b04      	subs	r3, #4
 800e156:	429d      	cmp	r5, r3
 800e158:	461a      	mov	r2, r3
 800e15a:	d32e      	bcc.n	800e1ba <quorem+0xfa>
 800e15c:	613c      	str	r4, [r7, #16]
 800e15e:	4638      	mov	r0, r7
 800e160:	f001 fde2 	bl	800fd28 <__mcmp>
 800e164:	2800      	cmp	r0, #0
 800e166:	db24      	blt.n	800e1b2 <quorem+0xf2>
 800e168:	3601      	adds	r6, #1
 800e16a:	4628      	mov	r0, r5
 800e16c:	f04f 0c00 	mov.w	ip, #0
 800e170:	f858 2b04 	ldr.w	r2, [r8], #4
 800e174:	f8d0 e000 	ldr.w	lr, [r0]
 800e178:	b293      	uxth	r3, r2
 800e17a:	ebac 0303 	sub.w	r3, ip, r3
 800e17e:	0c12      	lsrs	r2, r2, #16
 800e180:	fa13 f38e 	uxtah	r3, r3, lr
 800e184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e192:	45c1      	cmp	r9, r8
 800e194:	f840 3b04 	str.w	r3, [r0], #4
 800e198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e19c:	d2e8      	bcs.n	800e170 <quorem+0xb0>
 800e19e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1a6:	b922      	cbnz	r2, 800e1b2 <quorem+0xf2>
 800e1a8:	3b04      	subs	r3, #4
 800e1aa:	429d      	cmp	r5, r3
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	d30a      	bcc.n	800e1c6 <quorem+0x106>
 800e1b0:	613c      	str	r4, [r7, #16]
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	b003      	add	sp, #12
 800e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ba:	6812      	ldr	r2, [r2, #0]
 800e1bc:	3b04      	subs	r3, #4
 800e1be:	2a00      	cmp	r2, #0
 800e1c0:	d1cc      	bne.n	800e15c <quorem+0x9c>
 800e1c2:	3c01      	subs	r4, #1
 800e1c4:	e7c7      	b.n	800e156 <quorem+0x96>
 800e1c6:	6812      	ldr	r2, [r2, #0]
 800e1c8:	3b04      	subs	r3, #4
 800e1ca:	2a00      	cmp	r2, #0
 800e1cc:	d1f0      	bne.n	800e1b0 <quorem+0xf0>
 800e1ce:	3c01      	subs	r4, #1
 800e1d0:	e7eb      	b.n	800e1aa <quorem+0xea>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	e7ee      	b.n	800e1b4 <quorem+0xf4>
	...

0800e1d8 <_dtoa_r>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	ed2d 8b04 	vpush	{d8-d9}
 800e1e0:	ec57 6b10 	vmov	r6, r7, d0
 800e1e4:	b093      	sub	sp, #76	; 0x4c
 800e1e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1ec:	9106      	str	r1, [sp, #24]
 800e1ee:	ee10 aa10 	vmov	sl, s0
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e1f6:	930c      	str	r3, [sp, #48]	; 0x30
 800e1f8:	46bb      	mov	fp, r7
 800e1fa:	b975      	cbnz	r5, 800e21a <_dtoa_r+0x42>
 800e1fc:	2010      	movs	r0, #16
 800e1fe:	f001 fa87 	bl	800f710 <malloc>
 800e202:	4602      	mov	r2, r0
 800e204:	6260      	str	r0, [r4, #36]	; 0x24
 800e206:	b920      	cbnz	r0, 800e212 <_dtoa_r+0x3a>
 800e208:	4ba7      	ldr	r3, [pc, #668]	; (800e4a8 <_dtoa_r+0x2d0>)
 800e20a:	21ea      	movs	r1, #234	; 0xea
 800e20c:	48a7      	ldr	r0, [pc, #668]	; (800e4ac <_dtoa_r+0x2d4>)
 800e20e:	f7fd fcb5 	bl	800bb7c <__assert_func>
 800e212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e216:	6005      	str	r5, [r0, #0]
 800e218:	60c5      	str	r5, [r0, #12]
 800e21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e21c:	6819      	ldr	r1, [r3, #0]
 800e21e:	b151      	cbz	r1, 800e236 <_dtoa_r+0x5e>
 800e220:	685a      	ldr	r2, [r3, #4]
 800e222:	604a      	str	r2, [r1, #4]
 800e224:	2301      	movs	r3, #1
 800e226:	4093      	lsls	r3, r2
 800e228:	608b      	str	r3, [r1, #8]
 800e22a:	4620      	mov	r0, r4
 800e22c:	f001 faf0 	bl	800f810 <_Bfree>
 800e230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e232:	2200      	movs	r2, #0
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	1e3b      	subs	r3, r7, #0
 800e238:	bfaa      	itet	ge
 800e23a:	2300      	movge	r3, #0
 800e23c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e240:	f8c8 3000 	strge.w	r3, [r8]
 800e244:	4b9a      	ldr	r3, [pc, #616]	; (800e4b0 <_dtoa_r+0x2d8>)
 800e246:	bfbc      	itt	lt
 800e248:	2201      	movlt	r2, #1
 800e24a:	f8c8 2000 	strlt.w	r2, [r8]
 800e24e:	ea33 030b 	bics.w	r3, r3, fp
 800e252:	d11b      	bne.n	800e28c <_dtoa_r+0xb4>
 800e254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e256:	f242 730f 	movw	r3, #9999	; 0x270f
 800e25a:	6013      	str	r3, [r2, #0]
 800e25c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e260:	4333      	orrs	r3, r6
 800e262:	f000 8592 	beq.w	800ed8a <_dtoa_r+0xbb2>
 800e266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e268:	b963      	cbnz	r3, 800e284 <_dtoa_r+0xac>
 800e26a:	4b92      	ldr	r3, [pc, #584]	; (800e4b4 <_dtoa_r+0x2dc>)
 800e26c:	e022      	b.n	800e2b4 <_dtoa_r+0xdc>
 800e26e:	4b92      	ldr	r3, [pc, #584]	; (800e4b8 <_dtoa_r+0x2e0>)
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	3308      	adds	r3, #8
 800e274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e276:	6013      	str	r3, [r2, #0]
 800e278:	9801      	ldr	r0, [sp, #4]
 800e27a:	b013      	add	sp, #76	; 0x4c
 800e27c:	ecbd 8b04 	vpop	{d8-d9}
 800e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e284:	4b8b      	ldr	r3, [pc, #556]	; (800e4b4 <_dtoa_r+0x2dc>)
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	3303      	adds	r3, #3
 800e28a:	e7f3      	b.n	800e274 <_dtoa_r+0x9c>
 800e28c:	2200      	movs	r2, #0
 800e28e:	2300      	movs	r3, #0
 800e290:	4650      	mov	r0, sl
 800e292:	4659      	mov	r1, fp
 800e294:	f7f2 fc28 	bl	8000ae8 <__aeabi_dcmpeq>
 800e298:	ec4b ab19 	vmov	d9, sl, fp
 800e29c:	4680      	mov	r8, r0
 800e29e:	b158      	cbz	r0, 800e2b8 <_dtoa_r+0xe0>
 800e2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	6013      	str	r3, [r2, #0]
 800e2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f000 856b 	beq.w	800ed84 <_dtoa_r+0xbac>
 800e2ae:	4883      	ldr	r0, [pc, #524]	; (800e4bc <_dtoa_r+0x2e4>)
 800e2b0:	6018      	str	r0, [r3, #0]
 800e2b2:	1e43      	subs	r3, r0, #1
 800e2b4:	9301      	str	r3, [sp, #4]
 800e2b6:	e7df      	b.n	800e278 <_dtoa_r+0xa0>
 800e2b8:	ec4b ab10 	vmov	d0, sl, fp
 800e2bc:	aa10      	add	r2, sp, #64	; 0x40
 800e2be:	a911      	add	r1, sp, #68	; 0x44
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f001 fe53 	bl	800ff6c <__d2b>
 800e2c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e2ca:	ee08 0a10 	vmov	s16, r0
 800e2ce:	2d00      	cmp	r5, #0
 800e2d0:	f000 8084 	beq.w	800e3dc <_dtoa_r+0x204>
 800e2d4:	ee19 3a90 	vmov	r3, s19
 800e2d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e2e0:	4656      	mov	r6, sl
 800e2e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e2e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e2ee:	4b74      	ldr	r3, [pc, #464]	; (800e4c0 <_dtoa_r+0x2e8>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	4639      	mov	r1, r7
 800e2f6:	f7f1 ffd7 	bl	80002a8 <__aeabi_dsub>
 800e2fa:	a365      	add	r3, pc, #404	; (adr r3, 800e490 <_dtoa_r+0x2b8>)
 800e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e300:	f7f2 f98a 	bl	8000618 <__aeabi_dmul>
 800e304:	a364      	add	r3, pc, #400	; (adr r3, 800e498 <_dtoa_r+0x2c0>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f1 ffcf 	bl	80002ac <__adddf3>
 800e30e:	4606      	mov	r6, r0
 800e310:	4628      	mov	r0, r5
 800e312:	460f      	mov	r7, r1
 800e314:	f7f2 f916 	bl	8000544 <__aeabi_i2d>
 800e318:	a361      	add	r3, pc, #388	; (adr r3, 800e4a0 <_dtoa_r+0x2c8>)
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	f7f2 f97b 	bl	8000618 <__aeabi_dmul>
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	4630      	mov	r0, r6
 800e328:	4639      	mov	r1, r7
 800e32a:	f7f1 ffbf 	bl	80002ac <__adddf3>
 800e32e:	4606      	mov	r6, r0
 800e330:	460f      	mov	r7, r1
 800e332:	f7f2 fc21 	bl	8000b78 <__aeabi_d2iz>
 800e336:	2200      	movs	r2, #0
 800e338:	9000      	str	r0, [sp, #0]
 800e33a:	2300      	movs	r3, #0
 800e33c:	4630      	mov	r0, r6
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f2 fbdc 	bl	8000afc <__aeabi_dcmplt>
 800e344:	b150      	cbz	r0, 800e35c <_dtoa_r+0x184>
 800e346:	9800      	ldr	r0, [sp, #0]
 800e348:	f7f2 f8fc 	bl	8000544 <__aeabi_i2d>
 800e34c:	4632      	mov	r2, r6
 800e34e:	463b      	mov	r3, r7
 800e350:	f7f2 fbca 	bl	8000ae8 <__aeabi_dcmpeq>
 800e354:	b910      	cbnz	r0, 800e35c <_dtoa_r+0x184>
 800e356:	9b00      	ldr	r3, [sp, #0]
 800e358:	3b01      	subs	r3, #1
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	9b00      	ldr	r3, [sp, #0]
 800e35e:	2b16      	cmp	r3, #22
 800e360:	d85a      	bhi.n	800e418 <_dtoa_r+0x240>
 800e362:	9a00      	ldr	r2, [sp, #0]
 800e364:	4b57      	ldr	r3, [pc, #348]	; (800e4c4 <_dtoa_r+0x2ec>)
 800e366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	ec51 0b19 	vmov	r0, r1, d9
 800e372:	f7f2 fbc3 	bl	8000afc <__aeabi_dcmplt>
 800e376:	2800      	cmp	r0, #0
 800e378:	d050      	beq.n	800e41c <_dtoa_r+0x244>
 800e37a:	9b00      	ldr	r3, [sp, #0]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	2300      	movs	r3, #0
 800e382:	930b      	str	r3, [sp, #44]	; 0x2c
 800e384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e386:	1b5d      	subs	r5, r3, r5
 800e388:	1e6b      	subs	r3, r5, #1
 800e38a:	9305      	str	r3, [sp, #20]
 800e38c:	bf45      	ittet	mi
 800e38e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e392:	9304      	strmi	r3, [sp, #16]
 800e394:	2300      	movpl	r3, #0
 800e396:	2300      	movmi	r3, #0
 800e398:	bf4c      	ite	mi
 800e39a:	9305      	strmi	r3, [sp, #20]
 800e39c:	9304      	strpl	r3, [sp, #16]
 800e39e:	9b00      	ldr	r3, [sp, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	db3d      	blt.n	800e420 <_dtoa_r+0x248>
 800e3a4:	9b05      	ldr	r3, [sp, #20]
 800e3a6:	9a00      	ldr	r2, [sp, #0]
 800e3a8:	920a      	str	r2, [sp, #40]	; 0x28
 800e3aa:	4413      	add	r3, r2
 800e3ac:	9305      	str	r3, [sp, #20]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	9307      	str	r3, [sp, #28]
 800e3b2:	9b06      	ldr	r3, [sp, #24]
 800e3b4:	2b09      	cmp	r3, #9
 800e3b6:	f200 8089 	bhi.w	800e4cc <_dtoa_r+0x2f4>
 800e3ba:	2b05      	cmp	r3, #5
 800e3bc:	bfc4      	itt	gt
 800e3be:	3b04      	subgt	r3, #4
 800e3c0:	9306      	strgt	r3, [sp, #24]
 800e3c2:	9b06      	ldr	r3, [sp, #24]
 800e3c4:	f1a3 0302 	sub.w	r3, r3, #2
 800e3c8:	bfcc      	ite	gt
 800e3ca:	2500      	movgt	r5, #0
 800e3cc:	2501      	movle	r5, #1
 800e3ce:	2b03      	cmp	r3, #3
 800e3d0:	f200 8087 	bhi.w	800e4e2 <_dtoa_r+0x30a>
 800e3d4:	e8df f003 	tbb	[pc, r3]
 800e3d8:	59383a2d 	.word	0x59383a2d
 800e3dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3e0:	441d      	add	r5, r3
 800e3e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3e6:	2b20      	cmp	r3, #32
 800e3e8:	bfc1      	itttt	gt
 800e3ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3fa:	bfda      	itte	le
 800e3fc:	f1c3 0320 	rsble	r3, r3, #32
 800e400:	fa06 f003 	lslle.w	r0, r6, r3
 800e404:	4318      	orrgt	r0, r3
 800e406:	f7f2 f88d 	bl	8000524 <__aeabi_ui2d>
 800e40a:	2301      	movs	r3, #1
 800e40c:	4606      	mov	r6, r0
 800e40e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e412:	3d01      	subs	r5, #1
 800e414:	930e      	str	r3, [sp, #56]	; 0x38
 800e416:	e76a      	b.n	800e2ee <_dtoa_r+0x116>
 800e418:	2301      	movs	r3, #1
 800e41a:	e7b2      	b.n	800e382 <_dtoa_r+0x1aa>
 800e41c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e41e:	e7b1      	b.n	800e384 <_dtoa_r+0x1ac>
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	9a00      	ldr	r2, [sp, #0]
 800e424:	1a9b      	subs	r3, r3, r2
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	4253      	negs	r3, r2
 800e42a:	9307      	str	r3, [sp, #28]
 800e42c:	2300      	movs	r3, #0
 800e42e:	930a      	str	r3, [sp, #40]	; 0x28
 800e430:	e7bf      	b.n	800e3b2 <_dtoa_r+0x1da>
 800e432:	2300      	movs	r3, #0
 800e434:	9308      	str	r3, [sp, #32]
 800e436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dc55      	bgt.n	800e4e8 <_dtoa_r+0x310>
 800e43c:	2301      	movs	r3, #1
 800e43e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e442:	461a      	mov	r2, r3
 800e444:	9209      	str	r2, [sp, #36]	; 0x24
 800e446:	e00c      	b.n	800e462 <_dtoa_r+0x28a>
 800e448:	2301      	movs	r3, #1
 800e44a:	e7f3      	b.n	800e434 <_dtoa_r+0x25c>
 800e44c:	2300      	movs	r3, #0
 800e44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e450:	9308      	str	r3, [sp, #32]
 800e452:	9b00      	ldr	r3, [sp, #0]
 800e454:	4413      	add	r3, r2
 800e456:	9302      	str	r3, [sp, #8]
 800e458:	3301      	adds	r3, #1
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	9303      	str	r3, [sp, #12]
 800e45e:	bfb8      	it	lt
 800e460:	2301      	movlt	r3, #1
 800e462:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e464:	2200      	movs	r2, #0
 800e466:	6042      	str	r2, [r0, #4]
 800e468:	2204      	movs	r2, #4
 800e46a:	f102 0614 	add.w	r6, r2, #20
 800e46e:	429e      	cmp	r6, r3
 800e470:	6841      	ldr	r1, [r0, #4]
 800e472:	d93d      	bls.n	800e4f0 <_dtoa_r+0x318>
 800e474:	4620      	mov	r0, r4
 800e476:	f001 f98b 	bl	800f790 <_Balloc>
 800e47a:	9001      	str	r0, [sp, #4]
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d13b      	bne.n	800e4f8 <_dtoa_r+0x320>
 800e480:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <_dtoa_r+0x2f0>)
 800e482:	4602      	mov	r2, r0
 800e484:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e488:	e6c0      	b.n	800e20c <_dtoa_r+0x34>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e7df      	b.n	800e44e <_dtoa_r+0x276>
 800e48e:	bf00      	nop
 800e490:	636f4361 	.word	0x636f4361
 800e494:	3fd287a7 	.word	0x3fd287a7
 800e498:	8b60c8b3 	.word	0x8b60c8b3
 800e49c:	3fc68a28 	.word	0x3fc68a28
 800e4a0:	509f79fb 	.word	0x509f79fb
 800e4a4:	3fd34413 	.word	0x3fd34413
 800e4a8:	0801250d 	.word	0x0801250d
 800e4ac:	08012524 	.word	0x08012524
 800e4b0:	7ff00000 	.word	0x7ff00000
 800e4b4:	08012509 	.word	0x08012509
 800e4b8:	08012500 	.word	0x08012500
 800e4bc:	08012769 	.word	0x08012769
 800e4c0:	3ff80000 	.word	0x3ff80000
 800e4c4:	08012690 	.word	0x08012690
 800e4c8:	0801257f 	.word	0x0801257f
 800e4cc:	2501      	movs	r5, #1
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	9306      	str	r3, [sp, #24]
 800e4d2:	9508      	str	r5, [sp, #32]
 800e4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	2312      	movs	r3, #18
 800e4e0:	e7b0      	b.n	800e444 <_dtoa_r+0x26c>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	9308      	str	r3, [sp, #32]
 800e4e6:	e7f5      	b.n	800e4d4 <_dtoa_r+0x2fc>
 800e4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4ee:	e7b8      	b.n	800e462 <_dtoa_r+0x28a>
 800e4f0:	3101      	adds	r1, #1
 800e4f2:	6041      	str	r1, [r0, #4]
 800e4f4:	0052      	lsls	r2, r2, #1
 800e4f6:	e7b8      	b.n	800e46a <_dtoa_r+0x292>
 800e4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4fa:	9a01      	ldr	r2, [sp, #4]
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	9b03      	ldr	r3, [sp, #12]
 800e500:	2b0e      	cmp	r3, #14
 800e502:	f200 809d 	bhi.w	800e640 <_dtoa_r+0x468>
 800e506:	2d00      	cmp	r5, #0
 800e508:	f000 809a 	beq.w	800e640 <_dtoa_r+0x468>
 800e50c:	9b00      	ldr	r3, [sp, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	dd32      	ble.n	800e578 <_dtoa_r+0x3a0>
 800e512:	4ab7      	ldr	r2, [pc, #732]	; (800e7f0 <_dtoa_r+0x618>)
 800e514:	f003 030f 	and.w	r3, r3, #15
 800e518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e51c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e520:	9b00      	ldr	r3, [sp, #0]
 800e522:	05d8      	lsls	r0, r3, #23
 800e524:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e528:	d516      	bpl.n	800e558 <_dtoa_r+0x380>
 800e52a:	4bb2      	ldr	r3, [pc, #712]	; (800e7f4 <_dtoa_r+0x61c>)
 800e52c:	ec51 0b19 	vmov	r0, r1, d9
 800e530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e534:	f7f2 f99a 	bl	800086c <__aeabi_ddiv>
 800e538:	f007 070f 	and.w	r7, r7, #15
 800e53c:	4682      	mov	sl, r0
 800e53e:	468b      	mov	fp, r1
 800e540:	2503      	movs	r5, #3
 800e542:	4eac      	ldr	r6, [pc, #688]	; (800e7f4 <_dtoa_r+0x61c>)
 800e544:	b957      	cbnz	r7, 800e55c <_dtoa_r+0x384>
 800e546:	4642      	mov	r2, r8
 800e548:	464b      	mov	r3, r9
 800e54a:	4650      	mov	r0, sl
 800e54c:	4659      	mov	r1, fp
 800e54e:	f7f2 f98d 	bl	800086c <__aeabi_ddiv>
 800e552:	4682      	mov	sl, r0
 800e554:	468b      	mov	fp, r1
 800e556:	e028      	b.n	800e5aa <_dtoa_r+0x3d2>
 800e558:	2502      	movs	r5, #2
 800e55a:	e7f2      	b.n	800e542 <_dtoa_r+0x36a>
 800e55c:	07f9      	lsls	r1, r7, #31
 800e55e:	d508      	bpl.n	800e572 <_dtoa_r+0x39a>
 800e560:	4640      	mov	r0, r8
 800e562:	4649      	mov	r1, r9
 800e564:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e568:	f7f2 f856 	bl	8000618 <__aeabi_dmul>
 800e56c:	3501      	adds	r5, #1
 800e56e:	4680      	mov	r8, r0
 800e570:	4689      	mov	r9, r1
 800e572:	107f      	asrs	r7, r7, #1
 800e574:	3608      	adds	r6, #8
 800e576:	e7e5      	b.n	800e544 <_dtoa_r+0x36c>
 800e578:	f000 809b 	beq.w	800e6b2 <_dtoa_r+0x4da>
 800e57c:	9b00      	ldr	r3, [sp, #0]
 800e57e:	4f9d      	ldr	r7, [pc, #628]	; (800e7f4 <_dtoa_r+0x61c>)
 800e580:	425e      	negs	r6, r3
 800e582:	4b9b      	ldr	r3, [pc, #620]	; (800e7f0 <_dtoa_r+0x618>)
 800e584:	f006 020f 	and.w	r2, r6, #15
 800e588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e590:	ec51 0b19 	vmov	r0, r1, d9
 800e594:	f7f2 f840 	bl	8000618 <__aeabi_dmul>
 800e598:	1136      	asrs	r6, r6, #4
 800e59a:	4682      	mov	sl, r0
 800e59c:	468b      	mov	fp, r1
 800e59e:	2300      	movs	r3, #0
 800e5a0:	2502      	movs	r5, #2
 800e5a2:	2e00      	cmp	r6, #0
 800e5a4:	d17a      	bne.n	800e69c <_dtoa_r+0x4c4>
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1d3      	bne.n	800e552 <_dtoa_r+0x37a>
 800e5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 8082 	beq.w	800e6b6 <_dtoa_r+0x4de>
 800e5b2:	4b91      	ldr	r3, [pc, #580]	; (800e7f8 <_dtoa_r+0x620>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	4650      	mov	r0, sl
 800e5b8:	4659      	mov	r1, fp
 800e5ba:	f7f2 fa9f 	bl	8000afc <__aeabi_dcmplt>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d079      	beq.n	800e6b6 <_dtoa_r+0x4de>
 800e5c2:	9b03      	ldr	r3, [sp, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d076      	beq.n	800e6b6 <_dtoa_r+0x4de>
 800e5c8:	9b02      	ldr	r3, [sp, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	dd36      	ble.n	800e63c <_dtoa_r+0x464>
 800e5ce:	9b00      	ldr	r3, [sp, #0]
 800e5d0:	4650      	mov	r0, sl
 800e5d2:	4659      	mov	r1, fp
 800e5d4:	1e5f      	subs	r7, r3, #1
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	4b88      	ldr	r3, [pc, #544]	; (800e7fc <_dtoa_r+0x624>)
 800e5da:	f7f2 f81d 	bl	8000618 <__aeabi_dmul>
 800e5de:	9e02      	ldr	r6, [sp, #8]
 800e5e0:	4682      	mov	sl, r0
 800e5e2:	468b      	mov	fp, r1
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f7f1 ffac 	bl	8000544 <__aeabi_i2d>
 800e5ec:	4652      	mov	r2, sl
 800e5ee:	465b      	mov	r3, fp
 800e5f0:	f7f2 f812 	bl	8000618 <__aeabi_dmul>
 800e5f4:	4b82      	ldr	r3, [pc, #520]	; (800e800 <_dtoa_r+0x628>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f7f1 fe58 	bl	80002ac <__adddf3>
 800e5fc:	46d0      	mov	r8, sl
 800e5fe:	46d9      	mov	r9, fp
 800e600:	4682      	mov	sl, r0
 800e602:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e606:	2e00      	cmp	r6, #0
 800e608:	d158      	bne.n	800e6bc <_dtoa_r+0x4e4>
 800e60a:	4b7e      	ldr	r3, [pc, #504]	; (800e804 <_dtoa_r+0x62c>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	4640      	mov	r0, r8
 800e610:	4649      	mov	r1, r9
 800e612:	f7f1 fe49 	bl	80002a8 <__aeabi_dsub>
 800e616:	4652      	mov	r2, sl
 800e618:	465b      	mov	r3, fp
 800e61a:	4680      	mov	r8, r0
 800e61c:	4689      	mov	r9, r1
 800e61e:	f7f2 fa8b 	bl	8000b38 <__aeabi_dcmpgt>
 800e622:	2800      	cmp	r0, #0
 800e624:	f040 8295 	bne.w	800eb52 <_dtoa_r+0x97a>
 800e628:	4652      	mov	r2, sl
 800e62a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e62e:	4640      	mov	r0, r8
 800e630:	4649      	mov	r1, r9
 800e632:	f7f2 fa63 	bl	8000afc <__aeabi_dcmplt>
 800e636:	2800      	cmp	r0, #0
 800e638:	f040 8289 	bne.w	800eb4e <_dtoa_r+0x976>
 800e63c:	ec5b ab19 	vmov	sl, fp, d9
 800e640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e642:	2b00      	cmp	r3, #0
 800e644:	f2c0 8148 	blt.w	800e8d8 <_dtoa_r+0x700>
 800e648:	9a00      	ldr	r2, [sp, #0]
 800e64a:	2a0e      	cmp	r2, #14
 800e64c:	f300 8144 	bgt.w	800e8d8 <_dtoa_r+0x700>
 800e650:	4b67      	ldr	r3, [pc, #412]	; (800e7f0 <_dtoa_r+0x618>)
 800e652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e656:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f280 80d5 	bge.w	800e80c <_dtoa_r+0x634>
 800e662:	9b03      	ldr	r3, [sp, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	f300 80d1 	bgt.w	800e80c <_dtoa_r+0x634>
 800e66a:	f040 826f 	bne.w	800eb4c <_dtoa_r+0x974>
 800e66e:	4b65      	ldr	r3, [pc, #404]	; (800e804 <_dtoa_r+0x62c>)
 800e670:	2200      	movs	r2, #0
 800e672:	4640      	mov	r0, r8
 800e674:	4649      	mov	r1, r9
 800e676:	f7f1 ffcf 	bl	8000618 <__aeabi_dmul>
 800e67a:	4652      	mov	r2, sl
 800e67c:	465b      	mov	r3, fp
 800e67e:	f7f2 fa51 	bl	8000b24 <__aeabi_dcmpge>
 800e682:	9e03      	ldr	r6, [sp, #12]
 800e684:	4637      	mov	r7, r6
 800e686:	2800      	cmp	r0, #0
 800e688:	f040 8245 	bne.w	800eb16 <_dtoa_r+0x93e>
 800e68c:	9d01      	ldr	r5, [sp, #4]
 800e68e:	2331      	movs	r3, #49	; 0x31
 800e690:	f805 3b01 	strb.w	r3, [r5], #1
 800e694:	9b00      	ldr	r3, [sp, #0]
 800e696:	3301      	adds	r3, #1
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	e240      	b.n	800eb1e <_dtoa_r+0x946>
 800e69c:	07f2      	lsls	r2, r6, #31
 800e69e:	d505      	bpl.n	800e6ac <_dtoa_r+0x4d4>
 800e6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6a4:	f7f1 ffb8 	bl	8000618 <__aeabi_dmul>
 800e6a8:	3501      	adds	r5, #1
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	1076      	asrs	r6, r6, #1
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	e777      	b.n	800e5a2 <_dtoa_r+0x3ca>
 800e6b2:	2502      	movs	r5, #2
 800e6b4:	e779      	b.n	800e5aa <_dtoa_r+0x3d2>
 800e6b6:	9f00      	ldr	r7, [sp, #0]
 800e6b8:	9e03      	ldr	r6, [sp, #12]
 800e6ba:	e794      	b.n	800e5e6 <_dtoa_r+0x40e>
 800e6bc:	9901      	ldr	r1, [sp, #4]
 800e6be:	4b4c      	ldr	r3, [pc, #304]	; (800e7f0 <_dtoa_r+0x618>)
 800e6c0:	4431      	add	r1, r6
 800e6c2:	910d      	str	r1, [sp, #52]	; 0x34
 800e6c4:	9908      	ldr	r1, [sp, #32]
 800e6c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e6ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6ce:	2900      	cmp	r1, #0
 800e6d0:	d043      	beq.n	800e75a <_dtoa_r+0x582>
 800e6d2:	494d      	ldr	r1, [pc, #308]	; (800e808 <_dtoa_r+0x630>)
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	f7f2 f8c9 	bl	800086c <__aeabi_ddiv>
 800e6da:	4652      	mov	r2, sl
 800e6dc:	465b      	mov	r3, fp
 800e6de:	f7f1 fde3 	bl	80002a8 <__aeabi_dsub>
 800e6e2:	9d01      	ldr	r5, [sp, #4]
 800e6e4:	4682      	mov	sl, r0
 800e6e6:	468b      	mov	fp, r1
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	4640      	mov	r0, r8
 800e6ec:	f7f2 fa44 	bl	8000b78 <__aeabi_d2iz>
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	f7f1 ff27 	bl	8000544 <__aeabi_i2d>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	f7f1 fdd3 	bl	80002a8 <__aeabi_dsub>
 800e702:	3630      	adds	r6, #48	; 0x30
 800e704:	f805 6b01 	strb.w	r6, [r5], #1
 800e708:	4652      	mov	r2, sl
 800e70a:	465b      	mov	r3, fp
 800e70c:	4680      	mov	r8, r0
 800e70e:	4689      	mov	r9, r1
 800e710:	f7f2 f9f4 	bl	8000afc <__aeabi_dcmplt>
 800e714:	2800      	cmp	r0, #0
 800e716:	d163      	bne.n	800e7e0 <_dtoa_r+0x608>
 800e718:	4642      	mov	r2, r8
 800e71a:	464b      	mov	r3, r9
 800e71c:	4936      	ldr	r1, [pc, #216]	; (800e7f8 <_dtoa_r+0x620>)
 800e71e:	2000      	movs	r0, #0
 800e720:	f7f1 fdc2 	bl	80002a8 <__aeabi_dsub>
 800e724:	4652      	mov	r2, sl
 800e726:	465b      	mov	r3, fp
 800e728:	f7f2 f9e8 	bl	8000afc <__aeabi_dcmplt>
 800e72c:	2800      	cmp	r0, #0
 800e72e:	f040 80b5 	bne.w	800e89c <_dtoa_r+0x6c4>
 800e732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e734:	429d      	cmp	r5, r3
 800e736:	d081      	beq.n	800e63c <_dtoa_r+0x464>
 800e738:	4b30      	ldr	r3, [pc, #192]	; (800e7fc <_dtoa_r+0x624>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	4650      	mov	r0, sl
 800e73e:	4659      	mov	r1, fp
 800e740:	f7f1 ff6a 	bl	8000618 <__aeabi_dmul>
 800e744:	4b2d      	ldr	r3, [pc, #180]	; (800e7fc <_dtoa_r+0x624>)
 800e746:	4682      	mov	sl, r0
 800e748:	468b      	mov	fp, r1
 800e74a:	4640      	mov	r0, r8
 800e74c:	4649      	mov	r1, r9
 800e74e:	2200      	movs	r2, #0
 800e750:	f7f1 ff62 	bl	8000618 <__aeabi_dmul>
 800e754:	4680      	mov	r8, r0
 800e756:	4689      	mov	r9, r1
 800e758:	e7c6      	b.n	800e6e8 <_dtoa_r+0x510>
 800e75a:	4650      	mov	r0, sl
 800e75c:	4659      	mov	r1, fp
 800e75e:	f7f1 ff5b 	bl	8000618 <__aeabi_dmul>
 800e762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e764:	9d01      	ldr	r5, [sp, #4]
 800e766:	930f      	str	r3, [sp, #60]	; 0x3c
 800e768:	4682      	mov	sl, r0
 800e76a:	468b      	mov	fp, r1
 800e76c:	4649      	mov	r1, r9
 800e76e:	4640      	mov	r0, r8
 800e770:	f7f2 fa02 	bl	8000b78 <__aeabi_d2iz>
 800e774:	4606      	mov	r6, r0
 800e776:	f7f1 fee5 	bl	8000544 <__aeabi_i2d>
 800e77a:	3630      	adds	r6, #48	; 0x30
 800e77c:	4602      	mov	r2, r0
 800e77e:	460b      	mov	r3, r1
 800e780:	4640      	mov	r0, r8
 800e782:	4649      	mov	r1, r9
 800e784:	f7f1 fd90 	bl	80002a8 <__aeabi_dsub>
 800e788:	f805 6b01 	strb.w	r6, [r5], #1
 800e78c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e78e:	429d      	cmp	r5, r3
 800e790:	4680      	mov	r8, r0
 800e792:	4689      	mov	r9, r1
 800e794:	f04f 0200 	mov.w	r2, #0
 800e798:	d124      	bne.n	800e7e4 <_dtoa_r+0x60c>
 800e79a:	4b1b      	ldr	r3, [pc, #108]	; (800e808 <_dtoa_r+0x630>)
 800e79c:	4650      	mov	r0, sl
 800e79e:	4659      	mov	r1, fp
 800e7a0:	f7f1 fd84 	bl	80002ac <__adddf3>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	f7f2 f9c4 	bl	8000b38 <__aeabi_dcmpgt>
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d173      	bne.n	800e89c <_dtoa_r+0x6c4>
 800e7b4:	4652      	mov	r2, sl
 800e7b6:	465b      	mov	r3, fp
 800e7b8:	4913      	ldr	r1, [pc, #76]	; (800e808 <_dtoa_r+0x630>)
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	f7f1 fd74 	bl	80002a8 <__aeabi_dsub>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	4649      	mov	r1, r9
 800e7c8:	f7f2 f998 	bl	8000afc <__aeabi_dcmplt>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	f43f af35 	beq.w	800e63c <_dtoa_r+0x464>
 800e7d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e7d4:	1e6b      	subs	r3, r5, #1
 800e7d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7dc:	2b30      	cmp	r3, #48	; 0x30
 800e7de:	d0f8      	beq.n	800e7d2 <_dtoa_r+0x5fa>
 800e7e0:	9700      	str	r7, [sp, #0]
 800e7e2:	e049      	b.n	800e878 <_dtoa_r+0x6a0>
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <_dtoa_r+0x624>)
 800e7e6:	f7f1 ff17 	bl	8000618 <__aeabi_dmul>
 800e7ea:	4680      	mov	r8, r0
 800e7ec:	4689      	mov	r9, r1
 800e7ee:	e7bd      	b.n	800e76c <_dtoa_r+0x594>
 800e7f0:	08012690 	.word	0x08012690
 800e7f4:	08012668 	.word	0x08012668
 800e7f8:	3ff00000 	.word	0x3ff00000
 800e7fc:	40240000 	.word	0x40240000
 800e800:	401c0000 	.word	0x401c0000
 800e804:	40140000 	.word	0x40140000
 800e808:	3fe00000 	.word	0x3fe00000
 800e80c:	9d01      	ldr	r5, [sp, #4]
 800e80e:	4656      	mov	r6, sl
 800e810:	465f      	mov	r7, fp
 800e812:	4642      	mov	r2, r8
 800e814:	464b      	mov	r3, r9
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	f7f2 f827 	bl	800086c <__aeabi_ddiv>
 800e81e:	f7f2 f9ab 	bl	8000b78 <__aeabi_d2iz>
 800e822:	4682      	mov	sl, r0
 800e824:	f7f1 fe8e 	bl	8000544 <__aeabi_i2d>
 800e828:	4642      	mov	r2, r8
 800e82a:	464b      	mov	r3, r9
 800e82c:	f7f1 fef4 	bl	8000618 <__aeabi_dmul>
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	4630      	mov	r0, r6
 800e836:	4639      	mov	r1, r7
 800e838:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e83c:	f7f1 fd34 	bl	80002a8 <__aeabi_dsub>
 800e840:	f805 6b01 	strb.w	r6, [r5], #1
 800e844:	9e01      	ldr	r6, [sp, #4]
 800e846:	9f03      	ldr	r7, [sp, #12]
 800e848:	1bae      	subs	r6, r5, r6
 800e84a:	42b7      	cmp	r7, r6
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	d135      	bne.n	800e8be <_dtoa_r+0x6e6>
 800e852:	f7f1 fd2b 	bl	80002ac <__adddf3>
 800e856:	4642      	mov	r2, r8
 800e858:	464b      	mov	r3, r9
 800e85a:	4606      	mov	r6, r0
 800e85c:	460f      	mov	r7, r1
 800e85e:	f7f2 f96b 	bl	8000b38 <__aeabi_dcmpgt>
 800e862:	b9d0      	cbnz	r0, 800e89a <_dtoa_r+0x6c2>
 800e864:	4642      	mov	r2, r8
 800e866:	464b      	mov	r3, r9
 800e868:	4630      	mov	r0, r6
 800e86a:	4639      	mov	r1, r7
 800e86c:	f7f2 f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e870:	b110      	cbz	r0, 800e878 <_dtoa_r+0x6a0>
 800e872:	f01a 0f01 	tst.w	sl, #1
 800e876:	d110      	bne.n	800e89a <_dtoa_r+0x6c2>
 800e878:	4620      	mov	r0, r4
 800e87a:	ee18 1a10 	vmov	r1, s16
 800e87e:	f000 ffc7 	bl	800f810 <_Bfree>
 800e882:	2300      	movs	r3, #0
 800e884:	9800      	ldr	r0, [sp, #0]
 800e886:	702b      	strb	r3, [r5, #0]
 800e888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e88a:	3001      	adds	r0, #1
 800e88c:	6018      	str	r0, [r3, #0]
 800e88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e890:	2b00      	cmp	r3, #0
 800e892:	f43f acf1 	beq.w	800e278 <_dtoa_r+0xa0>
 800e896:	601d      	str	r5, [r3, #0]
 800e898:	e4ee      	b.n	800e278 <_dtoa_r+0xa0>
 800e89a:	9f00      	ldr	r7, [sp, #0]
 800e89c:	462b      	mov	r3, r5
 800e89e:	461d      	mov	r5, r3
 800e8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8a4:	2a39      	cmp	r2, #57	; 0x39
 800e8a6:	d106      	bne.n	800e8b6 <_dtoa_r+0x6de>
 800e8a8:	9a01      	ldr	r2, [sp, #4]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d1f7      	bne.n	800e89e <_dtoa_r+0x6c6>
 800e8ae:	9901      	ldr	r1, [sp, #4]
 800e8b0:	2230      	movs	r2, #48	; 0x30
 800e8b2:	3701      	adds	r7, #1
 800e8b4:	700a      	strb	r2, [r1, #0]
 800e8b6:	781a      	ldrb	r2, [r3, #0]
 800e8b8:	3201      	adds	r2, #1
 800e8ba:	701a      	strb	r2, [r3, #0]
 800e8bc:	e790      	b.n	800e7e0 <_dtoa_r+0x608>
 800e8be:	4ba6      	ldr	r3, [pc, #664]	; (800eb58 <_dtoa_r+0x980>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f7f1 fea9 	bl	8000618 <__aeabi_dmul>
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	460f      	mov	r7, r1
 800e8ce:	f7f2 f90b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d09d      	beq.n	800e812 <_dtoa_r+0x63a>
 800e8d6:	e7cf      	b.n	800e878 <_dtoa_r+0x6a0>
 800e8d8:	9a08      	ldr	r2, [sp, #32]
 800e8da:	2a00      	cmp	r2, #0
 800e8dc:	f000 80d7 	beq.w	800ea8e <_dtoa_r+0x8b6>
 800e8e0:	9a06      	ldr	r2, [sp, #24]
 800e8e2:	2a01      	cmp	r2, #1
 800e8e4:	f300 80ba 	bgt.w	800ea5c <_dtoa_r+0x884>
 800e8e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ea:	2a00      	cmp	r2, #0
 800e8ec:	f000 80b2 	beq.w	800ea54 <_dtoa_r+0x87c>
 800e8f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8f4:	9e07      	ldr	r6, [sp, #28]
 800e8f6:	9d04      	ldr	r5, [sp, #16]
 800e8f8:	9a04      	ldr	r2, [sp, #16]
 800e8fa:	441a      	add	r2, r3
 800e8fc:	9204      	str	r2, [sp, #16]
 800e8fe:	9a05      	ldr	r2, [sp, #20]
 800e900:	2101      	movs	r1, #1
 800e902:	441a      	add	r2, r3
 800e904:	4620      	mov	r0, r4
 800e906:	9205      	str	r2, [sp, #20]
 800e908:	f001 f884 	bl	800fa14 <__i2b>
 800e90c:	4607      	mov	r7, r0
 800e90e:	2d00      	cmp	r5, #0
 800e910:	dd0c      	ble.n	800e92c <_dtoa_r+0x754>
 800e912:	9b05      	ldr	r3, [sp, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	dd09      	ble.n	800e92c <_dtoa_r+0x754>
 800e918:	42ab      	cmp	r3, r5
 800e91a:	9a04      	ldr	r2, [sp, #16]
 800e91c:	bfa8      	it	ge
 800e91e:	462b      	movge	r3, r5
 800e920:	1ad2      	subs	r2, r2, r3
 800e922:	9204      	str	r2, [sp, #16]
 800e924:	9a05      	ldr	r2, [sp, #20]
 800e926:	1aed      	subs	r5, r5, r3
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	9305      	str	r3, [sp, #20]
 800e92c:	9b07      	ldr	r3, [sp, #28]
 800e92e:	b31b      	cbz	r3, 800e978 <_dtoa_r+0x7a0>
 800e930:	9b08      	ldr	r3, [sp, #32]
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 80af 	beq.w	800ea96 <_dtoa_r+0x8be>
 800e938:	2e00      	cmp	r6, #0
 800e93a:	dd13      	ble.n	800e964 <_dtoa_r+0x78c>
 800e93c:	4639      	mov	r1, r7
 800e93e:	4632      	mov	r2, r6
 800e940:	4620      	mov	r0, r4
 800e942:	f001 f927 	bl	800fb94 <__pow5mult>
 800e946:	ee18 2a10 	vmov	r2, s16
 800e94a:	4601      	mov	r1, r0
 800e94c:	4607      	mov	r7, r0
 800e94e:	4620      	mov	r0, r4
 800e950:	f001 f876 	bl	800fa40 <__multiply>
 800e954:	ee18 1a10 	vmov	r1, s16
 800e958:	4680      	mov	r8, r0
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 ff58 	bl	800f810 <_Bfree>
 800e960:	ee08 8a10 	vmov	s16, r8
 800e964:	9b07      	ldr	r3, [sp, #28]
 800e966:	1b9a      	subs	r2, r3, r6
 800e968:	d006      	beq.n	800e978 <_dtoa_r+0x7a0>
 800e96a:	ee18 1a10 	vmov	r1, s16
 800e96e:	4620      	mov	r0, r4
 800e970:	f001 f910 	bl	800fb94 <__pow5mult>
 800e974:	ee08 0a10 	vmov	s16, r0
 800e978:	2101      	movs	r1, #1
 800e97a:	4620      	mov	r0, r4
 800e97c:	f001 f84a 	bl	800fa14 <__i2b>
 800e980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e982:	2b00      	cmp	r3, #0
 800e984:	4606      	mov	r6, r0
 800e986:	f340 8088 	ble.w	800ea9a <_dtoa_r+0x8c2>
 800e98a:	461a      	mov	r2, r3
 800e98c:	4601      	mov	r1, r0
 800e98e:	4620      	mov	r0, r4
 800e990:	f001 f900 	bl	800fb94 <__pow5mult>
 800e994:	9b06      	ldr	r3, [sp, #24]
 800e996:	2b01      	cmp	r3, #1
 800e998:	4606      	mov	r6, r0
 800e99a:	f340 8081 	ble.w	800eaa0 <_dtoa_r+0x8c8>
 800e99e:	f04f 0800 	mov.w	r8, #0
 800e9a2:	6933      	ldr	r3, [r6, #16]
 800e9a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e9a8:	6918      	ldr	r0, [r3, #16]
 800e9aa:	f000 ffe3 	bl	800f974 <__hi0bits>
 800e9ae:	f1c0 0020 	rsb	r0, r0, #32
 800e9b2:	9b05      	ldr	r3, [sp, #20]
 800e9b4:	4418      	add	r0, r3
 800e9b6:	f010 001f 	ands.w	r0, r0, #31
 800e9ba:	f000 8092 	beq.w	800eae2 <_dtoa_r+0x90a>
 800e9be:	f1c0 0320 	rsb	r3, r0, #32
 800e9c2:	2b04      	cmp	r3, #4
 800e9c4:	f340 808a 	ble.w	800eadc <_dtoa_r+0x904>
 800e9c8:	f1c0 001c 	rsb	r0, r0, #28
 800e9cc:	9b04      	ldr	r3, [sp, #16]
 800e9ce:	4403      	add	r3, r0
 800e9d0:	9304      	str	r3, [sp, #16]
 800e9d2:	9b05      	ldr	r3, [sp, #20]
 800e9d4:	4403      	add	r3, r0
 800e9d6:	4405      	add	r5, r0
 800e9d8:	9305      	str	r3, [sp, #20]
 800e9da:	9b04      	ldr	r3, [sp, #16]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dd07      	ble.n	800e9f0 <_dtoa_r+0x818>
 800e9e0:	ee18 1a10 	vmov	r1, s16
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f001 f92e 	bl	800fc48 <__lshift>
 800e9ec:	ee08 0a10 	vmov	s16, r0
 800e9f0:	9b05      	ldr	r3, [sp, #20]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	dd05      	ble.n	800ea02 <_dtoa_r+0x82a>
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f001 f924 	bl	800fc48 <__lshift>
 800ea00:	4606      	mov	r6, r0
 800ea02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d06e      	beq.n	800eae6 <_dtoa_r+0x90e>
 800ea08:	ee18 0a10 	vmov	r0, s16
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	f001 f98b 	bl	800fd28 <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	da67      	bge.n	800eae6 <_dtoa_r+0x90e>
 800ea16:	9b00      	ldr	r3, [sp, #0]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	ee18 1a10 	vmov	r1, s16
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	220a      	movs	r2, #10
 800ea22:	2300      	movs	r3, #0
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 ff15 	bl	800f854 <__multadd>
 800ea2a:	9b08      	ldr	r3, [sp, #32]
 800ea2c:	ee08 0a10 	vmov	s16, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f000 81b1 	beq.w	800ed98 <_dtoa_r+0xbc0>
 800ea36:	2300      	movs	r3, #0
 800ea38:	4639      	mov	r1, r7
 800ea3a:	220a      	movs	r2, #10
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f000 ff09 	bl	800f854 <__multadd>
 800ea42:	9b02      	ldr	r3, [sp, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	4607      	mov	r7, r0
 800ea48:	f300 808e 	bgt.w	800eb68 <_dtoa_r+0x990>
 800ea4c:	9b06      	ldr	r3, [sp, #24]
 800ea4e:	2b02      	cmp	r3, #2
 800ea50:	dc51      	bgt.n	800eaf6 <_dtoa_r+0x91e>
 800ea52:	e089      	b.n	800eb68 <_dtoa_r+0x990>
 800ea54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea5a:	e74b      	b.n	800e8f4 <_dtoa_r+0x71c>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	1e5e      	subs	r6, r3, #1
 800ea60:	9b07      	ldr	r3, [sp, #28]
 800ea62:	42b3      	cmp	r3, r6
 800ea64:	bfbf      	itttt	lt
 800ea66:	9b07      	ldrlt	r3, [sp, #28]
 800ea68:	9607      	strlt	r6, [sp, #28]
 800ea6a:	1af2      	sublt	r2, r6, r3
 800ea6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea6e:	bfb6      	itet	lt
 800ea70:	189b      	addlt	r3, r3, r2
 800ea72:	1b9e      	subge	r6, r3, r6
 800ea74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea76:	9b03      	ldr	r3, [sp, #12]
 800ea78:	bfb8      	it	lt
 800ea7a:	2600      	movlt	r6, #0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	bfb7      	itett	lt
 800ea80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea88:	1a9d      	sublt	r5, r3, r2
 800ea8a:	2300      	movlt	r3, #0
 800ea8c:	e734      	b.n	800e8f8 <_dtoa_r+0x720>
 800ea8e:	9e07      	ldr	r6, [sp, #28]
 800ea90:	9d04      	ldr	r5, [sp, #16]
 800ea92:	9f08      	ldr	r7, [sp, #32]
 800ea94:	e73b      	b.n	800e90e <_dtoa_r+0x736>
 800ea96:	9a07      	ldr	r2, [sp, #28]
 800ea98:	e767      	b.n	800e96a <_dtoa_r+0x792>
 800ea9a:	9b06      	ldr	r3, [sp, #24]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	dc18      	bgt.n	800ead2 <_dtoa_r+0x8fa>
 800eaa0:	f1ba 0f00 	cmp.w	sl, #0
 800eaa4:	d115      	bne.n	800ead2 <_dtoa_r+0x8fa>
 800eaa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eaaa:	b993      	cbnz	r3, 800ead2 <_dtoa_r+0x8fa>
 800eaac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eab0:	0d1b      	lsrs	r3, r3, #20
 800eab2:	051b      	lsls	r3, r3, #20
 800eab4:	b183      	cbz	r3, 800ead8 <_dtoa_r+0x900>
 800eab6:	9b04      	ldr	r3, [sp, #16]
 800eab8:	3301      	adds	r3, #1
 800eaba:	9304      	str	r3, [sp, #16]
 800eabc:	9b05      	ldr	r3, [sp, #20]
 800eabe:	3301      	adds	r3, #1
 800eac0:	9305      	str	r3, [sp, #20]
 800eac2:	f04f 0801 	mov.w	r8, #1
 800eac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f47f af6a 	bne.w	800e9a2 <_dtoa_r+0x7ca>
 800eace:	2001      	movs	r0, #1
 800ead0:	e76f      	b.n	800e9b2 <_dtoa_r+0x7da>
 800ead2:	f04f 0800 	mov.w	r8, #0
 800ead6:	e7f6      	b.n	800eac6 <_dtoa_r+0x8ee>
 800ead8:	4698      	mov	r8, r3
 800eada:	e7f4      	b.n	800eac6 <_dtoa_r+0x8ee>
 800eadc:	f43f af7d 	beq.w	800e9da <_dtoa_r+0x802>
 800eae0:	4618      	mov	r0, r3
 800eae2:	301c      	adds	r0, #28
 800eae4:	e772      	b.n	800e9cc <_dtoa_r+0x7f4>
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	dc37      	bgt.n	800eb5c <_dtoa_r+0x984>
 800eaec:	9b06      	ldr	r3, [sp, #24]
 800eaee:	2b02      	cmp	r3, #2
 800eaf0:	dd34      	ble.n	800eb5c <_dtoa_r+0x984>
 800eaf2:	9b03      	ldr	r3, [sp, #12]
 800eaf4:	9302      	str	r3, [sp, #8]
 800eaf6:	9b02      	ldr	r3, [sp, #8]
 800eaf8:	b96b      	cbnz	r3, 800eb16 <_dtoa_r+0x93e>
 800eafa:	4631      	mov	r1, r6
 800eafc:	2205      	movs	r2, #5
 800eafe:	4620      	mov	r0, r4
 800eb00:	f000 fea8 	bl	800f854 <__multadd>
 800eb04:	4601      	mov	r1, r0
 800eb06:	4606      	mov	r6, r0
 800eb08:	ee18 0a10 	vmov	r0, s16
 800eb0c:	f001 f90c 	bl	800fd28 <__mcmp>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	f73f adbb 	bgt.w	800e68c <_dtoa_r+0x4b4>
 800eb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb18:	9d01      	ldr	r5, [sp, #4]
 800eb1a:	43db      	mvns	r3, r3
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	f04f 0800 	mov.w	r8, #0
 800eb22:	4631      	mov	r1, r6
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fe73 	bl	800f810 <_Bfree>
 800eb2a:	2f00      	cmp	r7, #0
 800eb2c:	f43f aea4 	beq.w	800e878 <_dtoa_r+0x6a0>
 800eb30:	f1b8 0f00 	cmp.w	r8, #0
 800eb34:	d005      	beq.n	800eb42 <_dtoa_r+0x96a>
 800eb36:	45b8      	cmp	r8, r7
 800eb38:	d003      	beq.n	800eb42 <_dtoa_r+0x96a>
 800eb3a:	4641      	mov	r1, r8
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 fe67 	bl	800f810 <_Bfree>
 800eb42:	4639      	mov	r1, r7
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fe63 	bl	800f810 <_Bfree>
 800eb4a:	e695      	b.n	800e878 <_dtoa_r+0x6a0>
 800eb4c:	2600      	movs	r6, #0
 800eb4e:	4637      	mov	r7, r6
 800eb50:	e7e1      	b.n	800eb16 <_dtoa_r+0x93e>
 800eb52:	9700      	str	r7, [sp, #0]
 800eb54:	4637      	mov	r7, r6
 800eb56:	e599      	b.n	800e68c <_dtoa_r+0x4b4>
 800eb58:	40240000 	.word	0x40240000
 800eb5c:	9b08      	ldr	r3, [sp, #32]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f000 80ca 	beq.w	800ecf8 <_dtoa_r+0xb20>
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	9302      	str	r3, [sp, #8]
 800eb68:	2d00      	cmp	r5, #0
 800eb6a:	dd05      	ble.n	800eb78 <_dtoa_r+0x9a0>
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	462a      	mov	r2, r5
 800eb70:	4620      	mov	r0, r4
 800eb72:	f001 f869 	bl	800fc48 <__lshift>
 800eb76:	4607      	mov	r7, r0
 800eb78:	f1b8 0f00 	cmp.w	r8, #0
 800eb7c:	d05b      	beq.n	800ec36 <_dtoa_r+0xa5e>
 800eb7e:	6879      	ldr	r1, [r7, #4]
 800eb80:	4620      	mov	r0, r4
 800eb82:	f000 fe05 	bl	800f790 <_Balloc>
 800eb86:	4605      	mov	r5, r0
 800eb88:	b928      	cbnz	r0, 800eb96 <_dtoa_r+0x9be>
 800eb8a:	4b87      	ldr	r3, [pc, #540]	; (800eda8 <_dtoa_r+0xbd0>)
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb92:	f7ff bb3b 	b.w	800e20c <_dtoa_r+0x34>
 800eb96:	693a      	ldr	r2, [r7, #16]
 800eb98:	3202      	adds	r2, #2
 800eb9a:	0092      	lsls	r2, r2, #2
 800eb9c:	f107 010c 	add.w	r1, r7, #12
 800eba0:	300c      	adds	r0, #12
 800eba2:	f7fd f946 	bl	800be32 <memcpy>
 800eba6:	2201      	movs	r2, #1
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f001 f84c 	bl	800fc48 <__lshift>
 800ebb0:	9b01      	ldr	r3, [sp, #4]
 800ebb2:	f103 0901 	add.w	r9, r3, #1
 800ebb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ebba:	4413      	add	r3, r2
 800ebbc:	9305      	str	r3, [sp, #20]
 800ebbe:	f00a 0301 	and.w	r3, sl, #1
 800ebc2:	46b8      	mov	r8, r7
 800ebc4:	9304      	str	r3, [sp, #16]
 800ebc6:	4607      	mov	r7, r0
 800ebc8:	4631      	mov	r1, r6
 800ebca:	ee18 0a10 	vmov	r0, s16
 800ebce:	f7ff fa77 	bl	800e0c0 <quorem>
 800ebd2:	4641      	mov	r1, r8
 800ebd4:	9002      	str	r0, [sp, #8]
 800ebd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ebda:	ee18 0a10 	vmov	r0, s16
 800ebde:	f001 f8a3 	bl	800fd28 <__mcmp>
 800ebe2:	463a      	mov	r2, r7
 800ebe4:	9003      	str	r0, [sp, #12]
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f001 f8b9 	bl	800fd60 <__mdiff>
 800ebee:	68c2      	ldr	r2, [r0, #12]
 800ebf0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ebf4:	4605      	mov	r5, r0
 800ebf6:	bb02      	cbnz	r2, 800ec3a <_dtoa_r+0xa62>
 800ebf8:	4601      	mov	r1, r0
 800ebfa:	ee18 0a10 	vmov	r0, s16
 800ebfe:	f001 f893 	bl	800fd28 <__mcmp>
 800ec02:	4602      	mov	r2, r0
 800ec04:	4629      	mov	r1, r5
 800ec06:	4620      	mov	r0, r4
 800ec08:	9207      	str	r2, [sp, #28]
 800ec0a:	f000 fe01 	bl	800f810 <_Bfree>
 800ec0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ec12:	ea43 0102 	orr.w	r1, r3, r2
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	430b      	orrs	r3, r1
 800ec1a:	464d      	mov	r5, r9
 800ec1c:	d10f      	bne.n	800ec3e <_dtoa_r+0xa66>
 800ec1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec22:	d02a      	beq.n	800ec7a <_dtoa_r+0xaa2>
 800ec24:	9b03      	ldr	r3, [sp, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	dd02      	ble.n	800ec30 <_dtoa_r+0xa58>
 800ec2a:	9b02      	ldr	r3, [sp, #8]
 800ec2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec30:	f88b a000 	strb.w	sl, [fp]
 800ec34:	e775      	b.n	800eb22 <_dtoa_r+0x94a>
 800ec36:	4638      	mov	r0, r7
 800ec38:	e7ba      	b.n	800ebb0 <_dtoa_r+0x9d8>
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	e7e2      	b.n	800ec04 <_dtoa_r+0xa2c>
 800ec3e:	9b03      	ldr	r3, [sp, #12]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	db04      	blt.n	800ec4e <_dtoa_r+0xa76>
 800ec44:	9906      	ldr	r1, [sp, #24]
 800ec46:	430b      	orrs	r3, r1
 800ec48:	9904      	ldr	r1, [sp, #16]
 800ec4a:	430b      	orrs	r3, r1
 800ec4c:	d122      	bne.n	800ec94 <_dtoa_r+0xabc>
 800ec4e:	2a00      	cmp	r2, #0
 800ec50:	ddee      	ble.n	800ec30 <_dtoa_r+0xa58>
 800ec52:	ee18 1a10 	vmov	r1, s16
 800ec56:	2201      	movs	r2, #1
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fff5 	bl	800fc48 <__lshift>
 800ec5e:	4631      	mov	r1, r6
 800ec60:	ee08 0a10 	vmov	s16, r0
 800ec64:	f001 f860 	bl	800fd28 <__mcmp>
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	dc03      	bgt.n	800ec74 <_dtoa_r+0xa9c>
 800ec6c:	d1e0      	bne.n	800ec30 <_dtoa_r+0xa58>
 800ec6e:	f01a 0f01 	tst.w	sl, #1
 800ec72:	d0dd      	beq.n	800ec30 <_dtoa_r+0xa58>
 800ec74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec78:	d1d7      	bne.n	800ec2a <_dtoa_r+0xa52>
 800ec7a:	2339      	movs	r3, #57	; 0x39
 800ec7c:	f88b 3000 	strb.w	r3, [fp]
 800ec80:	462b      	mov	r3, r5
 800ec82:	461d      	mov	r5, r3
 800ec84:	3b01      	subs	r3, #1
 800ec86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec8a:	2a39      	cmp	r2, #57	; 0x39
 800ec8c:	d071      	beq.n	800ed72 <_dtoa_r+0xb9a>
 800ec8e:	3201      	adds	r2, #1
 800ec90:	701a      	strb	r2, [r3, #0]
 800ec92:	e746      	b.n	800eb22 <_dtoa_r+0x94a>
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	dd07      	ble.n	800eca8 <_dtoa_r+0xad0>
 800ec98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec9c:	d0ed      	beq.n	800ec7a <_dtoa_r+0xaa2>
 800ec9e:	f10a 0301 	add.w	r3, sl, #1
 800eca2:	f88b 3000 	strb.w	r3, [fp]
 800eca6:	e73c      	b.n	800eb22 <_dtoa_r+0x94a>
 800eca8:	9b05      	ldr	r3, [sp, #20]
 800ecaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ecae:	4599      	cmp	r9, r3
 800ecb0:	d047      	beq.n	800ed42 <_dtoa_r+0xb6a>
 800ecb2:	ee18 1a10 	vmov	r1, s16
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	220a      	movs	r2, #10
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f000 fdca 	bl	800f854 <__multadd>
 800ecc0:	45b8      	cmp	r8, r7
 800ecc2:	ee08 0a10 	vmov	s16, r0
 800ecc6:	f04f 0300 	mov.w	r3, #0
 800ecca:	f04f 020a 	mov.w	r2, #10
 800ecce:	4641      	mov	r1, r8
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	d106      	bne.n	800ece2 <_dtoa_r+0xb0a>
 800ecd4:	f000 fdbe 	bl	800f854 <__multadd>
 800ecd8:	4680      	mov	r8, r0
 800ecda:	4607      	mov	r7, r0
 800ecdc:	f109 0901 	add.w	r9, r9, #1
 800ece0:	e772      	b.n	800ebc8 <_dtoa_r+0x9f0>
 800ece2:	f000 fdb7 	bl	800f854 <__multadd>
 800ece6:	4639      	mov	r1, r7
 800ece8:	4680      	mov	r8, r0
 800ecea:	2300      	movs	r3, #0
 800ecec:	220a      	movs	r2, #10
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 fdb0 	bl	800f854 <__multadd>
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	e7f1      	b.n	800ecdc <_dtoa_r+0xb04>
 800ecf8:	9b03      	ldr	r3, [sp, #12]
 800ecfa:	9302      	str	r3, [sp, #8]
 800ecfc:	9d01      	ldr	r5, [sp, #4]
 800ecfe:	ee18 0a10 	vmov	r0, s16
 800ed02:	4631      	mov	r1, r6
 800ed04:	f7ff f9dc 	bl	800e0c0 <quorem>
 800ed08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed0c:	9b01      	ldr	r3, [sp, #4]
 800ed0e:	f805 ab01 	strb.w	sl, [r5], #1
 800ed12:	1aea      	subs	r2, r5, r3
 800ed14:	9b02      	ldr	r3, [sp, #8]
 800ed16:	4293      	cmp	r3, r2
 800ed18:	dd09      	ble.n	800ed2e <_dtoa_r+0xb56>
 800ed1a:	ee18 1a10 	vmov	r1, s16
 800ed1e:	2300      	movs	r3, #0
 800ed20:	220a      	movs	r2, #10
 800ed22:	4620      	mov	r0, r4
 800ed24:	f000 fd96 	bl	800f854 <__multadd>
 800ed28:	ee08 0a10 	vmov	s16, r0
 800ed2c:	e7e7      	b.n	800ecfe <_dtoa_r+0xb26>
 800ed2e:	9b02      	ldr	r3, [sp, #8]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	bfc8      	it	gt
 800ed34:	461d      	movgt	r5, r3
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	bfd8      	it	le
 800ed3a:	2501      	movle	r5, #1
 800ed3c:	441d      	add	r5, r3
 800ed3e:	f04f 0800 	mov.w	r8, #0
 800ed42:	ee18 1a10 	vmov	r1, s16
 800ed46:	2201      	movs	r2, #1
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f000 ff7d 	bl	800fc48 <__lshift>
 800ed4e:	4631      	mov	r1, r6
 800ed50:	ee08 0a10 	vmov	s16, r0
 800ed54:	f000 ffe8 	bl	800fd28 <__mcmp>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	dc91      	bgt.n	800ec80 <_dtoa_r+0xaa8>
 800ed5c:	d102      	bne.n	800ed64 <_dtoa_r+0xb8c>
 800ed5e:	f01a 0f01 	tst.w	sl, #1
 800ed62:	d18d      	bne.n	800ec80 <_dtoa_r+0xaa8>
 800ed64:	462b      	mov	r3, r5
 800ed66:	461d      	mov	r5, r3
 800ed68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed6c:	2a30      	cmp	r2, #48	; 0x30
 800ed6e:	d0fa      	beq.n	800ed66 <_dtoa_r+0xb8e>
 800ed70:	e6d7      	b.n	800eb22 <_dtoa_r+0x94a>
 800ed72:	9a01      	ldr	r2, [sp, #4]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d184      	bne.n	800ec82 <_dtoa_r+0xaaa>
 800ed78:	9b00      	ldr	r3, [sp, #0]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	2331      	movs	r3, #49	; 0x31
 800ed80:	7013      	strb	r3, [r2, #0]
 800ed82:	e6ce      	b.n	800eb22 <_dtoa_r+0x94a>
 800ed84:	4b09      	ldr	r3, [pc, #36]	; (800edac <_dtoa_r+0xbd4>)
 800ed86:	f7ff ba95 	b.w	800e2b4 <_dtoa_r+0xdc>
 800ed8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f47f aa6e 	bne.w	800e26e <_dtoa_r+0x96>
 800ed92:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <_dtoa_r+0xbd8>)
 800ed94:	f7ff ba8e 	b.w	800e2b4 <_dtoa_r+0xdc>
 800ed98:	9b02      	ldr	r3, [sp, #8]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	dcae      	bgt.n	800ecfc <_dtoa_r+0xb24>
 800ed9e:	9b06      	ldr	r3, [sp, #24]
 800eda0:	2b02      	cmp	r3, #2
 800eda2:	f73f aea8 	bgt.w	800eaf6 <_dtoa_r+0x91e>
 800eda6:	e7a9      	b.n	800ecfc <_dtoa_r+0xb24>
 800eda8:	0801257f 	.word	0x0801257f
 800edac:	08012768 	.word	0x08012768
 800edb0:	08012500 	.word	0x08012500

0800edb4 <__sflush_r>:
 800edb4:	898a      	ldrh	r2, [r1, #12]
 800edb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edba:	4605      	mov	r5, r0
 800edbc:	0710      	lsls	r0, r2, #28
 800edbe:	460c      	mov	r4, r1
 800edc0:	d458      	bmi.n	800ee74 <__sflush_r+0xc0>
 800edc2:	684b      	ldr	r3, [r1, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dc05      	bgt.n	800edd4 <__sflush_r+0x20>
 800edc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edca:	2b00      	cmp	r3, #0
 800edcc:	dc02      	bgt.n	800edd4 <__sflush_r+0x20>
 800edce:	2000      	movs	r0, #0
 800edd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edd6:	2e00      	cmp	r6, #0
 800edd8:	d0f9      	beq.n	800edce <__sflush_r+0x1a>
 800edda:	2300      	movs	r3, #0
 800eddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ede0:	682f      	ldr	r7, [r5, #0]
 800ede2:	602b      	str	r3, [r5, #0]
 800ede4:	d032      	beq.n	800ee4c <__sflush_r+0x98>
 800ede6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ede8:	89a3      	ldrh	r3, [r4, #12]
 800edea:	075a      	lsls	r2, r3, #29
 800edec:	d505      	bpl.n	800edfa <__sflush_r+0x46>
 800edee:	6863      	ldr	r3, [r4, #4]
 800edf0:	1ac0      	subs	r0, r0, r3
 800edf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edf4:	b10b      	cbz	r3, 800edfa <__sflush_r+0x46>
 800edf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edf8:	1ac0      	subs	r0, r0, r3
 800edfa:	2300      	movs	r3, #0
 800edfc:	4602      	mov	r2, r0
 800edfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee00:	6a21      	ldr	r1, [r4, #32]
 800ee02:	4628      	mov	r0, r5
 800ee04:	47b0      	blx	r6
 800ee06:	1c43      	adds	r3, r0, #1
 800ee08:	89a3      	ldrh	r3, [r4, #12]
 800ee0a:	d106      	bne.n	800ee1a <__sflush_r+0x66>
 800ee0c:	6829      	ldr	r1, [r5, #0]
 800ee0e:	291d      	cmp	r1, #29
 800ee10:	d82c      	bhi.n	800ee6c <__sflush_r+0xb8>
 800ee12:	4a2a      	ldr	r2, [pc, #168]	; (800eebc <__sflush_r+0x108>)
 800ee14:	40ca      	lsrs	r2, r1
 800ee16:	07d6      	lsls	r6, r2, #31
 800ee18:	d528      	bpl.n	800ee6c <__sflush_r+0xb8>
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	6062      	str	r2, [r4, #4]
 800ee1e:	04d9      	lsls	r1, r3, #19
 800ee20:	6922      	ldr	r2, [r4, #16]
 800ee22:	6022      	str	r2, [r4, #0]
 800ee24:	d504      	bpl.n	800ee30 <__sflush_r+0x7c>
 800ee26:	1c42      	adds	r2, r0, #1
 800ee28:	d101      	bne.n	800ee2e <__sflush_r+0x7a>
 800ee2a:	682b      	ldr	r3, [r5, #0]
 800ee2c:	b903      	cbnz	r3, 800ee30 <__sflush_r+0x7c>
 800ee2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ee30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee32:	602f      	str	r7, [r5, #0]
 800ee34:	2900      	cmp	r1, #0
 800ee36:	d0ca      	beq.n	800edce <__sflush_r+0x1a>
 800ee38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee3c:	4299      	cmp	r1, r3
 800ee3e:	d002      	beq.n	800ee46 <__sflush_r+0x92>
 800ee40:	4628      	mov	r0, r5
 800ee42:	f001 f97d 	bl	8010140 <_free_r>
 800ee46:	2000      	movs	r0, #0
 800ee48:	6360      	str	r0, [r4, #52]	; 0x34
 800ee4a:	e7c1      	b.n	800edd0 <__sflush_r+0x1c>
 800ee4c:	6a21      	ldr	r1, [r4, #32]
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4628      	mov	r0, r5
 800ee52:	47b0      	blx	r6
 800ee54:	1c41      	adds	r1, r0, #1
 800ee56:	d1c7      	bne.n	800ede8 <__sflush_r+0x34>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d0c4      	beq.n	800ede8 <__sflush_r+0x34>
 800ee5e:	2b1d      	cmp	r3, #29
 800ee60:	d001      	beq.n	800ee66 <__sflush_r+0xb2>
 800ee62:	2b16      	cmp	r3, #22
 800ee64:	d101      	bne.n	800ee6a <__sflush_r+0xb6>
 800ee66:	602f      	str	r7, [r5, #0]
 800ee68:	e7b1      	b.n	800edce <__sflush_r+0x1a>
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee70:	81a3      	strh	r3, [r4, #12]
 800ee72:	e7ad      	b.n	800edd0 <__sflush_r+0x1c>
 800ee74:	690f      	ldr	r7, [r1, #16]
 800ee76:	2f00      	cmp	r7, #0
 800ee78:	d0a9      	beq.n	800edce <__sflush_r+0x1a>
 800ee7a:	0793      	lsls	r3, r2, #30
 800ee7c:	680e      	ldr	r6, [r1, #0]
 800ee7e:	bf08      	it	eq
 800ee80:	694b      	ldreq	r3, [r1, #20]
 800ee82:	600f      	str	r7, [r1, #0]
 800ee84:	bf18      	it	ne
 800ee86:	2300      	movne	r3, #0
 800ee88:	eba6 0807 	sub.w	r8, r6, r7
 800ee8c:	608b      	str	r3, [r1, #8]
 800ee8e:	f1b8 0f00 	cmp.w	r8, #0
 800ee92:	dd9c      	ble.n	800edce <__sflush_r+0x1a>
 800ee94:	6a21      	ldr	r1, [r4, #32]
 800ee96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee98:	4643      	mov	r3, r8
 800ee9a:	463a      	mov	r2, r7
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	47b0      	blx	r6
 800eea0:	2800      	cmp	r0, #0
 800eea2:	dc06      	bgt.n	800eeb2 <__sflush_r+0xfe>
 800eea4:	89a3      	ldrh	r3, [r4, #12]
 800eea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	e78e      	b.n	800edd0 <__sflush_r+0x1c>
 800eeb2:	4407      	add	r7, r0
 800eeb4:	eba8 0800 	sub.w	r8, r8, r0
 800eeb8:	e7e9      	b.n	800ee8e <__sflush_r+0xda>
 800eeba:	bf00      	nop
 800eebc:	20400001 	.word	0x20400001

0800eec0 <_fflush_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	690b      	ldr	r3, [r1, #16]
 800eec4:	4605      	mov	r5, r0
 800eec6:	460c      	mov	r4, r1
 800eec8:	b913      	cbnz	r3, 800eed0 <_fflush_r+0x10>
 800eeca:	2500      	movs	r5, #0
 800eecc:	4628      	mov	r0, r5
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	b118      	cbz	r0, 800eeda <_fflush_r+0x1a>
 800eed2:	6983      	ldr	r3, [r0, #24]
 800eed4:	b90b      	cbnz	r3, 800eeda <_fflush_r+0x1a>
 800eed6:	f7fc fed5 	bl	800bc84 <__sinit>
 800eeda:	4b14      	ldr	r3, [pc, #80]	; (800ef2c <_fflush_r+0x6c>)
 800eedc:	429c      	cmp	r4, r3
 800eede:	d11b      	bne.n	800ef18 <_fflush_r+0x58>
 800eee0:	686c      	ldr	r4, [r5, #4]
 800eee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d0ef      	beq.n	800eeca <_fflush_r+0xa>
 800eeea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eeec:	07d0      	lsls	r0, r2, #31
 800eeee:	d404      	bmi.n	800eefa <_fflush_r+0x3a>
 800eef0:	0599      	lsls	r1, r3, #22
 800eef2:	d402      	bmi.n	800eefa <_fflush_r+0x3a>
 800eef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eef6:	f7fc ff9a 	bl	800be2e <__retarget_lock_acquire_recursive>
 800eefa:	4628      	mov	r0, r5
 800eefc:	4621      	mov	r1, r4
 800eefe:	f7ff ff59 	bl	800edb4 <__sflush_r>
 800ef02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef04:	07da      	lsls	r2, r3, #31
 800ef06:	4605      	mov	r5, r0
 800ef08:	d4e0      	bmi.n	800eecc <_fflush_r+0xc>
 800ef0a:	89a3      	ldrh	r3, [r4, #12]
 800ef0c:	059b      	lsls	r3, r3, #22
 800ef0e:	d4dd      	bmi.n	800eecc <_fflush_r+0xc>
 800ef10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef12:	f7fc ff8d 	bl	800be30 <__retarget_lock_release_recursive>
 800ef16:	e7d9      	b.n	800eecc <_fflush_r+0xc>
 800ef18:	4b05      	ldr	r3, [pc, #20]	; (800ef30 <_fflush_r+0x70>)
 800ef1a:	429c      	cmp	r4, r3
 800ef1c:	d101      	bne.n	800ef22 <_fflush_r+0x62>
 800ef1e:	68ac      	ldr	r4, [r5, #8]
 800ef20:	e7df      	b.n	800eee2 <_fflush_r+0x22>
 800ef22:	4b04      	ldr	r3, [pc, #16]	; (800ef34 <_fflush_r+0x74>)
 800ef24:	429c      	cmp	r4, r3
 800ef26:	bf08      	it	eq
 800ef28:	68ec      	ldreq	r4, [r5, #12]
 800ef2a:	e7da      	b.n	800eee2 <_fflush_r+0x22>
 800ef2c:	08012420 	.word	0x08012420
 800ef30:	08012440 	.word	0x08012440
 800ef34:	08012400 	.word	0x08012400

0800ef38 <rshift>:
 800ef38:	6903      	ldr	r3, [r0, #16]
 800ef3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef42:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef46:	f100 0414 	add.w	r4, r0, #20
 800ef4a:	dd45      	ble.n	800efd8 <rshift+0xa0>
 800ef4c:	f011 011f 	ands.w	r1, r1, #31
 800ef50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef58:	d10c      	bne.n	800ef74 <rshift+0x3c>
 800ef5a:	f100 0710 	add.w	r7, r0, #16
 800ef5e:	4629      	mov	r1, r5
 800ef60:	42b1      	cmp	r1, r6
 800ef62:	d334      	bcc.n	800efce <rshift+0x96>
 800ef64:	1a9b      	subs	r3, r3, r2
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	1eea      	subs	r2, r5, #3
 800ef6a:	4296      	cmp	r6, r2
 800ef6c:	bf38      	it	cc
 800ef6e:	2300      	movcc	r3, #0
 800ef70:	4423      	add	r3, r4
 800ef72:	e015      	b.n	800efa0 <rshift+0x68>
 800ef74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef78:	f1c1 0820 	rsb	r8, r1, #32
 800ef7c:	40cf      	lsrs	r7, r1
 800ef7e:	f105 0e04 	add.w	lr, r5, #4
 800ef82:	46a1      	mov	r9, r4
 800ef84:	4576      	cmp	r6, lr
 800ef86:	46f4      	mov	ip, lr
 800ef88:	d815      	bhi.n	800efb6 <rshift+0x7e>
 800ef8a:	1a9a      	subs	r2, r3, r2
 800ef8c:	0092      	lsls	r2, r2, #2
 800ef8e:	3a04      	subs	r2, #4
 800ef90:	3501      	adds	r5, #1
 800ef92:	42ae      	cmp	r6, r5
 800ef94:	bf38      	it	cc
 800ef96:	2200      	movcc	r2, #0
 800ef98:	18a3      	adds	r3, r4, r2
 800ef9a:	50a7      	str	r7, [r4, r2]
 800ef9c:	b107      	cbz	r7, 800efa0 <rshift+0x68>
 800ef9e:	3304      	adds	r3, #4
 800efa0:	1b1a      	subs	r2, r3, r4
 800efa2:	42a3      	cmp	r3, r4
 800efa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800efa8:	bf08      	it	eq
 800efaa:	2300      	moveq	r3, #0
 800efac:	6102      	str	r2, [r0, #16]
 800efae:	bf08      	it	eq
 800efb0:	6143      	streq	r3, [r0, #20]
 800efb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efb6:	f8dc c000 	ldr.w	ip, [ip]
 800efba:	fa0c fc08 	lsl.w	ip, ip, r8
 800efbe:	ea4c 0707 	orr.w	r7, ip, r7
 800efc2:	f849 7b04 	str.w	r7, [r9], #4
 800efc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800efca:	40cf      	lsrs	r7, r1
 800efcc:	e7da      	b.n	800ef84 <rshift+0x4c>
 800efce:	f851 cb04 	ldr.w	ip, [r1], #4
 800efd2:	f847 cf04 	str.w	ip, [r7, #4]!
 800efd6:	e7c3      	b.n	800ef60 <rshift+0x28>
 800efd8:	4623      	mov	r3, r4
 800efda:	e7e1      	b.n	800efa0 <rshift+0x68>

0800efdc <__hexdig_fun>:
 800efdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800efe0:	2b09      	cmp	r3, #9
 800efe2:	d802      	bhi.n	800efea <__hexdig_fun+0xe>
 800efe4:	3820      	subs	r0, #32
 800efe6:	b2c0      	uxtb	r0, r0
 800efe8:	4770      	bx	lr
 800efea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efee:	2b05      	cmp	r3, #5
 800eff0:	d801      	bhi.n	800eff6 <__hexdig_fun+0x1a>
 800eff2:	3847      	subs	r0, #71	; 0x47
 800eff4:	e7f7      	b.n	800efe6 <__hexdig_fun+0xa>
 800eff6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800effa:	2b05      	cmp	r3, #5
 800effc:	d801      	bhi.n	800f002 <__hexdig_fun+0x26>
 800effe:	3827      	subs	r0, #39	; 0x27
 800f000:	e7f1      	b.n	800efe6 <__hexdig_fun+0xa>
 800f002:	2000      	movs	r0, #0
 800f004:	4770      	bx	lr
	...

0800f008 <__gethex>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	ed2d 8b02 	vpush	{d8}
 800f010:	b089      	sub	sp, #36	; 0x24
 800f012:	ee08 0a10 	vmov	s16, r0
 800f016:	9304      	str	r3, [sp, #16]
 800f018:	4bb4      	ldr	r3, [pc, #720]	; (800f2ec <__gethex+0x2e4>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	4618      	mov	r0, r3
 800f020:	468b      	mov	fp, r1
 800f022:	4690      	mov	r8, r2
 800f024:	f7f1 f8de 	bl	80001e4 <strlen>
 800f028:	9b01      	ldr	r3, [sp, #4]
 800f02a:	f8db 2000 	ldr.w	r2, [fp]
 800f02e:	4403      	add	r3, r0
 800f030:	4682      	mov	sl, r0
 800f032:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f036:	9305      	str	r3, [sp, #20]
 800f038:	1c93      	adds	r3, r2, #2
 800f03a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f03e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f042:	32fe      	adds	r2, #254	; 0xfe
 800f044:	18d1      	adds	r1, r2, r3
 800f046:	461f      	mov	r7, r3
 800f048:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f04c:	9100      	str	r1, [sp, #0]
 800f04e:	2830      	cmp	r0, #48	; 0x30
 800f050:	d0f8      	beq.n	800f044 <__gethex+0x3c>
 800f052:	f7ff ffc3 	bl	800efdc <__hexdig_fun>
 800f056:	4604      	mov	r4, r0
 800f058:	2800      	cmp	r0, #0
 800f05a:	d13a      	bne.n	800f0d2 <__gethex+0xca>
 800f05c:	9901      	ldr	r1, [sp, #4]
 800f05e:	4652      	mov	r2, sl
 800f060:	4638      	mov	r0, r7
 800f062:	f001 fdfd 	bl	8010c60 <strncmp>
 800f066:	4605      	mov	r5, r0
 800f068:	2800      	cmp	r0, #0
 800f06a:	d168      	bne.n	800f13e <__gethex+0x136>
 800f06c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f070:	eb07 060a 	add.w	r6, r7, sl
 800f074:	f7ff ffb2 	bl	800efdc <__hexdig_fun>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d062      	beq.n	800f142 <__gethex+0x13a>
 800f07c:	4633      	mov	r3, r6
 800f07e:	7818      	ldrb	r0, [r3, #0]
 800f080:	2830      	cmp	r0, #48	; 0x30
 800f082:	461f      	mov	r7, r3
 800f084:	f103 0301 	add.w	r3, r3, #1
 800f088:	d0f9      	beq.n	800f07e <__gethex+0x76>
 800f08a:	f7ff ffa7 	bl	800efdc <__hexdig_fun>
 800f08e:	2301      	movs	r3, #1
 800f090:	fab0 f480 	clz	r4, r0
 800f094:	0964      	lsrs	r4, r4, #5
 800f096:	4635      	mov	r5, r6
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	463a      	mov	r2, r7
 800f09c:	4616      	mov	r6, r2
 800f09e:	3201      	adds	r2, #1
 800f0a0:	7830      	ldrb	r0, [r6, #0]
 800f0a2:	f7ff ff9b 	bl	800efdc <__hexdig_fun>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d1f8      	bne.n	800f09c <__gethex+0x94>
 800f0aa:	9901      	ldr	r1, [sp, #4]
 800f0ac:	4652      	mov	r2, sl
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f001 fdd6 	bl	8010c60 <strncmp>
 800f0b4:	b980      	cbnz	r0, 800f0d8 <__gethex+0xd0>
 800f0b6:	b94d      	cbnz	r5, 800f0cc <__gethex+0xc4>
 800f0b8:	eb06 050a 	add.w	r5, r6, sl
 800f0bc:	462a      	mov	r2, r5
 800f0be:	4616      	mov	r6, r2
 800f0c0:	3201      	adds	r2, #1
 800f0c2:	7830      	ldrb	r0, [r6, #0]
 800f0c4:	f7ff ff8a 	bl	800efdc <__hexdig_fun>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d1f8      	bne.n	800f0be <__gethex+0xb6>
 800f0cc:	1bad      	subs	r5, r5, r6
 800f0ce:	00ad      	lsls	r5, r5, #2
 800f0d0:	e004      	b.n	800f0dc <__gethex+0xd4>
 800f0d2:	2400      	movs	r4, #0
 800f0d4:	4625      	mov	r5, r4
 800f0d6:	e7e0      	b.n	800f09a <__gethex+0x92>
 800f0d8:	2d00      	cmp	r5, #0
 800f0da:	d1f7      	bne.n	800f0cc <__gethex+0xc4>
 800f0dc:	7833      	ldrb	r3, [r6, #0]
 800f0de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0e2:	2b50      	cmp	r3, #80	; 0x50
 800f0e4:	d13b      	bne.n	800f15e <__gethex+0x156>
 800f0e6:	7873      	ldrb	r3, [r6, #1]
 800f0e8:	2b2b      	cmp	r3, #43	; 0x2b
 800f0ea:	d02c      	beq.n	800f146 <__gethex+0x13e>
 800f0ec:	2b2d      	cmp	r3, #45	; 0x2d
 800f0ee:	d02e      	beq.n	800f14e <__gethex+0x146>
 800f0f0:	1c71      	adds	r1, r6, #1
 800f0f2:	f04f 0900 	mov.w	r9, #0
 800f0f6:	7808      	ldrb	r0, [r1, #0]
 800f0f8:	f7ff ff70 	bl	800efdc <__hexdig_fun>
 800f0fc:	1e43      	subs	r3, r0, #1
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b18      	cmp	r3, #24
 800f102:	d82c      	bhi.n	800f15e <__gethex+0x156>
 800f104:	f1a0 0210 	sub.w	r2, r0, #16
 800f108:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f10c:	f7ff ff66 	bl	800efdc <__hexdig_fun>
 800f110:	1e43      	subs	r3, r0, #1
 800f112:	b2db      	uxtb	r3, r3
 800f114:	2b18      	cmp	r3, #24
 800f116:	d91d      	bls.n	800f154 <__gethex+0x14c>
 800f118:	f1b9 0f00 	cmp.w	r9, #0
 800f11c:	d000      	beq.n	800f120 <__gethex+0x118>
 800f11e:	4252      	negs	r2, r2
 800f120:	4415      	add	r5, r2
 800f122:	f8cb 1000 	str.w	r1, [fp]
 800f126:	b1e4      	cbz	r4, 800f162 <__gethex+0x15a>
 800f128:	9b00      	ldr	r3, [sp, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	bf14      	ite	ne
 800f12e:	2700      	movne	r7, #0
 800f130:	2706      	moveq	r7, #6
 800f132:	4638      	mov	r0, r7
 800f134:	b009      	add	sp, #36	; 0x24
 800f136:	ecbd 8b02 	vpop	{d8}
 800f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13e:	463e      	mov	r6, r7
 800f140:	4625      	mov	r5, r4
 800f142:	2401      	movs	r4, #1
 800f144:	e7ca      	b.n	800f0dc <__gethex+0xd4>
 800f146:	f04f 0900 	mov.w	r9, #0
 800f14a:	1cb1      	adds	r1, r6, #2
 800f14c:	e7d3      	b.n	800f0f6 <__gethex+0xee>
 800f14e:	f04f 0901 	mov.w	r9, #1
 800f152:	e7fa      	b.n	800f14a <__gethex+0x142>
 800f154:	230a      	movs	r3, #10
 800f156:	fb03 0202 	mla	r2, r3, r2, r0
 800f15a:	3a10      	subs	r2, #16
 800f15c:	e7d4      	b.n	800f108 <__gethex+0x100>
 800f15e:	4631      	mov	r1, r6
 800f160:	e7df      	b.n	800f122 <__gethex+0x11a>
 800f162:	1bf3      	subs	r3, r6, r7
 800f164:	3b01      	subs	r3, #1
 800f166:	4621      	mov	r1, r4
 800f168:	2b07      	cmp	r3, #7
 800f16a:	dc0b      	bgt.n	800f184 <__gethex+0x17c>
 800f16c:	ee18 0a10 	vmov	r0, s16
 800f170:	f000 fb0e 	bl	800f790 <_Balloc>
 800f174:	4604      	mov	r4, r0
 800f176:	b940      	cbnz	r0, 800f18a <__gethex+0x182>
 800f178:	4b5d      	ldr	r3, [pc, #372]	; (800f2f0 <__gethex+0x2e8>)
 800f17a:	4602      	mov	r2, r0
 800f17c:	21de      	movs	r1, #222	; 0xde
 800f17e:	485d      	ldr	r0, [pc, #372]	; (800f2f4 <__gethex+0x2ec>)
 800f180:	f7fc fcfc 	bl	800bb7c <__assert_func>
 800f184:	3101      	adds	r1, #1
 800f186:	105b      	asrs	r3, r3, #1
 800f188:	e7ee      	b.n	800f168 <__gethex+0x160>
 800f18a:	f100 0914 	add.w	r9, r0, #20
 800f18e:	f04f 0b00 	mov.w	fp, #0
 800f192:	f1ca 0301 	rsb	r3, sl, #1
 800f196:	f8cd 9008 	str.w	r9, [sp, #8]
 800f19a:	f8cd b000 	str.w	fp, [sp]
 800f19e:	9306      	str	r3, [sp, #24]
 800f1a0:	42b7      	cmp	r7, r6
 800f1a2:	d340      	bcc.n	800f226 <__gethex+0x21e>
 800f1a4:	9802      	ldr	r0, [sp, #8]
 800f1a6:	9b00      	ldr	r3, [sp, #0]
 800f1a8:	f840 3b04 	str.w	r3, [r0], #4
 800f1ac:	eba0 0009 	sub.w	r0, r0, r9
 800f1b0:	1080      	asrs	r0, r0, #2
 800f1b2:	0146      	lsls	r6, r0, #5
 800f1b4:	6120      	str	r0, [r4, #16]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f000 fbdc 	bl	800f974 <__hi0bits>
 800f1bc:	1a30      	subs	r0, r6, r0
 800f1be:	f8d8 6000 	ldr.w	r6, [r8]
 800f1c2:	42b0      	cmp	r0, r6
 800f1c4:	dd63      	ble.n	800f28e <__gethex+0x286>
 800f1c6:	1b87      	subs	r7, r0, r6
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f000 ff80 	bl	80100d0 <__any_on>
 800f1d0:	4682      	mov	sl, r0
 800f1d2:	b1a8      	cbz	r0, 800f200 <__gethex+0x1f8>
 800f1d4:	1e7b      	subs	r3, r7, #1
 800f1d6:	1159      	asrs	r1, r3, #5
 800f1d8:	f003 021f 	and.w	r2, r3, #31
 800f1dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f1e0:	f04f 0a01 	mov.w	sl, #1
 800f1e4:	fa0a f202 	lsl.w	r2, sl, r2
 800f1e8:	420a      	tst	r2, r1
 800f1ea:	d009      	beq.n	800f200 <__gethex+0x1f8>
 800f1ec:	4553      	cmp	r3, sl
 800f1ee:	dd05      	ble.n	800f1fc <__gethex+0x1f4>
 800f1f0:	1eb9      	subs	r1, r7, #2
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 ff6c 	bl	80100d0 <__any_on>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d145      	bne.n	800f288 <__gethex+0x280>
 800f1fc:	f04f 0a02 	mov.w	sl, #2
 800f200:	4639      	mov	r1, r7
 800f202:	4620      	mov	r0, r4
 800f204:	f7ff fe98 	bl	800ef38 <rshift>
 800f208:	443d      	add	r5, r7
 800f20a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f20e:	42ab      	cmp	r3, r5
 800f210:	da4c      	bge.n	800f2ac <__gethex+0x2a4>
 800f212:	ee18 0a10 	vmov	r0, s16
 800f216:	4621      	mov	r1, r4
 800f218:	f000 fafa 	bl	800f810 <_Bfree>
 800f21c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f21e:	2300      	movs	r3, #0
 800f220:	6013      	str	r3, [r2, #0]
 800f222:	27a3      	movs	r7, #163	; 0xa3
 800f224:	e785      	b.n	800f132 <__gethex+0x12a>
 800f226:	1e73      	subs	r3, r6, #1
 800f228:	9a05      	ldr	r2, [sp, #20]
 800f22a:	9303      	str	r3, [sp, #12]
 800f22c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f230:	4293      	cmp	r3, r2
 800f232:	d019      	beq.n	800f268 <__gethex+0x260>
 800f234:	f1bb 0f20 	cmp.w	fp, #32
 800f238:	d107      	bne.n	800f24a <__gethex+0x242>
 800f23a:	9b02      	ldr	r3, [sp, #8]
 800f23c:	9a00      	ldr	r2, [sp, #0]
 800f23e:	f843 2b04 	str.w	r2, [r3], #4
 800f242:	9302      	str	r3, [sp, #8]
 800f244:	2300      	movs	r3, #0
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	469b      	mov	fp, r3
 800f24a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f24e:	f7ff fec5 	bl	800efdc <__hexdig_fun>
 800f252:	9b00      	ldr	r3, [sp, #0]
 800f254:	f000 000f 	and.w	r0, r0, #15
 800f258:	fa00 f00b 	lsl.w	r0, r0, fp
 800f25c:	4303      	orrs	r3, r0
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	f10b 0b04 	add.w	fp, fp, #4
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	e00d      	b.n	800f284 <__gethex+0x27c>
 800f268:	9b03      	ldr	r3, [sp, #12]
 800f26a:	9a06      	ldr	r2, [sp, #24]
 800f26c:	4413      	add	r3, r2
 800f26e:	42bb      	cmp	r3, r7
 800f270:	d3e0      	bcc.n	800f234 <__gethex+0x22c>
 800f272:	4618      	mov	r0, r3
 800f274:	9901      	ldr	r1, [sp, #4]
 800f276:	9307      	str	r3, [sp, #28]
 800f278:	4652      	mov	r2, sl
 800f27a:	f001 fcf1 	bl	8010c60 <strncmp>
 800f27e:	9b07      	ldr	r3, [sp, #28]
 800f280:	2800      	cmp	r0, #0
 800f282:	d1d7      	bne.n	800f234 <__gethex+0x22c>
 800f284:	461e      	mov	r6, r3
 800f286:	e78b      	b.n	800f1a0 <__gethex+0x198>
 800f288:	f04f 0a03 	mov.w	sl, #3
 800f28c:	e7b8      	b.n	800f200 <__gethex+0x1f8>
 800f28e:	da0a      	bge.n	800f2a6 <__gethex+0x29e>
 800f290:	1a37      	subs	r7, r6, r0
 800f292:	4621      	mov	r1, r4
 800f294:	ee18 0a10 	vmov	r0, s16
 800f298:	463a      	mov	r2, r7
 800f29a:	f000 fcd5 	bl	800fc48 <__lshift>
 800f29e:	1bed      	subs	r5, r5, r7
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	f100 0914 	add.w	r9, r0, #20
 800f2a6:	f04f 0a00 	mov.w	sl, #0
 800f2aa:	e7ae      	b.n	800f20a <__gethex+0x202>
 800f2ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f2b0:	42a8      	cmp	r0, r5
 800f2b2:	dd72      	ble.n	800f39a <__gethex+0x392>
 800f2b4:	1b45      	subs	r5, r0, r5
 800f2b6:	42ae      	cmp	r6, r5
 800f2b8:	dc36      	bgt.n	800f328 <__gethex+0x320>
 800f2ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2be:	2b02      	cmp	r3, #2
 800f2c0:	d02a      	beq.n	800f318 <__gethex+0x310>
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	d02c      	beq.n	800f320 <__gethex+0x318>
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d11c      	bne.n	800f304 <__gethex+0x2fc>
 800f2ca:	42ae      	cmp	r6, r5
 800f2cc:	d11a      	bne.n	800f304 <__gethex+0x2fc>
 800f2ce:	2e01      	cmp	r6, #1
 800f2d0:	d112      	bne.n	800f2f8 <__gethex+0x2f0>
 800f2d2:	9a04      	ldr	r2, [sp, #16]
 800f2d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f2d8:	6013      	str	r3, [r2, #0]
 800f2da:	2301      	movs	r3, #1
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	f8c9 3000 	str.w	r3, [r9]
 800f2e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2e4:	2762      	movs	r7, #98	; 0x62
 800f2e6:	601c      	str	r4, [r3, #0]
 800f2e8:	e723      	b.n	800f132 <__gethex+0x12a>
 800f2ea:	bf00      	nop
 800f2ec:	080125f8 	.word	0x080125f8
 800f2f0:	0801257f 	.word	0x0801257f
 800f2f4:	08012590 	.word	0x08012590
 800f2f8:	1e71      	subs	r1, r6, #1
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 fee8 	bl	80100d0 <__any_on>
 800f300:	2800      	cmp	r0, #0
 800f302:	d1e6      	bne.n	800f2d2 <__gethex+0x2ca>
 800f304:	ee18 0a10 	vmov	r0, s16
 800f308:	4621      	mov	r1, r4
 800f30a:	f000 fa81 	bl	800f810 <_Bfree>
 800f30e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f310:	2300      	movs	r3, #0
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	2750      	movs	r7, #80	; 0x50
 800f316:	e70c      	b.n	800f132 <__gethex+0x12a>
 800f318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1f2      	bne.n	800f304 <__gethex+0x2fc>
 800f31e:	e7d8      	b.n	800f2d2 <__gethex+0x2ca>
 800f320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1d5      	bne.n	800f2d2 <__gethex+0x2ca>
 800f326:	e7ed      	b.n	800f304 <__gethex+0x2fc>
 800f328:	1e6f      	subs	r7, r5, #1
 800f32a:	f1ba 0f00 	cmp.w	sl, #0
 800f32e:	d131      	bne.n	800f394 <__gethex+0x38c>
 800f330:	b127      	cbz	r7, 800f33c <__gethex+0x334>
 800f332:	4639      	mov	r1, r7
 800f334:	4620      	mov	r0, r4
 800f336:	f000 fecb 	bl	80100d0 <__any_on>
 800f33a:	4682      	mov	sl, r0
 800f33c:	117b      	asrs	r3, r7, #5
 800f33e:	2101      	movs	r1, #1
 800f340:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f344:	f007 071f 	and.w	r7, r7, #31
 800f348:	fa01 f707 	lsl.w	r7, r1, r7
 800f34c:	421f      	tst	r7, r3
 800f34e:	4629      	mov	r1, r5
 800f350:	4620      	mov	r0, r4
 800f352:	bf18      	it	ne
 800f354:	f04a 0a02 	orrne.w	sl, sl, #2
 800f358:	1b76      	subs	r6, r6, r5
 800f35a:	f7ff fded 	bl	800ef38 <rshift>
 800f35e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f362:	2702      	movs	r7, #2
 800f364:	f1ba 0f00 	cmp.w	sl, #0
 800f368:	d048      	beq.n	800f3fc <__gethex+0x3f4>
 800f36a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f36e:	2b02      	cmp	r3, #2
 800f370:	d015      	beq.n	800f39e <__gethex+0x396>
 800f372:	2b03      	cmp	r3, #3
 800f374:	d017      	beq.n	800f3a6 <__gethex+0x39e>
 800f376:	2b01      	cmp	r3, #1
 800f378:	d109      	bne.n	800f38e <__gethex+0x386>
 800f37a:	f01a 0f02 	tst.w	sl, #2
 800f37e:	d006      	beq.n	800f38e <__gethex+0x386>
 800f380:	f8d9 0000 	ldr.w	r0, [r9]
 800f384:	ea4a 0a00 	orr.w	sl, sl, r0
 800f388:	f01a 0f01 	tst.w	sl, #1
 800f38c:	d10e      	bne.n	800f3ac <__gethex+0x3a4>
 800f38e:	f047 0710 	orr.w	r7, r7, #16
 800f392:	e033      	b.n	800f3fc <__gethex+0x3f4>
 800f394:	f04f 0a01 	mov.w	sl, #1
 800f398:	e7d0      	b.n	800f33c <__gethex+0x334>
 800f39a:	2701      	movs	r7, #1
 800f39c:	e7e2      	b.n	800f364 <__gethex+0x35c>
 800f39e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3a0:	f1c3 0301 	rsb	r3, r3, #1
 800f3a4:	9315      	str	r3, [sp, #84]	; 0x54
 800f3a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d0f0      	beq.n	800f38e <__gethex+0x386>
 800f3ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3b0:	f104 0314 	add.w	r3, r4, #20
 800f3b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3bc:	f04f 0c00 	mov.w	ip, #0
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f3ca:	d01c      	beq.n	800f406 <__gethex+0x3fe>
 800f3cc:	3201      	adds	r2, #1
 800f3ce:	6002      	str	r2, [r0, #0]
 800f3d0:	2f02      	cmp	r7, #2
 800f3d2:	f104 0314 	add.w	r3, r4, #20
 800f3d6:	d13f      	bne.n	800f458 <__gethex+0x450>
 800f3d8:	f8d8 2000 	ldr.w	r2, [r8]
 800f3dc:	3a01      	subs	r2, #1
 800f3de:	42b2      	cmp	r2, r6
 800f3e0:	d10a      	bne.n	800f3f8 <__gethex+0x3f0>
 800f3e2:	1171      	asrs	r1, r6, #5
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f3ea:	f006 061f 	and.w	r6, r6, #31
 800f3ee:	fa02 f606 	lsl.w	r6, r2, r6
 800f3f2:	421e      	tst	r6, r3
 800f3f4:	bf18      	it	ne
 800f3f6:	4617      	movne	r7, r2
 800f3f8:	f047 0720 	orr.w	r7, r7, #32
 800f3fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3fe:	601c      	str	r4, [r3, #0]
 800f400:	9b04      	ldr	r3, [sp, #16]
 800f402:	601d      	str	r5, [r3, #0]
 800f404:	e695      	b.n	800f132 <__gethex+0x12a>
 800f406:	4299      	cmp	r1, r3
 800f408:	f843 cc04 	str.w	ip, [r3, #-4]
 800f40c:	d8d8      	bhi.n	800f3c0 <__gethex+0x3b8>
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	459b      	cmp	fp, r3
 800f412:	db19      	blt.n	800f448 <__gethex+0x440>
 800f414:	6861      	ldr	r1, [r4, #4]
 800f416:	ee18 0a10 	vmov	r0, s16
 800f41a:	3101      	adds	r1, #1
 800f41c:	f000 f9b8 	bl	800f790 <_Balloc>
 800f420:	4681      	mov	r9, r0
 800f422:	b918      	cbnz	r0, 800f42c <__gethex+0x424>
 800f424:	4b1a      	ldr	r3, [pc, #104]	; (800f490 <__gethex+0x488>)
 800f426:	4602      	mov	r2, r0
 800f428:	2184      	movs	r1, #132	; 0x84
 800f42a:	e6a8      	b.n	800f17e <__gethex+0x176>
 800f42c:	6922      	ldr	r2, [r4, #16]
 800f42e:	3202      	adds	r2, #2
 800f430:	f104 010c 	add.w	r1, r4, #12
 800f434:	0092      	lsls	r2, r2, #2
 800f436:	300c      	adds	r0, #12
 800f438:	f7fc fcfb 	bl	800be32 <memcpy>
 800f43c:	4621      	mov	r1, r4
 800f43e:	ee18 0a10 	vmov	r0, s16
 800f442:	f000 f9e5 	bl	800f810 <_Bfree>
 800f446:	464c      	mov	r4, r9
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	1c5a      	adds	r2, r3, #1
 800f44c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f450:	6122      	str	r2, [r4, #16]
 800f452:	2201      	movs	r2, #1
 800f454:	615a      	str	r2, [r3, #20]
 800f456:	e7bb      	b.n	800f3d0 <__gethex+0x3c8>
 800f458:	6922      	ldr	r2, [r4, #16]
 800f45a:	455a      	cmp	r2, fp
 800f45c:	dd0b      	ble.n	800f476 <__gethex+0x46e>
 800f45e:	2101      	movs	r1, #1
 800f460:	4620      	mov	r0, r4
 800f462:	f7ff fd69 	bl	800ef38 <rshift>
 800f466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f46a:	3501      	adds	r5, #1
 800f46c:	42ab      	cmp	r3, r5
 800f46e:	f6ff aed0 	blt.w	800f212 <__gethex+0x20a>
 800f472:	2701      	movs	r7, #1
 800f474:	e7c0      	b.n	800f3f8 <__gethex+0x3f0>
 800f476:	f016 061f 	ands.w	r6, r6, #31
 800f47a:	d0fa      	beq.n	800f472 <__gethex+0x46a>
 800f47c:	4453      	add	r3, sl
 800f47e:	f1c6 0620 	rsb	r6, r6, #32
 800f482:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f486:	f000 fa75 	bl	800f974 <__hi0bits>
 800f48a:	42b0      	cmp	r0, r6
 800f48c:	dbe7      	blt.n	800f45e <__gethex+0x456>
 800f48e:	e7f0      	b.n	800f472 <__gethex+0x46a>
 800f490:	0801257f 	.word	0x0801257f

0800f494 <L_shift>:
 800f494:	f1c2 0208 	rsb	r2, r2, #8
 800f498:	0092      	lsls	r2, r2, #2
 800f49a:	b570      	push	{r4, r5, r6, lr}
 800f49c:	f1c2 0620 	rsb	r6, r2, #32
 800f4a0:	6843      	ldr	r3, [r0, #4]
 800f4a2:	6804      	ldr	r4, [r0, #0]
 800f4a4:	fa03 f506 	lsl.w	r5, r3, r6
 800f4a8:	432c      	orrs	r4, r5
 800f4aa:	40d3      	lsrs	r3, r2
 800f4ac:	6004      	str	r4, [r0, #0]
 800f4ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4b2:	4288      	cmp	r0, r1
 800f4b4:	d3f4      	bcc.n	800f4a0 <L_shift+0xc>
 800f4b6:	bd70      	pop	{r4, r5, r6, pc}

0800f4b8 <__match>:
 800f4b8:	b530      	push	{r4, r5, lr}
 800f4ba:	6803      	ldr	r3, [r0, #0]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4c2:	b914      	cbnz	r4, 800f4ca <__match+0x12>
 800f4c4:	6003      	str	r3, [r0, #0]
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	bd30      	pop	{r4, r5, pc}
 800f4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f4d2:	2d19      	cmp	r5, #25
 800f4d4:	bf98      	it	ls
 800f4d6:	3220      	addls	r2, #32
 800f4d8:	42a2      	cmp	r2, r4
 800f4da:	d0f0      	beq.n	800f4be <__match+0x6>
 800f4dc:	2000      	movs	r0, #0
 800f4de:	e7f3      	b.n	800f4c8 <__match+0x10>

0800f4e0 <__hexnan>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	680b      	ldr	r3, [r1, #0]
 800f4e6:	115e      	asrs	r6, r3, #5
 800f4e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f4ec:	f013 031f 	ands.w	r3, r3, #31
 800f4f0:	b087      	sub	sp, #28
 800f4f2:	bf18      	it	ne
 800f4f4:	3604      	addne	r6, #4
 800f4f6:	2500      	movs	r5, #0
 800f4f8:	1f37      	subs	r7, r6, #4
 800f4fa:	4690      	mov	r8, r2
 800f4fc:	6802      	ldr	r2, [r0, #0]
 800f4fe:	9301      	str	r3, [sp, #4]
 800f500:	4682      	mov	sl, r0
 800f502:	f846 5c04 	str.w	r5, [r6, #-4]
 800f506:	46b9      	mov	r9, r7
 800f508:	463c      	mov	r4, r7
 800f50a:	9502      	str	r5, [sp, #8]
 800f50c:	46ab      	mov	fp, r5
 800f50e:	7851      	ldrb	r1, [r2, #1]
 800f510:	1c53      	adds	r3, r2, #1
 800f512:	9303      	str	r3, [sp, #12]
 800f514:	b341      	cbz	r1, 800f568 <__hexnan+0x88>
 800f516:	4608      	mov	r0, r1
 800f518:	9205      	str	r2, [sp, #20]
 800f51a:	9104      	str	r1, [sp, #16]
 800f51c:	f7ff fd5e 	bl	800efdc <__hexdig_fun>
 800f520:	2800      	cmp	r0, #0
 800f522:	d14f      	bne.n	800f5c4 <__hexnan+0xe4>
 800f524:	9904      	ldr	r1, [sp, #16]
 800f526:	9a05      	ldr	r2, [sp, #20]
 800f528:	2920      	cmp	r1, #32
 800f52a:	d818      	bhi.n	800f55e <__hexnan+0x7e>
 800f52c:	9b02      	ldr	r3, [sp, #8]
 800f52e:	459b      	cmp	fp, r3
 800f530:	dd13      	ble.n	800f55a <__hexnan+0x7a>
 800f532:	454c      	cmp	r4, r9
 800f534:	d206      	bcs.n	800f544 <__hexnan+0x64>
 800f536:	2d07      	cmp	r5, #7
 800f538:	dc04      	bgt.n	800f544 <__hexnan+0x64>
 800f53a:	462a      	mov	r2, r5
 800f53c:	4649      	mov	r1, r9
 800f53e:	4620      	mov	r0, r4
 800f540:	f7ff ffa8 	bl	800f494 <L_shift>
 800f544:	4544      	cmp	r4, r8
 800f546:	d950      	bls.n	800f5ea <__hexnan+0x10a>
 800f548:	2300      	movs	r3, #0
 800f54a:	f1a4 0904 	sub.w	r9, r4, #4
 800f54e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f552:	f8cd b008 	str.w	fp, [sp, #8]
 800f556:	464c      	mov	r4, r9
 800f558:	461d      	mov	r5, r3
 800f55a:	9a03      	ldr	r2, [sp, #12]
 800f55c:	e7d7      	b.n	800f50e <__hexnan+0x2e>
 800f55e:	2929      	cmp	r1, #41	; 0x29
 800f560:	d156      	bne.n	800f610 <__hexnan+0x130>
 800f562:	3202      	adds	r2, #2
 800f564:	f8ca 2000 	str.w	r2, [sl]
 800f568:	f1bb 0f00 	cmp.w	fp, #0
 800f56c:	d050      	beq.n	800f610 <__hexnan+0x130>
 800f56e:	454c      	cmp	r4, r9
 800f570:	d206      	bcs.n	800f580 <__hexnan+0xa0>
 800f572:	2d07      	cmp	r5, #7
 800f574:	dc04      	bgt.n	800f580 <__hexnan+0xa0>
 800f576:	462a      	mov	r2, r5
 800f578:	4649      	mov	r1, r9
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7ff ff8a 	bl	800f494 <L_shift>
 800f580:	4544      	cmp	r4, r8
 800f582:	d934      	bls.n	800f5ee <__hexnan+0x10e>
 800f584:	f1a8 0204 	sub.w	r2, r8, #4
 800f588:	4623      	mov	r3, r4
 800f58a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f58e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f592:	429f      	cmp	r7, r3
 800f594:	d2f9      	bcs.n	800f58a <__hexnan+0xaa>
 800f596:	1b3b      	subs	r3, r7, r4
 800f598:	f023 0303 	bic.w	r3, r3, #3
 800f59c:	3304      	adds	r3, #4
 800f59e:	3401      	adds	r4, #1
 800f5a0:	3e03      	subs	r6, #3
 800f5a2:	42b4      	cmp	r4, r6
 800f5a4:	bf88      	it	hi
 800f5a6:	2304      	movhi	r3, #4
 800f5a8:	4443      	add	r3, r8
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f843 2b04 	str.w	r2, [r3], #4
 800f5b0:	429f      	cmp	r7, r3
 800f5b2:	d2fb      	bcs.n	800f5ac <__hexnan+0xcc>
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	b91b      	cbnz	r3, 800f5c0 <__hexnan+0xe0>
 800f5b8:	4547      	cmp	r7, r8
 800f5ba:	d127      	bne.n	800f60c <__hexnan+0x12c>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	603b      	str	r3, [r7, #0]
 800f5c0:	2005      	movs	r0, #5
 800f5c2:	e026      	b.n	800f612 <__hexnan+0x132>
 800f5c4:	3501      	adds	r5, #1
 800f5c6:	2d08      	cmp	r5, #8
 800f5c8:	f10b 0b01 	add.w	fp, fp, #1
 800f5cc:	dd06      	ble.n	800f5dc <__hexnan+0xfc>
 800f5ce:	4544      	cmp	r4, r8
 800f5d0:	d9c3      	bls.n	800f55a <__hexnan+0x7a>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5d8:	2501      	movs	r5, #1
 800f5da:	3c04      	subs	r4, #4
 800f5dc:	6822      	ldr	r2, [r4, #0]
 800f5de:	f000 000f 	and.w	r0, r0, #15
 800f5e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f5e6:	6022      	str	r2, [r4, #0]
 800f5e8:	e7b7      	b.n	800f55a <__hexnan+0x7a>
 800f5ea:	2508      	movs	r5, #8
 800f5ec:	e7b5      	b.n	800f55a <__hexnan+0x7a>
 800f5ee:	9b01      	ldr	r3, [sp, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d0df      	beq.n	800f5b4 <__hexnan+0xd4>
 800f5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f8:	f1c3 0320 	rsb	r3, r3, #32
 800f5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800f600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f604:	401a      	ands	r2, r3
 800f606:	f846 2c04 	str.w	r2, [r6, #-4]
 800f60a:	e7d3      	b.n	800f5b4 <__hexnan+0xd4>
 800f60c:	3f04      	subs	r7, #4
 800f60e:	e7d1      	b.n	800f5b4 <__hexnan+0xd4>
 800f610:	2004      	movs	r0, #4
 800f612:	b007      	add	sp, #28
 800f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f618 <_localeconv_r>:
 800f618:	4800      	ldr	r0, [pc, #0]	; (800f61c <_localeconv_r+0x4>)
 800f61a:	4770      	bx	lr
 800f61c:	20000394 	.word	0x20000394

0800f620 <_lseek_r>:
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	4d07      	ldr	r5, [pc, #28]	; (800f640 <_lseek_r+0x20>)
 800f624:	4604      	mov	r4, r0
 800f626:	4608      	mov	r0, r1
 800f628:	4611      	mov	r1, r2
 800f62a:	2200      	movs	r2, #0
 800f62c:	602a      	str	r2, [r5, #0]
 800f62e:	461a      	mov	r2, r3
 800f630:	f7f3 fc38 	bl	8002ea4 <_lseek>
 800f634:	1c43      	adds	r3, r0, #1
 800f636:	d102      	bne.n	800f63e <_lseek_r+0x1e>
 800f638:	682b      	ldr	r3, [r5, #0]
 800f63a:	b103      	cbz	r3, 800f63e <_lseek_r+0x1e>
 800f63c:	6023      	str	r3, [r4, #0]
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	20013298 	.word	0x20013298

0800f644 <__swhatbuf_r>:
 800f644:	b570      	push	{r4, r5, r6, lr}
 800f646:	460e      	mov	r6, r1
 800f648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f64c:	2900      	cmp	r1, #0
 800f64e:	b096      	sub	sp, #88	; 0x58
 800f650:	4614      	mov	r4, r2
 800f652:	461d      	mov	r5, r3
 800f654:	da08      	bge.n	800f668 <__swhatbuf_r+0x24>
 800f656:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f65a:	2200      	movs	r2, #0
 800f65c:	602a      	str	r2, [r5, #0]
 800f65e:	061a      	lsls	r2, r3, #24
 800f660:	d410      	bmi.n	800f684 <__swhatbuf_r+0x40>
 800f662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f666:	e00e      	b.n	800f686 <__swhatbuf_r+0x42>
 800f668:	466a      	mov	r2, sp
 800f66a:	f001 fbc9 	bl	8010e00 <_fstat_r>
 800f66e:	2800      	cmp	r0, #0
 800f670:	dbf1      	blt.n	800f656 <__swhatbuf_r+0x12>
 800f672:	9a01      	ldr	r2, [sp, #4]
 800f674:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f678:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f67c:	425a      	negs	r2, r3
 800f67e:	415a      	adcs	r2, r3
 800f680:	602a      	str	r2, [r5, #0]
 800f682:	e7ee      	b.n	800f662 <__swhatbuf_r+0x1e>
 800f684:	2340      	movs	r3, #64	; 0x40
 800f686:	2000      	movs	r0, #0
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	b016      	add	sp, #88	; 0x58
 800f68c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f690 <__smakebuf_r>:
 800f690:	898b      	ldrh	r3, [r1, #12]
 800f692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f694:	079d      	lsls	r5, r3, #30
 800f696:	4606      	mov	r6, r0
 800f698:	460c      	mov	r4, r1
 800f69a:	d507      	bpl.n	800f6ac <__smakebuf_r+0x1c>
 800f69c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	6123      	str	r3, [r4, #16]
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	6163      	str	r3, [r4, #20]
 800f6a8:	b002      	add	sp, #8
 800f6aa:	bd70      	pop	{r4, r5, r6, pc}
 800f6ac:	ab01      	add	r3, sp, #4
 800f6ae:	466a      	mov	r2, sp
 800f6b0:	f7ff ffc8 	bl	800f644 <__swhatbuf_r>
 800f6b4:	9900      	ldr	r1, [sp, #0]
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f7fc fbf1 	bl	800bea0 <_malloc_r>
 800f6be:	b948      	cbnz	r0, 800f6d4 <__smakebuf_r+0x44>
 800f6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c4:	059a      	lsls	r2, r3, #22
 800f6c6:	d4ef      	bmi.n	800f6a8 <__smakebuf_r+0x18>
 800f6c8:	f023 0303 	bic.w	r3, r3, #3
 800f6cc:	f043 0302 	orr.w	r3, r3, #2
 800f6d0:	81a3      	strh	r3, [r4, #12]
 800f6d2:	e7e3      	b.n	800f69c <__smakebuf_r+0xc>
 800f6d4:	4b0d      	ldr	r3, [pc, #52]	; (800f70c <__smakebuf_r+0x7c>)
 800f6d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	6020      	str	r0, [r4, #0]
 800f6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e0:	81a3      	strh	r3, [r4, #12]
 800f6e2:	9b00      	ldr	r3, [sp, #0]
 800f6e4:	6163      	str	r3, [r4, #20]
 800f6e6:	9b01      	ldr	r3, [sp, #4]
 800f6e8:	6120      	str	r0, [r4, #16]
 800f6ea:	b15b      	cbz	r3, 800f704 <__smakebuf_r+0x74>
 800f6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f001 fb97 	bl	8010e24 <_isatty_r>
 800f6f6:	b128      	cbz	r0, 800f704 <__smakebuf_r+0x74>
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	f023 0303 	bic.w	r3, r3, #3
 800f6fe:	f043 0301 	orr.w	r3, r3, #1
 800f702:	81a3      	strh	r3, [r4, #12]
 800f704:	89a0      	ldrh	r0, [r4, #12]
 800f706:	4305      	orrs	r5, r0
 800f708:	81a5      	strh	r5, [r4, #12]
 800f70a:	e7cd      	b.n	800f6a8 <__smakebuf_r+0x18>
 800f70c:	0800bc1d 	.word	0x0800bc1d

0800f710 <malloc>:
 800f710:	4b02      	ldr	r3, [pc, #8]	; (800f71c <malloc+0xc>)
 800f712:	4601      	mov	r1, r0
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	f7fc bbc3 	b.w	800bea0 <_malloc_r>
 800f71a:	bf00      	nop
 800f71c:	2000023c 	.word	0x2000023c

0800f720 <__ascii_mbtowc>:
 800f720:	b082      	sub	sp, #8
 800f722:	b901      	cbnz	r1, 800f726 <__ascii_mbtowc+0x6>
 800f724:	a901      	add	r1, sp, #4
 800f726:	b142      	cbz	r2, 800f73a <__ascii_mbtowc+0x1a>
 800f728:	b14b      	cbz	r3, 800f73e <__ascii_mbtowc+0x1e>
 800f72a:	7813      	ldrb	r3, [r2, #0]
 800f72c:	600b      	str	r3, [r1, #0]
 800f72e:	7812      	ldrb	r2, [r2, #0]
 800f730:	1e10      	subs	r0, r2, #0
 800f732:	bf18      	it	ne
 800f734:	2001      	movne	r0, #1
 800f736:	b002      	add	sp, #8
 800f738:	4770      	bx	lr
 800f73a:	4610      	mov	r0, r2
 800f73c:	e7fb      	b.n	800f736 <__ascii_mbtowc+0x16>
 800f73e:	f06f 0001 	mvn.w	r0, #1
 800f742:	e7f8      	b.n	800f736 <__ascii_mbtowc+0x16>

0800f744 <memmove>:
 800f744:	4288      	cmp	r0, r1
 800f746:	b510      	push	{r4, lr}
 800f748:	eb01 0402 	add.w	r4, r1, r2
 800f74c:	d902      	bls.n	800f754 <memmove+0x10>
 800f74e:	4284      	cmp	r4, r0
 800f750:	4623      	mov	r3, r4
 800f752:	d807      	bhi.n	800f764 <memmove+0x20>
 800f754:	1e43      	subs	r3, r0, #1
 800f756:	42a1      	cmp	r1, r4
 800f758:	d008      	beq.n	800f76c <memmove+0x28>
 800f75a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f75e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f762:	e7f8      	b.n	800f756 <memmove+0x12>
 800f764:	4402      	add	r2, r0
 800f766:	4601      	mov	r1, r0
 800f768:	428a      	cmp	r2, r1
 800f76a:	d100      	bne.n	800f76e <memmove+0x2a>
 800f76c:	bd10      	pop	{r4, pc}
 800f76e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f776:	e7f7      	b.n	800f768 <memmove+0x24>

0800f778 <__malloc_lock>:
 800f778:	4801      	ldr	r0, [pc, #4]	; (800f780 <__malloc_lock+0x8>)
 800f77a:	f7fc bb58 	b.w	800be2e <__retarget_lock_acquire_recursive>
 800f77e:	bf00      	nop
 800f780:	2001328c 	.word	0x2001328c

0800f784 <__malloc_unlock>:
 800f784:	4801      	ldr	r0, [pc, #4]	; (800f78c <__malloc_unlock+0x8>)
 800f786:	f7fc bb53 	b.w	800be30 <__retarget_lock_release_recursive>
 800f78a:	bf00      	nop
 800f78c:	2001328c 	.word	0x2001328c

0800f790 <_Balloc>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f794:	4604      	mov	r4, r0
 800f796:	460d      	mov	r5, r1
 800f798:	b976      	cbnz	r6, 800f7b8 <_Balloc+0x28>
 800f79a:	2010      	movs	r0, #16
 800f79c:	f7ff ffb8 	bl	800f710 <malloc>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	6260      	str	r0, [r4, #36]	; 0x24
 800f7a4:	b920      	cbnz	r0, 800f7b0 <_Balloc+0x20>
 800f7a6:	4b18      	ldr	r3, [pc, #96]	; (800f808 <_Balloc+0x78>)
 800f7a8:	4818      	ldr	r0, [pc, #96]	; (800f80c <_Balloc+0x7c>)
 800f7aa:	2166      	movs	r1, #102	; 0x66
 800f7ac:	f7fc f9e6 	bl	800bb7c <__assert_func>
 800f7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7b4:	6006      	str	r6, [r0, #0]
 800f7b6:	60c6      	str	r6, [r0, #12]
 800f7b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f7ba:	68f3      	ldr	r3, [r6, #12]
 800f7bc:	b183      	cbz	r3, 800f7e0 <_Balloc+0x50>
 800f7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7c6:	b9b8      	cbnz	r0, 800f7f8 <_Balloc+0x68>
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	fa01 f605 	lsl.w	r6, r1, r5
 800f7ce:	1d72      	adds	r2, r6, #5
 800f7d0:	0092      	lsls	r2, r2, #2
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f000 fc9d 	bl	8010112 <_calloc_r>
 800f7d8:	b160      	cbz	r0, 800f7f4 <_Balloc+0x64>
 800f7da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7de:	e00e      	b.n	800f7fe <_Balloc+0x6e>
 800f7e0:	2221      	movs	r2, #33	; 0x21
 800f7e2:	2104      	movs	r1, #4
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f000 fc94 	bl	8010112 <_calloc_r>
 800f7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7ec:	60f0      	str	r0, [r6, #12]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d1e4      	bne.n	800f7be <_Balloc+0x2e>
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	bd70      	pop	{r4, r5, r6, pc}
 800f7f8:	6802      	ldr	r2, [r0, #0]
 800f7fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7fe:	2300      	movs	r3, #0
 800f800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f804:	e7f7      	b.n	800f7f6 <_Balloc+0x66>
 800f806:	bf00      	nop
 800f808:	0801250d 	.word	0x0801250d
 800f80c:	0801260c 	.word	0x0801260c

0800f810 <_Bfree>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f814:	4605      	mov	r5, r0
 800f816:	460c      	mov	r4, r1
 800f818:	b976      	cbnz	r6, 800f838 <_Bfree+0x28>
 800f81a:	2010      	movs	r0, #16
 800f81c:	f7ff ff78 	bl	800f710 <malloc>
 800f820:	4602      	mov	r2, r0
 800f822:	6268      	str	r0, [r5, #36]	; 0x24
 800f824:	b920      	cbnz	r0, 800f830 <_Bfree+0x20>
 800f826:	4b09      	ldr	r3, [pc, #36]	; (800f84c <_Bfree+0x3c>)
 800f828:	4809      	ldr	r0, [pc, #36]	; (800f850 <_Bfree+0x40>)
 800f82a:	218a      	movs	r1, #138	; 0x8a
 800f82c:	f7fc f9a6 	bl	800bb7c <__assert_func>
 800f830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f834:	6006      	str	r6, [r0, #0]
 800f836:	60c6      	str	r6, [r0, #12]
 800f838:	b13c      	cbz	r4, 800f84a <_Bfree+0x3a>
 800f83a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f83c:	6862      	ldr	r2, [r4, #4]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f844:	6021      	str	r1, [r4, #0]
 800f846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
 800f84c:	0801250d 	.word	0x0801250d
 800f850:	0801260c 	.word	0x0801260c

0800f854 <__multadd>:
 800f854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f858:	690d      	ldr	r5, [r1, #16]
 800f85a:	4607      	mov	r7, r0
 800f85c:	460c      	mov	r4, r1
 800f85e:	461e      	mov	r6, r3
 800f860:	f101 0c14 	add.w	ip, r1, #20
 800f864:	2000      	movs	r0, #0
 800f866:	f8dc 3000 	ldr.w	r3, [ip]
 800f86a:	b299      	uxth	r1, r3
 800f86c:	fb02 6101 	mla	r1, r2, r1, r6
 800f870:	0c1e      	lsrs	r6, r3, #16
 800f872:	0c0b      	lsrs	r3, r1, #16
 800f874:	fb02 3306 	mla	r3, r2, r6, r3
 800f878:	b289      	uxth	r1, r1
 800f87a:	3001      	adds	r0, #1
 800f87c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f880:	4285      	cmp	r5, r0
 800f882:	f84c 1b04 	str.w	r1, [ip], #4
 800f886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f88a:	dcec      	bgt.n	800f866 <__multadd+0x12>
 800f88c:	b30e      	cbz	r6, 800f8d2 <__multadd+0x7e>
 800f88e:	68a3      	ldr	r3, [r4, #8]
 800f890:	42ab      	cmp	r3, r5
 800f892:	dc19      	bgt.n	800f8c8 <__multadd+0x74>
 800f894:	6861      	ldr	r1, [r4, #4]
 800f896:	4638      	mov	r0, r7
 800f898:	3101      	adds	r1, #1
 800f89a:	f7ff ff79 	bl	800f790 <_Balloc>
 800f89e:	4680      	mov	r8, r0
 800f8a0:	b928      	cbnz	r0, 800f8ae <__multadd+0x5a>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <__multadd+0x84>)
 800f8a6:	480d      	ldr	r0, [pc, #52]	; (800f8dc <__multadd+0x88>)
 800f8a8:	21b5      	movs	r1, #181	; 0xb5
 800f8aa:	f7fc f967 	bl	800bb7c <__assert_func>
 800f8ae:	6922      	ldr	r2, [r4, #16]
 800f8b0:	3202      	adds	r2, #2
 800f8b2:	f104 010c 	add.w	r1, r4, #12
 800f8b6:	0092      	lsls	r2, r2, #2
 800f8b8:	300c      	adds	r0, #12
 800f8ba:	f7fc faba 	bl	800be32 <memcpy>
 800f8be:	4621      	mov	r1, r4
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	f7ff ffa5 	bl	800f810 <_Bfree>
 800f8c6:	4644      	mov	r4, r8
 800f8c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f8cc:	3501      	adds	r5, #1
 800f8ce:	615e      	str	r6, [r3, #20]
 800f8d0:	6125      	str	r5, [r4, #16]
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d8:	0801257f 	.word	0x0801257f
 800f8dc:	0801260c 	.word	0x0801260c

0800f8e0 <__s2b>:
 800f8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e4:	460c      	mov	r4, r1
 800f8e6:	4615      	mov	r5, r2
 800f8e8:	461f      	mov	r7, r3
 800f8ea:	2209      	movs	r2, #9
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	4606      	mov	r6, r0
 800f8f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	db09      	blt.n	800f910 <__s2b+0x30>
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f7ff ff47 	bl	800f790 <_Balloc>
 800f902:	b940      	cbnz	r0, 800f916 <__s2b+0x36>
 800f904:	4602      	mov	r2, r0
 800f906:	4b19      	ldr	r3, [pc, #100]	; (800f96c <__s2b+0x8c>)
 800f908:	4819      	ldr	r0, [pc, #100]	; (800f970 <__s2b+0x90>)
 800f90a:	21ce      	movs	r1, #206	; 0xce
 800f90c:	f7fc f936 	bl	800bb7c <__assert_func>
 800f910:	0052      	lsls	r2, r2, #1
 800f912:	3101      	adds	r1, #1
 800f914:	e7f0      	b.n	800f8f8 <__s2b+0x18>
 800f916:	9b08      	ldr	r3, [sp, #32]
 800f918:	6143      	str	r3, [r0, #20]
 800f91a:	2d09      	cmp	r5, #9
 800f91c:	f04f 0301 	mov.w	r3, #1
 800f920:	6103      	str	r3, [r0, #16]
 800f922:	dd16      	ble.n	800f952 <__s2b+0x72>
 800f924:	f104 0909 	add.w	r9, r4, #9
 800f928:	46c8      	mov	r8, r9
 800f92a:	442c      	add	r4, r5
 800f92c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f930:	4601      	mov	r1, r0
 800f932:	3b30      	subs	r3, #48	; 0x30
 800f934:	220a      	movs	r2, #10
 800f936:	4630      	mov	r0, r6
 800f938:	f7ff ff8c 	bl	800f854 <__multadd>
 800f93c:	45a0      	cmp	r8, r4
 800f93e:	d1f5      	bne.n	800f92c <__s2b+0x4c>
 800f940:	f1a5 0408 	sub.w	r4, r5, #8
 800f944:	444c      	add	r4, r9
 800f946:	1b2d      	subs	r5, r5, r4
 800f948:	1963      	adds	r3, r4, r5
 800f94a:	42bb      	cmp	r3, r7
 800f94c:	db04      	blt.n	800f958 <__s2b+0x78>
 800f94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f952:	340a      	adds	r4, #10
 800f954:	2509      	movs	r5, #9
 800f956:	e7f6      	b.n	800f946 <__s2b+0x66>
 800f958:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f95c:	4601      	mov	r1, r0
 800f95e:	3b30      	subs	r3, #48	; 0x30
 800f960:	220a      	movs	r2, #10
 800f962:	4630      	mov	r0, r6
 800f964:	f7ff ff76 	bl	800f854 <__multadd>
 800f968:	e7ee      	b.n	800f948 <__s2b+0x68>
 800f96a:	bf00      	nop
 800f96c:	0801257f 	.word	0x0801257f
 800f970:	0801260c 	.word	0x0801260c

0800f974 <__hi0bits>:
 800f974:	0c03      	lsrs	r3, r0, #16
 800f976:	041b      	lsls	r3, r3, #16
 800f978:	b9d3      	cbnz	r3, 800f9b0 <__hi0bits+0x3c>
 800f97a:	0400      	lsls	r0, r0, #16
 800f97c:	2310      	movs	r3, #16
 800f97e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f982:	bf04      	itt	eq
 800f984:	0200      	lsleq	r0, r0, #8
 800f986:	3308      	addeq	r3, #8
 800f988:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f98c:	bf04      	itt	eq
 800f98e:	0100      	lsleq	r0, r0, #4
 800f990:	3304      	addeq	r3, #4
 800f992:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f996:	bf04      	itt	eq
 800f998:	0080      	lsleq	r0, r0, #2
 800f99a:	3302      	addeq	r3, #2
 800f99c:	2800      	cmp	r0, #0
 800f99e:	db05      	blt.n	800f9ac <__hi0bits+0x38>
 800f9a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f9a4:	f103 0301 	add.w	r3, r3, #1
 800f9a8:	bf08      	it	eq
 800f9aa:	2320      	moveq	r3, #32
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	4770      	bx	lr
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	e7e4      	b.n	800f97e <__hi0bits+0xa>

0800f9b4 <__lo0bits>:
 800f9b4:	6803      	ldr	r3, [r0, #0]
 800f9b6:	f013 0207 	ands.w	r2, r3, #7
 800f9ba:	4601      	mov	r1, r0
 800f9bc:	d00b      	beq.n	800f9d6 <__lo0bits+0x22>
 800f9be:	07da      	lsls	r2, r3, #31
 800f9c0:	d423      	bmi.n	800fa0a <__lo0bits+0x56>
 800f9c2:	0798      	lsls	r0, r3, #30
 800f9c4:	bf49      	itett	mi
 800f9c6:	085b      	lsrmi	r3, r3, #1
 800f9c8:	089b      	lsrpl	r3, r3, #2
 800f9ca:	2001      	movmi	r0, #1
 800f9cc:	600b      	strmi	r3, [r1, #0]
 800f9ce:	bf5c      	itt	pl
 800f9d0:	600b      	strpl	r3, [r1, #0]
 800f9d2:	2002      	movpl	r0, #2
 800f9d4:	4770      	bx	lr
 800f9d6:	b298      	uxth	r0, r3
 800f9d8:	b9a8      	cbnz	r0, 800fa06 <__lo0bits+0x52>
 800f9da:	0c1b      	lsrs	r3, r3, #16
 800f9dc:	2010      	movs	r0, #16
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	b90a      	cbnz	r2, 800f9e6 <__lo0bits+0x32>
 800f9e2:	3008      	adds	r0, #8
 800f9e4:	0a1b      	lsrs	r3, r3, #8
 800f9e6:	071a      	lsls	r2, r3, #28
 800f9e8:	bf04      	itt	eq
 800f9ea:	091b      	lsreq	r3, r3, #4
 800f9ec:	3004      	addeq	r0, #4
 800f9ee:	079a      	lsls	r2, r3, #30
 800f9f0:	bf04      	itt	eq
 800f9f2:	089b      	lsreq	r3, r3, #2
 800f9f4:	3002      	addeq	r0, #2
 800f9f6:	07da      	lsls	r2, r3, #31
 800f9f8:	d403      	bmi.n	800fa02 <__lo0bits+0x4e>
 800f9fa:	085b      	lsrs	r3, r3, #1
 800f9fc:	f100 0001 	add.w	r0, r0, #1
 800fa00:	d005      	beq.n	800fa0e <__lo0bits+0x5a>
 800fa02:	600b      	str	r3, [r1, #0]
 800fa04:	4770      	bx	lr
 800fa06:	4610      	mov	r0, r2
 800fa08:	e7e9      	b.n	800f9de <__lo0bits+0x2a>
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	4770      	bx	lr
 800fa0e:	2020      	movs	r0, #32
 800fa10:	4770      	bx	lr
	...

0800fa14 <__i2b>:
 800fa14:	b510      	push	{r4, lr}
 800fa16:	460c      	mov	r4, r1
 800fa18:	2101      	movs	r1, #1
 800fa1a:	f7ff feb9 	bl	800f790 <_Balloc>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	b928      	cbnz	r0, 800fa2e <__i2b+0x1a>
 800fa22:	4b05      	ldr	r3, [pc, #20]	; (800fa38 <__i2b+0x24>)
 800fa24:	4805      	ldr	r0, [pc, #20]	; (800fa3c <__i2b+0x28>)
 800fa26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fa2a:	f7fc f8a7 	bl	800bb7c <__assert_func>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	6144      	str	r4, [r0, #20]
 800fa32:	6103      	str	r3, [r0, #16]
 800fa34:	bd10      	pop	{r4, pc}
 800fa36:	bf00      	nop
 800fa38:	0801257f 	.word	0x0801257f
 800fa3c:	0801260c 	.word	0x0801260c

0800fa40 <__multiply>:
 800fa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa44:	4691      	mov	r9, r2
 800fa46:	690a      	ldr	r2, [r1, #16]
 800fa48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	bfb8      	it	lt
 800fa50:	460b      	movlt	r3, r1
 800fa52:	460c      	mov	r4, r1
 800fa54:	bfbc      	itt	lt
 800fa56:	464c      	movlt	r4, r9
 800fa58:	4699      	movlt	r9, r3
 800fa5a:	6927      	ldr	r7, [r4, #16]
 800fa5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa60:	68a3      	ldr	r3, [r4, #8]
 800fa62:	6861      	ldr	r1, [r4, #4]
 800fa64:	eb07 060a 	add.w	r6, r7, sl
 800fa68:	42b3      	cmp	r3, r6
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	bfb8      	it	lt
 800fa6e:	3101      	addlt	r1, #1
 800fa70:	f7ff fe8e 	bl	800f790 <_Balloc>
 800fa74:	b930      	cbnz	r0, 800fa84 <__multiply+0x44>
 800fa76:	4602      	mov	r2, r0
 800fa78:	4b44      	ldr	r3, [pc, #272]	; (800fb8c <__multiply+0x14c>)
 800fa7a:	4845      	ldr	r0, [pc, #276]	; (800fb90 <__multiply+0x150>)
 800fa7c:	f240 115d 	movw	r1, #349	; 0x15d
 800fa80:	f7fc f87c 	bl	800bb7c <__assert_func>
 800fa84:	f100 0514 	add.w	r5, r0, #20
 800fa88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa8c:	462b      	mov	r3, r5
 800fa8e:	2200      	movs	r2, #0
 800fa90:	4543      	cmp	r3, r8
 800fa92:	d321      	bcc.n	800fad8 <__multiply+0x98>
 800fa94:	f104 0314 	add.w	r3, r4, #20
 800fa98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa9c:	f109 0314 	add.w	r3, r9, #20
 800faa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800faa4:	9202      	str	r2, [sp, #8]
 800faa6:	1b3a      	subs	r2, r7, r4
 800faa8:	3a15      	subs	r2, #21
 800faaa:	f022 0203 	bic.w	r2, r2, #3
 800faae:	3204      	adds	r2, #4
 800fab0:	f104 0115 	add.w	r1, r4, #21
 800fab4:	428f      	cmp	r7, r1
 800fab6:	bf38      	it	cc
 800fab8:	2204      	movcc	r2, #4
 800faba:	9201      	str	r2, [sp, #4]
 800fabc:	9a02      	ldr	r2, [sp, #8]
 800fabe:	9303      	str	r3, [sp, #12]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d80c      	bhi.n	800fade <__multiply+0x9e>
 800fac4:	2e00      	cmp	r6, #0
 800fac6:	dd03      	ble.n	800fad0 <__multiply+0x90>
 800fac8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800facc:	2b00      	cmp	r3, #0
 800face:	d05a      	beq.n	800fb86 <__multiply+0x146>
 800fad0:	6106      	str	r6, [r0, #16]
 800fad2:	b005      	add	sp, #20
 800fad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad8:	f843 2b04 	str.w	r2, [r3], #4
 800fadc:	e7d8      	b.n	800fa90 <__multiply+0x50>
 800fade:	f8b3 a000 	ldrh.w	sl, [r3]
 800fae2:	f1ba 0f00 	cmp.w	sl, #0
 800fae6:	d024      	beq.n	800fb32 <__multiply+0xf2>
 800fae8:	f104 0e14 	add.w	lr, r4, #20
 800faec:	46a9      	mov	r9, r5
 800faee:	f04f 0c00 	mov.w	ip, #0
 800faf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800faf6:	f8d9 1000 	ldr.w	r1, [r9]
 800fafa:	fa1f fb82 	uxth.w	fp, r2
 800fafe:	b289      	uxth	r1, r1
 800fb00:	fb0a 110b 	mla	r1, sl, fp, r1
 800fb04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fb08:	f8d9 2000 	ldr.w	r2, [r9]
 800fb0c:	4461      	add	r1, ip
 800fb0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb12:	fb0a c20b 	mla	r2, sl, fp, ip
 800fb16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb1a:	b289      	uxth	r1, r1
 800fb1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb20:	4577      	cmp	r7, lr
 800fb22:	f849 1b04 	str.w	r1, [r9], #4
 800fb26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb2a:	d8e2      	bhi.n	800faf2 <__multiply+0xb2>
 800fb2c:	9a01      	ldr	r2, [sp, #4]
 800fb2e:	f845 c002 	str.w	ip, [r5, r2]
 800fb32:	9a03      	ldr	r2, [sp, #12]
 800fb34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb38:	3304      	adds	r3, #4
 800fb3a:	f1b9 0f00 	cmp.w	r9, #0
 800fb3e:	d020      	beq.n	800fb82 <__multiply+0x142>
 800fb40:	6829      	ldr	r1, [r5, #0]
 800fb42:	f104 0c14 	add.w	ip, r4, #20
 800fb46:	46ae      	mov	lr, r5
 800fb48:	f04f 0a00 	mov.w	sl, #0
 800fb4c:	f8bc b000 	ldrh.w	fp, [ip]
 800fb50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb54:	fb09 220b 	mla	r2, r9, fp, r2
 800fb58:	4492      	add	sl, r2
 800fb5a:	b289      	uxth	r1, r1
 800fb5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fb60:	f84e 1b04 	str.w	r1, [lr], #4
 800fb64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb68:	f8be 1000 	ldrh.w	r1, [lr]
 800fb6c:	0c12      	lsrs	r2, r2, #16
 800fb6e:	fb09 1102 	mla	r1, r9, r2, r1
 800fb72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fb76:	4567      	cmp	r7, ip
 800fb78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb7c:	d8e6      	bhi.n	800fb4c <__multiply+0x10c>
 800fb7e:	9a01      	ldr	r2, [sp, #4]
 800fb80:	50a9      	str	r1, [r5, r2]
 800fb82:	3504      	adds	r5, #4
 800fb84:	e79a      	b.n	800fabc <__multiply+0x7c>
 800fb86:	3e01      	subs	r6, #1
 800fb88:	e79c      	b.n	800fac4 <__multiply+0x84>
 800fb8a:	bf00      	nop
 800fb8c:	0801257f 	.word	0x0801257f
 800fb90:	0801260c 	.word	0x0801260c

0800fb94 <__pow5mult>:
 800fb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb98:	4615      	mov	r5, r2
 800fb9a:	f012 0203 	ands.w	r2, r2, #3
 800fb9e:	4606      	mov	r6, r0
 800fba0:	460f      	mov	r7, r1
 800fba2:	d007      	beq.n	800fbb4 <__pow5mult+0x20>
 800fba4:	4c25      	ldr	r4, [pc, #148]	; (800fc3c <__pow5mult+0xa8>)
 800fba6:	3a01      	subs	r2, #1
 800fba8:	2300      	movs	r3, #0
 800fbaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbae:	f7ff fe51 	bl	800f854 <__multadd>
 800fbb2:	4607      	mov	r7, r0
 800fbb4:	10ad      	asrs	r5, r5, #2
 800fbb6:	d03d      	beq.n	800fc34 <__pow5mult+0xa0>
 800fbb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fbba:	b97c      	cbnz	r4, 800fbdc <__pow5mult+0x48>
 800fbbc:	2010      	movs	r0, #16
 800fbbe:	f7ff fda7 	bl	800f710 <malloc>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	6270      	str	r0, [r6, #36]	; 0x24
 800fbc6:	b928      	cbnz	r0, 800fbd4 <__pow5mult+0x40>
 800fbc8:	4b1d      	ldr	r3, [pc, #116]	; (800fc40 <__pow5mult+0xac>)
 800fbca:	481e      	ldr	r0, [pc, #120]	; (800fc44 <__pow5mult+0xb0>)
 800fbcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fbd0:	f7fb ffd4 	bl	800bb7c <__assert_func>
 800fbd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbd8:	6004      	str	r4, [r0, #0]
 800fbda:	60c4      	str	r4, [r0, #12]
 800fbdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fbe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbe4:	b94c      	cbnz	r4, 800fbfa <__pow5mult+0x66>
 800fbe6:	f240 2171 	movw	r1, #625	; 0x271
 800fbea:	4630      	mov	r0, r6
 800fbec:	f7ff ff12 	bl	800fa14 <__i2b>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	6003      	str	r3, [r0, #0]
 800fbfa:	f04f 0900 	mov.w	r9, #0
 800fbfe:	07eb      	lsls	r3, r5, #31
 800fc00:	d50a      	bpl.n	800fc18 <__pow5mult+0x84>
 800fc02:	4639      	mov	r1, r7
 800fc04:	4622      	mov	r2, r4
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7ff ff1a 	bl	800fa40 <__multiply>
 800fc0c:	4639      	mov	r1, r7
 800fc0e:	4680      	mov	r8, r0
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff fdfd 	bl	800f810 <_Bfree>
 800fc16:	4647      	mov	r7, r8
 800fc18:	106d      	asrs	r5, r5, #1
 800fc1a:	d00b      	beq.n	800fc34 <__pow5mult+0xa0>
 800fc1c:	6820      	ldr	r0, [r4, #0]
 800fc1e:	b938      	cbnz	r0, 800fc30 <__pow5mult+0x9c>
 800fc20:	4622      	mov	r2, r4
 800fc22:	4621      	mov	r1, r4
 800fc24:	4630      	mov	r0, r6
 800fc26:	f7ff ff0b 	bl	800fa40 <__multiply>
 800fc2a:	6020      	str	r0, [r4, #0]
 800fc2c:	f8c0 9000 	str.w	r9, [r0]
 800fc30:	4604      	mov	r4, r0
 800fc32:	e7e4      	b.n	800fbfe <__pow5mult+0x6a>
 800fc34:	4638      	mov	r0, r7
 800fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	bf00      	nop
 800fc3c:	08012758 	.word	0x08012758
 800fc40:	0801250d 	.word	0x0801250d
 800fc44:	0801260c 	.word	0x0801260c

0800fc48 <__lshift>:
 800fc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	6849      	ldr	r1, [r1, #4]
 800fc50:	6923      	ldr	r3, [r4, #16]
 800fc52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc56:	68a3      	ldr	r3, [r4, #8]
 800fc58:	4607      	mov	r7, r0
 800fc5a:	4691      	mov	r9, r2
 800fc5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc60:	f108 0601 	add.w	r6, r8, #1
 800fc64:	42b3      	cmp	r3, r6
 800fc66:	db0b      	blt.n	800fc80 <__lshift+0x38>
 800fc68:	4638      	mov	r0, r7
 800fc6a:	f7ff fd91 	bl	800f790 <_Balloc>
 800fc6e:	4605      	mov	r5, r0
 800fc70:	b948      	cbnz	r0, 800fc86 <__lshift+0x3e>
 800fc72:	4602      	mov	r2, r0
 800fc74:	4b2a      	ldr	r3, [pc, #168]	; (800fd20 <__lshift+0xd8>)
 800fc76:	482b      	ldr	r0, [pc, #172]	; (800fd24 <__lshift+0xdc>)
 800fc78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc7c:	f7fb ff7e 	bl	800bb7c <__assert_func>
 800fc80:	3101      	adds	r1, #1
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	e7ee      	b.n	800fc64 <__lshift+0x1c>
 800fc86:	2300      	movs	r3, #0
 800fc88:	f100 0114 	add.w	r1, r0, #20
 800fc8c:	f100 0210 	add.w	r2, r0, #16
 800fc90:	4618      	mov	r0, r3
 800fc92:	4553      	cmp	r3, sl
 800fc94:	db37      	blt.n	800fd06 <__lshift+0xbe>
 800fc96:	6920      	ldr	r0, [r4, #16]
 800fc98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc9c:	f104 0314 	add.w	r3, r4, #20
 800fca0:	f019 091f 	ands.w	r9, r9, #31
 800fca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fca8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fcac:	d02f      	beq.n	800fd0e <__lshift+0xc6>
 800fcae:	f1c9 0e20 	rsb	lr, r9, #32
 800fcb2:	468a      	mov	sl, r1
 800fcb4:	f04f 0c00 	mov.w	ip, #0
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	fa02 f209 	lsl.w	r2, r2, r9
 800fcbe:	ea42 020c 	orr.w	r2, r2, ip
 800fcc2:	f84a 2b04 	str.w	r2, [sl], #4
 800fcc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcca:	4298      	cmp	r0, r3
 800fccc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fcd0:	d8f2      	bhi.n	800fcb8 <__lshift+0x70>
 800fcd2:	1b03      	subs	r3, r0, r4
 800fcd4:	3b15      	subs	r3, #21
 800fcd6:	f023 0303 	bic.w	r3, r3, #3
 800fcda:	3304      	adds	r3, #4
 800fcdc:	f104 0215 	add.w	r2, r4, #21
 800fce0:	4290      	cmp	r0, r2
 800fce2:	bf38      	it	cc
 800fce4:	2304      	movcc	r3, #4
 800fce6:	f841 c003 	str.w	ip, [r1, r3]
 800fcea:	f1bc 0f00 	cmp.w	ip, #0
 800fcee:	d001      	beq.n	800fcf4 <__lshift+0xac>
 800fcf0:	f108 0602 	add.w	r6, r8, #2
 800fcf4:	3e01      	subs	r6, #1
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	612e      	str	r6, [r5, #16]
 800fcfa:	4621      	mov	r1, r4
 800fcfc:	f7ff fd88 	bl	800f810 <_Bfree>
 800fd00:	4628      	mov	r0, r5
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	e7c1      	b.n	800fc92 <__lshift+0x4a>
 800fd0e:	3904      	subs	r1, #4
 800fd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd14:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd18:	4298      	cmp	r0, r3
 800fd1a:	d8f9      	bhi.n	800fd10 <__lshift+0xc8>
 800fd1c:	e7ea      	b.n	800fcf4 <__lshift+0xac>
 800fd1e:	bf00      	nop
 800fd20:	0801257f 	.word	0x0801257f
 800fd24:	0801260c 	.word	0x0801260c

0800fd28 <__mcmp>:
 800fd28:	b530      	push	{r4, r5, lr}
 800fd2a:	6902      	ldr	r2, [r0, #16]
 800fd2c:	690c      	ldr	r4, [r1, #16]
 800fd2e:	1b12      	subs	r2, r2, r4
 800fd30:	d10e      	bne.n	800fd50 <__mcmp+0x28>
 800fd32:	f100 0314 	add.w	r3, r0, #20
 800fd36:	3114      	adds	r1, #20
 800fd38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd48:	42a5      	cmp	r5, r4
 800fd4a:	d003      	beq.n	800fd54 <__mcmp+0x2c>
 800fd4c:	d305      	bcc.n	800fd5a <__mcmp+0x32>
 800fd4e:	2201      	movs	r2, #1
 800fd50:	4610      	mov	r0, r2
 800fd52:	bd30      	pop	{r4, r5, pc}
 800fd54:	4283      	cmp	r3, r0
 800fd56:	d3f3      	bcc.n	800fd40 <__mcmp+0x18>
 800fd58:	e7fa      	b.n	800fd50 <__mcmp+0x28>
 800fd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd5e:	e7f7      	b.n	800fd50 <__mcmp+0x28>

0800fd60 <__mdiff>:
 800fd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd64:	460c      	mov	r4, r1
 800fd66:	4606      	mov	r6, r0
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	4690      	mov	r8, r2
 800fd6e:	f7ff ffdb 	bl	800fd28 <__mcmp>
 800fd72:	1e05      	subs	r5, r0, #0
 800fd74:	d110      	bne.n	800fd98 <__mdiff+0x38>
 800fd76:	4629      	mov	r1, r5
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7ff fd09 	bl	800f790 <_Balloc>
 800fd7e:	b930      	cbnz	r0, 800fd8e <__mdiff+0x2e>
 800fd80:	4b3a      	ldr	r3, [pc, #232]	; (800fe6c <__mdiff+0x10c>)
 800fd82:	4602      	mov	r2, r0
 800fd84:	f240 2132 	movw	r1, #562	; 0x232
 800fd88:	4839      	ldr	r0, [pc, #228]	; (800fe70 <__mdiff+0x110>)
 800fd8a:	f7fb fef7 	bl	800bb7c <__assert_func>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd98:	bfa4      	itt	ge
 800fd9a:	4643      	movge	r3, r8
 800fd9c:	46a0      	movge	r8, r4
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fda4:	bfa6      	itte	ge
 800fda6:	461c      	movge	r4, r3
 800fda8:	2500      	movge	r5, #0
 800fdaa:	2501      	movlt	r5, #1
 800fdac:	f7ff fcf0 	bl	800f790 <_Balloc>
 800fdb0:	b920      	cbnz	r0, 800fdbc <__mdiff+0x5c>
 800fdb2:	4b2e      	ldr	r3, [pc, #184]	; (800fe6c <__mdiff+0x10c>)
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fdba:	e7e5      	b.n	800fd88 <__mdiff+0x28>
 800fdbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fdc0:	6926      	ldr	r6, [r4, #16]
 800fdc2:	60c5      	str	r5, [r0, #12]
 800fdc4:	f104 0914 	add.w	r9, r4, #20
 800fdc8:	f108 0514 	add.w	r5, r8, #20
 800fdcc:	f100 0e14 	add.w	lr, r0, #20
 800fdd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fdd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fdd8:	f108 0210 	add.w	r2, r8, #16
 800fddc:	46f2      	mov	sl, lr
 800fdde:	2100      	movs	r1, #0
 800fde0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fde4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fde8:	fa1f f883 	uxth.w	r8, r3
 800fdec:	fa11 f18b 	uxtah	r1, r1, fp
 800fdf0:	0c1b      	lsrs	r3, r3, #16
 800fdf2:	eba1 0808 	sub.w	r8, r1, r8
 800fdf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdfe:	fa1f f888 	uxth.w	r8, r8
 800fe02:	1419      	asrs	r1, r3, #16
 800fe04:	454e      	cmp	r6, r9
 800fe06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe0a:	f84a 3b04 	str.w	r3, [sl], #4
 800fe0e:	d8e7      	bhi.n	800fde0 <__mdiff+0x80>
 800fe10:	1b33      	subs	r3, r6, r4
 800fe12:	3b15      	subs	r3, #21
 800fe14:	f023 0303 	bic.w	r3, r3, #3
 800fe18:	3304      	adds	r3, #4
 800fe1a:	3415      	adds	r4, #21
 800fe1c:	42a6      	cmp	r6, r4
 800fe1e:	bf38      	it	cc
 800fe20:	2304      	movcc	r3, #4
 800fe22:	441d      	add	r5, r3
 800fe24:	4473      	add	r3, lr
 800fe26:	469e      	mov	lr, r3
 800fe28:	462e      	mov	r6, r5
 800fe2a:	4566      	cmp	r6, ip
 800fe2c:	d30e      	bcc.n	800fe4c <__mdiff+0xec>
 800fe2e:	f10c 0203 	add.w	r2, ip, #3
 800fe32:	1b52      	subs	r2, r2, r5
 800fe34:	f022 0203 	bic.w	r2, r2, #3
 800fe38:	3d03      	subs	r5, #3
 800fe3a:	45ac      	cmp	ip, r5
 800fe3c:	bf38      	it	cc
 800fe3e:	2200      	movcc	r2, #0
 800fe40:	441a      	add	r2, r3
 800fe42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fe46:	b17b      	cbz	r3, 800fe68 <__mdiff+0x108>
 800fe48:	6107      	str	r7, [r0, #16]
 800fe4a:	e7a3      	b.n	800fd94 <__mdiff+0x34>
 800fe4c:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe50:	fa11 f288 	uxtah	r2, r1, r8
 800fe54:	1414      	asrs	r4, r2, #16
 800fe56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe5a:	b292      	uxth	r2, r2
 800fe5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe60:	f84e 2b04 	str.w	r2, [lr], #4
 800fe64:	1421      	asrs	r1, r4, #16
 800fe66:	e7e0      	b.n	800fe2a <__mdiff+0xca>
 800fe68:	3f01      	subs	r7, #1
 800fe6a:	e7ea      	b.n	800fe42 <__mdiff+0xe2>
 800fe6c:	0801257f 	.word	0x0801257f
 800fe70:	0801260c 	.word	0x0801260c

0800fe74 <__ulp>:
 800fe74:	b082      	sub	sp, #8
 800fe76:	ed8d 0b00 	vstr	d0, [sp]
 800fe7a:	9b01      	ldr	r3, [sp, #4]
 800fe7c:	4912      	ldr	r1, [pc, #72]	; (800fec8 <__ulp+0x54>)
 800fe7e:	4019      	ands	r1, r3
 800fe80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fe84:	2900      	cmp	r1, #0
 800fe86:	dd05      	ble.n	800fe94 <__ulp+0x20>
 800fe88:	2200      	movs	r2, #0
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	ec43 2b10 	vmov	d0, r2, r3
 800fe90:	b002      	add	sp, #8
 800fe92:	4770      	bx	lr
 800fe94:	4249      	negs	r1, r1
 800fe96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fe9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fe9e:	f04f 0200 	mov.w	r2, #0
 800fea2:	f04f 0300 	mov.w	r3, #0
 800fea6:	da04      	bge.n	800feb2 <__ulp+0x3e>
 800fea8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800feac:	fa41 f300 	asr.w	r3, r1, r0
 800feb0:	e7ec      	b.n	800fe8c <__ulp+0x18>
 800feb2:	f1a0 0114 	sub.w	r1, r0, #20
 800feb6:	291e      	cmp	r1, #30
 800feb8:	bfda      	itte	le
 800feba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800febe:	fa20 f101 	lsrle.w	r1, r0, r1
 800fec2:	2101      	movgt	r1, #1
 800fec4:	460a      	mov	r2, r1
 800fec6:	e7e1      	b.n	800fe8c <__ulp+0x18>
 800fec8:	7ff00000 	.word	0x7ff00000

0800fecc <__b2d>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	6905      	ldr	r5, [r0, #16]
 800fed0:	f100 0714 	add.w	r7, r0, #20
 800fed4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fed8:	1f2e      	subs	r6, r5, #4
 800feda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fede:	4620      	mov	r0, r4
 800fee0:	f7ff fd48 	bl	800f974 <__hi0bits>
 800fee4:	f1c0 0320 	rsb	r3, r0, #32
 800fee8:	280a      	cmp	r0, #10
 800feea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ff68 <__b2d+0x9c>
 800feee:	600b      	str	r3, [r1, #0]
 800fef0:	dc14      	bgt.n	800ff1c <__b2d+0x50>
 800fef2:	f1c0 0e0b 	rsb	lr, r0, #11
 800fef6:	fa24 f10e 	lsr.w	r1, r4, lr
 800fefa:	42b7      	cmp	r7, r6
 800fefc:	ea41 030c 	orr.w	r3, r1, ip
 800ff00:	bf34      	ite	cc
 800ff02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff06:	2100      	movcs	r1, #0
 800ff08:	3015      	adds	r0, #21
 800ff0a:	fa04 f000 	lsl.w	r0, r4, r0
 800ff0e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ff12:	ea40 0201 	orr.w	r2, r0, r1
 800ff16:	ec43 2b10 	vmov	d0, r2, r3
 800ff1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff1c:	42b7      	cmp	r7, r6
 800ff1e:	bf3a      	itte	cc
 800ff20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff24:	f1a5 0608 	subcc.w	r6, r5, #8
 800ff28:	2100      	movcs	r1, #0
 800ff2a:	380b      	subs	r0, #11
 800ff2c:	d017      	beq.n	800ff5e <__b2d+0x92>
 800ff2e:	f1c0 0c20 	rsb	ip, r0, #32
 800ff32:	fa04 f500 	lsl.w	r5, r4, r0
 800ff36:	42be      	cmp	r6, r7
 800ff38:	fa21 f40c 	lsr.w	r4, r1, ip
 800ff3c:	ea45 0504 	orr.w	r5, r5, r4
 800ff40:	bf8c      	ite	hi
 800ff42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ff46:	2400      	movls	r4, #0
 800ff48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ff4c:	fa01 f000 	lsl.w	r0, r1, r0
 800ff50:	fa24 f40c 	lsr.w	r4, r4, ip
 800ff54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ff58:	ea40 0204 	orr.w	r2, r0, r4
 800ff5c:	e7db      	b.n	800ff16 <__b2d+0x4a>
 800ff5e:	ea44 030c 	orr.w	r3, r4, ip
 800ff62:	460a      	mov	r2, r1
 800ff64:	e7d7      	b.n	800ff16 <__b2d+0x4a>
 800ff66:	bf00      	nop
 800ff68:	3ff00000 	.word	0x3ff00000

0800ff6c <__d2b>:
 800ff6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff70:	4689      	mov	r9, r1
 800ff72:	2101      	movs	r1, #1
 800ff74:	ec57 6b10 	vmov	r6, r7, d0
 800ff78:	4690      	mov	r8, r2
 800ff7a:	f7ff fc09 	bl	800f790 <_Balloc>
 800ff7e:	4604      	mov	r4, r0
 800ff80:	b930      	cbnz	r0, 800ff90 <__d2b+0x24>
 800ff82:	4602      	mov	r2, r0
 800ff84:	4b25      	ldr	r3, [pc, #148]	; (801001c <__d2b+0xb0>)
 800ff86:	4826      	ldr	r0, [pc, #152]	; (8010020 <__d2b+0xb4>)
 800ff88:	f240 310a 	movw	r1, #778	; 0x30a
 800ff8c:	f7fb fdf6 	bl	800bb7c <__assert_func>
 800ff90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff98:	bb35      	cbnz	r5, 800ffe8 <__d2b+0x7c>
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	d028      	beq.n	800fff2 <__d2b+0x86>
 800ffa0:	4668      	mov	r0, sp
 800ffa2:	9600      	str	r6, [sp, #0]
 800ffa4:	f7ff fd06 	bl	800f9b4 <__lo0bits>
 800ffa8:	9900      	ldr	r1, [sp, #0]
 800ffaa:	b300      	cbz	r0, 800ffee <__d2b+0x82>
 800ffac:	9a01      	ldr	r2, [sp, #4]
 800ffae:	f1c0 0320 	rsb	r3, r0, #32
 800ffb2:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb6:	430b      	orrs	r3, r1
 800ffb8:	40c2      	lsrs	r2, r0
 800ffba:	6163      	str	r3, [r4, #20]
 800ffbc:	9201      	str	r2, [sp, #4]
 800ffbe:	9b01      	ldr	r3, [sp, #4]
 800ffc0:	61a3      	str	r3, [r4, #24]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	bf14      	ite	ne
 800ffc6:	2202      	movne	r2, #2
 800ffc8:	2201      	moveq	r2, #1
 800ffca:	6122      	str	r2, [r4, #16]
 800ffcc:	b1d5      	cbz	r5, 8010004 <__d2b+0x98>
 800ffce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ffd2:	4405      	add	r5, r0
 800ffd4:	f8c9 5000 	str.w	r5, [r9]
 800ffd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ffdc:	f8c8 0000 	str.w	r0, [r8]
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	b003      	add	sp, #12
 800ffe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffec:	e7d5      	b.n	800ff9a <__d2b+0x2e>
 800ffee:	6161      	str	r1, [r4, #20]
 800fff0:	e7e5      	b.n	800ffbe <__d2b+0x52>
 800fff2:	a801      	add	r0, sp, #4
 800fff4:	f7ff fcde 	bl	800f9b4 <__lo0bits>
 800fff8:	9b01      	ldr	r3, [sp, #4]
 800fffa:	6163      	str	r3, [r4, #20]
 800fffc:	2201      	movs	r2, #1
 800fffe:	6122      	str	r2, [r4, #16]
 8010000:	3020      	adds	r0, #32
 8010002:	e7e3      	b.n	800ffcc <__d2b+0x60>
 8010004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801000c:	f8c9 0000 	str.w	r0, [r9]
 8010010:	6918      	ldr	r0, [r3, #16]
 8010012:	f7ff fcaf 	bl	800f974 <__hi0bits>
 8010016:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801001a:	e7df      	b.n	800ffdc <__d2b+0x70>
 801001c:	0801257f 	.word	0x0801257f
 8010020:	0801260c 	.word	0x0801260c

08010024 <__ratio>:
 8010024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010028:	4688      	mov	r8, r1
 801002a:	4669      	mov	r1, sp
 801002c:	4681      	mov	r9, r0
 801002e:	f7ff ff4d 	bl	800fecc <__b2d>
 8010032:	a901      	add	r1, sp, #4
 8010034:	4640      	mov	r0, r8
 8010036:	ec55 4b10 	vmov	r4, r5, d0
 801003a:	f7ff ff47 	bl	800fecc <__b2d>
 801003e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010042:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010046:	eba3 0c02 	sub.w	ip, r3, r2
 801004a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801004e:	1a9b      	subs	r3, r3, r2
 8010050:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010054:	ec51 0b10 	vmov	r0, r1, d0
 8010058:	2b00      	cmp	r3, #0
 801005a:	bfd6      	itet	le
 801005c:	460a      	movle	r2, r1
 801005e:	462a      	movgt	r2, r5
 8010060:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010064:	468b      	mov	fp, r1
 8010066:	462f      	mov	r7, r5
 8010068:	bfd4      	ite	le
 801006a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801006e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010072:	4620      	mov	r0, r4
 8010074:	ee10 2a10 	vmov	r2, s0
 8010078:	465b      	mov	r3, fp
 801007a:	4639      	mov	r1, r7
 801007c:	f7f0 fbf6 	bl	800086c <__aeabi_ddiv>
 8010080:	ec41 0b10 	vmov	d0, r0, r1
 8010084:	b003      	add	sp, #12
 8010086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801008a <__copybits>:
 801008a:	3901      	subs	r1, #1
 801008c:	b570      	push	{r4, r5, r6, lr}
 801008e:	1149      	asrs	r1, r1, #5
 8010090:	6914      	ldr	r4, [r2, #16]
 8010092:	3101      	adds	r1, #1
 8010094:	f102 0314 	add.w	r3, r2, #20
 8010098:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801009c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80100a0:	1f05      	subs	r5, r0, #4
 80100a2:	42a3      	cmp	r3, r4
 80100a4:	d30c      	bcc.n	80100c0 <__copybits+0x36>
 80100a6:	1aa3      	subs	r3, r4, r2
 80100a8:	3b11      	subs	r3, #17
 80100aa:	f023 0303 	bic.w	r3, r3, #3
 80100ae:	3211      	adds	r2, #17
 80100b0:	42a2      	cmp	r2, r4
 80100b2:	bf88      	it	hi
 80100b4:	2300      	movhi	r3, #0
 80100b6:	4418      	add	r0, r3
 80100b8:	2300      	movs	r3, #0
 80100ba:	4288      	cmp	r0, r1
 80100bc:	d305      	bcc.n	80100ca <__copybits+0x40>
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80100c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80100c8:	e7eb      	b.n	80100a2 <__copybits+0x18>
 80100ca:	f840 3b04 	str.w	r3, [r0], #4
 80100ce:	e7f4      	b.n	80100ba <__copybits+0x30>

080100d0 <__any_on>:
 80100d0:	f100 0214 	add.w	r2, r0, #20
 80100d4:	6900      	ldr	r0, [r0, #16]
 80100d6:	114b      	asrs	r3, r1, #5
 80100d8:	4298      	cmp	r0, r3
 80100da:	b510      	push	{r4, lr}
 80100dc:	db11      	blt.n	8010102 <__any_on+0x32>
 80100de:	dd0a      	ble.n	80100f6 <__any_on+0x26>
 80100e0:	f011 011f 	ands.w	r1, r1, #31
 80100e4:	d007      	beq.n	80100f6 <__any_on+0x26>
 80100e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80100ea:	fa24 f001 	lsr.w	r0, r4, r1
 80100ee:	fa00 f101 	lsl.w	r1, r0, r1
 80100f2:	428c      	cmp	r4, r1
 80100f4:	d10b      	bne.n	801010e <__any_on+0x3e>
 80100f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d803      	bhi.n	8010106 <__any_on+0x36>
 80100fe:	2000      	movs	r0, #0
 8010100:	bd10      	pop	{r4, pc}
 8010102:	4603      	mov	r3, r0
 8010104:	e7f7      	b.n	80100f6 <__any_on+0x26>
 8010106:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801010a:	2900      	cmp	r1, #0
 801010c:	d0f5      	beq.n	80100fa <__any_on+0x2a>
 801010e:	2001      	movs	r0, #1
 8010110:	e7f6      	b.n	8010100 <__any_on+0x30>

08010112 <_calloc_r>:
 8010112:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010114:	fba1 2402 	umull	r2, r4, r1, r2
 8010118:	b94c      	cbnz	r4, 801012e <_calloc_r+0x1c>
 801011a:	4611      	mov	r1, r2
 801011c:	9201      	str	r2, [sp, #4]
 801011e:	f7fb febf 	bl	800bea0 <_malloc_r>
 8010122:	9a01      	ldr	r2, [sp, #4]
 8010124:	4605      	mov	r5, r0
 8010126:	b930      	cbnz	r0, 8010136 <_calloc_r+0x24>
 8010128:	4628      	mov	r0, r5
 801012a:	b003      	add	sp, #12
 801012c:	bd30      	pop	{r4, r5, pc}
 801012e:	220c      	movs	r2, #12
 8010130:	6002      	str	r2, [r0, #0]
 8010132:	2500      	movs	r5, #0
 8010134:	e7f8      	b.n	8010128 <_calloc_r+0x16>
 8010136:	4621      	mov	r1, r4
 8010138:	f7fb fe89 	bl	800be4e <memset>
 801013c:	e7f4      	b.n	8010128 <_calloc_r+0x16>
	...

08010140 <_free_r>:
 8010140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010142:	2900      	cmp	r1, #0
 8010144:	d044      	beq.n	80101d0 <_free_r+0x90>
 8010146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801014a:	9001      	str	r0, [sp, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	f1a1 0404 	sub.w	r4, r1, #4
 8010152:	bfb8      	it	lt
 8010154:	18e4      	addlt	r4, r4, r3
 8010156:	f7ff fb0f 	bl	800f778 <__malloc_lock>
 801015a:	4a1e      	ldr	r2, [pc, #120]	; (80101d4 <_free_r+0x94>)
 801015c:	9801      	ldr	r0, [sp, #4]
 801015e:	6813      	ldr	r3, [r2, #0]
 8010160:	b933      	cbnz	r3, 8010170 <_free_r+0x30>
 8010162:	6063      	str	r3, [r4, #4]
 8010164:	6014      	str	r4, [r2, #0]
 8010166:	b003      	add	sp, #12
 8010168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801016c:	f7ff bb0a 	b.w	800f784 <__malloc_unlock>
 8010170:	42a3      	cmp	r3, r4
 8010172:	d908      	bls.n	8010186 <_free_r+0x46>
 8010174:	6825      	ldr	r5, [r4, #0]
 8010176:	1961      	adds	r1, r4, r5
 8010178:	428b      	cmp	r3, r1
 801017a:	bf01      	itttt	eq
 801017c:	6819      	ldreq	r1, [r3, #0]
 801017e:	685b      	ldreq	r3, [r3, #4]
 8010180:	1949      	addeq	r1, r1, r5
 8010182:	6021      	streq	r1, [r4, #0]
 8010184:	e7ed      	b.n	8010162 <_free_r+0x22>
 8010186:	461a      	mov	r2, r3
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	b10b      	cbz	r3, 8010190 <_free_r+0x50>
 801018c:	42a3      	cmp	r3, r4
 801018e:	d9fa      	bls.n	8010186 <_free_r+0x46>
 8010190:	6811      	ldr	r1, [r2, #0]
 8010192:	1855      	adds	r5, r2, r1
 8010194:	42a5      	cmp	r5, r4
 8010196:	d10b      	bne.n	80101b0 <_free_r+0x70>
 8010198:	6824      	ldr	r4, [r4, #0]
 801019a:	4421      	add	r1, r4
 801019c:	1854      	adds	r4, r2, r1
 801019e:	42a3      	cmp	r3, r4
 80101a0:	6011      	str	r1, [r2, #0]
 80101a2:	d1e0      	bne.n	8010166 <_free_r+0x26>
 80101a4:	681c      	ldr	r4, [r3, #0]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	6053      	str	r3, [r2, #4]
 80101aa:	4421      	add	r1, r4
 80101ac:	6011      	str	r1, [r2, #0]
 80101ae:	e7da      	b.n	8010166 <_free_r+0x26>
 80101b0:	d902      	bls.n	80101b8 <_free_r+0x78>
 80101b2:	230c      	movs	r3, #12
 80101b4:	6003      	str	r3, [r0, #0]
 80101b6:	e7d6      	b.n	8010166 <_free_r+0x26>
 80101b8:	6825      	ldr	r5, [r4, #0]
 80101ba:	1961      	adds	r1, r4, r5
 80101bc:	428b      	cmp	r3, r1
 80101be:	bf04      	itt	eq
 80101c0:	6819      	ldreq	r1, [r3, #0]
 80101c2:	685b      	ldreq	r3, [r3, #4]
 80101c4:	6063      	str	r3, [r4, #4]
 80101c6:	bf04      	itt	eq
 80101c8:	1949      	addeq	r1, r1, r5
 80101ca:	6021      	streq	r1, [r4, #0]
 80101cc:	6054      	str	r4, [r2, #4]
 80101ce:	e7ca      	b.n	8010166 <_free_r+0x26>
 80101d0:	b003      	add	sp, #12
 80101d2:	bd30      	pop	{r4, r5, pc}
 80101d4:	20013290 	.word	0x20013290

080101d8 <_realloc_r>:
 80101d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101dc:	4680      	mov	r8, r0
 80101de:	4614      	mov	r4, r2
 80101e0:	460e      	mov	r6, r1
 80101e2:	b921      	cbnz	r1, 80101ee <_realloc_r+0x16>
 80101e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101e8:	4611      	mov	r1, r2
 80101ea:	f7fb be59 	b.w	800bea0 <_malloc_r>
 80101ee:	b92a      	cbnz	r2, 80101fc <_realloc_r+0x24>
 80101f0:	f7ff ffa6 	bl	8010140 <_free_r>
 80101f4:	4625      	mov	r5, r4
 80101f6:	4628      	mov	r0, r5
 80101f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101fc:	f000 fe22 	bl	8010e44 <_malloc_usable_size_r>
 8010200:	4284      	cmp	r4, r0
 8010202:	4607      	mov	r7, r0
 8010204:	d802      	bhi.n	801020c <_realloc_r+0x34>
 8010206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801020a:	d812      	bhi.n	8010232 <_realloc_r+0x5a>
 801020c:	4621      	mov	r1, r4
 801020e:	4640      	mov	r0, r8
 8010210:	f7fb fe46 	bl	800bea0 <_malloc_r>
 8010214:	4605      	mov	r5, r0
 8010216:	2800      	cmp	r0, #0
 8010218:	d0ed      	beq.n	80101f6 <_realloc_r+0x1e>
 801021a:	42bc      	cmp	r4, r7
 801021c:	4622      	mov	r2, r4
 801021e:	4631      	mov	r1, r6
 8010220:	bf28      	it	cs
 8010222:	463a      	movcs	r2, r7
 8010224:	f7fb fe05 	bl	800be32 <memcpy>
 8010228:	4631      	mov	r1, r6
 801022a:	4640      	mov	r0, r8
 801022c:	f7ff ff88 	bl	8010140 <_free_r>
 8010230:	e7e1      	b.n	80101f6 <_realloc_r+0x1e>
 8010232:	4635      	mov	r5, r6
 8010234:	e7df      	b.n	80101f6 <_realloc_r+0x1e>

08010236 <__ssputs_r>:
 8010236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801023a:	688e      	ldr	r6, [r1, #8]
 801023c:	429e      	cmp	r6, r3
 801023e:	4682      	mov	sl, r0
 8010240:	460c      	mov	r4, r1
 8010242:	4690      	mov	r8, r2
 8010244:	461f      	mov	r7, r3
 8010246:	d838      	bhi.n	80102ba <__ssputs_r+0x84>
 8010248:	898a      	ldrh	r2, [r1, #12]
 801024a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801024e:	d032      	beq.n	80102b6 <__ssputs_r+0x80>
 8010250:	6825      	ldr	r5, [r4, #0]
 8010252:	6909      	ldr	r1, [r1, #16]
 8010254:	eba5 0901 	sub.w	r9, r5, r1
 8010258:	6965      	ldr	r5, [r4, #20]
 801025a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801025e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010262:	3301      	adds	r3, #1
 8010264:	444b      	add	r3, r9
 8010266:	106d      	asrs	r5, r5, #1
 8010268:	429d      	cmp	r5, r3
 801026a:	bf38      	it	cc
 801026c:	461d      	movcc	r5, r3
 801026e:	0553      	lsls	r3, r2, #21
 8010270:	d531      	bpl.n	80102d6 <__ssputs_r+0xa0>
 8010272:	4629      	mov	r1, r5
 8010274:	f7fb fe14 	bl	800bea0 <_malloc_r>
 8010278:	4606      	mov	r6, r0
 801027a:	b950      	cbnz	r0, 8010292 <__ssputs_r+0x5c>
 801027c:	230c      	movs	r3, #12
 801027e:	f8ca 3000 	str.w	r3, [sl]
 8010282:	89a3      	ldrh	r3, [r4, #12]
 8010284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010288:	81a3      	strh	r3, [r4, #12]
 801028a:	f04f 30ff 	mov.w	r0, #4294967295
 801028e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010292:	6921      	ldr	r1, [r4, #16]
 8010294:	464a      	mov	r2, r9
 8010296:	f7fb fdcc 	bl	800be32 <memcpy>
 801029a:	89a3      	ldrh	r3, [r4, #12]
 801029c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80102a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102a4:	81a3      	strh	r3, [r4, #12]
 80102a6:	6126      	str	r6, [r4, #16]
 80102a8:	6165      	str	r5, [r4, #20]
 80102aa:	444e      	add	r6, r9
 80102ac:	eba5 0509 	sub.w	r5, r5, r9
 80102b0:	6026      	str	r6, [r4, #0]
 80102b2:	60a5      	str	r5, [r4, #8]
 80102b4:	463e      	mov	r6, r7
 80102b6:	42be      	cmp	r6, r7
 80102b8:	d900      	bls.n	80102bc <__ssputs_r+0x86>
 80102ba:	463e      	mov	r6, r7
 80102bc:	6820      	ldr	r0, [r4, #0]
 80102be:	4632      	mov	r2, r6
 80102c0:	4641      	mov	r1, r8
 80102c2:	f7ff fa3f 	bl	800f744 <memmove>
 80102c6:	68a3      	ldr	r3, [r4, #8]
 80102c8:	1b9b      	subs	r3, r3, r6
 80102ca:	60a3      	str	r3, [r4, #8]
 80102cc:	6823      	ldr	r3, [r4, #0]
 80102ce:	4433      	add	r3, r6
 80102d0:	6023      	str	r3, [r4, #0]
 80102d2:	2000      	movs	r0, #0
 80102d4:	e7db      	b.n	801028e <__ssputs_r+0x58>
 80102d6:	462a      	mov	r2, r5
 80102d8:	f7ff ff7e 	bl	80101d8 <_realloc_r>
 80102dc:	4606      	mov	r6, r0
 80102de:	2800      	cmp	r0, #0
 80102e0:	d1e1      	bne.n	80102a6 <__ssputs_r+0x70>
 80102e2:	6921      	ldr	r1, [r4, #16]
 80102e4:	4650      	mov	r0, sl
 80102e6:	f7ff ff2b 	bl	8010140 <_free_r>
 80102ea:	e7c7      	b.n	801027c <__ssputs_r+0x46>

080102ec <_svfiprintf_r>:
 80102ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f0:	4698      	mov	r8, r3
 80102f2:	898b      	ldrh	r3, [r1, #12]
 80102f4:	061b      	lsls	r3, r3, #24
 80102f6:	b09d      	sub	sp, #116	; 0x74
 80102f8:	4607      	mov	r7, r0
 80102fa:	460d      	mov	r5, r1
 80102fc:	4614      	mov	r4, r2
 80102fe:	d50e      	bpl.n	801031e <_svfiprintf_r+0x32>
 8010300:	690b      	ldr	r3, [r1, #16]
 8010302:	b963      	cbnz	r3, 801031e <_svfiprintf_r+0x32>
 8010304:	2140      	movs	r1, #64	; 0x40
 8010306:	f7fb fdcb 	bl	800bea0 <_malloc_r>
 801030a:	6028      	str	r0, [r5, #0]
 801030c:	6128      	str	r0, [r5, #16]
 801030e:	b920      	cbnz	r0, 801031a <_svfiprintf_r+0x2e>
 8010310:	230c      	movs	r3, #12
 8010312:	603b      	str	r3, [r7, #0]
 8010314:	f04f 30ff 	mov.w	r0, #4294967295
 8010318:	e0d1      	b.n	80104be <_svfiprintf_r+0x1d2>
 801031a:	2340      	movs	r3, #64	; 0x40
 801031c:	616b      	str	r3, [r5, #20]
 801031e:	2300      	movs	r3, #0
 8010320:	9309      	str	r3, [sp, #36]	; 0x24
 8010322:	2320      	movs	r3, #32
 8010324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010328:	f8cd 800c 	str.w	r8, [sp, #12]
 801032c:	2330      	movs	r3, #48	; 0x30
 801032e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80104d8 <_svfiprintf_r+0x1ec>
 8010332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010336:	f04f 0901 	mov.w	r9, #1
 801033a:	4623      	mov	r3, r4
 801033c:	469a      	mov	sl, r3
 801033e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010342:	b10a      	cbz	r2, 8010348 <_svfiprintf_r+0x5c>
 8010344:	2a25      	cmp	r2, #37	; 0x25
 8010346:	d1f9      	bne.n	801033c <_svfiprintf_r+0x50>
 8010348:	ebba 0b04 	subs.w	fp, sl, r4
 801034c:	d00b      	beq.n	8010366 <_svfiprintf_r+0x7a>
 801034e:	465b      	mov	r3, fp
 8010350:	4622      	mov	r2, r4
 8010352:	4629      	mov	r1, r5
 8010354:	4638      	mov	r0, r7
 8010356:	f7ff ff6e 	bl	8010236 <__ssputs_r>
 801035a:	3001      	adds	r0, #1
 801035c:	f000 80aa 	beq.w	80104b4 <_svfiprintf_r+0x1c8>
 8010360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010362:	445a      	add	r2, fp
 8010364:	9209      	str	r2, [sp, #36]	; 0x24
 8010366:	f89a 3000 	ldrb.w	r3, [sl]
 801036a:	2b00      	cmp	r3, #0
 801036c:	f000 80a2 	beq.w	80104b4 <_svfiprintf_r+0x1c8>
 8010370:	2300      	movs	r3, #0
 8010372:	f04f 32ff 	mov.w	r2, #4294967295
 8010376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801037a:	f10a 0a01 	add.w	sl, sl, #1
 801037e:	9304      	str	r3, [sp, #16]
 8010380:	9307      	str	r3, [sp, #28]
 8010382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010386:	931a      	str	r3, [sp, #104]	; 0x68
 8010388:	4654      	mov	r4, sl
 801038a:	2205      	movs	r2, #5
 801038c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010390:	4851      	ldr	r0, [pc, #324]	; (80104d8 <_svfiprintf_r+0x1ec>)
 8010392:	f7ef ff35 	bl	8000200 <memchr>
 8010396:	9a04      	ldr	r2, [sp, #16]
 8010398:	b9d8      	cbnz	r0, 80103d2 <_svfiprintf_r+0xe6>
 801039a:	06d0      	lsls	r0, r2, #27
 801039c:	bf44      	itt	mi
 801039e:	2320      	movmi	r3, #32
 80103a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103a4:	0711      	lsls	r1, r2, #28
 80103a6:	bf44      	itt	mi
 80103a8:	232b      	movmi	r3, #43	; 0x2b
 80103aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103ae:	f89a 3000 	ldrb.w	r3, [sl]
 80103b2:	2b2a      	cmp	r3, #42	; 0x2a
 80103b4:	d015      	beq.n	80103e2 <_svfiprintf_r+0xf6>
 80103b6:	9a07      	ldr	r2, [sp, #28]
 80103b8:	4654      	mov	r4, sl
 80103ba:	2000      	movs	r0, #0
 80103bc:	f04f 0c0a 	mov.w	ip, #10
 80103c0:	4621      	mov	r1, r4
 80103c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103c6:	3b30      	subs	r3, #48	; 0x30
 80103c8:	2b09      	cmp	r3, #9
 80103ca:	d94e      	bls.n	801046a <_svfiprintf_r+0x17e>
 80103cc:	b1b0      	cbz	r0, 80103fc <_svfiprintf_r+0x110>
 80103ce:	9207      	str	r2, [sp, #28]
 80103d0:	e014      	b.n	80103fc <_svfiprintf_r+0x110>
 80103d2:	eba0 0308 	sub.w	r3, r0, r8
 80103d6:	fa09 f303 	lsl.w	r3, r9, r3
 80103da:	4313      	orrs	r3, r2
 80103dc:	9304      	str	r3, [sp, #16]
 80103de:	46a2      	mov	sl, r4
 80103e0:	e7d2      	b.n	8010388 <_svfiprintf_r+0x9c>
 80103e2:	9b03      	ldr	r3, [sp, #12]
 80103e4:	1d19      	adds	r1, r3, #4
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	9103      	str	r1, [sp, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	bfbb      	ittet	lt
 80103ee:	425b      	neglt	r3, r3
 80103f0:	f042 0202 	orrlt.w	r2, r2, #2
 80103f4:	9307      	strge	r3, [sp, #28]
 80103f6:	9307      	strlt	r3, [sp, #28]
 80103f8:	bfb8      	it	lt
 80103fa:	9204      	strlt	r2, [sp, #16]
 80103fc:	7823      	ldrb	r3, [r4, #0]
 80103fe:	2b2e      	cmp	r3, #46	; 0x2e
 8010400:	d10c      	bne.n	801041c <_svfiprintf_r+0x130>
 8010402:	7863      	ldrb	r3, [r4, #1]
 8010404:	2b2a      	cmp	r3, #42	; 0x2a
 8010406:	d135      	bne.n	8010474 <_svfiprintf_r+0x188>
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	1d1a      	adds	r2, r3, #4
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	9203      	str	r2, [sp, #12]
 8010410:	2b00      	cmp	r3, #0
 8010412:	bfb8      	it	lt
 8010414:	f04f 33ff 	movlt.w	r3, #4294967295
 8010418:	3402      	adds	r4, #2
 801041a:	9305      	str	r3, [sp, #20]
 801041c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104e8 <_svfiprintf_r+0x1fc>
 8010420:	7821      	ldrb	r1, [r4, #0]
 8010422:	2203      	movs	r2, #3
 8010424:	4650      	mov	r0, sl
 8010426:	f7ef feeb 	bl	8000200 <memchr>
 801042a:	b140      	cbz	r0, 801043e <_svfiprintf_r+0x152>
 801042c:	2340      	movs	r3, #64	; 0x40
 801042e:	eba0 000a 	sub.w	r0, r0, sl
 8010432:	fa03 f000 	lsl.w	r0, r3, r0
 8010436:	9b04      	ldr	r3, [sp, #16]
 8010438:	4303      	orrs	r3, r0
 801043a:	3401      	adds	r4, #1
 801043c:	9304      	str	r3, [sp, #16]
 801043e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010442:	4826      	ldr	r0, [pc, #152]	; (80104dc <_svfiprintf_r+0x1f0>)
 8010444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010448:	2206      	movs	r2, #6
 801044a:	f7ef fed9 	bl	8000200 <memchr>
 801044e:	2800      	cmp	r0, #0
 8010450:	d038      	beq.n	80104c4 <_svfiprintf_r+0x1d8>
 8010452:	4b23      	ldr	r3, [pc, #140]	; (80104e0 <_svfiprintf_r+0x1f4>)
 8010454:	bb1b      	cbnz	r3, 801049e <_svfiprintf_r+0x1b2>
 8010456:	9b03      	ldr	r3, [sp, #12]
 8010458:	3307      	adds	r3, #7
 801045a:	f023 0307 	bic.w	r3, r3, #7
 801045e:	3308      	adds	r3, #8
 8010460:	9303      	str	r3, [sp, #12]
 8010462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010464:	4433      	add	r3, r6
 8010466:	9309      	str	r3, [sp, #36]	; 0x24
 8010468:	e767      	b.n	801033a <_svfiprintf_r+0x4e>
 801046a:	fb0c 3202 	mla	r2, ip, r2, r3
 801046e:	460c      	mov	r4, r1
 8010470:	2001      	movs	r0, #1
 8010472:	e7a5      	b.n	80103c0 <_svfiprintf_r+0xd4>
 8010474:	2300      	movs	r3, #0
 8010476:	3401      	adds	r4, #1
 8010478:	9305      	str	r3, [sp, #20]
 801047a:	4619      	mov	r1, r3
 801047c:	f04f 0c0a 	mov.w	ip, #10
 8010480:	4620      	mov	r0, r4
 8010482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010486:	3a30      	subs	r2, #48	; 0x30
 8010488:	2a09      	cmp	r2, #9
 801048a:	d903      	bls.n	8010494 <_svfiprintf_r+0x1a8>
 801048c:	2b00      	cmp	r3, #0
 801048e:	d0c5      	beq.n	801041c <_svfiprintf_r+0x130>
 8010490:	9105      	str	r1, [sp, #20]
 8010492:	e7c3      	b.n	801041c <_svfiprintf_r+0x130>
 8010494:	fb0c 2101 	mla	r1, ip, r1, r2
 8010498:	4604      	mov	r4, r0
 801049a:	2301      	movs	r3, #1
 801049c:	e7f0      	b.n	8010480 <_svfiprintf_r+0x194>
 801049e:	ab03      	add	r3, sp, #12
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	462a      	mov	r2, r5
 80104a4:	4b0f      	ldr	r3, [pc, #60]	; (80104e4 <_svfiprintf_r+0x1f8>)
 80104a6:	a904      	add	r1, sp, #16
 80104a8:	4638      	mov	r0, r7
 80104aa:	f7fb ff67 	bl	800c37c <_printf_float>
 80104ae:	1c42      	adds	r2, r0, #1
 80104b0:	4606      	mov	r6, r0
 80104b2:	d1d6      	bne.n	8010462 <_svfiprintf_r+0x176>
 80104b4:	89ab      	ldrh	r3, [r5, #12]
 80104b6:	065b      	lsls	r3, r3, #25
 80104b8:	f53f af2c 	bmi.w	8010314 <_svfiprintf_r+0x28>
 80104bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80104be:	b01d      	add	sp, #116	; 0x74
 80104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c4:	ab03      	add	r3, sp, #12
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	462a      	mov	r2, r5
 80104ca:	4b06      	ldr	r3, [pc, #24]	; (80104e4 <_svfiprintf_r+0x1f8>)
 80104cc:	a904      	add	r1, sp, #16
 80104ce:	4638      	mov	r0, r7
 80104d0:	f7fc f9f8 	bl	800c8c4 <_printf_i>
 80104d4:	e7eb      	b.n	80104ae <_svfiprintf_r+0x1c2>
 80104d6:	bf00      	nop
 80104d8:	08012464 	.word	0x08012464
 80104dc:	0801246e 	.word	0x0801246e
 80104e0:	0800c37d 	.word	0x0800c37d
 80104e4:	08010237 	.word	0x08010237
 80104e8:	0801246a 	.word	0x0801246a

080104ec <_sungetc_r>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	1c4b      	adds	r3, r1, #1
 80104f0:	4614      	mov	r4, r2
 80104f2:	d103      	bne.n	80104fc <_sungetc_r+0x10>
 80104f4:	f04f 35ff 	mov.w	r5, #4294967295
 80104f8:	4628      	mov	r0, r5
 80104fa:	bd38      	pop	{r3, r4, r5, pc}
 80104fc:	8993      	ldrh	r3, [r2, #12]
 80104fe:	f023 0320 	bic.w	r3, r3, #32
 8010502:	8193      	strh	r3, [r2, #12]
 8010504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010506:	6852      	ldr	r2, [r2, #4]
 8010508:	b2cd      	uxtb	r5, r1
 801050a:	b18b      	cbz	r3, 8010530 <_sungetc_r+0x44>
 801050c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801050e:	4293      	cmp	r3, r2
 8010510:	dd08      	ble.n	8010524 <_sungetc_r+0x38>
 8010512:	6823      	ldr	r3, [r4, #0]
 8010514:	1e5a      	subs	r2, r3, #1
 8010516:	6022      	str	r2, [r4, #0]
 8010518:	f803 5c01 	strb.w	r5, [r3, #-1]
 801051c:	6863      	ldr	r3, [r4, #4]
 801051e:	3301      	adds	r3, #1
 8010520:	6063      	str	r3, [r4, #4]
 8010522:	e7e9      	b.n	80104f8 <_sungetc_r+0xc>
 8010524:	4621      	mov	r1, r4
 8010526:	f000 fc23 	bl	8010d70 <__submore>
 801052a:	2800      	cmp	r0, #0
 801052c:	d0f1      	beq.n	8010512 <_sungetc_r+0x26>
 801052e:	e7e1      	b.n	80104f4 <_sungetc_r+0x8>
 8010530:	6921      	ldr	r1, [r4, #16]
 8010532:	6823      	ldr	r3, [r4, #0]
 8010534:	b151      	cbz	r1, 801054c <_sungetc_r+0x60>
 8010536:	4299      	cmp	r1, r3
 8010538:	d208      	bcs.n	801054c <_sungetc_r+0x60>
 801053a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801053e:	42a9      	cmp	r1, r5
 8010540:	d104      	bne.n	801054c <_sungetc_r+0x60>
 8010542:	3b01      	subs	r3, #1
 8010544:	3201      	adds	r2, #1
 8010546:	6023      	str	r3, [r4, #0]
 8010548:	6062      	str	r2, [r4, #4]
 801054a:	e7d5      	b.n	80104f8 <_sungetc_r+0xc>
 801054c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010554:	6363      	str	r3, [r4, #52]	; 0x34
 8010556:	2303      	movs	r3, #3
 8010558:	63a3      	str	r3, [r4, #56]	; 0x38
 801055a:	4623      	mov	r3, r4
 801055c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	2301      	movs	r3, #1
 8010564:	e7dc      	b.n	8010520 <_sungetc_r+0x34>

08010566 <__ssrefill_r>:
 8010566:	b510      	push	{r4, lr}
 8010568:	460c      	mov	r4, r1
 801056a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801056c:	b169      	cbz	r1, 801058a <__ssrefill_r+0x24>
 801056e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010572:	4299      	cmp	r1, r3
 8010574:	d001      	beq.n	801057a <__ssrefill_r+0x14>
 8010576:	f7ff fde3 	bl	8010140 <_free_r>
 801057a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801057c:	6063      	str	r3, [r4, #4]
 801057e:	2000      	movs	r0, #0
 8010580:	6360      	str	r0, [r4, #52]	; 0x34
 8010582:	b113      	cbz	r3, 801058a <__ssrefill_r+0x24>
 8010584:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010586:	6023      	str	r3, [r4, #0]
 8010588:	bd10      	pop	{r4, pc}
 801058a:	6923      	ldr	r3, [r4, #16]
 801058c:	6023      	str	r3, [r4, #0]
 801058e:	2300      	movs	r3, #0
 8010590:	6063      	str	r3, [r4, #4]
 8010592:	89a3      	ldrh	r3, [r4, #12]
 8010594:	f043 0320 	orr.w	r3, r3, #32
 8010598:	81a3      	strh	r3, [r4, #12]
 801059a:	f04f 30ff 	mov.w	r0, #4294967295
 801059e:	e7f3      	b.n	8010588 <__ssrefill_r+0x22>

080105a0 <__ssvfiscanf_r>:
 80105a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105a4:	460c      	mov	r4, r1
 80105a6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80105aa:	2100      	movs	r1, #0
 80105ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80105b0:	49a6      	ldr	r1, [pc, #664]	; (801084c <__ssvfiscanf_r+0x2ac>)
 80105b2:	91a0      	str	r1, [sp, #640]	; 0x280
 80105b4:	f10d 0804 	add.w	r8, sp, #4
 80105b8:	49a5      	ldr	r1, [pc, #660]	; (8010850 <__ssvfiscanf_r+0x2b0>)
 80105ba:	4fa6      	ldr	r7, [pc, #664]	; (8010854 <__ssvfiscanf_r+0x2b4>)
 80105bc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010858 <__ssvfiscanf_r+0x2b8>
 80105c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80105c4:	4606      	mov	r6, r0
 80105c6:	91a1      	str	r1, [sp, #644]	; 0x284
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	7813      	ldrb	r3, [r2, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f000 815a 	beq.w	8010886 <__ssvfiscanf_r+0x2e6>
 80105d2:	5dd9      	ldrb	r1, [r3, r7]
 80105d4:	f011 0108 	ands.w	r1, r1, #8
 80105d8:	f102 0501 	add.w	r5, r2, #1
 80105dc:	d019      	beq.n	8010612 <__ssvfiscanf_r+0x72>
 80105de:	6863      	ldr	r3, [r4, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	dd0f      	ble.n	8010604 <__ssvfiscanf_r+0x64>
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	781a      	ldrb	r2, [r3, #0]
 80105e8:	5cba      	ldrb	r2, [r7, r2]
 80105ea:	0712      	lsls	r2, r2, #28
 80105ec:	d401      	bmi.n	80105f2 <__ssvfiscanf_r+0x52>
 80105ee:	462a      	mov	r2, r5
 80105f0:	e7eb      	b.n	80105ca <__ssvfiscanf_r+0x2a>
 80105f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80105f4:	3201      	adds	r2, #1
 80105f6:	9245      	str	r2, [sp, #276]	; 0x114
 80105f8:	6862      	ldr	r2, [r4, #4]
 80105fa:	3301      	adds	r3, #1
 80105fc:	3a01      	subs	r2, #1
 80105fe:	6062      	str	r2, [r4, #4]
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	e7ec      	b.n	80105de <__ssvfiscanf_r+0x3e>
 8010604:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010606:	4621      	mov	r1, r4
 8010608:	4630      	mov	r0, r6
 801060a:	4798      	blx	r3
 801060c:	2800      	cmp	r0, #0
 801060e:	d0e9      	beq.n	80105e4 <__ssvfiscanf_r+0x44>
 8010610:	e7ed      	b.n	80105ee <__ssvfiscanf_r+0x4e>
 8010612:	2b25      	cmp	r3, #37	; 0x25
 8010614:	d012      	beq.n	801063c <__ssvfiscanf_r+0x9c>
 8010616:	469a      	mov	sl, r3
 8010618:	6863      	ldr	r3, [r4, #4]
 801061a:	2b00      	cmp	r3, #0
 801061c:	f340 8091 	ble.w	8010742 <__ssvfiscanf_r+0x1a2>
 8010620:	6822      	ldr	r2, [r4, #0]
 8010622:	7813      	ldrb	r3, [r2, #0]
 8010624:	4553      	cmp	r3, sl
 8010626:	f040 812e 	bne.w	8010886 <__ssvfiscanf_r+0x2e6>
 801062a:	6863      	ldr	r3, [r4, #4]
 801062c:	3b01      	subs	r3, #1
 801062e:	6063      	str	r3, [r4, #4]
 8010630:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010632:	3201      	adds	r2, #1
 8010634:	3301      	adds	r3, #1
 8010636:	6022      	str	r2, [r4, #0]
 8010638:	9345      	str	r3, [sp, #276]	; 0x114
 801063a:	e7d8      	b.n	80105ee <__ssvfiscanf_r+0x4e>
 801063c:	9141      	str	r1, [sp, #260]	; 0x104
 801063e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010640:	7853      	ldrb	r3, [r2, #1]
 8010642:	2b2a      	cmp	r3, #42	; 0x2a
 8010644:	bf02      	ittt	eq
 8010646:	2310      	moveq	r3, #16
 8010648:	1c95      	addeq	r5, r2, #2
 801064a:	9341      	streq	r3, [sp, #260]	; 0x104
 801064c:	220a      	movs	r2, #10
 801064e:	46aa      	mov	sl, r5
 8010650:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010654:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010658:	2b09      	cmp	r3, #9
 801065a:	d91d      	bls.n	8010698 <__ssvfiscanf_r+0xf8>
 801065c:	487e      	ldr	r0, [pc, #504]	; (8010858 <__ssvfiscanf_r+0x2b8>)
 801065e:	2203      	movs	r2, #3
 8010660:	f7ef fdce 	bl	8000200 <memchr>
 8010664:	b140      	cbz	r0, 8010678 <__ssvfiscanf_r+0xd8>
 8010666:	2301      	movs	r3, #1
 8010668:	eba0 0009 	sub.w	r0, r0, r9
 801066c:	fa03 f000 	lsl.w	r0, r3, r0
 8010670:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010672:	4318      	orrs	r0, r3
 8010674:	9041      	str	r0, [sp, #260]	; 0x104
 8010676:	4655      	mov	r5, sl
 8010678:	f815 3b01 	ldrb.w	r3, [r5], #1
 801067c:	2b78      	cmp	r3, #120	; 0x78
 801067e:	d806      	bhi.n	801068e <__ssvfiscanf_r+0xee>
 8010680:	2b57      	cmp	r3, #87	; 0x57
 8010682:	d810      	bhi.n	80106a6 <__ssvfiscanf_r+0x106>
 8010684:	2b25      	cmp	r3, #37	; 0x25
 8010686:	d0c6      	beq.n	8010616 <__ssvfiscanf_r+0x76>
 8010688:	d856      	bhi.n	8010738 <__ssvfiscanf_r+0x198>
 801068a:	2b00      	cmp	r3, #0
 801068c:	d064      	beq.n	8010758 <__ssvfiscanf_r+0x1b8>
 801068e:	2303      	movs	r3, #3
 8010690:	9347      	str	r3, [sp, #284]	; 0x11c
 8010692:	230a      	movs	r3, #10
 8010694:	9342      	str	r3, [sp, #264]	; 0x108
 8010696:	e071      	b.n	801077c <__ssvfiscanf_r+0x1dc>
 8010698:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801069a:	fb02 1103 	mla	r1, r2, r3, r1
 801069e:	3930      	subs	r1, #48	; 0x30
 80106a0:	9143      	str	r1, [sp, #268]	; 0x10c
 80106a2:	4655      	mov	r5, sl
 80106a4:	e7d3      	b.n	801064e <__ssvfiscanf_r+0xae>
 80106a6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80106aa:	2a20      	cmp	r2, #32
 80106ac:	d8ef      	bhi.n	801068e <__ssvfiscanf_r+0xee>
 80106ae:	a101      	add	r1, pc, #4	; (adr r1, 80106b4 <__ssvfiscanf_r+0x114>)
 80106b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80106b4:	08010767 	.word	0x08010767
 80106b8:	0801068f 	.word	0x0801068f
 80106bc:	0801068f 	.word	0x0801068f
 80106c0:	080107c5 	.word	0x080107c5
 80106c4:	0801068f 	.word	0x0801068f
 80106c8:	0801068f 	.word	0x0801068f
 80106cc:	0801068f 	.word	0x0801068f
 80106d0:	0801068f 	.word	0x0801068f
 80106d4:	0801068f 	.word	0x0801068f
 80106d8:	0801068f 	.word	0x0801068f
 80106dc:	0801068f 	.word	0x0801068f
 80106e0:	080107db 	.word	0x080107db
 80106e4:	080107b1 	.word	0x080107b1
 80106e8:	0801073f 	.word	0x0801073f
 80106ec:	0801073f 	.word	0x0801073f
 80106f0:	0801073f 	.word	0x0801073f
 80106f4:	0801068f 	.word	0x0801068f
 80106f8:	080107b5 	.word	0x080107b5
 80106fc:	0801068f 	.word	0x0801068f
 8010700:	0801068f 	.word	0x0801068f
 8010704:	0801068f 	.word	0x0801068f
 8010708:	0801068f 	.word	0x0801068f
 801070c:	080107eb 	.word	0x080107eb
 8010710:	080107bd 	.word	0x080107bd
 8010714:	0801075f 	.word	0x0801075f
 8010718:	0801068f 	.word	0x0801068f
 801071c:	0801068f 	.word	0x0801068f
 8010720:	080107e7 	.word	0x080107e7
 8010724:	0801068f 	.word	0x0801068f
 8010728:	080107b1 	.word	0x080107b1
 801072c:	0801068f 	.word	0x0801068f
 8010730:	0801068f 	.word	0x0801068f
 8010734:	08010767 	.word	0x08010767
 8010738:	3b45      	subs	r3, #69	; 0x45
 801073a:	2b02      	cmp	r3, #2
 801073c:	d8a7      	bhi.n	801068e <__ssvfiscanf_r+0xee>
 801073e:	2305      	movs	r3, #5
 8010740:	e01b      	b.n	801077a <__ssvfiscanf_r+0x1da>
 8010742:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010744:	4621      	mov	r1, r4
 8010746:	4630      	mov	r0, r6
 8010748:	4798      	blx	r3
 801074a:	2800      	cmp	r0, #0
 801074c:	f43f af68 	beq.w	8010620 <__ssvfiscanf_r+0x80>
 8010750:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010752:	2800      	cmp	r0, #0
 8010754:	f040 808d 	bne.w	8010872 <__ssvfiscanf_r+0x2d2>
 8010758:	f04f 30ff 	mov.w	r0, #4294967295
 801075c:	e08f      	b.n	801087e <__ssvfiscanf_r+0x2de>
 801075e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010760:	f042 0220 	orr.w	r2, r2, #32
 8010764:	9241      	str	r2, [sp, #260]	; 0x104
 8010766:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801076c:	9241      	str	r2, [sp, #260]	; 0x104
 801076e:	2210      	movs	r2, #16
 8010770:	2b6f      	cmp	r3, #111	; 0x6f
 8010772:	9242      	str	r2, [sp, #264]	; 0x108
 8010774:	bf34      	ite	cc
 8010776:	2303      	movcc	r3, #3
 8010778:	2304      	movcs	r3, #4
 801077a:	9347      	str	r3, [sp, #284]	; 0x11c
 801077c:	6863      	ldr	r3, [r4, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	dd42      	ble.n	8010808 <__ssvfiscanf_r+0x268>
 8010782:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010784:	0659      	lsls	r1, r3, #25
 8010786:	d404      	bmi.n	8010792 <__ssvfiscanf_r+0x1f2>
 8010788:	6823      	ldr	r3, [r4, #0]
 801078a:	781a      	ldrb	r2, [r3, #0]
 801078c:	5cba      	ldrb	r2, [r7, r2]
 801078e:	0712      	lsls	r2, r2, #28
 8010790:	d441      	bmi.n	8010816 <__ssvfiscanf_r+0x276>
 8010792:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010794:	2b02      	cmp	r3, #2
 8010796:	dc50      	bgt.n	801083a <__ssvfiscanf_r+0x29a>
 8010798:	466b      	mov	r3, sp
 801079a:	4622      	mov	r2, r4
 801079c:	a941      	add	r1, sp, #260	; 0x104
 801079e:	4630      	mov	r0, r6
 80107a0:	f000 f876 	bl	8010890 <_scanf_chars>
 80107a4:	2801      	cmp	r0, #1
 80107a6:	d06e      	beq.n	8010886 <__ssvfiscanf_r+0x2e6>
 80107a8:	2802      	cmp	r0, #2
 80107aa:	f47f af20 	bne.w	80105ee <__ssvfiscanf_r+0x4e>
 80107ae:	e7cf      	b.n	8010750 <__ssvfiscanf_r+0x1b0>
 80107b0:	220a      	movs	r2, #10
 80107b2:	e7dd      	b.n	8010770 <__ssvfiscanf_r+0x1d0>
 80107b4:	2300      	movs	r3, #0
 80107b6:	9342      	str	r3, [sp, #264]	; 0x108
 80107b8:	2303      	movs	r3, #3
 80107ba:	e7de      	b.n	801077a <__ssvfiscanf_r+0x1da>
 80107bc:	2308      	movs	r3, #8
 80107be:	9342      	str	r3, [sp, #264]	; 0x108
 80107c0:	2304      	movs	r3, #4
 80107c2:	e7da      	b.n	801077a <__ssvfiscanf_r+0x1da>
 80107c4:	4629      	mov	r1, r5
 80107c6:	4640      	mov	r0, r8
 80107c8:	f000 f9ce 	bl	8010b68 <__sccl>
 80107cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80107ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107d2:	9341      	str	r3, [sp, #260]	; 0x104
 80107d4:	4605      	mov	r5, r0
 80107d6:	2301      	movs	r3, #1
 80107d8:	e7cf      	b.n	801077a <__ssvfiscanf_r+0x1da>
 80107da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80107dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107e0:	9341      	str	r3, [sp, #260]	; 0x104
 80107e2:	2300      	movs	r3, #0
 80107e4:	e7c9      	b.n	801077a <__ssvfiscanf_r+0x1da>
 80107e6:	2302      	movs	r3, #2
 80107e8:	e7c7      	b.n	801077a <__ssvfiscanf_r+0x1da>
 80107ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80107ec:	06c3      	lsls	r3, r0, #27
 80107ee:	f53f aefe 	bmi.w	80105ee <__ssvfiscanf_r+0x4e>
 80107f2:	9b00      	ldr	r3, [sp, #0]
 80107f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80107f6:	1d19      	adds	r1, r3, #4
 80107f8:	9100      	str	r1, [sp, #0]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f010 0f01 	tst.w	r0, #1
 8010800:	bf14      	ite	ne
 8010802:	801a      	strhne	r2, [r3, #0]
 8010804:	601a      	streq	r2, [r3, #0]
 8010806:	e6f2      	b.n	80105ee <__ssvfiscanf_r+0x4e>
 8010808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801080a:	4621      	mov	r1, r4
 801080c:	4630      	mov	r0, r6
 801080e:	4798      	blx	r3
 8010810:	2800      	cmp	r0, #0
 8010812:	d0b6      	beq.n	8010782 <__ssvfiscanf_r+0x1e2>
 8010814:	e79c      	b.n	8010750 <__ssvfiscanf_r+0x1b0>
 8010816:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010818:	3201      	adds	r2, #1
 801081a:	9245      	str	r2, [sp, #276]	; 0x114
 801081c:	6862      	ldr	r2, [r4, #4]
 801081e:	3a01      	subs	r2, #1
 8010820:	2a00      	cmp	r2, #0
 8010822:	6062      	str	r2, [r4, #4]
 8010824:	dd02      	ble.n	801082c <__ssvfiscanf_r+0x28c>
 8010826:	3301      	adds	r3, #1
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	e7ad      	b.n	8010788 <__ssvfiscanf_r+0x1e8>
 801082c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801082e:	4621      	mov	r1, r4
 8010830:	4630      	mov	r0, r6
 8010832:	4798      	blx	r3
 8010834:	2800      	cmp	r0, #0
 8010836:	d0a7      	beq.n	8010788 <__ssvfiscanf_r+0x1e8>
 8010838:	e78a      	b.n	8010750 <__ssvfiscanf_r+0x1b0>
 801083a:	2b04      	cmp	r3, #4
 801083c:	dc0e      	bgt.n	801085c <__ssvfiscanf_r+0x2bc>
 801083e:	466b      	mov	r3, sp
 8010840:	4622      	mov	r2, r4
 8010842:	a941      	add	r1, sp, #260	; 0x104
 8010844:	4630      	mov	r0, r6
 8010846:	f000 f87d 	bl	8010944 <_scanf_i>
 801084a:	e7ab      	b.n	80107a4 <__ssvfiscanf_r+0x204>
 801084c:	080104ed 	.word	0x080104ed
 8010850:	08010567 	.word	0x08010567
 8010854:	080122fd 	.word	0x080122fd
 8010858:	0801246a 	.word	0x0801246a
 801085c:	4b0b      	ldr	r3, [pc, #44]	; (801088c <__ssvfiscanf_r+0x2ec>)
 801085e:	2b00      	cmp	r3, #0
 8010860:	f43f aec5 	beq.w	80105ee <__ssvfiscanf_r+0x4e>
 8010864:	466b      	mov	r3, sp
 8010866:	4622      	mov	r2, r4
 8010868:	a941      	add	r1, sp, #260	; 0x104
 801086a:	4630      	mov	r0, r6
 801086c:	f7fc f950 	bl	800cb10 <_scanf_float>
 8010870:	e798      	b.n	80107a4 <__ssvfiscanf_r+0x204>
 8010872:	89a3      	ldrh	r3, [r4, #12]
 8010874:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010878:	bf18      	it	ne
 801087a:	f04f 30ff 	movne.w	r0, #4294967295
 801087e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010886:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010888:	e7f9      	b.n	801087e <__ssvfiscanf_r+0x2de>
 801088a:	bf00      	nop
 801088c:	0800cb11 	.word	0x0800cb11

08010890 <_scanf_chars>:
 8010890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010894:	4615      	mov	r5, r2
 8010896:	688a      	ldr	r2, [r1, #8]
 8010898:	4680      	mov	r8, r0
 801089a:	460c      	mov	r4, r1
 801089c:	b932      	cbnz	r2, 80108ac <_scanf_chars+0x1c>
 801089e:	698a      	ldr	r2, [r1, #24]
 80108a0:	2a00      	cmp	r2, #0
 80108a2:	bf0c      	ite	eq
 80108a4:	2201      	moveq	r2, #1
 80108a6:	f04f 32ff 	movne.w	r2, #4294967295
 80108aa:	608a      	str	r2, [r1, #8]
 80108ac:	6822      	ldr	r2, [r4, #0]
 80108ae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010940 <_scanf_chars+0xb0>
 80108b2:	06d1      	lsls	r1, r2, #27
 80108b4:	bf5f      	itttt	pl
 80108b6:	681a      	ldrpl	r2, [r3, #0]
 80108b8:	1d11      	addpl	r1, r2, #4
 80108ba:	6019      	strpl	r1, [r3, #0]
 80108bc:	6816      	ldrpl	r6, [r2, #0]
 80108be:	2700      	movs	r7, #0
 80108c0:	69a0      	ldr	r0, [r4, #24]
 80108c2:	b188      	cbz	r0, 80108e8 <_scanf_chars+0x58>
 80108c4:	2801      	cmp	r0, #1
 80108c6:	d107      	bne.n	80108d8 <_scanf_chars+0x48>
 80108c8:	682a      	ldr	r2, [r5, #0]
 80108ca:	7811      	ldrb	r1, [r2, #0]
 80108cc:	6962      	ldr	r2, [r4, #20]
 80108ce:	5c52      	ldrb	r2, [r2, r1]
 80108d0:	b952      	cbnz	r2, 80108e8 <_scanf_chars+0x58>
 80108d2:	2f00      	cmp	r7, #0
 80108d4:	d031      	beq.n	801093a <_scanf_chars+0xaa>
 80108d6:	e022      	b.n	801091e <_scanf_chars+0x8e>
 80108d8:	2802      	cmp	r0, #2
 80108da:	d120      	bne.n	801091e <_scanf_chars+0x8e>
 80108dc:	682b      	ldr	r3, [r5, #0]
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80108e4:	071b      	lsls	r3, r3, #28
 80108e6:	d41a      	bmi.n	801091e <_scanf_chars+0x8e>
 80108e8:	6823      	ldr	r3, [r4, #0]
 80108ea:	06da      	lsls	r2, r3, #27
 80108ec:	bf5e      	ittt	pl
 80108ee:	682b      	ldrpl	r3, [r5, #0]
 80108f0:	781b      	ldrbpl	r3, [r3, #0]
 80108f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80108f6:	682a      	ldr	r2, [r5, #0]
 80108f8:	686b      	ldr	r3, [r5, #4]
 80108fa:	3201      	adds	r2, #1
 80108fc:	602a      	str	r2, [r5, #0]
 80108fe:	68a2      	ldr	r2, [r4, #8]
 8010900:	3b01      	subs	r3, #1
 8010902:	3a01      	subs	r2, #1
 8010904:	606b      	str	r3, [r5, #4]
 8010906:	3701      	adds	r7, #1
 8010908:	60a2      	str	r2, [r4, #8]
 801090a:	b142      	cbz	r2, 801091e <_scanf_chars+0x8e>
 801090c:	2b00      	cmp	r3, #0
 801090e:	dcd7      	bgt.n	80108c0 <_scanf_chars+0x30>
 8010910:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010914:	4629      	mov	r1, r5
 8010916:	4640      	mov	r0, r8
 8010918:	4798      	blx	r3
 801091a:	2800      	cmp	r0, #0
 801091c:	d0d0      	beq.n	80108c0 <_scanf_chars+0x30>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	f013 0310 	ands.w	r3, r3, #16
 8010924:	d105      	bne.n	8010932 <_scanf_chars+0xa2>
 8010926:	68e2      	ldr	r2, [r4, #12]
 8010928:	3201      	adds	r2, #1
 801092a:	60e2      	str	r2, [r4, #12]
 801092c:	69a2      	ldr	r2, [r4, #24]
 801092e:	b102      	cbz	r2, 8010932 <_scanf_chars+0xa2>
 8010930:	7033      	strb	r3, [r6, #0]
 8010932:	6923      	ldr	r3, [r4, #16]
 8010934:	443b      	add	r3, r7
 8010936:	6123      	str	r3, [r4, #16]
 8010938:	2000      	movs	r0, #0
 801093a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093e:	bf00      	nop
 8010940:	080122fd 	.word	0x080122fd

08010944 <_scanf_i>:
 8010944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010948:	4698      	mov	r8, r3
 801094a:	4b76      	ldr	r3, [pc, #472]	; (8010b24 <_scanf_i+0x1e0>)
 801094c:	460c      	mov	r4, r1
 801094e:	4682      	mov	sl, r0
 8010950:	4616      	mov	r6, r2
 8010952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010956:	b087      	sub	sp, #28
 8010958:	ab03      	add	r3, sp, #12
 801095a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801095e:	4b72      	ldr	r3, [pc, #456]	; (8010b28 <_scanf_i+0x1e4>)
 8010960:	69a1      	ldr	r1, [r4, #24]
 8010962:	4a72      	ldr	r2, [pc, #456]	; (8010b2c <_scanf_i+0x1e8>)
 8010964:	2903      	cmp	r1, #3
 8010966:	bf18      	it	ne
 8010968:	461a      	movne	r2, r3
 801096a:	68a3      	ldr	r3, [r4, #8]
 801096c:	9201      	str	r2, [sp, #4]
 801096e:	1e5a      	subs	r2, r3, #1
 8010970:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010974:	bf88      	it	hi
 8010976:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801097a:	4627      	mov	r7, r4
 801097c:	bf82      	ittt	hi
 801097e:	eb03 0905 	addhi.w	r9, r3, r5
 8010982:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010986:	60a3      	strhi	r3, [r4, #8]
 8010988:	f857 3b1c 	ldr.w	r3, [r7], #28
 801098c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010990:	bf98      	it	ls
 8010992:	f04f 0900 	movls.w	r9, #0
 8010996:	6023      	str	r3, [r4, #0]
 8010998:	463d      	mov	r5, r7
 801099a:	f04f 0b00 	mov.w	fp, #0
 801099e:	6831      	ldr	r1, [r6, #0]
 80109a0:	ab03      	add	r3, sp, #12
 80109a2:	7809      	ldrb	r1, [r1, #0]
 80109a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80109a8:	2202      	movs	r2, #2
 80109aa:	f7ef fc29 	bl	8000200 <memchr>
 80109ae:	b328      	cbz	r0, 80109fc <_scanf_i+0xb8>
 80109b0:	f1bb 0f01 	cmp.w	fp, #1
 80109b4:	d159      	bne.n	8010a6a <_scanf_i+0x126>
 80109b6:	6862      	ldr	r2, [r4, #4]
 80109b8:	b92a      	cbnz	r2, 80109c6 <_scanf_i+0x82>
 80109ba:	6822      	ldr	r2, [r4, #0]
 80109bc:	2308      	movs	r3, #8
 80109be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80109c2:	6063      	str	r3, [r4, #4]
 80109c4:	6022      	str	r2, [r4, #0]
 80109c6:	6822      	ldr	r2, [r4, #0]
 80109c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80109cc:	6022      	str	r2, [r4, #0]
 80109ce:	68a2      	ldr	r2, [r4, #8]
 80109d0:	1e51      	subs	r1, r2, #1
 80109d2:	60a1      	str	r1, [r4, #8]
 80109d4:	b192      	cbz	r2, 80109fc <_scanf_i+0xb8>
 80109d6:	6832      	ldr	r2, [r6, #0]
 80109d8:	1c51      	adds	r1, r2, #1
 80109da:	6031      	str	r1, [r6, #0]
 80109dc:	7812      	ldrb	r2, [r2, #0]
 80109de:	f805 2b01 	strb.w	r2, [r5], #1
 80109e2:	6872      	ldr	r2, [r6, #4]
 80109e4:	3a01      	subs	r2, #1
 80109e6:	2a00      	cmp	r2, #0
 80109e8:	6072      	str	r2, [r6, #4]
 80109ea:	dc07      	bgt.n	80109fc <_scanf_i+0xb8>
 80109ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80109f0:	4631      	mov	r1, r6
 80109f2:	4650      	mov	r0, sl
 80109f4:	4790      	blx	r2
 80109f6:	2800      	cmp	r0, #0
 80109f8:	f040 8085 	bne.w	8010b06 <_scanf_i+0x1c2>
 80109fc:	f10b 0b01 	add.w	fp, fp, #1
 8010a00:	f1bb 0f03 	cmp.w	fp, #3
 8010a04:	d1cb      	bne.n	801099e <_scanf_i+0x5a>
 8010a06:	6863      	ldr	r3, [r4, #4]
 8010a08:	b90b      	cbnz	r3, 8010a0e <_scanf_i+0xca>
 8010a0a:	230a      	movs	r3, #10
 8010a0c:	6063      	str	r3, [r4, #4]
 8010a0e:	6863      	ldr	r3, [r4, #4]
 8010a10:	4947      	ldr	r1, [pc, #284]	; (8010b30 <_scanf_i+0x1ec>)
 8010a12:	6960      	ldr	r0, [r4, #20]
 8010a14:	1ac9      	subs	r1, r1, r3
 8010a16:	f000 f8a7 	bl	8010b68 <__sccl>
 8010a1a:	f04f 0b00 	mov.w	fp, #0
 8010a1e:	68a3      	ldr	r3, [r4, #8]
 8010a20:	6822      	ldr	r2, [r4, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d03d      	beq.n	8010aa2 <_scanf_i+0x15e>
 8010a26:	6831      	ldr	r1, [r6, #0]
 8010a28:	6960      	ldr	r0, [r4, #20]
 8010a2a:	f891 c000 	ldrb.w	ip, [r1]
 8010a2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d035      	beq.n	8010aa2 <_scanf_i+0x15e>
 8010a36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010a3a:	d124      	bne.n	8010a86 <_scanf_i+0x142>
 8010a3c:	0510      	lsls	r0, r2, #20
 8010a3e:	d522      	bpl.n	8010a86 <_scanf_i+0x142>
 8010a40:	f10b 0b01 	add.w	fp, fp, #1
 8010a44:	f1b9 0f00 	cmp.w	r9, #0
 8010a48:	d003      	beq.n	8010a52 <_scanf_i+0x10e>
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a50:	60a3      	str	r3, [r4, #8]
 8010a52:	6873      	ldr	r3, [r6, #4]
 8010a54:	3b01      	subs	r3, #1
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	6073      	str	r3, [r6, #4]
 8010a5a:	dd1b      	ble.n	8010a94 <_scanf_i+0x150>
 8010a5c:	6833      	ldr	r3, [r6, #0]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	6033      	str	r3, [r6, #0]
 8010a62:	68a3      	ldr	r3, [r4, #8]
 8010a64:	3b01      	subs	r3, #1
 8010a66:	60a3      	str	r3, [r4, #8]
 8010a68:	e7d9      	b.n	8010a1e <_scanf_i+0xda>
 8010a6a:	f1bb 0f02 	cmp.w	fp, #2
 8010a6e:	d1ae      	bne.n	80109ce <_scanf_i+0x8a>
 8010a70:	6822      	ldr	r2, [r4, #0]
 8010a72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010a76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010a7a:	d1bf      	bne.n	80109fc <_scanf_i+0xb8>
 8010a7c:	2310      	movs	r3, #16
 8010a7e:	6063      	str	r3, [r4, #4]
 8010a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010a84:	e7a2      	b.n	80109cc <_scanf_i+0x88>
 8010a86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010a8a:	6022      	str	r2, [r4, #0]
 8010a8c:	780b      	ldrb	r3, [r1, #0]
 8010a8e:	f805 3b01 	strb.w	r3, [r5], #1
 8010a92:	e7de      	b.n	8010a52 <_scanf_i+0x10e>
 8010a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a98:	4631      	mov	r1, r6
 8010a9a:	4650      	mov	r0, sl
 8010a9c:	4798      	blx	r3
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d0df      	beq.n	8010a62 <_scanf_i+0x11e>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	05db      	lsls	r3, r3, #23
 8010aa6:	d50d      	bpl.n	8010ac4 <_scanf_i+0x180>
 8010aa8:	42bd      	cmp	r5, r7
 8010aaa:	d909      	bls.n	8010ac0 <_scanf_i+0x17c>
 8010aac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	4650      	mov	r0, sl
 8010ab8:	4798      	blx	r3
 8010aba:	f105 39ff 	add.w	r9, r5, #4294967295
 8010abe:	464d      	mov	r5, r9
 8010ac0:	42bd      	cmp	r5, r7
 8010ac2:	d02d      	beq.n	8010b20 <_scanf_i+0x1dc>
 8010ac4:	6822      	ldr	r2, [r4, #0]
 8010ac6:	f012 0210 	ands.w	r2, r2, #16
 8010aca:	d113      	bne.n	8010af4 <_scanf_i+0x1b0>
 8010acc:	702a      	strb	r2, [r5, #0]
 8010ace:	6863      	ldr	r3, [r4, #4]
 8010ad0:	9e01      	ldr	r6, [sp, #4]
 8010ad2:	4639      	mov	r1, r7
 8010ad4:	4650      	mov	r0, sl
 8010ad6:	47b0      	blx	r6
 8010ad8:	6821      	ldr	r1, [r4, #0]
 8010ada:	f8d8 3000 	ldr.w	r3, [r8]
 8010ade:	f011 0f20 	tst.w	r1, #32
 8010ae2:	d013      	beq.n	8010b0c <_scanf_i+0x1c8>
 8010ae4:	1d1a      	adds	r2, r3, #4
 8010ae6:	f8c8 2000 	str.w	r2, [r8]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	6018      	str	r0, [r3, #0]
 8010aee:	68e3      	ldr	r3, [r4, #12]
 8010af0:	3301      	adds	r3, #1
 8010af2:	60e3      	str	r3, [r4, #12]
 8010af4:	1bed      	subs	r5, r5, r7
 8010af6:	44ab      	add	fp, r5
 8010af8:	6925      	ldr	r5, [r4, #16]
 8010afa:	445d      	add	r5, fp
 8010afc:	6125      	str	r5, [r4, #16]
 8010afe:	2000      	movs	r0, #0
 8010b00:	b007      	add	sp, #28
 8010b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b06:	f04f 0b00 	mov.w	fp, #0
 8010b0a:	e7ca      	b.n	8010aa2 <_scanf_i+0x15e>
 8010b0c:	1d1a      	adds	r2, r3, #4
 8010b0e:	f8c8 2000 	str.w	r2, [r8]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f011 0f01 	tst.w	r1, #1
 8010b18:	bf14      	ite	ne
 8010b1a:	8018      	strhne	r0, [r3, #0]
 8010b1c:	6018      	streq	r0, [r3, #0]
 8010b1e:	e7e6      	b.n	8010aee <_scanf_i+0x1aa>
 8010b20:	2001      	movs	r0, #1
 8010b22:	e7ed      	b.n	8010b00 <_scanf_i+0x1bc>
 8010b24:	08012210 	.word	0x08012210
 8010b28:	08010d6d 	.word	0x08010d6d
 8010b2c:	0800ded5 	.word	0x0800ded5
 8010b30:	0801277d 	.word	0x0801277d

08010b34 <_read_r>:
 8010b34:	b538      	push	{r3, r4, r5, lr}
 8010b36:	4d07      	ldr	r5, [pc, #28]	; (8010b54 <_read_r+0x20>)
 8010b38:	4604      	mov	r4, r0
 8010b3a:	4608      	mov	r0, r1
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	2200      	movs	r2, #0
 8010b40:	602a      	str	r2, [r5, #0]
 8010b42:	461a      	mov	r2, r3
 8010b44:	f7f2 f94e 	bl	8002de4 <_read>
 8010b48:	1c43      	adds	r3, r0, #1
 8010b4a:	d102      	bne.n	8010b52 <_read_r+0x1e>
 8010b4c:	682b      	ldr	r3, [r5, #0]
 8010b4e:	b103      	cbz	r3, 8010b52 <_read_r+0x1e>
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	bd38      	pop	{r3, r4, r5, pc}
 8010b54:	20013298 	.word	0x20013298

08010b58 <nan>:
 8010b58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010b60 <nan+0x8>
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	00000000 	.word	0x00000000
 8010b64:	7ff80000 	.word	0x7ff80000

08010b68 <__sccl>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	780b      	ldrb	r3, [r1, #0]
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	2b5e      	cmp	r3, #94	; 0x5e
 8010b70:	bf0b      	itete	eq
 8010b72:	784b      	ldrbeq	r3, [r1, #1]
 8010b74:	1c48      	addne	r0, r1, #1
 8010b76:	1c88      	addeq	r0, r1, #2
 8010b78:	2200      	movne	r2, #0
 8010b7a:	bf08      	it	eq
 8010b7c:	2201      	moveq	r2, #1
 8010b7e:	1e61      	subs	r1, r4, #1
 8010b80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010b84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010b88:	42a9      	cmp	r1, r5
 8010b8a:	d1fb      	bne.n	8010b84 <__sccl+0x1c>
 8010b8c:	b90b      	cbnz	r3, 8010b92 <__sccl+0x2a>
 8010b8e:	3801      	subs	r0, #1
 8010b90:	bd70      	pop	{r4, r5, r6, pc}
 8010b92:	f082 0201 	eor.w	r2, r2, #1
 8010b96:	54e2      	strb	r2, [r4, r3]
 8010b98:	4605      	mov	r5, r0
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010ba0:	292d      	cmp	r1, #45	; 0x2d
 8010ba2:	d006      	beq.n	8010bb2 <__sccl+0x4a>
 8010ba4:	295d      	cmp	r1, #93	; 0x5d
 8010ba6:	d0f3      	beq.n	8010b90 <__sccl+0x28>
 8010ba8:	b909      	cbnz	r1, 8010bae <__sccl+0x46>
 8010baa:	4628      	mov	r0, r5
 8010bac:	e7f0      	b.n	8010b90 <__sccl+0x28>
 8010bae:	460b      	mov	r3, r1
 8010bb0:	e7f1      	b.n	8010b96 <__sccl+0x2e>
 8010bb2:	786e      	ldrb	r6, [r5, #1]
 8010bb4:	2e5d      	cmp	r6, #93	; 0x5d
 8010bb6:	d0fa      	beq.n	8010bae <__sccl+0x46>
 8010bb8:	42b3      	cmp	r3, r6
 8010bba:	dcf8      	bgt.n	8010bae <__sccl+0x46>
 8010bbc:	3502      	adds	r5, #2
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	3101      	adds	r1, #1
 8010bc2:	428e      	cmp	r6, r1
 8010bc4:	5462      	strb	r2, [r4, r1]
 8010bc6:	dcfb      	bgt.n	8010bc0 <__sccl+0x58>
 8010bc8:	1af1      	subs	r1, r6, r3
 8010bca:	3901      	subs	r1, #1
 8010bcc:	1c58      	adds	r0, r3, #1
 8010bce:	42b3      	cmp	r3, r6
 8010bd0:	bfa8      	it	ge
 8010bd2:	2100      	movge	r1, #0
 8010bd4:	1843      	adds	r3, r0, r1
 8010bd6:	e7e0      	b.n	8010b9a <__sccl+0x32>

08010bd8 <_raise_r>:
 8010bd8:	291f      	cmp	r1, #31
 8010bda:	b538      	push	{r3, r4, r5, lr}
 8010bdc:	4604      	mov	r4, r0
 8010bde:	460d      	mov	r5, r1
 8010be0:	d904      	bls.n	8010bec <_raise_r+0x14>
 8010be2:	2316      	movs	r3, #22
 8010be4:	6003      	str	r3, [r0, #0]
 8010be6:	f04f 30ff 	mov.w	r0, #4294967295
 8010bea:	bd38      	pop	{r3, r4, r5, pc}
 8010bec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010bee:	b112      	cbz	r2, 8010bf6 <_raise_r+0x1e>
 8010bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bf4:	b94b      	cbnz	r3, 8010c0a <_raise_r+0x32>
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 f830 	bl	8010c5c <_getpid_r>
 8010bfc:	462a      	mov	r2, r5
 8010bfe:	4601      	mov	r1, r0
 8010c00:	4620      	mov	r0, r4
 8010c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c06:	f000 b817 	b.w	8010c38 <_kill_r>
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d00a      	beq.n	8010c24 <_raise_r+0x4c>
 8010c0e:	1c59      	adds	r1, r3, #1
 8010c10:	d103      	bne.n	8010c1a <_raise_r+0x42>
 8010c12:	2316      	movs	r3, #22
 8010c14:	6003      	str	r3, [r0, #0]
 8010c16:	2001      	movs	r0, #1
 8010c18:	e7e7      	b.n	8010bea <_raise_r+0x12>
 8010c1a:	2400      	movs	r4, #0
 8010c1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c20:	4628      	mov	r0, r5
 8010c22:	4798      	blx	r3
 8010c24:	2000      	movs	r0, #0
 8010c26:	e7e0      	b.n	8010bea <_raise_r+0x12>

08010c28 <raise>:
 8010c28:	4b02      	ldr	r3, [pc, #8]	; (8010c34 <raise+0xc>)
 8010c2a:	4601      	mov	r1, r0
 8010c2c:	6818      	ldr	r0, [r3, #0]
 8010c2e:	f7ff bfd3 	b.w	8010bd8 <_raise_r>
 8010c32:	bf00      	nop
 8010c34:	2000023c 	.word	0x2000023c

08010c38 <_kill_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4d07      	ldr	r5, [pc, #28]	; (8010c58 <_kill_r+0x20>)
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4608      	mov	r0, r1
 8010c42:	4611      	mov	r1, r2
 8010c44:	602b      	str	r3, [r5, #0]
 8010c46:	f7f2 f8b3 	bl	8002db0 <_kill>
 8010c4a:	1c43      	adds	r3, r0, #1
 8010c4c:	d102      	bne.n	8010c54 <_kill_r+0x1c>
 8010c4e:	682b      	ldr	r3, [r5, #0]
 8010c50:	b103      	cbz	r3, 8010c54 <_kill_r+0x1c>
 8010c52:	6023      	str	r3, [r4, #0]
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
 8010c56:	bf00      	nop
 8010c58:	20013298 	.word	0x20013298

08010c5c <_getpid_r>:
 8010c5c:	f7f2 b8a0 	b.w	8002da0 <_getpid>

08010c60 <strncmp>:
 8010c60:	b510      	push	{r4, lr}
 8010c62:	b17a      	cbz	r2, 8010c84 <strncmp+0x24>
 8010c64:	4603      	mov	r3, r0
 8010c66:	3901      	subs	r1, #1
 8010c68:	1884      	adds	r4, r0, r2
 8010c6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010c6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c72:	4290      	cmp	r0, r2
 8010c74:	d101      	bne.n	8010c7a <strncmp+0x1a>
 8010c76:	42a3      	cmp	r3, r4
 8010c78:	d101      	bne.n	8010c7e <strncmp+0x1e>
 8010c7a:	1a80      	subs	r0, r0, r2
 8010c7c:	bd10      	pop	{r4, pc}
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d1f3      	bne.n	8010c6a <strncmp+0xa>
 8010c82:	e7fa      	b.n	8010c7a <strncmp+0x1a>
 8010c84:	4610      	mov	r0, r2
 8010c86:	e7f9      	b.n	8010c7c <strncmp+0x1c>

08010c88 <_strtoul_l.constprop.0>:
 8010c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c8c:	4f36      	ldr	r7, [pc, #216]	; (8010d68 <_strtoul_l.constprop.0+0xe0>)
 8010c8e:	4686      	mov	lr, r0
 8010c90:	460d      	mov	r5, r1
 8010c92:	4628      	mov	r0, r5
 8010c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c98:	5de6      	ldrb	r6, [r4, r7]
 8010c9a:	f016 0608 	ands.w	r6, r6, #8
 8010c9e:	d1f8      	bne.n	8010c92 <_strtoul_l.constprop.0+0xa>
 8010ca0:	2c2d      	cmp	r4, #45	; 0x2d
 8010ca2:	d12f      	bne.n	8010d04 <_strtoul_l.constprop.0+0x7c>
 8010ca4:	782c      	ldrb	r4, [r5, #0]
 8010ca6:	2601      	movs	r6, #1
 8010ca8:	1c85      	adds	r5, r0, #2
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d057      	beq.n	8010d5e <_strtoul_l.constprop.0+0xd6>
 8010cae:	2b10      	cmp	r3, #16
 8010cb0:	d109      	bne.n	8010cc6 <_strtoul_l.constprop.0+0x3e>
 8010cb2:	2c30      	cmp	r4, #48	; 0x30
 8010cb4:	d107      	bne.n	8010cc6 <_strtoul_l.constprop.0+0x3e>
 8010cb6:	7828      	ldrb	r0, [r5, #0]
 8010cb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010cbc:	2858      	cmp	r0, #88	; 0x58
 8010cbe:	d149      	bne.n	8010d54 <_strtoul_l.constprop.0+0xcc>
 8010cc0:	786c      	ldrb	r4, [r5, #1]
 8010cc2:	2310      	movs	r3, #16
 8010cc4:	3502      	adds	r5, #2
 8010cc6:	f04f 38ff 	mov.w	r8, #4294967295
 8010cca:	2700      	movs	r7, #0
 8010ccc:	fbb8 f8f3 	udiv	r8, r8, r3
 8010cd0:	fb03 f908 	mul.w	r9, r3, r8
 8010cd4:	ea6f 0909 	mvn.w	r9, r9
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010cde:	f1bc 0f09 	cmp.w	ip, #9
 8010ce2:	d814      	bhi.n	8010d0e <_strtoul_l.constprop.0+0x86>
 8010ce4:	4664      	mov	r4, ip
 8010ce6:	42a3      	cmp	r3, r4
 8010ce8:	dd22      	ble.n	8010d30 <_strtoul_l.constprop.0+0xa8>
 8010cea:	2f00      	cmp	r7, #0
 8010cec:	db1d      	blt.n	8010d2a <_strtoul_l.constprop.0+0xa2>
 8010cee:	4580      	cmp	r8, r0
 8010cf0:	d31b      	bcc.n	8010d2a <_strtoul_l.constprop.0+0xa2>
 8010cf2:	d101      	bne.n	8010cf8 <_strtoul_l.constprop.0+0x70>
 8010cf4:	45a1      	cmp	r9, r4
 8010cf6:	db18      	blt.n	8010d2a <_strtoul_l.constprop.0+0xa2>
 8010cf8:	fb00 4003 	mla	r0, r0, r3, r4
 8010cfc:	2701      	movs	r7, #1
 8010cfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d02:	e7ea      	b.n	8010cda <_strtoul_l.constprop.0+0x52>
 8010d04:	2c2b      	cmp	r4, #43	; 0x2b
 8010d06:	bf04      	itt	eq
 8010d08:	782c      	ldrbeq	r4, [r5, #0]
 8010d0a:	1c85      	addeq	r5, r0, #2
 8010d0c:	e7cd      	b.n	8010caa <_strtoul_l.constprop.0+0x22>
 8010d0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010d12:	f1bc 0f19 	cmp.w	ip, #25
 8010d16:	d801      	bhi.n	8010d1c <_strtoul_l.constprop.0+0x94>
 8010d18:	3c37      	subs	r4, #55	; 0x37
 8010d1a:	e7e4      	b.n	8010ce6 <_strtoul_l.constprop.0+0x5e>
 8010d1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010d20:	f1bc 0f19 	cmp.w	ip, #25
 8010d24:	d804      	bhi.n	8010d30 <_strtoul_l.constprop.0+0xa8>
 8010d26:	3c57      	subs	r4, #87	; 0x57
 8010d28:	e7dd      	b.n	8010ce6 <_strtoul_l.constprop.0+0x5e>
 8010d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8010d2e:	e7e6      	b.n	8010cfe <_strtoul_l.constprop.0+0x76>
 8010d30:	2f00      	cmp	r7, #0
 8010d32:	da07      	bge.n	8010d44 <_strtoul_l.constprop.0+0xbc>
 8010d34:	2322      	movs	r3, #34	; 0x22
 8010d36:	f8ce 3000 	str.w	r3, [lr]
 8010d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3e:	b932      	cbnz	r2, 8010d4e <_strtoul_l.constprop.0+0xc6>
 8010d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d44:	b106      	cbz	r6, 8010d48 <_strtoul_l.constprop.0+0xc0>
 8010d46:	4240      	negs	r0, r0
 8010d48:	2a00      	cmp	r2, #0
 8010d4a:	d0f9      	beq.n	8010d40 <_strtoul_l.constprop.0+0xb8>
 8010d4c:	b107      	cbz	r7, 8010d50 <_strtoul_l.constprop.0+0xc8>
 8010d4e:	1e69      	subs	r1, r5, #1
 8010d50:	6011      	str	r1, [r2, #0]
 8010d52:	e7f5      	b.n	8010d40 <_strtoul_l.constprop.0+0xb8>
 8010d54:	2430      	movs	r4, #48	; 0x30
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1b5      	bne.n	8010cc6 <_strtoul_l.constprop.0+0x3e>
 8010d5a:	2308      	movs	r3, #8
 8010d5c:	e7b3      	b.n	8010cc6 <_strtoul_l.constprop.0+0x3e>
 8010d5e:	2c30      	cmp	r4, #48	; 0x30
 8010d60:	d0a9      	beq.n	8010cb6 <_strtoul_l.constprop.0+0x2e>
 8010d62:	230a      	movs	r3, #10
 8010d64:	e7af      	b.n	8010cc6 <_strtoul_l.constprop.0+0x3e>
 8010d66:	bf00      	nop
 8010d68:	080122fd 	.word	0x080122fd

08010d6c <_strtoul_r>:
 8010d6c:	f7ff bf8c 	b.w	8010c88 <_strtoul_l.constprop.0>

08010d70 <__submore>:
 8010d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d74:	460c      	mov	r4, r1
 8010d76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d7c:	4299      	cmp	r1, r3
 8010d7e:	d11d      	bne.n	8010dbc <__submore+0x4c>
 8010d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d84:	f7fb f88c 	bl	800bea0 <_malloc_r>
 8010d88:	b918      	cbnz	r0, 8010d92 <__submore+0x22>
 8010d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d96:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8010d9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010da2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010da6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010daa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010dae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010db2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010db6:	6020      	str	r0, [r4, #0]
 8010db8:	2000      	movs	r0, #0
 8010dba:	e7e8      	b.n	8010d8e <__submore+0x1e>
 8010dbc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010dbe:	0077      	lsls	r7, r6, #1
 8010dc0:	463a      	mov	r2, r7
 8010dc2:	f7ff fa09 	bl	80101d8 <_realloc_r>
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d0de      	beq.n	8010d8a <__submore+0x1a>
 8010dcc:	eb00 0806 	add.w	r8, r0, r6
 8010dd0:	4601      	mov	r1, r0
 8010dd2:	4632      	mov	r2, r6
 8010dd4:	4640      	mov	r0, r8
 8010dd6:	f7fb f82c 	bl	800be32 <memcpy>
 8010dda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010dde:	f8c4 8000 	str.w	r8, [r4]
 8010de2:	e7e9      	b.n	8010db8 <__submore+0x48>

08010de4 <__ascii_wctomb>:
 8010de4:	b149      	cbz	r1, 8010dfa <__ascii_wctomb+0x16>
 8010de6:	2aff      	cmp	r2, #255	; 0xff
 8010de8:	bf85      	ittet	hi
 8010dea:	238a      	movhi	r3, #138	; 0x8a
 8010dec:	6003      	strhi	r3, [r0, #0]
 8010dee:	700a      	strbls	r2, [r1, #0]
 8010df0:	f04f 30ff 	movhi.w	r0, #4294967295
 8010df4:	bf98      	it	ls
 8010df6:	2001      	movls	r0, #1
 8010df8:	4770      	bx	lr
 8010dfa:	4608      	mov	r0, r1
 8010dfc:	4770      	bx	lr
	...

08010e00 <_fstat_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d07      	ldr	r5, [pc, #28]	; (8010e20 <_fstat_r+0x20>)
 8010e04:	2300      	movs	r3, #0
 8010e06:	4604      	mov	r4, r0
 8010e08:	4608      	mov	r0, r1
 8010e0a:	4611      	mov	r1, r2
 8010e0c:	602b      	str	r3, [r5, #0]
 8010e0e:	f7f2 f82e 	bl	8002e6e <_fstat>
 8010e12:	1c43      	adds	r3, r0, #1
 8010e14:	d102      	bne.n	8010e1c <_fstat_r+0x1c>
 8010e16:	682b      	ldr	r3, [r5, #0]
 8010e18:	b103      	cbz	r3, 8010e1c <_fstat_r+0x1c>
 8010e1a:	6023      	str	r3, [r4, #0]
 8010e1c:	bd38      	pop	{r3, r4, r5, pc}
 8010e1e:	bf00      	nop
 8010e20:	20013298 	.word	0x20013298

08010e24 <_isatty_r>:
 8010e24:	b538      	push	{r3, r4, r5, lr}
 8010e26:	4d06      	ldr	r5, [pc, #24]	; (8010e40 <_isatty_r+0x1c>)
 8010e28:	2300      	movs	r3, #0
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	4608      	mov	r0, r1
 8010e2e:	602b      	str	r3, [r5, #0]
 8010e30:	f7f2 f82d 	bl	8002e8e <_isatty>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	d102      	bne.n	8010e3e <_isatty_r+0x1a>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	b103      	cbz	r3, 8010e3e <_isatty_r+0x1a>
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}
 8010e40:	20013298 	.word	0x20013298

08010e44 <_malloc_usable_size_r>:
 8010e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e48:	1f18      	subs	r0, r3, #4
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	bfbc      	itt	lt
 8010e4e:	580b      	ldrlt	r3, [r1, r0]
 8010e50:	18c0      	addlt	r0, r0, r3
 8010e52:	4770      	bx	lr
 8010e54:	0000      	movs	r0, r0
	...

08010e58 <sin>:
 8010e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e5a:	ec53 2b10 	vmov	r2, r3, d0
 8010e5e:	4828      	ldr	r0, [pc, #160]	; (8010f00 <sin+0xa8>)
 8010e60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e64:	4281      	cmp	r1, r0
 8010e66:	dc07      	bgt.n	8010e78 <sin+0x20>
 8010e68:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010ef8 <sin+0xa0>
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	b005      	add	sp, #20
 8010e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e74:	f000 be6c 	b.w	8011b50 <__kernel_sin>
 8010e78:	4822      	ldr	r0, [pc, #136]	; (8010f04 <sin+0xac>)
 8010e7a:	4281      	cmp	r1, r0
 8010e7c:	dd09      	ble.n	8010e92 <sin+0x3a>
 8010e7e:	ee10 0a10 	vmov	r0, s0
 8010e82:	4619      	mov	r1, r3
 8010e84:	f7ef fa10 	bl	80002a8 <__aeabi_dsub>
 8010e88:	ec41 0b10 	vmov	d0, r0, r1
 8010e8c:	b005      	add	sp, #20
 8010e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e92:	4668      	mov	r0, sp
 8010e94:	f000 f838 	bl	8010f08 <__ieee754_rem_pio2>
 8010e98:	f000 0003 	and.w	r0, r0, #3
 8010e9c:	2801      	cmp	r0, #1
 8010e9e:	d00c      	beq.n	8010eba <sin+0x62>
 8010ea0:	2802      	cmp	r0, #2
 8010ea2:	d011      	beq.n	8010ec8 <sin+0x70>
 8010ea4:	b9f0      	cbnz	r0, 8010ee4 <sin+0x8c>
 8010ea6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010eaa:	ed9d 0b00 	vldr	d0, [sp]
 8010eae:	2001      	movs	r0, #1
 8010eb0:	f000 fe4e 	bl	8011b50 <__kernel_sin>
 8010eb4:	ec51 0b10 	vmov	r0, r1, d0
 8010eb8:	e7e6      	b.n	8010e88 <sin+0x30>
 8010eba:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ebe:	ed9d 0b00 	vldr	d0, [sp]
 8010ec2:	f000 fa2d 	bl	8011320 <__kernel_cos>
 8010ec6:	e7f5      	b.n	8010eb4 <sin+0x5c>
 8010ec8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ecc:	ed9d 0b00 	vldr	d0, [sp]
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	f000 fe3d 	bl	8011b50 <__kernel_sin>
 8010ed6:	ec53 2b10 	vmov	r2, r3, d0
 8010eda:	ee10 0a10 	vmov	r0, s0
 8010ede:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ee2:	e7d1      	b.n	8010e88 <sin+0x30>
 8010ee4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ee8:	ed9d 0b00 	vldr	d0, [sp]
 8010eec:	f000 fa18 	bl	8011320 <__kernel_cos>
 8010ef0:	e7f1      	b.n	8010ed6 <sin+0x7e>
 8010ef2:	bf00      	nop
 8010ef4:	f3af 8000 	nop.w
	...
 8010f00:	3fe921fb 	.word	0x3fe921fb
 8010f04:	7fefffff 	.word	0x7fefffff

08010f08 <__ieee754_rem_pio2>:
 8010f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f0c:	ed2d 8b02 	vpush	{d8}
 8010f10:	ec55 4b10 	vmov	r4, r5, d0
 8010f14:	4bca      	ldr	r3, [pc, #808]	; (8011240 <__ieee754_rem_pio2+0x338>)
 8010f16:	b08b      	sub	sp, #44	; 0x2c
 8010f18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010f1c:	4598      	cmp	r8, r3
 8010f1e:	4682      	mov	sl, r0
 8010f20:	9502      	str	r5, [sp, #8]
 8010f22:	dc08      	bgt.n	8010f36 <__ieee754_rem_pio2+0x2e>
 8010f24:	2200      	movs	r2, #0
 8010f26:	2300      	movs	r3, #0
 8010f28:	ed80 0b00 	vstr	d0, [r0]
 8010f2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010f30:	f04f 0b00 	mov.w	fp, #0
 8010f34:	e028      	b.n	8010f88 <__ieee754_rem_pio2+0x80>
 8010f36:	4bc3      	ldr	r3, [pc, #780]	; (8011244 <__ieee754_rem_pio2+0x33c>)
 8010f38:	4598      	cmp	r8, r3
 8010f3a:	dc78      	bgt.n	801102e <__ieee754_rem_pio2+0x126>
 8010f3c:	9b02      	ldr	r3, [sp, #8]
 8010f3e:	4ec2      	ldr	r6, [pc, #776]	; (8011248 <__ieee754_rem_pio2+0x340>)
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	ee10 0a10 	vmov	r0, s0
 8010f46:	a3b0      	add	r3, pc, #704	; (adr r3, 8011208 <__ieee754_rem_pio2+0x300>)
 8010f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	dd39      	ble.n	8010fc4 <__ieee754_rem_pio2+0xbc>
 8010f50:	f7ef f9aa 	bl	80002a8 <__aeabi_dsub>
 8010f54:	45b0      	cmp	r8, r6
 8010f56:	4604      	mov	r4, r0
 8010f58:	460d      	mov	r5, r1
 8010f5a:	d01b      	beq.n	8010f94 <__ieee754_rem_pio2+0x8c>
 8010f5c:	a3ac      	add	r3, pc, #688	; (adr r3, 8011210 <__ieee754_rem_pio2+0x308>)
 8010f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f62:	f7ef f9a1 	bl	80002a8 <__aeabi_dsub>
 8010f66:	4602      	mov	r2, r0
 8010f68:	460b      	mov	r3, r1
 8010f6a:	e9ca 2300 	strd	r2, r3, [sl]
 8010f6e:	4620      	mov	r0, r4
 8010f70:	4629      	mov	r1, r5
 8010f72:	f7ef f999 	bl	80002a8 <__aeabi_dsub>
 8010f76:	a3a6      	add	r3, pc, #664	; (adr r3, 8011210 <__ieee754_rem_pio2+0x308>)
 8010f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f7c:	f7ef f994 	bl	80002a8 <__aeabi_dsub>
 8010f80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f84:	f04f 0b01 	mov.w	fp, #1
 8010f88:	4658      	mov	r0, fp
 8010f8a:	b00b      	add	sp, #44	; 0x2c
 8010f8c:	ecbd 8b02 	vpop	{d8}
 8010f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f94:	a3a0      	add	r3, pc, #640	; (adr r3, 8011218 <__ieee754_rem_pio2+0x310>)
 8010f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f9a:	f7ef f985 	bl	80002a8 <__aeabi_dsub>
 8010f9e:	a3a0      	add	r3, pc, #640	; (adr r3, 8011220 <__ieee754_rem_pio2+0x318>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	f7ef f97e 	bl	80002a8 <__aeabi_dsub>
 8010fac:	4602      	mov	r2, r0
 8010fae:	460b      	mov	r3, r1
 8010fb0:	e9ca 2300 	strd	r2, r3, [sl]
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	f7ef f976 	bl	80002a8 <__aeabi_dsub>
 8010fbc:	a398      	add	r3, pc, #608	; (adr r3, 8011220 <__ieee754_rem_pio2+0x318>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	e7db      	b.n	8010f7c <__ieee754_rem_pio2+0x74>
 8010fc4:	f7ef f972 	bl	80002ac <__adddf3>
 8010fc8:	45b0      	cmp	r8, r6
 8010fca:	4604      	mov	r4, r0
 8010fcc:	460d      	mov	r5, r1
 8010fce:	d016      	beq.n	8010ffe <__ieee754_rem_pio2+0xf6>
 8010fd0:	a38f      	add	r3, pc, #572	; (adr r3, 8011210 <__ieee754_rem_pio2+0x308>)
 8010fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd6:	f7ef f969 	bl	80002ac <__adddf3>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	e9ca 2300 	strd	r2, r3, [sl]
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7ef f95f 	bl	80002a8 <__aeabi_dsub>
 8010fea:	a389      	add	r3, pc, #548	; (adr r3, 8011210 <__ieee754_rem_pio2+0x308>)
 8010fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff0:	f7ef f95c 	bl	80002ac <__adddf3>
 8010ff4:	f04f 3bff 	mov.w	fp, #4294967295
 8010ff8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010ffc:	e7c4      	b.n	8010f88 <__ieee754_rem_pio2+0x80>
 8010ffe:	a386      	add	r3, pc, #536	; (adr r3, 8011218 <__ieee754_rem_pio2+0x310>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	f7ef f952 	bl	80002ac <__adddf3>
 8011008:	a385      	add	r3, pc, #532	; (adr r3, 8011220 <__ieee754_rem_pio2+0x318>)
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	4604      	mov	r4, r0
 8011010:	460d      	mov	r5, r1
 8011012:	f7ef f94b 	bl	80002ac <__adddf3>
 8011016:	4602      	mov	r2, r0
 8011018:	460b      	mov	r3, r1
 801101a:	e9ca 2300 	strd	r2, r3, [sl]
 801101e:	4620      	mov	r0, r4
 8011020:	4629      	mov	r1, r5
 8011022:	f7ef f941 	bl	80002a8 <__aeabi_dsub>
 8011026:	a37e      	add	r3, pc, #504	; (adr r3, 8011220 <__ieee754_rem_pio2+0x318>)
 8011028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102c:	e7e0      	b.n	8010ff0 <__ieee754_rem_pio2+0xe8>
 801102e:	4b87      	ldr	r3, [pc, #540]	; (801124c <__ieee754_rem_pio2+0x344>)
 8011030:	4598      	cmp	r8, r3
 8011032:	f300 80d9 	bgt.w	80111e8 <__ieee754_rem_pio2+0x2e0>
 8011036:	f000 fe49 	bl	8011ccc <fabs>
 801103a:	ec55 4b10 	vmov	r4, r5, d0
 801103e:	ee10 0a10 	vmov	r0, s0
 8011042:	a379      	add	r3, pc, #484	; (adr r3, 8011228 <__ieee754_rem_pio2+0x320>)
 8011044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011048:	4629      	mov	r1, r5
 801104a:	f7ef fae5 	bl	8000618 <__aeabi_dmul>
 801104e:	4b80      	ldr	r3, [pc, #512]	; (8011250 <__ieee754_rem_pio2+0x348>)
 8011050:	2200      	movs	r2, #0
 8011052:	f7ef f92b 	bl	80002ac <__adddf3>
 8011056:	f7ef fd8f 	bl	8000b78 <__aeabi_d2iz>
 801105a:	4683      	mov	fp, r0
 801105c:	f7ef fa72 	bl	8000544 <__aeabi_i2d>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	ec43 2b18 	vmov	d8, r2, r3
 8011068:	a367      	add	r3, pc, #412	; (adr r3, 8011208 <__ieee754_rem_pio2+0x300>)
 801106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106e:	f7ef fad3 	bl	8000618 <__aeabi_dmul>
 8011072:	4602      	mov	r2, r0
 8011074:	460b      	mov	r3, r1
 8011076:	4620      	mov	r0, r4
 8011078:	4629      	mov	r1, r5
 801107a:	f7ef f915 	bl	80002a8 <__aeabi_dsub>
 801107e:	a364      	add	r3, pc, #400	; (adr r3, 8011210 <__ieee754_rem_pio2+0x308>)
 8011080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011084:	4606      	mov	r6, r0
 8011086:	460f      	mov	r7, r1
 8011088:	ec51 0b18 	vmov	r0, r1, d8
 801108c:	f7ef fac4 	bl	8000618 <__aeabi_dmul>
 8011090:	f1bb 0f1f 	cmp.w	fp, #31
 8011094:	4604      	mov	r4, r0
 8011096:	460d      	mov	r5, r1
 8011098:	dc0d      	bgt.n	80110b6 <__ieee754_rem_pio2+0x1ae>
 801109a:	4b6e      	ldr	r3, [pc, #440]	; (8011254 <__ieee754_rem_pio2+0x34c>)
 801109c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80110a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110a4:	4543      	cmp	r3, r8
 80110a6:	d006      	beq.n	80110b6 <__ieee754_rem_pio2+0x1ae>
 80110a8:	4622      	mov	r2, r4
 80110aa:	462b      	mov	r3, r5
 80110ac:	4630      	mov	r0, r6
 80110ae:	4639      	mov	r1, r7
 80110b0:	f7ef f8fa 	bl	80002a8 <__aeabi_dsub>
 80110b4:	e00f      	b.n	80110d6 <__ieee754_rem_pio2+0x1ce>
 80110b6:	462b      	mov	r3, r5
 80110b8:	4622      	mov	r2, r4
 80110ba:	4630      	mov	r0, r6
 80110bc:	4639      	mov	r1, r7
 80110be:	f7ef f8f3 	bl	80002a8 <__aeabi_dsub>
 80110c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80110c6:	9303      	str	r3, [sp, #12]
 80110c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80110d0:	f1b8 0f10 	cmp.w	r8, #16
 80110d4:	dc02      	bgt.n	80110dc <__ieee754_rem_pio2+0x1d4>
 80110d6:	e9ca 0100 	strd	r0, r1, [sl]
 80110da:	e039      	b.n	8011150 <__ieee754_rem_pio2+0x248>
 80110dc:	a34e      	add	r3, pc, #312	; (adr r3, 8011218 <__ieee754_rem_pio2+0x310>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	ec51 0b18 	vmov	r0, r1, d8
 80110e6:	f7ef fa97 	bl	8000618 <__aeabi_dmul>
 80110ea:	4604      	mov	r4, r0
 80110ec:	460d      	mov	r5, r1
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	4630      	mov	r0, r6
 80110f4:	4639      	mov	r1, r7
 80110f6:	f7ef f8d7 	bl	80002a8 <__aeabi_dsub>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	4680      	mov	r8, r0
 8011100:	4689      	mov	r9, r1
 8011102:	4630      	mov	r0, r6
 8011104:	4639      	mov	r1, r7
 8011106:	f7ef f8cf 	bl	80002a8 <__aeabi_dsub>
 801110a:	4622      	mov	r2, r4
 801110c:	462b      	mov	r3, r5
 801110e:	f7ef f8cb 	bl	80002a8 <__aeabi_dsub>
 8011112:	a343      	add	r3, pc, #268	; (adr r3, 8011220 <__ieee754_rem_pio2+0x318>)
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	4604      	mov	r4, r0
 801111a:	460d      	mov	r5, r1
 801111c:	ec51 0b18 	vmov	r0, r1, d8
 8011120:	f7ef fa7a 	bl	8000618 <__aeabi_dmul>
 8011124:	4622      	mov	r2, r4
 8011126:	462b      	mov	r3, r5
 8011128:	f7ef f8be 	bl	80002a8 <__aeabi_dsub>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4604      	mov	r4, r0
 8011132:	460d      	mov	r5, r1
 8011134:	4640      	mov	r0, r8
 8011136:	4649      	mov	r1, r9
 8011138:	f7ef f8b6 	bl	80002a8 <__aeabi_dsub>
 801113c:	9a03      	ldr	r2, [sp, #12]
 801113e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	2b31      	cmp	r3, #49	; 0x31
 8011146:	dc24      	bgt.n	8011192 <__ieee754_rem_pio2+0x28a>
 8011148:	e9ca 0100 	strd	r0, r1, [sl]
 801114c:	4646      	mov	r6, r8
 801114e:	464f      	mov	r7, r9
 8011150:	e9da 8900 	ldrd	r8, r9, [sl]
 8011154:	4630      	mov	r0, r6
 8011156:	4642      	mov	r2, r8
 8011158:	464b      	mov	r3, r9
 801115a:	4639      	mov	r1, r7
 801115c:	f7ef f8a4 	bl	80002a8 <__aeabi_dsub>
 8011160:	462b      	mov	r3, r5
 8011162:	4622      	mov	r2, r4
 8011164:	f7ef f8a0 	bl	80002a8 <__aeabi_dsub>
 8011168:	9b02      	ldr	r3, [sp, #8]
 801116a:	2b00      	cmp	r3, #0
 801116c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011170:	f6bf af0a 	bge.w	8010f88 <__ieee754_rem_pio2+0x80>
 8011174:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011178:	f8ca 3004 	str.w	r3, [sl, #4]
 801117c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011180:	f8ca 8000 	str.w	r8, [sl]
 8011184:	f8ca 0008 	str.w	r0, [sl, #8]
 8011188:	f8ca 300c 	str.w	r3, [sl, #12]
 801118c:	f1cb 0b00 	rsb	fp, fp, #0
 8011190:	e6fa      	b.n	8010f88 <__ieee754_rem_pio2+0x80>
 8011192:	a327      	add	r3, pc, #156	; (adr r3, 8011230 <__ieee754_rem_pio2+0x328>)
 8011194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011198:	ec51 0b18 	vmov	r0, r1, d8
 801119c:	f7ef fa3c 	bl	8000618 <__aeabi_dmul>
 80111a0:	4604      	mov	r4, r0
 80111a2:	460d      	mov	r5, r1
 80111a4:	4602      	mov	r2, r0
 80111a6:	460b      	mov	r3, r1
 80111a8:	4640      	mov	r0, r8
 80111aa:	4649      	mov	r1, r9
 80111ac:	f7ef f87c 	bl	80002a8 <__aeabi_dsub>
 80111b0:	4602      	mov	r2, r0
 80111b2:	460b      	mov	r3, r1
 80111b4:	4606      	mov	r6, r0
 80111b6:	460f      	mov	r7, r1
 80111b8:	4640      	mov	r0, r8
 80111ba:	4649      	mov	r1, r9
 80111bc:	f7ef f874 	bl	80002a8 <__aeabi_dsub>
 80111c0:	4622      	mov	r2, r4
 80111c2:	462b      	mov	r3, r5
 80111c4:	f7ef f870 	bl	80002a8 <__aeabi_dsub>
 80111c8:	a31b      	add	r3, pc, #108	; (adr r3, 8011238 <__ieee754_rem_pio2+0x330>)
 80111ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ce:	4604      	mov	r4, r0
 80111d0:	460d      	mov	r5, r1
 80111d2:	ec51 0b18 	vmov	r0, r1, d8
 80111d6:	f7ef fa1f 	bl	8000618 <__aeabi_dmul>
 80111da:	4622      	mov	r2, r4
 80111dc:	462b      	mov	r3, r5
 80111de:	f7ef f863 	bl	80002a8 <__aeabi_dsub>
 80111e2:	4604      	mov	r4, r0
 80111e4:	460d      	mov	r5, r1
 80111e6:	e75f      	b.n	80110a8 <__ieee754_rem_pio2+0x1a0>
 80111e8:	4b1b      	ldr	r3, [pc, #108]	; (8011258 <__ieee754_rem_pio2+0x350>)
 80111ea:	4598      	cmp	r8, r3
 80111ec:	dd36      	ble.n	801125c <__ieee754_rem_pio2+0x354>
 80111ee:	ee10 2a10 	vmov	r2, s0
 80111f2:	462b      	mov	r3, r5
 80111f4:	4620      	mov	r0, r4
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7ef f856 	bl	80002a8 <__aeabi_dsub>
 80111fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011200:	e9ca 0100 	strd	r0, r1, [sl]
 8011204:	e694      	b.n	8010f30 <__ieee754_rem_pio2+0x28>
 8011206:	bf00      	nop
 8011208:	54400000 	.word	0x54400000
 801120c:	3ff921fb 	.word	0x3ff921fb
 8011210:	1a626331 	.word	0x1a626331
 8011214:	3dd0b461 	.word	0x3dd0b461
 8011218:	1a600000 	.word	0x1a600000
 801121c:	3dd0b461 	.word	0x3dd0b461
 8011220:	2e037073 	.word	0x2e037073
 8011224:	3ba3198a 	.word	0x3ba3198a
 8011228:	6dc9c883 	.word	0x6dc9c883
 801122c:	3fe45f30 	.word	0x3fe45f30
 8011230:	2e000000 	.word	0x2e000000
 8011234:	3ba3198a 	.word	0x3ba3198a
 8011238:	252049c1 	.word	0x252049c1
 801123c:	397b839a 	.word	0x397b839a
 8011240:	3fe921fb 	.word	0x3fe921fb
 8011244:	4002d97b 	.word	0x4002d97b
 8011248:	3ff921fb 	.word	0x3ff921fb
 801124c:	413921fb 	.word	0x413921fb
 8011250:	3fe00000 	.word	0x3fe00000
 8011254:	08012780 	.word	0x08012780
 8011258:	7fefffff 	.word	0x7fefffff
 801125c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011260:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011264:	ee10 0a10 	vmov	r0, s0
 8011268:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801126c:	ee10 6a10 	vmov	r6, s0
 8011270:	460f      	mov	r7, r1
 8011272:	f7ef fc81 	bl	8000b78 <__aeabi_d2iz>
 8011276:	f7ef f965 	bl	8000544 <__aeabi_i2d>
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	4630      	mov	r0, r6
 8011280:	4639      	mov	r1, r7
 8011282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011286:	f7ef f80f 	bl	80002a8 <__aeabi_dsub>
 801128a:	4b23      	ldr	r3, [pc, #140]	; (8011318 <__ieee754_rem_pio2+0x410>)
 801128c:	2200      	movs	r2, #0
 801128e:	f7ef f9c3 	bl	8000618 <__aeabi_dmul>
 8011292:	460f      	mov	r7, r1
 8011294:	4606      	mov	r6, r0
 8011296:	f7ef fc6f 	bl	8000b78 <__aeabi_d2iz>
 801129a:	f7ef f953 	bl	8000544 <__aeabi_i2d>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	4630      	mov	r0, r6
 80112a4:	4639      	mov	r1, r7
 80112a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80112aa:	f7ee fffd 	bl	80002a8 <__aeabi_dsub>
 80112ae:	4b1a      	ldr	r3, [pc, #104]	; (8011318 <__ieee754_rem_pio2+0x410>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	f7ef f9b1 	bl	8000618 <__aeabi_dmul>
 80112b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80112ba:	ad04      	add	r5, sp, #16
 80112bc:	f04f 0803 	mov.w	r8, #3
 80112c0:	46a9      	mov	r9, r5
 80112c2:	2600      	movs	r6, #0
 80112c4:	2700      	movs	r7, #0
 80112c6:	4632      	mov	r2, r6
 80112c8:	463b      	mov	r3, r7
 80112ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80112ce:	46c3      	mov	fp, r8
 80112d0:	3d08      	subs	r5, #8
 80112d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80112d6:	f7ef fc07 	bl	8000ae8 <__aeabi_dcmpeq>
 80112da:	2800      	cmp	r0, #0
 80112dc:	d1f3      	bne.n	80112c6 <__ieee754_rem_pio2+0x3be>
 80112de:	4b0f      	ldr	r3, [pc, #60]	; (801131c <__ieee754_rem_pio2+0x414>)
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	2302      	movs	r3, #2
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	4622      	mov	r2, r4
 80112e8:	465b      	mov	r3, fp
 80112ea:	4651      	mov	r1, sl
 80112ec:	4648      	mov	r0, r9
 80112ee:	f000 f8df 	bl	80114b0 <__kernel_rem_pio2>
 80112f2:	9b02      	ldr	r3, [sp, #8]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	4683      	mov	fp, r0
 80112f8:	f6bf ae46 	bge.w	8010f88 <__ieee754_rem_pio2+0x80>
 80112fc:	e9da 2100 	ldrd	r2, r1, [sl]
 8011300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011304:	e9ca 2300 	strd	r2, r3, [sl]
 8011308:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801130c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011310:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011314:	e73a      	b.n	801118c <__ieee754_rem_pio2+0x284>
 8011316:	bf00      	nop
 8011318:	41700000 	.word	0x41700000
 801131c:	08012800 	.word	0x08012800

08011320 <__kernel_cos>:
 8011320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	ec57 6b10 	vmov	r6, r7, d0
 8011328:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801132c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011330:	ed8d 1b00 	vstr	d1, [sp]
 8011334:	da07      	bge.n	8011346 <__kernel_cos+0x26>
 8011336:	ee10 0a10 	vmov	r0, s0
 801133a:	4639      	mov	r1, r7
 801133c:	f7ef fc1c 	bl	8000b78 <__aeabi_d2iz>
 8011340:	2800      	cmp	r0, #0
 8011342:	f000 8088 	beq.w	8011456 <__kernel_cos+0x136>
 8011346:	4632      	mov	r2, r6
 8011348:	463b      	mov	r3, r7
 801134a:	4630      	mov	r0, r6
 801134c:	4639      	mov	r1, r7
 801134e:	f7ef f963 	bl	8000618 <__aeabi_dmul>
 8011352:	4b51      	ldr	r3, [pc, #324]	; (8011498 <__kernel_cos+0x178>)
 8011354:	2200      	movs	r2, #0
 8011356:	4604      	mov	r4, r0
 8011358:	460d      	mov	r5, r1
 801135a:	f7ef f95d 	bl	8000618 <__aeabi_dmul>
 801135e:	a340      	add	r3, pc, #256	; (adr r3, 8011460 <__kernel_cos+0x140>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	4682      	mov	sl, r0
 8011366:	468b      	mov	fp, r1
 8011368:	4620      	mov	r0, r4
 801136a:	4629      	mov	r1, r5
 801136c:	f7ef f954 	bl	8000618 <__aeabi_dmul>
 8011370:	a33d      	add	r3, pc, #244	; (adr r3, 8011468 <__kernel_cos+0x148>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	f7ee ff99 	bl	80002ac <__adddf3>
 801137a:	4622      	mov	r2, r4
 801137c:	462b      	mov	r3, r5
 801137e:	f7ef f94b 	bl	8000618 <__aeabi_dmul>
 8011382:	a33b      	add	r3, pc, #236	; (adr r3, 8011470 <__kernel_cos+0x150>)
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f7ee ff8e 	bl	80002a8 <__aeabi_dsub>
 801138c:	4622      	mov	r2, r4
 801138e:	462b      	mov	r3, r5
 8011390:	f7ef f942 	bl	8000618 <__aeabi_dmul>
 8011394:	a338      	add	r3, pc, #224	; (adr r3, 8011478 <__kernel_cos+0x158>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	f7ee ff87 	bl	80002ac <__adddf3>
 801139e:	4622      	mov	r2, r4
 80113a0:	462b      	mov	r3, r5
 80113a2:	f7ef f939 	bl	8000618 <__aeabi_dmul>
 80113a6:	a336      	add	r3, pc, #216	; (adr r3, 8011480 <__kernel_cos+0x160>)
 80113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ac:	f7ee ff7c 	bl	80002a8 <__aeabi_dsub>
 80113b0:	4622      	mov	r2, r4
 80113b2:	462b      	mov	r3, r5
 80113b4:	f7ef f930 	bl	8000618 <__aeabi_dmul>
 80113b8:	a333      	add	r3, pc, #204	; (adr r3, 8011488 <__kernel_cos+0x168>)
 80113ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113be:	f7ee ff75 	bl	80002ac <__adddf3>
 80113c2:	4622      	mov	r2, r4
 80113c4:	462b      	mov	r3, r5
 80113c6:	f7ef f927 	bl	8000618 <__aeabi_dmul>
 80113ca:	4622      	mov	r2, r4
 80113cc:	462b      	mov	r3, r5
 80113ce:	f7ef f923 	bl	8000618 <__aeabi_dmul>
 80113d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113d6:	4604      	mov	r4, r0
 80113d8:	460d      	mov	r5, r1
 80113da:	4630      	mov	r0, r6
 80113dc:	4639      	mov	r1, r7
 80113de:	f7ef f91b 	bl	8000618 <__aeabi_dmul>
 80113e2:	460b      	mov	r3, r1
 80113e4:	4602      	mov	r2, r0
 80113e6:	4629      	mov	r1, r5
 80113e8:	4620      	mov	r0, r4
 80113ea:	f7ee ff5d 	bl	80002a8 <__aeabi_dsub>
 80113ee:	4b2b      	ldr	r3, [pc, #172]	; (801149c <__kernel_cos+0x17c>)
 80113f0:	4598      	cmp	r8, r3
 80113f2:	4606      	mov	r6, r0
 80113f4:	460f      	mov	r7, r1
 80113f6:	dc10      	bgt.n	801141a <__kernel_cos+0xfa>
 80113f8:	4602      	mov	r2, r0
 80113fa:	460b      	mov	r3, r1
 80113fc:	4650      	mov	r0, sl
 80113fe:	4659      	mov	r1, fp
 8011400:	f7ee ff52 	bl	80002a8 <__aeabi_dsub>
 8011404:	460b      	mov	r3, r1
 8011406:	4926      	ldr	r1, [pc, #152]	; (80114a0 <__kernel_cos+0x180>)
 8011408:	4602      	mov	r2, r0
 801140a:	2000      	movs	r0, #0
 801140c:	f7ee ff4c 	bl	80002a8 <__aeabi_dsub>
 8011410:	ec41 0b10 	vmov	d0, r0, r1
 8011414:	b003      	add	sp, #12
 8011416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801141a:	4b22      	ldr	r3, [pc, #136]	; (80114a4 <__kernel_cos+0x184>)
 801141c:	4920      	ldr	r1, [pc, #128]	; (80114a0 <__kernel_cos+0x180>)
 801141e:	4598      	cmp	r8, r3
 8011420:	bfcc      	ite	gt
 8011422:	4d21      	ldrgt	r5, [pc, #132]	; (80114a8 <__kernel_cos+0x188>)
 8011424:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011428:	2400      	movs	r4, #0
 801142a:	4622      	mov	r2, r4
 801142c:	462b      	mov	r3, r5
 801142e:	2000      	movs	r0, #0
 8011430:	f7ee ff3a 	bl	80002a8 <__aeabi_dsub>
 8011434:	4622      	mov	r2, r4
 8011436:	4680      	mov	r8, r0
 8011438:	4689      	mov	r9, r1
 801143a:	462b      	mov	r3, r5
 801143c:	4650      	mov	r0, sl
 801143e:	4659      	mov	r1, fp
 8011440:	f7ee ff32 	bl	80002a8 <__aeabi_dsub>
 8011444:	4632      	mov	r2, r6
 8011446:	463b      	mov	r3, r7
 8011448:	f7ee ff2e 	bl	80002a8 <__aeabi_dsub>
 801144c:	4602      	mov	r2, r0
 801144e:	460b      	mov	r3, r1
 8011450:	4640      	mov	r0, r8
 8011452:	4649      	mov	r1, r9
 8011454:	e7da      	b.n	801140c <__kernel_cos+0xec>
 8011456:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011490 <__kernel_cos+0x170>
 801145a:	e7db      	b.n	8011414 <__kernel_cos+0xf4>
 801145c:	f3af 8000 	nop.w
 8011460:	be8838d4 	.word	0xbe8838d4
 8011464:	bda8fae9 	.word	0xbda8fae9
 8011468:	bdb4b1c4 	.word	0xbdb4b1c4
 801146c:	3e21ee9e 	.word	0x3e21ee9e
 8011470:	809c52ad 	.word	0x809c52ad
 8011474:	3e927e4f 	.word	0x3e927e4f
 8011478:	19cb1590 	.word	0x19cb1590
 801147c:	3efa01a0 	.word	0x3efa01a0
 8011480:	16c15177 	.word	0x16c15177
 8011484:	3f56c16c 	.word	0x3f56c16c
 8011488:	5555554c 	.word	0x5555554c
 801148c:	3fa55555 	.word	0x3fa55555
 8011490:	00000000 	.word	0x00000000
 8011494:	3ff00000 	.word	0x3ff00000
 8011498:	3fe00000 	.word	0x3fe00000
 801149c:	3fd33332 	.word	0x3fd33332
 80114a0:	3ff00000 	.word	0x3ff00000
 80114a4:	3fe90000 	.word	0x3fe90000
 80114a8:	3fd20000 	.word	0x3fd20000
 80114ac:	00000000 	.word	0x00000000

080114b0 <__kernel_rem_pio2>:
 80114b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b4:	ed2d 8b02 	vpush	{d8}
 80114b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80114bc:	f112 0f14 	cmn.w	r2, #20
 80114c0:	9308      	str	r3, [sp, #32]
 80114c2:	9101      	str	r1, [sp, #4]
 80114c4:	4bc4      	ldr	r3, [pc, #784]	; (80117d8 <__kernel_rem_pio2+0x328>)
 80114c6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80114c8:	900b      	str	r0, [sp, #44]	; 0x2c
 80114ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80114ce:	9302      	str	r3, [sp, #8]
 80114d0:	9b08      	ldr	r3, [sp, #32]
 80114d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80114d6:	bfa8      	it	ge
 80114d8:	1ed4      	subge	r4, r2, #3
 80114da:	9306      	str	r3, [sp, #24]
 80114dc:	bfb2      	itee	lt
 80114de:	2400      	movlt	r4, #0
 80114e0:	2318      	movge	r3, #24
 80114e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80114e6:	f06f 0317 	mvn.w	r3, #23
 80114ea:	fb04 3303 	mla	r3, r4, r3, r3
 80114ee:	eb03 0a02 	add.w	sl, r3, r2
 80114f2:	9b02      	ldr	r3, [sp, #8]
 80114f4:	9a06      	ldr	r2, [sp, #24]
 80114f6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80117c8 <__kernel_rem_pio2+0x318>
 80114fa:	eb03 0802 	add.w	r8, r3, r2
 80114fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011500:	1aa7      	subs	r7, r4, r2
 8011502:	ae22      	add	r6, sp, #136	; 0x88
 8011504:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011508:	2500      	movs	r5, #0
 801150a:	4545      	cmp	r5, r8
 801150c:	dd13      	ble.n	8011536 <__kernel_rem_pio2+0x86>
 801150e:	9b08      	ldr	r3, [sp, #32]
 8011510:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80117c8 <__kernel_rem_pio2+0x318>
 8011514:	aa22      	add	r2, sp, #136	; 0x88
 8011516:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801151a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801151e:	f04f 0800 	mov.w	r8, #0
 8011522:	9b02      	ldr	r3, [sp, #8]
 8011524:	4598      	cmp	r8, r3
 8011526:	dc2f      	bgt.n	8011588 <__kernel_rem_pio2+0xd8>
 8011528:	ed8d 8b04 	vstr	d8, [sp, #16]
 801152c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011530:	462f      	mov	r7, r5
 8011532:	2600      	movs	r6, #0
 8011534:	e01b      	b.n	801156e <__kernel_rem_pio2+0xbe>
 8011536:	42ef      	cmn	r7, r5
 8011538:	d407      	bmi.n	801154a <__kernel_rem_pio2+0x9a>
 801153a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801153e:	f7ef f801 	bl	8000544 <__aeabi_i2d>
 8011542:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011546:	3501      	adds	r5, #1
 8011548:	e7df      	b.n	801150a <__kernel_rem_pio2+0x5a>
 801154a:	ec51 0b18 	vmov	r0, r1, d8
 801154e:	e7f8      	b.n	8011542 <__kernel_rem_pio2+0x92>
 8011550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011554:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011558:	f7ef f85e 	bl	8000618 <__aeabi_dmul>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011564:	f7ee fea2 	bl	80002ac <__adddf3>
 8011568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801156c:	3601      	adds	r6, #1
 801156e:	9b06      	ldr	r3, [sp, #24]
 8011570:	429e      	cmp	r6, r3
 8011572:	f1a7 0708 	sub.w	r7, r7, #8
 8011576:	ddeb      	ble.n	8011550 <__kernel_rem_pio2+0xa0>
 8011578:	ed9d 7b04 	vldr	d7, [sp, #16]
 801157c:	f108 0801 	add.w	r8, r8, #1
 8011580:	ecab 7b02 	vstmia	fp!, {d7}
 8011584:	3508      	adds	r5, #8
 8011586:	e7cc      	b.n	8011522 <__kernel_rem_pio2+0x72>
 8011588:	9b02      	ldr	r3, [sp, #8]
 801158a:	aa0e      	add	r2, sp, #56	; 0x38
 801158c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011590:	930d      	str	r3, [sp, #52]	; 0x34
 8011592:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011594:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011598:	9c02      	ldr	r4, [sp, #8]
 801159a:	930c      	str	r3, [sp, #48]	; 0x30
 801159c:	00e3      	lsls	r3, r4, #3
 801159e:	930a      	str	r3, [sp, #40]	; 0x28
 80115a0:	ab9a      	add	r3, sp, #616	; 0x268
 80115a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80115aa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80115ae:	ab72      	add	r3, sp, #456	; 0x1c8
 80115b0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80115b4:	46c3      	mov	fp, r8
 80115b6:	46a1      	mov	r9, r4
 80115b8:	f1b9 0f00 	cmp.w	r9, #0
 80115bc:	f1a5 0508 	sub.w	r5, r5, #8
 80115c0:	dc77      	bgt.n	80116b2 <__kernel_rem_pio2+0x202>
 80115c2:	ec47 6b10 	vmov	d0, r6, r7
 80115c6:	4650      	mov	r0, sl
 80115c8:	f000 fc0a 	bl	8011de0 <scalbn>
 80115cc:	ec57 6b10 	vmov	r6, r7, d0
 80115d0:	2200      	movs	r2, #0
 80115d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80115d6:	ee10 0a10 	vmov	r0, s0
 80115da:	4639      	mov	r1, r7
 80115dc:	f7ef f81c 	bl	8000618 <__aeabi_dmul>
 80115e0:	ec41 0b10 	vmov	d0, r0, r1
 80115e4:	f000 fb7c 	bl	8011ce0 <floor>
 80115e8:	4b7c      	ldr	r3, [pc, #496]	; (80117dc <__kernel_rem_pio2+0x32c>)
 80115ea:	ec51 0b10 	vmov	r0, r1, d0
 80115ee:	2200      	movs	r2, #0
 80115f0:	f7ef f812 	bl	8000618 <__aeabi_dmul>
 80115f4:	4602      	mov	r2, r0
 80115f6:	460b      	mov	r3, r1
 80115f8:	4630      	mov	r0, r6
 80115fa:	4639      	mov	r1, r7
 80115fc:	f7ee fe54 	bl	80002a8 <__aeabi_dsub>
 8011600:	460f      	mov	r7, r1
 8011602:	4606      	mov	r6, r0
 8011604:	f7ef fab8 	bl	8000b78 <__aeabi_d2iz>
 8011608:	9004      	str	r0, [sp, #16]
 801160a:	f7ee ff9b 	bl	8000544 <__aeabi_i2d>
 801160e:	4602      	mov	r2, r0
 8011610:	460b      	mov	r3, r1
 8011612:	4630      	mov	r0, r6
 8011614:	4639      	mov	r1, r7
 8011616:	f7ee fe47 	bl	80002a8 <__aeabi_dsub>
 801161a:	f1ba 0f00 	cmp.w	sl, #0
 801161e:	4606      	mov	r6, r0
 8011620:	460f      	mov	r7, r1
 8011622:	dd6d      	ble.n	8011700 <__kernel_rem_pio2+0x250>
 8011624:	1e62      	subs	r2, r4, #1
 8011626:	ab0e      	add	r3, sp, #56	; 0x38
 8011628:	9d04      	ldr	r5, [sp, #16]
 801162a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801162e:	f1ca 0118 	rsb	r1, sl, #24
 8011632:	fa40 f301 	asr.w	r3, r0, r1
 8011636:	441d      	add	r5, r3
 8011638:	408b      	lsls	r3, r1
 801163a:	1ac0      	subs	r0, r0, r3
 801163c:	ab0e      	add	r3, sp, #56	; 0x38
 801163e:	9504      	str	r5, [sp, #16]
 8011640:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011644:	f1ca 0317 	rsb	r3, sl, #23
 8011648:	fa40 fb03 	asr.w	fp, r0, r3
 801164c:	f1bb 0f00 	cmp.w	fp, #0
 8011650:	dd65      	ble.n	801171e <__kernel_rem_pio2+0x26e>
 8011652:	9b04      	ldr	r3, [sp, #16]
 8011654:	2200      	movs	r2, #0
 8011656:	3301      	adds	r3, #1
 8011658:	9304      	str	r3, [sp, #16]
 801165a:	4615      	mov	r5, r2
 801165c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011660:	4294      	cmp	r4, r2
 8011662:	f300 809c 	bgt.w	801179e <__kernel_rem_pio2+0x2ee>
 8011666:	f1ba 0f00 	cmp.w	sl, #0
 801166a:	dd07      	ble.n	801167c <__kernel_rem_pio2+0x1cc>
 801166c:	f1ba 0f01 	cmp.w	sl, #1
 8011670:	f000 80c0 	beq.w	80117f4 <__kernel_rem_pio2+0x344>
 8011674:	f1ba 0f02 	cmp.w	sl, #2
 8011678:	f000 80c6 	beq.w	8011808 <__kernel_rem_pio2+0x358>
 801167c:	f1bb 0f02 	cmp.w	fp, #2
 8011680:	d14d      	bne.n	801171e <__kernel_rem_pio2+0x26e>
 8011682:	4632      	mov	r2, r6
 8011684:	463b      	mov	r3, r7
 8011686:	4956      	ldr	r1, [pc, #344]	; (80117e0 <__kernel_rem_pio2+0x330>)
 8011688:	2000      	movs	r0, #0
 801168a:	f7ee fe0d 	bl	80002a8 <__aeabi_dsub>
 801168e:	4606      	mov	r6, r0
 8011690:	460f      	mov	r7, r1
 8011692:	2d00      	cmp	r5, #0
 8011694:	d043      	beq.n	801171e <__kernel_rem_pio2+0x26e>
 8011696:	4650      	mov	r0, sl
 8011698:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80117d0 <__kernel_rem_pio2+0x320>
 801169c:	f000 fba0 	bl	8011de0 <scalbn>
 80116a0:	4630      	mov	r0, r6
 80116a2:	4639      	mov	r1, r7
 80116a4:	ec53 2b10 	vmov	r2, r3, d0
 80116a8:	f7ee fdfe 	bl	80002a8 <__aeabi_dsub>
 80116ac:	4606      	mov	r6, r0
 80116ae:	460f      	mov	r7, r1
 80116b0:	e035      	b.n	801171e <__kernel_rem_pio2+0x26e>
 80116b2:	4b4c      	ldr	r3, [pc, #304]	; (80117e4 <__kernel_rem_pio2+0x334>)
 80116b4:	2200      	movs	r2, #0
 80116b6:	4630      	mov	r0, r6
 80116b8:	4639      	mov	r1, r7
 80116ba:	f7ee ffad 	bl	8000618 <__aeabi_dmul>
 80116be:	f7ef fa5b 	bl	8000b78 <__aeabi_d2iz>
 80116c2:	f7ee ff3f 	bl	8000544 <__aeabi_i2d>
 80116c6:	4602      	mov	r2, r0
 80116c8:	460b      	mov	r3, r1
 80116ca:	ec43 2b18 	vmov	d8, r2, r3
 80116ce:	4b46      	ldr	r3, [pc, #280]	; (80117e8 <__kernel_rem_pio2+0x338>)
 80116d0:	2200      	movs	r2, #0
 80116d2:	f7ee ffa1 	bl	8000618 <__aeabi_dmul>
 80116d6:	4602      	mov	r2, r0
 80116d8:	460b      	mov	r3, r1
 80116da:	4630      	mov	r0, r6
 80116dc:	4639      	mov	r1, r7
 80116de:	f7ee fde3 	bl	80002a8 <__aeabi_dsub>
 80116e2:	f7ef fa49 	bl	8000b78 <__aeabi_d2iz>
 80116e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80116ea:	f84b 0b04 	str.w	r0, [fp], #4
 80116ee:	ec51 0b18 	vmov	r0, r1, d8
 80116f2:	f7ee fddb 	bl	80002ac <__adddf3>
 80116f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80116fa:	4606      	mov	r6, r0
 80116fc:	460f      	mov	r7, r1
 80116fe:	e75b      	b.n	80115b8 <__kernel_rem_pio2+0x108>
 8011700:	d106      	bne.n	8011710 <__kernel_rem_pio2+0x260>
 8011702:	1e63      	subs	r3, r4, #1
 8011704:	aa0e      	add	r2, sp, #56	; 0x38
 8011706:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801170a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801170e:	e79d      	b.n	801164c <__kernel_rem_pio2+0x19c>
 8011710:	4b36      	ldr	r3, [pc, #216]	; (80117ec <__kernel_rem_pio2+0x33c>)
 8011712:	2200      	movs	r2, #0
 8011714:	f7ef fa06 	bl	8000b24 <__aeabi_dcmpge>
 8011718:	2800      	cmp	r0, #0
 801171a:	d13d      	bne.n	8011798 <__kernel_rem_pio2+0x2e8>
 801171c:	4683      	mov	fp, r0
 801171e:	2200      	movs	r2, #0
 8011720:	2300      	movs	r3, #0
 8011722:	4630      	mov	r0, r6
 8011724:	4639      	mov	r1, r7
 8011726:	f7ef f9df 	bl	8000ae8 <__aeabi_dcmpeq>
 801172a:	2800      	cmp	r0, #0
 801172c:	f000 80c0 	beq.w	80118b0 <__kernel_rem_pio2+0x400>
 8011730:	1e65      	subs	r5, r4, #1
 8011732:	462b      	mov	r3, r5
 8011734:	2200      	movs	r2, #0
 8011736:	9902      	ldr	r1, [sp, #8]
 8011738:	428b      	cmp	r3, r1
 801173a:	da6c      	bge.n	8011816 <__kernel_rem_pio2+0x366>
 801173c:	2a00      	cmp	r2, #0
 801173e:	f000 8089 	beq.w	8011854 <__kernel_rem_pio2+0x3a4>
 8011742:	ab0e      	add	r3, sp, #56	; 0x38
 8011744:	f1aa 0a18 	sub.w	sl, sl, #24
 8011748:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 80ad 	beq.w	80118ac <__kernel_rem_pio2+0x3fc>
 8011752:	4650      	mov	r0, sl
 8011754:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80117d0 <__kernel_rem_pio2+0x320>
 8011758:	f000 fb42 	bl	8011de0 <scalbn>
 801175c:	ab9a      	add	r3, sp, #616	; 0x268
 801175e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011762:	ec57 6b10 	vmov	r6, r7, d0
 8011766:	00ec      	lsls	r4, r5, #3
 8011768:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801176c:	46aa      	mov	sl, r5
 801176e:	f1ba 0f00 	cmp.w	sl, #0
 8011772:	f280 80d6 	bge.w	8011922 <__kernel_rem_pio2+0x472>
 8011776:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80117c8 <__kernel_rem_pio2+0x318>
 801177a:	462e      	mov	r6, r5
 801177c:	2e00      	cmp	r6, #0
 801177e:	f2c0 8104 	blt.w	801198a <__kernel_rem_pio2+0x4da>
 8011782:	ab72      	add	r3, sp, #456	; 0x1c8
 8011784:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011788:	f8df a064 	ldr.w	sl, [pc, #100]	; 80117f0 <__kernel_rem_pio2+0x340>
 801178c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011790:	f04f 0800 	mov.w	r8, #0
 8011794:	1baf      	subs	r7, r5, r6
 8011796:	e0ea      	b.n	801196e <__kernel_rem_pio2+0x4be>
 8011798:	f04f 0b02 	mov.w	fp, #2
 801179c:	e759      	b.n	8011652 <__kernel_rem_pio2+0x1a2>
 801179e:	f8d8 3000 	ldr.w	r3, [r8]
 80117a2:	b955      	cbnz	r5, 80117ba <__kernel_rem_pio2+0x30a>
 80117a4:	b123      	cbz	r3, 80117b0 <__kernel_rem_pio2+0x300>
 80117a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80117aa:	f8c8 3000 	str.w	r3, [r8]
 80117ae:	2301      	movs	r3, #1
 80117b0:	3201      	adds	r2, #1
 80117b2:	f108 0804 	add.w	r8, r8, #4
 80117b6:	461d      	mov	r5, r3
 80117b8:	e752      	b.n	8011660 <__kernel_rem_pio2+0x1b0>
 80117ba:	1acb      	subs	r3, r1, r3
 80117bc:	f8c8 3000 	str.w	r3, [r8]
 80117c0:	462b      	mov	r3, r5
 80117c2:	e7f5      	b.n	80117b0 <__kernel_rem_pio2+0x300>
 80117c4:	f3af 8000 	nop.w
	...
 80117d4:	3ff00000 	.word	0x3ff00000
 80117d8:	08012948 	.word	0x08012948
 80117dc:	40200000 	.word	0x40200000
 80117e0:	3ff00000 	.word	0x3ff00000
 80117e4:	3e700000 	.word	0x3e700000
 80117e8:	41700000 	.word	0x41700000
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	08012908 	.word	0x08012908
 80117f4:	1e62      	subs	r2, r4, #1
 80117f6:	ab0e      	add	r3, sp, #56	; 0x38
 80117f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011800:	a90e      	add	r1, sp, #56	; 0x38
 8011802:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011806:	e739      	b.n	801167c <__kernel_rem_pio2+0x1cc>
 8011808:	1e62      	subs	r2, r4, #1
 801180a:	ab0e      	add	r3, sp, #56	; 0x38
 801180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011810:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011814:	e7f4      	b.n	8011800 <__kernel_rem_pio2+0x350>
 8011816:	a90e      	add	r1, sp, #56	; 0x38
 8011818:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801181c:	3b01      	subs	r3, #1
 801181e:	430a      	orrs	r2, r1
 8011820:	e789      	b.n	8011736 <__kernel_rem_pio2+0x286>
 8011822:	3301      	adds	r3, #1
 8011824:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011828:	2900      	cmp	r1, #0
 801182a:	d0fa      	beq.n	8011822 <__kernel_rem_pio2+0x372>
 801182c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801182e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011832:	446a      	add	r2, sp
 8011834:	3a98      	subs	r2, #152	; 0x98
 8011836:	920a      	str	r2, [sp, #40]	; 0x28
 8011838:	9a08      	ldr	r2, [sp, #32]
 801183a:	18e3      	adds	r3, r4, r3
 801183c:	18a5      	adds	r5, r4, r2
 801183e:	aa22      	add	r2, sp, #136	; 0x88
 8011840:	f104 0801 	add.w	r8, r4, #1
 8011844:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011848:	9304      	str	r3, [sp, #16]
 801184a:	9b04      	ldr	r3, [sp, #16]
 801184c:	4543      	cmp	r3, r8
 801184e:	da04      	bge.n	801185a <__kernel_rem_pio2+0x3aa>
 8011850:	461c      	mov	r4, r3
 8011852:	e6a3      	b.n	801159c <__kernel_rem_pio2+0xec>
 8011854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011856:	2301      	movs	r3, #1
 8011858:	e7e4      	b.n	8011824 <__kernel_rem_pio2+0x374>
 801185a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801185c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011860:	f7ee fe70 	bl	8000544 <__aeabi_i2d>
 8011864:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801186a:	46ab      	mov	fp, r5
 801186c:	461c      	mov	r4, r3
 801186e:	f04f 0900 	mov.w	r9, #0
 8011872:	2600      	movs	r6, #0
 8011874:	2700      	movs	r7, #0
 8011876:	9b06      	ldr	r3, [sp, #24]
 8011878:	4599      	cmp	r9, r3
 801187a:	dd06      	ble.n	801188a <__kernel_rem_pio2+0x3da>
 801187c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801187e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011882:	f108 0801 	add.w	r8, r8, #1
 8011886:	930a      	str	r3, [sp, #40]	; 0x28
 8011888:	e7df      	b.n	801184a <__kernel_rem_pio2+0x39a>
 801188a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801188e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011892:	f7ee fec1 	bl	8000618 <__aeabi_dmul>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	4630      	mov	r0, r6
 801189c:	4639      	mov	r1, r7
 801189e:	f7ee fd05 	bl	80002ac <__adddf3>
 80118a2:	f109 0901 	add.w	r9, r9, #1
 80118a6:	4606      	mov	r6, r0
 80118a8:	460f      	mov	r7, r1
 80118aa:	e7e4      	b.n	8011876 <__kernel_rem_pio2+0x3c6>
 80118ac:	3d01      	subs	r5, #1
 80118ae:	e748      	b.n	8011742 <__kernel_rem_pio2+0x292>
 80118b0:	ec47 6b10 	vmov	d0, r6, r7
 80118b4:	f1ca 0000 	rsb	r0, sl, #0
 80118b8:	f000 fa92 	bl	8011de0 <scalbn>
 80118bc:	ec57 6b10 	vmov	r6, r7, d0
 80118c0:	4ba0      	ldr	r3, [pc, #640]	; (8011b44 <__kernel_rem_pio2+0x694>)
 80118c2:	ee10 0a10 	vmov	r0, s0
 80118c6:	2200      	movs	r2, #0
 80118c8:	4639      	mov	r1, r7
 80118ca:	f7ef f92b 	bl	8000b24 <__aeabi_dcmpge>
 80118ce:	b1f8      	cbz	r0, 8011910 <__kernel_rem_pio2+0x460>
 80118d0:	4b9d      	ldr	r3, [pc, #628]	; (8011b48 <__kernel_rem_pio2+0x698>)
 80118d2:	2200      	movs	r2, #0
 80118d4:	4630      	mov	r0, r6
 80118d6:	4639      	mov	r1, r7
 80118d8:	f7ee fe9e 	bl	8000618 <__aeabi_dmul>
 80118dc:	f7ef f94c 	bl	8000b78 <__aeabi_d2iz>
 80118e0:	4680      	mov	r8, r0
 80118e2:	f7ee fe2f 	bl	8000544 <__aeabi_i2d>
 80118e6:	4b97      	ldr	r3, [pc, #604]	; (8011b44 <__kernel_rem_pio2+0x694>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	f7ee fe95 	bl	8000618 <__aeabi_dmul>
 80118ee:	460b      	mov	r3, r1
 80118f0:	4602      	mov	r2, r0
 80118f2:	4639      	mov	r1, r7
 80118f4:	4630      	mov	r0, r6
 80118f6:	f7ee fcd7 	bl	80002a8 <__aeabi_dsub>
 80118fa:	f7ef f93d 	bl	8000b78 <__aeabi_d2iz>
 80118fe:	1c65      	adds	r5, r4, #1
 8011900:	ab0e      	add	r3, sp, #56	; 0x38
 8011902:	f10a 0a18 	add.w	sl, sl, #24
 8011906:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801190a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801190e:	e720      	b.n	8011752 <__kernel_rem_pio2+0x2a2>
 8011910:	4630      	mov	r0, r6
 8011912:	4639      	mov	r1, r7
 8011914:	f7ef f930 	bl	8000b78 <__aeabi_d2iz>
 8011918:	ab0e      	add	r3, sp, #56	; 0x38
 801191a:	4625      	mov	r5, r4
 801191c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011920:	e717      	b.n	8011752 <__kernel_rem_pio2+0x2a2>
 8011922:	ab0e      	add	r3, sp, #56	; 0x38
 8011924:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011928:	f7ee fe0c 	bl	8000544 <__aeabi_i2d>
 801192c:	4632      	mov	r2, r6
 801192e:	463b      	mov	r3, r7
 8011930:	f7ee fe72 	bl	8000618 <__aeabi_dmul>
 8011934:	4b84      	ldr	r3, [pc, #528]	; (8011b48 <__kernel_rem_pio2+0x698>)
 8011936:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801193a:	2200      	movs	r2, #0
 801193c:	4630      	mov	r0, r6
 801193e:	4639      	mov	r1, r7
 8011940:	f7ee fe6a 	bl	8000618 <__aeabi_dmul>
 8011944:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011948:	4606      	mov	r6, r0
 801194a:	460f      	mov	r7, r1
 801194c:	e70f      	b.n	801176e <__kernel_rem_pio2+0x2be>
 801194e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011952:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011956:	f7ee fe5f 	bl	8000618 <__aeabi_dmul>
 801195a:	4602      	mov	r2, r0
 801195c:	460b      	mov	r3, r1
 801195e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011962:	f7ee fca3 	bl	80002ac <__adddf3>
 8011966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801196a:	f108 0801 	add.w	r8, r8, #1
 801196e:	9b02      	ldr	r3, [sp, #8]
 8011970:	4598      	cmp	r8, r3
 8011972:	dc01      	bgt.n	8011978 <__kernel_rem_pio2+0x4c8>
 8011974:	45b8      	cmp	r8, r7
 8011976:	ddea      	ble.n	801194e <__kernel_rem_pio2+0x49e>
 8011978:	ed9d 7b06 	vldr	d7, [sp, #24]
 801197c:	ab4a      	add	r3, sp, #296	; 0x128
 801197e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011982:	ed87 7b00 	vstr	d7, [r7]
 8011986:	3e01      	subs	r6, #1
 8011988:	e6f8      	b.n	801177c <__kernel_rem_pio2+0x2cc>
 801198a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801198c:	2b02      	cmp	r3, #2
 801198e:	dc0b      	bgt.n	80119a8 <__kernel_rem_pio2+0x4f8>
 8011990:	2b00      	cmp	r3, #0
 8011992:	dc35      	bgt.n	8011a00 <__kernel_rem_pio2+0x550>
 8011994:	d059      	beq.n	8011a4a <__kernel_rem_pio2+0x59a>
 8011996:	9b04      	ldr	r3, [sp, #16]
 8011998:	f003 0007 	and.w	r0, r3, #7
 801199c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80119a0:	ecbd 8b02 	vpop	{d8}
 80119a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80119aa:	2b03      	cmp	r3, #3
 80119ac:	d1f3      	bne.n	8011996 <__kernel_rem_pio2+0x4e6>
 80119ae:	ab4a      	add	r3, sp, #296	; 0x128
 80119b0:	4423      	add	r3, r4
 80119b2:	9306      	str	r3, [sp, #24]
 80119b4:	461c      	mov	r4, r3
 80119b6:	469a      	mov	sl, r3
 80119b8:	9502      	str	r5, [sp, #8]
 80119ba:	9b02      	ldr	r3, [sp, #8]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f1aa 0a08 	sub.w	sl, sl, #8
 80119c2:	dc6b      	bgt.n	8011a9c <__kernel_rem_pio2+0x5ec>
 80119c4:	46aa      	mov	sl, r5
 80119c6:	f1ba 0f01 	cmp.w	sl, #1
 80119ca:	f1a4 0408 	sub.w	r4, r4, #8
 80119ce:	f300 8085 	bgt.w	8011adc <__kernel_rem_pio2+0x62c>
 80119d2:	9c06      	ldr	r4, [sp, #24]
 80119d4:	2000      	movs	r0, #0
 80119d6:	3408      	adds	r4, #8
 80119d8:	2100      	movs	r1, #0
 80119da:	2d01      	cmp	r5, #1
 80119dc:	f300 809d 	bgt.w	8011b1a <__kernel_rem_pio2+0x66a>
 80119e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80119e4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80119e8:	f1bb 0f00 	cmp.w	fp, #0
 80119ec:	f040 809b 	bne.w	8011b26 <__kernel_rem_pio2+0x676>
 80119f0:	9b01      	ldr	r3, [sp, #4]
 80119f2:	e9c3 5600 	strd	r5, r6, [r3]
 80119f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80119fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80119fe:	e7ca      	b.n	8011996 <__kernel_rem_pio2+0x4e6>
 8011a00:	3408      	adds	r4, #8
 8011a02:	ab4a      	add	r3, sp, #296	; 0x128
 8011a04:	441c      	add	r4, r3
 8011a06:	462e      	mov	r6, r5
 8011a08:	2000      	movs	r0, #0
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	2e00      	cmp	r6, #0
 8011a0e:	da36      	bge.n	8011a7e <__kernel_rem_pio2+0x5ce>
 8011a10:	f1bb 0f00 	cmp.w	fp, #0
 8011a14:	d039      	beq.n	8011a8a <__kernel_rem_pio2+0x5da>
 8011a16:	4602      	mov	r2, r0
 8011a18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a1c:	9c01      	ldr	r4, [sp, #4]
 8011a1e:	e9c4 2300 	strd	r2, r3, [r4]
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011a2a:	f7ee fc3d 	bl	80002a8 <__aeabi_dsub>
 8011a2e:	ae4c      	add	r6, sp, #304	; 0x130
 8011a30:	2401      	movs	r4, #1
 8011a32:	42a5      	cmp	r5, r4
 8011a34:	da2c      	bge.n	8011a90 <__kernel_rem_pio2+0x5e0>
 8011a36:	f1bb 0f00 	cmp.w	fp, #0
 8011a3a:	d002      	beq.n	8011a42 <__kernel_rem_pio2+0x592>
 8011a3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a40:	4619      	mov	r1, r3
 8011a42:	9b01      	ldr	r3, [sp, #4]
 8011a44:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011a48:	e7a5      	b.n	8011996 <__kernel_rem_pio2+0x4e6>
 8011a4a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011a4e:	eb0d 0403 	add.w	r4, sp, r3
 8011a52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011a56:	2000      	movs	r0, #0
 8011a58:	2100      	movs	r1, #0
 8011a5a:	2d00      	cmp	r5, #0
 8011a5c:	da09      	bge.n	8011a72 <__kernel_rem_pio2+0x5c2>
 8011a5e:	f1bb 0f00 	cmp.w	fp, #0
 8011a62:	d002      	beq.n	8011a6a <__kernel_rem_pio2+0x5ba>
 8011a64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a68:	4619      	mov	r1, r3
 8011a6a:	9b01      	ldr	r3, [sp, #4]
 8011a6c:	e9c3 0100 	strd	r0, r1, [r3]
 8011a70:	e791      	b.n	8011996 <__kernel_rem_pio2+0x4e6>
 8011a72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011a76:	f7ee fc19 	bl	80002ac <__adddf3>
 8011a7a:	3d01      	subs	r5, #1
 8011a7c:	e7ed      	b.n	8011a5a <__kernel_rem_pio2+0x5aa>
 8011a7e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011a82:	f7ee fc13 	bl	80002ac <__adddf3>
 8011a86:	3e01      	subs	r6, #1
 8011a88:	e7c0      	b.n	8011a0c <__kernel_rem_pio2+0x55c>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	e7c5      	b.n	8011a1c <__kernel_rem_pio2+0x56c>
 8011a90:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011a94:	f7ee fc0a 	bl	80002ac <__adddf3>
 8011a98:	3401      	adds	r4, #1
 8011a9a:	e7ca      	b.n	8011a32 <__kernel_rem_pio2+0x582>
 8011a9c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011aa0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011aa4:	9b02      	ldr	r3, [sp, #8]
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	9302      	str	r3, [sp, #8]
 8011aaa:	4632      	mov	r2, r6
 8011aac:	463b      	mov	r3, r7
 8011aae:	4640      	mov	r0, r8
 8011ab0:	4649      	mov	r1, r9
 8011ab2:	f7ee fbfb 	bl	80002ac <__adddf3>
 8011ab6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011aba:	4602      	mov	r2, r0
 8011abc:	460b      	mov	r3, r1
 8011abe:	4640      	mov	r0, r8
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	f7ee fbf1 	bl	80002a8 <__aeabi_dsub>
 8011ac6:	4632      	mov	r2, r6
 8011ac8:	463b      	mov	r3, r7
 8011aca:	f7ee fbef 	bl	80002ac <__adddf3>
 8011ace:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011ad2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ad6:	ed8a 7b00 	vstr	d7, [sl]
 8011ada:	e76e      	b.n	80119ba <__kernel_rem_pio2+0x50a>
 8011adc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011ae0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4632      	mov	r2, r6
 8011ae8:	463b      	mov	r3, r7
 8011aea:	4649      	mov	r1, r9
 8011aec:	f7ee fbde 	bl	80002ac <__adddf3>
 8011af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	4640      	mov	r0, r8
 8011afa:	4649      	mov	r1, r9
 8011afc:	f7ee fbd4 	bl	80002a8 <__aeabi_dsub>
 8011b00:	4632      	mov	r2, r6
 8011b02:	463b      	mov	r3, r7
 8011b04:	f7ee fbd2 	bl	80002ac <__adddf3>
 8011b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011b10:	ed84 7b00 	vstr	d7, [r4]
 8011b14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b18:	e755      	b.n	80119c6 <__kernel_rem_pio2+0x516>
 8011b1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011b1e:	f7ee fbc5 	bl	80002ac <__adddf3>
 8011b22:	3d01      	subs	r5, #1
 8011b24:	e759      	b.n	80119da <__kernel_rem_pio2+0x52a>
 8011b26:	9b01      	ldr	r3, [sp, #4]
 8011b28:	9a01      	ldr	r2, [sp, #4]
 8011b2a:	601d      	str	r5, [r3, #0]
 8011b2c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011b30:	605c      	str	r4, [r3, #4]
 8011b32:	609f      	str	r7, [r3, #8]
 8011b34:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011b38:	60d3      	str	r3, [r2, #12]
 8011b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b3e:	6110      	str	r0, [r2, #16]
 8011b40:	6153      	str	r3, [r2, #20]
 8011b42:	e728      	b.n	8011996 <__kernel_rem_pio2+0x4e6>
 8011b44:	41700000 	.word	0x41700000
 8011b48:	3e700000 	.word	0x3e700000
 8011b4c:	00000000 	.word	0x00000000

08011b50 <__kernel_sin>:
 8011b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b54:	ed2d 8b04 	vpush	{d8-d9}
 8011b58:	eeb0 8a41 	vmov.f32	s16, s2
 8011b5c:	eef0 8a61 	vmov.f32	s17, s3
 8011b60:	ec55 4b10 	vmov	r4, r5, d0
 8011b64:	b083      	sub	sp, #12
 8011b66:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b6a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011b6e:	9001      	str	r0, [sp, #4]
 8011b70:	da06      	bge.n	8011b80 <__kernel_sin+0x30>
 8011b72:	ee10 0a10 	vmov	r0, s0
 8011b76:	4629      	mov	r1, r5
 8011b78:	f7ee fffe 	bl	8000b78 <__aeabi_d2iz>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d051      	beq.n	8011c24 <__kernel_sin+0xd4>
 8011b80:	4622      	mov	r2, r4
 8011b82:	462b      	mov	r3, r5
 8011b84:	4620      	mov	r0, r4
 8011b86:	4629      	mov	r1, r5
 8011b88:	f7ee fd46 	bl	8000618 <__aeabi_dmul>
 8011b8c:	4682      	mov	sl, r0
 8011b8e:	468b      	mov	fp, r1
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	4620      	mov	r0, r4
 8011b96:	4629      	mov	r1, r5
 8011b98:	f7ee fd3e 	bl	8000618 <__aeabi_dmul>
 8011b9c:	a341      	add	r3, pc, #260	; (adr r3, 8011ca4 <__kernel_sin+0x154>)
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	4680      	mov	r8, r0
 8011ba4:	4689      	mov	r9, r1
 8011ba6:	4650      	mov	r0, sl
 8011ba8:	4659      	mov	r1, fp
 8011baa:	f7ee fd35 	bl	8000618 <__aeabi_dmul>
 8011bae:	a33f      	add	r3, pc, #252	; (adr r3, 8011cac <__kernel_sin+0x15c>)
 8011bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb4:	f7ee fb78 	bl	80002a8 <__aeabi_dsub>
 8011bb8:	4652      	mov	r2, sl
 8011bba:	465b      	mov	r3, fp
 8011bbc:	f7ee fd2c 	bl	8000618 <__aeabi_dmul>
 8011bc0:	a33c      	add	r3, pc, #240	; (adr r3, 8011cb4 <__kernel_sin+0x164>)
 8011bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc6:	f7ee fb71 	bl	80002ac <__adddf3>
 8011bca:	4652      	mov	r2, sl
 8011bcc:	465b      	mov	r3, fp
 8011bce:	f7ee fd23 	bl	8000618 <__aeabi_dmul>
 8011bd2:	a33a      	add	r3, pc, #232	; (adr r3, 8011cbc <__kernel_sin+0x16c>)
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	f7ee fb66 	bl	80002a8 <__aeabi_dsub>
 8011bdc:	4652      	mov	r2, sl
 8011bde:	465b      	mov	r3, fp
 8011be0:	f7ee fd1a 	bl	8000618 <__aeabi_dmul>
 8011be4:	a337      	add	r3, pc, #220	; (adr r3, 8011cc4 <__kernel_sin+0x174>)
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	f7ee fb5f 	bl	80002ac <__adddf3>
 8011bee:	9b01      	ldr	r3, [sp, #4]
 8011bf0:	4606      	mov	r6, r0
 8011bf2:	460f      	mov	r7, r1
 8011bf4:	b9eb      	cbnz	r3, 8011c32 <__kernel_sin+0xe2>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	4650      	mov	r0, sl
 8011bfc:	4659      	mov	r1, fp
 8011bfe:	f7ee fd0b 	bl	8000618 <__aeabi_dmul>
 8011c02:	a325      	add	r3, pc, #148	; (adr r3, 8011c98 <__kernel_sin+0x148>)
 8011c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c08:	f7ee fb4e 	bl	80002a8 <__aeabi_dsub>
 8011c0c:	4642      	mov	r2, r8
 8011c0e:	464b      	mov	r3, r9
 8011c10:	f7ee fd02 	bl	8000618 <__aeabi_dmul>
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	4620      	mov	r0, r4
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	f7ee fb46 	bl	80002ac <__adddf3>
 8011c20:	4604      	mov	r4, r0
 8011c22:	460d      	mov	r5, r1
 8011c24:	ec45 4b10 	vmov	d0, r4, r5
 8011c28:	b003      	add	sp, #12
 8011c2a:	ecbd 8b04 	vpop	{d8-d9}
 8011c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c32:	4b1b      	ldr	r3, [pc, #108]	; (8011ca0 <__kernel_sin+0x150>)
 8011c34:	ec51 0b18 	vmov	r0, r1, d8
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f7ee fced 	bl	8000618 <__aeabi_dmul>
 8011c3e:	4632      	mov	r2, r6
 8011c40:	ec41 0b19 	vmov	d9, r0, r1
 8011c44:	463b      	mov	r3, r7
 8011c46:	4640      	mov	r0, r8
 8011c48:	4649      	mov	r1, r9
 8011c4a:	f7ee fce5 	bl	8000618 <__aeabi_dmul>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	ec51 0b19 	vmov	r0, r1, d9
 8011c56:	f7ee fb27 	bl	80002a8 <__aeabi_dsub>
 8011c5a:	4652      	mov	r2, sl
 8011c5c:	465b      	mov	r3, fp
 8011c5e:	f7ee fcdb 	bl	8000618 <__aeabi_dmul>
 8011c62:	ec53 2b18 	vmov	r2, r3, d8
 8011c66:	f7ee fb1f 	bl	80002a8 <__aeabi_dsub>
 8011c6a:	a30b      	add	r3, pc, #44	; (adr r3, 8011c98 <__kernel_sin+0x148>)
 8011c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c70:	4606      	mov	r6, r0
 8011c72:	460f      	mov	r7, r1
 8011c74:	4640      	mov	r0, r8
 8011c76:	4649      	mov	r1, r9
 8011c78:	f7ee fcce 	bl	8000618 <__aeabi_dmul>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4630      	mov	r0, r6
 8011c82:	4639      	mov	r1, r7
 8011c84:	f7ee fb12 	bl	80002ac <__adddf3>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f7ee fb0a 	bl	80002a8 <__aeabi_dsub>
 8011c94:	e7c4      	b.n	8011c20 <__kernel_sin+0xd0>
 8011c96:	bf00      	nop
 8011c98:	55555549 	.word	0x55555549
 8011c9c:	3fc55555 	.word	0x3fc55555
 8011ca0:	3fe00000 	.word	0x3fe00000
 8011ca4:	5acfd57c 	.word	0x5acfd57c
 8011ca8:	3de5d93a 	.word	0x3de5d93a
 8011cac:	8a2b9ceb 	.word	0x8a2b9ceb
 8011cb0:	3e5ae5e6 	.word	0x3e5ae5e6
 8011cb4:	57b1fe7d 	.word	0x57b1fe7d
 8011cb8:	3ec71de3 	.word	0x3ec71de3
 8011cbc:	19c161d5 	.word	0x19c161d5
 8011cc0:	3f2a01a0 	.word	0x3f2a01a0
 8011cc4:	1110f8a6 	.word	0x1110f8a6
 8011cc8:	3f811111 	.word	0x3f811111

08011ccc <fabs>:
 8011ccc:	ec51 0b10 	vmov	r0, r1, d0
 8011cd0:	ee10 2a10 	vmov	r2, s0
 8011cd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011cd8:	ec43 2b10 	vmov	d0, r2, r3
 8011cdc:	4770      	bx	lr
	...

08011ce0 <floor>:
 8011ce0:	ec51 0b10 	vmov	r0, r1, d0
 8011ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011cec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011cf0:	2e13      	cmp	r6, #19
 8011cf2:	ee10 5a10 	vmov	r5, s0
 8011cf6:	ee10 8a10 	vmov	r8, s0
 8011cfa:	460c      	mov	r4, r1
 8011cfc:	dc32      	bgt.n	8011d64 <floor+0x84>
 8011cfe:	2e00      	cmp	r6, #0
 8011d00:	da14      	bge.n	8011d2c <floor+0x4c>
 8011d02:	a333      	add	r3, pc, #204	; (adr r3, 8011dd0 <floor+0xf0>)
 8011d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d08:	f7ee fad0 	bl	80002ac <__adddf3>
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	2300      	movs	r3, #0
 8011d10:	f7ee ff12 	bl	8000b38 <__aeabi_dcmpgt>
 8011d14:	b138      	cbz	r0, 8011d26 <floor+0x46>
 8011d16:	2c00      	cmp	r4, #0
 8011d18:	da57      	bge.n	8011dca <floor+0xea>
 8011d1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d1e:	431d      	orrs	r5, r3
 8011d20:	d001      	beq.n	8011d26 <floor+0x46>
 8011d22:	4c2d      	ldr	r4, [pc, #180]	; (8011dd8 <floor+0xf8>)
 8011d24:	2500      	movs	r5, #0
 8011d26:	4621      	mov	r1, r4
 8011d28:	4628      	mov	r0, r5
 8011d2a:	e025      	b.n	8011d78 <floor+0x98>
 8011d2c:	4f2b      	ldr	r7, [pc, #172]	; (8011ddc <floor+0xfc>)
 8011d2e:	4137      	asrs	r7, r6
 8011d30:	ea01 0307 	and.w	r3, r1, r7
 8011d34:	4303      	orrs	r3, r0
 8011d36:	d01f      	beq.n	8011d78 <floor+0x98>
 8011d38:	a325      	add	r3, pc, #148	; (adr r3, 8011dd0 <floor+0xf0>)
 8011d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3e:	f7ee fab5 	bl	80002ac <__adddf3>
 8011d42:	2200      	movs	r2, #0
 8011d44:	2300      	movs	r3, #0
 8011d46:	f7ee fef7 	bl	8000b38 <__aeabi_dcmpgt>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	d0eb      	beq.n	8011d26 <floor+0x46>
 8011d4e:	2c00      	cmp	r4, #0
 8011d50:	bfbe      	ittt	lt
 8011d52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011d56:	fa43 f606 	asrlt.w	r6, r3, r6
 8011d5a:	19a4      	addlt	r4, r4, r6
 8011d5c:	ea24 0407 	bic.w	r4, r4, r7
 8011d60:	2500      	movs	r5, #0
 8011d62:	e7e0      	b.n	8011d26 <floor+0x46>
 8011d64:	2e33      	cmp	r6, #51	; 0x33
 8011d66:	dd0b      	ble.n	8011d80 <floor+0xa0>
 8011d68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011d6c:	d104      	bne.n	8011d78 <floor+0x98>
 8011d6e:	ee10 2a10 	vmov	r2, s0
 8011d72:	460b      	mov	r3, r1
 8011d74:	f7ee fa9a 	bl	80002ac <__adddf3>
 8011d78:	ec41 0b10 	vmov	d0, r0, r1
 8011d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011d84:	f04f 33ff 	mov.w	r3, #4294967295
 8011d88:	fa23 f707 	lsr.w	r7, r3, r7
 8011d8c:	4207      	tst	r7, r0
 8011d8e:	d0f3      	beq.n	8011d78 <floor+0x98>
 8011d90:	a30f      	add	r3, pc, #60	; (adr r3, 8011dd0 <floor+0xf0>)
 8011d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d96:	f7ee fa89 	bl	80002ac <__adddf3>
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f7ee fecb 	bl	8000b38 <__aeabi_dcmpgt>
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d0bf      	beq.n	8011d26 <floor+0x46>
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	da02      	bge.n	8011db0 <floor+0xd0>
 8011daa:	2e14      	cmp	r6, #20
 8011dac:	d103      	bne.n	8011db6 <floor+0xd6>
 8011dae:	3401      	adds	r4, #1
 8011db0:	ea25 0507 	bic.w	r5, r5, r7
 8011db4:	e7b7      	b.n	8011d26 <floor+0x46>
 8011db6:	2301      	movs	r3, #1
 8011db8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011dbc:	fa03 f606 	lsl.w	r6, r3, r6
 8011dc0:	4435      	add	r5, r6
 8011dc2:	4545      	cmp	r5, r8
 8011dc4:	bf38      	it	cc
 8011dc6:	18e4      	addcc	r4, r4, r3
 8011dc8:	e7f2      	b.n	8011db0 <floor+0xd0>
 8011dca:	2500      	movs	r5, #0
 8011dcc:	462c      	mov	r4, r5
 8011dce:	e7aa      	b.n	8011d26 <floor+0x46>
 8011dd0:	8800759c 	.word	0x8800759c
 8011dd4:	7e37e43c 	.word	0x7e37e43c
 8011dd8:	bff00000 	.word	0xbff00000
 8011ddc:	000fffff 	.word	0x000fffff

08011de0 <scalbn>:
 8011de0:	b570      	push	{r4, r5, r6, lr}
 8011de2:	ec55 4b10 	vmov	r4, r5, d0
 8011de6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011dea:	4606      	mov	r6, r0
 8011dec:	462b      	mov	r3, r5
 8011dee:	b99a      	cbnz	r2, 8011e18 <scalbn+0x38>
 8011df0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011df4:	4323      	orrs	r3, r4
 8011df6:	d036      	beq.n	8011e66 <scalbn+0x86>
 8011df8:	4b39      	ldr	r3, [pc, #228]	; (8011ee0 <scalbn+0x100>)
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	ee10 0a10 	vmov	r0, s0
 8011e00:	2200      	movs	r2, #0
 8011e02:	f7ee fc09 	bl	8000618 <__aeabi_dmul>
 8011e06:	4b37      	ldr	r3, [pc, #220]	; (8011ee4 <scalbn+0x104>)
 8011e08:	429e      	cmp	r6, r3
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	da10      	bge.n	8011e32 <scalbn+0x52>
 8011e10:	a32b      	add	r3, pc, #172	; (adr r3, 8011ec0 <scalbn+0xe0>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	e03a      	b.n	8011e8e <scalbn+0xae>
 8011e18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011e1c:	428a      	cmp	r2, r1
 8011e1e:	d10c      	bne.n	8011e3a <scalbn+0x5a>
 8011e20:	ee10 2a10 	vmov	r2, s0
 8011e24:	4620      	mov	r0, r4
 8011e26:	4629      	mov	r1, r5
 8011e28:	f7ee fa40 	bl	80002ac <__adddf3>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	460d      	mov	r5, r1
 8011e30:	e019      	b.n	8011e66 <scalbn+0x86>
 8011e32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e36:	460b      	mov	r3, r1
 8011e38:	3a36      	subs	r2, #54	; 0x36
 8011e3a:	4432      	add	r2, r6
 8011e3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011e40:	428a      	cmp	r2, r1
 8011e42:	dd08      	ble.n	8011e56 <scalbn+0x76>
 8011e44:	2d00      	cmp	r5, #0
 8011e46:	a120      	add	r1, pc, #128	; (adr r1, 8011ec8 <scalbn+0xe8>)
 8011e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e4c:	da1c      	bge.n	8011e88 <scalbn+0xa8>
 8011e4e:	a120      	add	r1, pc, #128	; (adr r1, 8011ed0 <scalbn+0xf0>)
 8011e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e54:	e018      	b.n	8011e88 <scalbn+0xa8>
 8011e56:	2a00      	cmp	r2, #0
 8011e58:	dd08      	ble.n	8011e6c <scalbn+0x8c>
 8011e5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e66:	ec45 4b10 	vmov	d0, r4, r5
 8011e6a:	bd70      	pop	{r4, r5, r6, pc}
 8011e6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011e70:	da19      	bge.n	8011ea6 <scalbn+0xc6>
 8011e72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011e76:	429e      	cmp	r6, r3
 8011e78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011e7c:	dd0a      	ble.n	8011e94 <scalbn+0xb4>
 8011e7e:	a112      	add	r1, pc, #72	; (adr r1, 8011ec8 <scalbn+0xe8>)
 8011e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d1e2      	bne.n	8011e4e <scalbn+0x6e>
 8011e88:	a30f      	add	r3, pc, #60	; (adr r3, 8011ec8 <scalbn+0xe8>)
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	f7ee fbc3 	bl	8000618 <__aeabi_dmul>
 8011e92:	e7cb      	b.n	8011e2c <scalbn+0x4c>
 8011e94:	a10a      	add	r1, pc, #40	; (adr r1, 8011ec0 <scalbn+0xe0>)
 8011e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d0b8      	beq.n	8011e10 <scalbn+0x30>
 8011e9e:	a10e      	add	r1, pc, #56	; (adr r1, 8011ed8 <scalbn+0xf8>)
 8011ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ea4:	e7b4      	b.n	8011e10 <scalbn+0x30>
 8011ea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011eaa:	3236      	adds	r2, #54	; 0x36
 8011eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011eb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	4b0c      	ldr	r3, [pc, #48]	; (8011ee8 <scalbn+0x108>)
 8011eb8:	2200      	movs	r2, #0
 8011eba:	e7e8      	b.n	8011e8e <scalbn+0xae>
 8011ebc:	f3af 8000 	nop.w
 8011ec0:	c2f8f359 	.word	0xc2f8f359
 8011ec4:	01a56e1f 	.word	0x01a56e1f
 8011ec8:	8800759c 	.word	0x8800759c
 8011ecc:	7e37e43c 	.word	0x7e37e43c
 8011ed0:	8800759c 	.word	0x8800759c
 8011ed4:	fe37e43c 	.word	0xfe37e43c
 8011ed8:	c2f8f359 	.word	0xc2f8f359
 8011edc:	81a56e1f 	.word	0x81a56e1f
 8011ee0:	43500000 	.word	0x43500000
 8011ee4:	ffff3cb0 	.word	0xffff3cb0
 8011ee8:	3c900000 	.word	0x3c900000

08011eec <_init>:
 8011eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eee:	bf00      	nop
 8011ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ef2:	bc08      	pop	{r3}
 8011ef4:	469e      	mov	lr, r3
 8011ef6:	4770      	bx	lr

08011ef8 <_fini>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	bf00      	nop
 8011efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011efe:	bc08      	pop	{r3}
 8011f00:	469e      	mov	lr, r3
 8011f02:	4770      	bx	lr
