
Secular_PG-TokenRing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08011f68  08011f68  00021f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129b8  080129b8  00030410  2**0
                  CONTENTS
  4 .ARM          00000008  080129b8  080129b8  000229b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129c0  080129c0  00030410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129c0  080129c0  000229c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129c4  080129c4  000229c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  080129c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ef4  20000410  08012dd8  00030410  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20013304  08012dd8  00033304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bd7  00000000  00000000  00030440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005172  00000000  00000000  00056017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0005b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b28  00000000  00000000  0005ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e807  00000000  00000000  0005e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024139  00000000  00000000  0008d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113e32  00000000  00000000  000b1338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c516a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094b8  00000000  00000000  001c51bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f4c 	.word	0x08011f4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	08011f4c 	.word	0x08011f4c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <gpio_config_output>:

//////////////////////////////////////////
// private functions

static void gpio_config_output(GPIO_OUT_t *gpio)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef *port = gpio->port;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
	uint32_t pin = gpio->pin;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	60bb      	str	r3, [r7, #8]

	// First, configure as an output
    port->MODER &= ~(0x3 << (pin*2)) ;      // clear the two MODE bits for this pin
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	2103      	movs	r1, #3
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	43d2      	mvns	r2, r2
 800103c:	401a      	ands	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	601a      	str	r2, [r3, #0]
    port->MODER |=  1 << (pin*2)  ;        	// 1 => output
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	0052      	lsls	r2, r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	431a      	orrs	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	601a      	str	r2, [r3, #0]

	// ...and then the selected drive
	port->OTYPER &= ~(0x1 << pin) ;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2101      	movs	r1, #1
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	43d2      	mvns	r2, r2
 8001064:	401a      	ands	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	605a      	str	r2, [r3, #4]
	port->OTYPER |= (gpio->otype << pin) ;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	7952      	ldrb	r2, [r2, #5]
 8001072:	4611      	mov	r1, r2
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	431a      	orrs	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	605a      	str	r2, [r3, #4]

	// ...with selected speed
	port->OSPEEDR &= ~(0x3 << (pin*2)) ; 	// clear the two OSPEED bits for this pin
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	2103      	movs	r1, #3
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	43d2      	mvns	r2, r2
 8001090:	401a      	ands	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	609a      	str	r2, [r3, #8]
	port->OSPEEDR |= gpio->ospeed << (pin*2) ;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	7992      	ldrb	r2, [r2, #6]
 800109e:	4611      	mov	r1, r2
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	0052      	lsls	r2, r2, #1
 80010a4:	fa01 f202 	lsl.w	r2, r1, r2
 80010a8:	431a      	orrs	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	609a      	str	r2, [r3, #8]

	// ...set initial value
	port->ODR &= ~(0x1 << pin);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2101      	movs	r1, #1
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	401a      	ands	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	615a      	str	r2, [r3, #20]
	port->ODR |= (gpio->init_value << pin);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	79d2      	ldrb	r2, [r2, #7]
 80010ca:	4611      	mov	r1, r2
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	431a      	orrs	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	615a      	str	r2, [r3, #20]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <MFS_init>:

//////////////////////////////////////////
// public functions

void MFS_init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
    // Enable the clock to GPIO Ports A, and B
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock some MFS buttons / LEDs
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MFS_init+0x48>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <MFS_init+0x48>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;    // enable clock some MFS buttons / LEDs
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MFS_init+0x48>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <MFS_init+0x48>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c

	// configure the LEDs as GPIO outputs
	for(int ii=1; ii<=4; ii++) {
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	e009      	b.n	800111c <MFS_init+0x38>
		gpio_config_output(&leds[ii]);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <MFS_init+0x4c>)
 800110e:	4413      	add	r3, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff81 	bl	8001018 <gpio_config_output>
	for(int ii=1; ii<=4; ii++) {
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b04      	cmp	r3, #4
 8001120:	ddf2      	ble.n	8001108 <MFS_init+0x24>
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	20000000 	.word	0x20000000

08001134 <MFS_set_led>:

// Turns LED `num` to 'on' if non-zero, or off if zero
void MFS_set_led( uint8_t num, uint32_t on )
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
	while(num > 4);	// hang if invalid input
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d8fc      	bhi.n	8001140 <MFS_set_led+0xc>

	GPIO_TypeDef *port = leds[num].port;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <MFS_set_led+0x5c>)
 800114a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800114e:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << leds[num].pin;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MFS_set_led+0x5c>)
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	2301      	movs	r3, #1
 800115e:	4093      	lsls	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]

	if ( on )
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <MFS_set_led+0x44>
		port->ODR &= ~bit ;	// active low
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	43db      	mvns	r3, r3
 8001170:	401a      	ands	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	615a      	str	r2, [r3, #20]
	else
		port->ODR |= bit ;
}
 8001176:	e005      	b.n	8001184 <MFS_set_led+0x50>
		port->ODR |= bit ;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000

08001194 <app_init>:
extern int msgSize;
QueueHandle_t cmd_queue;


void app_init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	//display beginning message
	msgSize = sprintf((char *)userMsg, "\r\nStart program.\r\n");
 8001198:	490e      	ldr	r1, [pc, #56]	; (80011d4 <app_init+0x40>)
 800119a:	480f      	ldr	r0, [pc, #60]	; (80011d8 <app_init+0x44>)
 800119c:	f00b ff60 	bl	800d060 <siprintf>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <app_init+0x48>)
 80011a4:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, userMsg, msgSize);
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <app_init+0x48>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	490a      	ldr	r1, [pc, #40]	; (80011d8 <app_init+0x44>)
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <app_init+0x4c>)
 80011b0:	f001 ff4c 	bl	800304c <USART_Write>
	receive_task_init();
 80011b4:	f001 f834 	bl	8002220 <receive_task_init>
	channel_task_init();
 80011b8:	f000 f816 	bl	80011e8 <channel_task_init>
	ring_task_init();
 80011bc:	f001 f898 	bl	80022f0 <ring_task_init>
	cmd_queue = xQueueCreate(99, sizeof(COMMAND_c));
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	2063      	movs	r0, #99	; 0x63
 80011c6:	f008 fe9b 	bl	8009f00 <xQueueGenericCreate>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <app_init+0x50>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	08011f68 	.word	0x08011f68
 80011d8:	2000b8c0 	.word	0x2000b8c0
 80011dc:	2000b988 	.word	0x2000b988
 80011e0:	40004400 	.word	0x40004400
 80011e4:	2000042c 	.word	0x2000042c

080011e8 <channel_task_init>:
};

static void channel_task(void *params);

//creates task to take in gen commands
int channel_task_init(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
	//create task
	BaseType_t err = xTaskCreate(channel_task, "Channel_Task", 1024, (void *) pc_ch, 3, NULL);
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <channel_task_init+0x3c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	9200      	str	r2, [sp, #0]
 80011fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fe:	490a      	ldr	r1, [pc, #40]	; (8001228 <channel_task_init+0x40>)
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <channel_task_init+0x44>)
 8001202:	f009 fa40 	bl	800a686 <xTaskCreate>
 8001206:	6078      	str	r0, [r7, #4]
	assert(err == pdPASS);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <channel_task_init+0x32>
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <channel_task_init+0x48>)
 8001210:	4a08      	ldr	r2, [pc, #32]	; (8001234 <channel_task_init+0x4c>)
 8001212:	2137      	movs	r1, #55	; 0x37
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <channel_task_init+0x50>)
 8001216:	f00a fcc9 	bl	800bbac <__assert_func>
	return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000028 	.word	0x20000028
 8001228:	08011f90 	.word	0x08011f90
 800122c:	0800123d 	.word	0x0800123d
 8001230:	08011fa0 	.word	0x08011fa0
 8001234:	08012280 	.word	0x08012280
 8001238:	08011fb0 	.word	0x08011fb0

0800123c <channel_task>:
static void channel_task(void* params){
 800123c:	b580      	push	{r7, lr}
 800123e:	b090      	sub	sp, #64	; 0x40
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
	COMMAND_c * rec_cmd; //pointer to received command
	int channel_sel; //variable to hold selected DAC channel
	uint32_t req_freq; //variable for required frequency of waveform
	uint32_t req_freq_div; //variable for required ARR value
	int noise_bits; //number of noise bits to unmask
	uint16_t prescaler = 0; //prescaler value that the timers will use
 8001244:	2300      	movs	r3, #0
 8001246:	867b      	strh	r3, [r7, #50]	; 0x32
	char gen_cmd[] = "gen\0";
 8001248:	4a9a      	ldr	r2, [pc, #616]	; (80014b4 <channel_task+0x278>)
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001252:	6018      	str	r0, [r3, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	7019      	strb	r1, [r3, #0]
	char cap_cmd[] = "cap\0";
 8001258:	4a97      	ldr	r2, [pc, #604]	; (80014b8 <channel_task+0x27c>)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001262:	6018      	str	r0, [r3, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	7019      	strb	r1, [r3, #0]
	while(1)
	{
		if(uxQueueMessagesWaiting(cmd_queue))
 8001268:	4b94      	ldr	r3, [pc, #592]	; (80014bc <channel_task+0x280>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f009 f87f 	bl	800a370 <uxQueueMessagesWaiting>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 81b4 	beq.w	80015e2 <channel_task+0x3a6>
		{
			//receive pointer to command struct
			BaseType_t rec_error = xQueueReceive(cmd_queue, &rec_cmd, 0);
 800127a:	4b90      	ldr	r3, [pc, #576]	; (80014bc <channel_task+0x280>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f107 011c 	add.w	r1, r7, #28
 8001282:	2200      	movs	r2, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f008 ff93 	bl	800a1b0 <xQueueReceive>
 800128a:	62f8      	str	r0, [r7, #44]	; 0x2c
			assert(rec_error == pdPASS);
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <channel_task+0x62>
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <channel_task+0x284>)
 8001294:	4a8b      	ldr	r2, [pc, #556]	; (80014c4 <channel_task+0x288>)
 8001296:	2149      	movs	r1, #73	; 0x49
 8001298:	488b      	ldr	r0, [pc, #556]	; (80014c8 <channel_task+0x28c>)
 800129a:	f00a fc87 	bl	800bbac <__assert_func>
			if(strcasecmp((char *) rec_cmd->name, gen_cmd) == 0)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	461a      	mov	r2, r3
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4610      	mov	r0, r2
 80012aa:	f00b ff6b 	bl	800d184 <strcasecmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 817c 	bne.w	80015ae <channel_task+0x372>
			{
				channel_sel = rec_cmd->channel;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
				noise_bits = rec_cmd->noise;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
				TIM2->PSC = prescaler;
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012c8:	6293      	str	r3, [r2, #40]	; 0x28
				TIM5->PSC = prescaler;
 80012ca:	4a80      	ldr	r2, [pc, #512]	; (80014cc <channel_task+0x290>)
 80012cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012ce:	6293      	str	r3, [r2, #40]	; 0x28
				if(rec_cmd->freq == 0)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	f7ff fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <channel_task+0xbe>
				{
					//generate DC signal
					generate_DC(channel_sel, rec_cmd->dac_minv, rec_cmd->noise);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	8b19      	ldrh	r1, [r3, #24]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012f4:	f000 f98e 	bl	8001614 <generate_DC>
 80012f8:	e06f      	b.n	80013da <channel_task+0x19e>
				} else{
					//calculate register values to achieve correct frequency
					req_freq = rec_cmd->freq * LUT_SIZE;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <channel_task+0x294>)
 8001306:	f7ff f987 	bl	8000618 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc59 	bl	8000bc8 <__aeabi_d2uiz>
 8001316:	4603      	mov	r3, r0
 8001318:	623b      	str	r3, [r7, #32]
					req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 800131a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800131c:	3301      	adds	r3, #1
 800131e:	4a6d      	ldr	r2, [pc, #436]	; (80014d4 <channel_task+0x298>)
 8001320:	fb92 f3f3 	sdiv	r3, r2, r3
 8001324:	461a      	mov	r2, r3
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	fbb2 f3f3 	udiv	r3, r2, r3
 800132c:	637b      	str	r3, [r7, #52]	; 0x34


					//switch statement to generate the selected waveform
					switch(rec_cmd->type)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	7b1b      	ldrb	r3, [r3, #12]
 8001332:	3b61      	subs	r3, #97	; 0x61
 8001334:	2b13      	cmp	r3, #19
 8001336:	d850      	bhi.n	80013da <channel_task+0x19e>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <channel_task+0x104>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	080013cd 	.word	0x080013cd
 8001344:	080013db 	.word	0x080013db
 8001348:	080013db 	.word	0x080013db
 800134c:	080013db 	.word	0x080013db
 8001350:	080013db 	.word	0x080013db
 8001354:	080013db 	.word	0x080013db
 8001358:	080013db 	.word	0x080013db
 800135c:	080013db 	.word	0x080013db
 8001360:	080013db 	.word	0x080013db
 8001364:	080013db 	.word	0x080013db
 8001368:	080013db 	.word	0x080013db
 800136c:	080013db 	.word	0x080013db
 8001370:	080013db 	.word	0x080013db
 8001374:	080013db 	.word	0x080013db
 8001378:	080013db 	.word	0x080013db
 800137c:	080013db 	.word	0x080013db
 8001380:	080013db 	.word	0x080013db
 8001384:	080013a5 	.word	0x080013a5
 8001388:	08001391 	.word	0x08001391
 800138c:	080013b9 	.word	0x080013b9
					{
						case 's':
							generate_sine(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	8b19      	ldrh	r1, [r3, #24]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	8b5a      	ldrh	r2, [r3, #26]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800139e:	f000 f9c3 	bl	8001728 <generate_sine>
							break;
 80013a2:	e01a      	b.n	80013da <channel_task+0x19e>
						case 'r':
							generate_rectangle(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	8b19      	ldrh	r1, [r3, #24]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	8b5a      	ldrh	r2, [r3, #26]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013b2:	f000 f965 	bl	8001680 <generate_rectangle>
							break;
 80013b6:	e010      	b.n	80013da <channel_task+0x19e>
						case 't':
							generate_triangular(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	8b19      	ldrh	r1, [r3, #24]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	8b5a      	ldrh	r2, [r3, #26]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c6:	f000 fa5b 	bl	8001880 <generate_triangular>
							break;
 80013ca:	e006      	b.n	80013da <channel_task+0x19e>
						case 'a':
							generate_arbitrary(channel_sel, rec_cmd->noise);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4619      	mov	r1, r3
 80013d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013d4:	f000 fad2 	bl	800197c <generate_arbitrary>
							break;
 80013d8:	bf00      	nop
					}
				}
				//start the DMA for the data
				switch(channel_sel)
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d004      	beq.n	80013ea <channel_task+0x1ae>
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	f000 8082 	beq.w	80014ec <channel_task+0x2b0>
 80013e8:	e0fb      	b.n	80015e2 <channel_task+0x3a6>
				{
				case 1:
					//turn off DAC
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80013ea:	2100      	movs	r1, #0
 80013ec:	483a      	ldr	r0, [pc, #232]	; (80014d8 <channel_task+0x29c>)
 80013ee:	f003 fd0b 	bl	8004e08 <HAL_DAC_Stop_DMA>
					//turn off noise
					DAC->CR &= ~(DAC_CR_MAMP1_0 + DAC_CR_MAMP1_1 + DAC_CR_MAMP1_2 + DAC_CR_MAMP1_3);
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <channel_task+0x2a0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a39      	ldr	r2, [pc, #228]	; (80014dc <channel_task+0x2a0>)
 80013f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013fc:	6013      	str	r3, [r2, #0]
					DAC->CR &= ~DAC_CR_WAVE1_0;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <channel_task+0x2a0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a36      	ldr	r2, [pc, #216]	; (80014dc <channel_task+0x2a0>)
 8001404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001408:	6013      	str	r3, [r2, #0]
					//if there is noise bits, enable noise generator and unmask that number of bits
					if(noise_bits > 0)
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd0d      	ble.n	800142c <channel_task+0x1f0>
					{
						DAC->CR |= DAC_CR_WAVE1_0;
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <channel_task+0x2a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a31      	ldr	r2, [pc, #196]	; (80014dc <channel_task+0x2a0>)
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	6013      	str	r3, [r2, #0]
						DAC->CR |= (noise_bits << DAC_CR_MAMP1_Pos);
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <channel_task+0x2a0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	4611      	mov	r1, r2
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <channel_task+0x2a0>)
 8001428:	430b      	orrs	r3, r1
 800142a:	6013      	str	r3, [r2, #0]
					}
					//start timer 2 and DMA for channel 1
					if(rec_cmd->type == 'c')
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	2b63      	cmp	r3, #99	; 0x63
 8001432:	d125      	bne.n	8001480 <channel_task+0x244>
					{
						req_freq = 10000; //put entire buffer into DAC in 2 seconds (20k/2 = 10kHz)
 8001434:	f242 7310 	movw	r3, #10000	; 0x2710
 8001438:	623b      	str	r3, [r7, #32]
						req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 800143a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800143c:	3301      	adds	r3, #1
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <channel_task+0x298>)
 8001440:	fb92 f3f3 	sdiv	r3, r2, r3
 8001444:	461a      	mov	r2, r3
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
						TIM2->ARR = req_freq_div;
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001454:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM2->EGR |= TIM_EGR_UG;
 8001456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim2);
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <channel_task+0x2a4>)
 8001468:	f005 ff2c 	bl	80072c4 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)adc_LUT_1, ADC_LUT_SIZE, DAC_ALIGN_12B_R);
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <channel_task+0x2a8>)
 8001476:	2100      	movs	r1, #0
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <channel_task+0x29c>)
 800147a:	f003 fbf9 	bl	8004c70 <HAL_DAC_Start_DMA>
						TIM2->ARR = req_freq_div;
						TIM2->EGR |= TIM_EGR_UG;
						HAL_TIM_Base_Start(&htim2);
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_LUT_1, LUT_SIZE , DAC_ALIGN_12B_R);
					}
					break;
 800147e:	e0b0      	b.n	80015e2 <channel_task+0x3a6>
						TIM2->ARR = req_freq_div;
 8001480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM2->EGR |= TIM_EGR_UG;
 8001488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim2);
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <channel_task+0x2a4>)
 800149a:	f005 ff13 	bl	80072c4 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_LUT_1, LUT_SIZE , DAC_ALIGN_12B_R);
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <channel_task+0x2ac>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <channel_task+0x29c>)
 80014ac:	f003 fbe0 	bl	8004c70 <HAL_DAC_Start_DMA>
					break;
 80014b0:	e097      	b.n	80015e2 <channel_task+0x3a6>
 80014b2:	bf00      	nop
 80014b4:	08011fe0 	.word	0x08011fe0
 80014b8:	08011fe8 	.word	0x08011fe8
 80014bc:	2000042c 	.word	0x2000042c
 80014c0:	08011fcc 	.word	0x08011fcc
 80014c4:	08012294 	.word	0x08012294
 80014c8:	08011fb0 	.word	0x08011fb0
 80014cc:	40000c00 	.word	0x40000c00
 80014d0:	40700000 	.word	0x40700000
 80014d4:	04c4b400 	.word	0x04c4b400
 80014d8:	2000b5d0 	.word	0x2000b5d0
 80014dc:	40007400 	.word	0x40007400
 80014e0:	2000b6d0 	.word	0x2000b6d0
 80014e4:	20000830 	.word	0x20000830
 80014e8:	20000430 	.word	0x20000430
				case 2:
					//turn off DAC
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_2);
 80014ec:	2110      	movs	r1, #16
 80014ee:	483f      	ldr	r0, [pc, #252]	; (80015ec <channel_task+0x3b0>)
 80014f0:	f003 fc8a 	bl	8004e08 <HAL_DAC_Stop_DMA>
					//turn off noise
					DAC->CR &= ~(DAC_CR_MAMP2_0 + DAC_CR_MAMP2_1 + DAC_CR_MAMP2_2 + DAC_CR_MAMP2_3);
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <channel_task+0x3b4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <channel_task+0x3b4>)
 80014fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80014fe:	6013      	str	r3, [r2, #0]
					DAC->CR &= ~DAC_CR_WAVE2_0;
 8001500:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <channel_task+0x3b4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <channel_task+0x3b4>)
 8001506:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800150a:	6013      	str	r3, [r2, #0]
					//if there is noise bits, enable noise generator and unmask that number of bits
					if(noise_bits > 0)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	2b00      	cmp	r3, #0
 8001510:	dd0d      	ble.n	800152e <channel_task+0x2f2>
					{
						DAC->CR |= DAC_CR_WAVE2_0;
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <channel_task+0x3b4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a36      	ldr	r2, [pc, #216]	; (80015f0 <channel_task+0x3b4>)
 8001518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151c:	6013      	str	r3, [r2, #0]
						DAC->CR |= (noise_bits << DAC_CR_MAMP2_Pos);
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <channel_task+0x3b4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	0612      	lsls	r2, r2, #24
 8001526:	4611      	mov	r1, r2
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <channel_task+0x3b4>)
 800152a:	430b      	orrs	r3, r1
 800152c:	6013      	str	r3, [r2, #0]
					}

					//start timer 5 and DMA for channel 1
					if(rec_cmd->type == 'c')
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	7b1b      	ldrb	r3, [r3, #12]
 8001532:	2b63      	cmp	r3, #99	; 0x63
 8001534:	d125      	bne.n	8001582 <channel_task+0x346>
					{
						//output to DAC at 10kHz
						HAL_ADC_Stop_DMA(&hadc1);
 8001536:	482f      	ldr	r0, [pc, #188]	; (80015f4 <channel_task+0x3b8>)
 8001538:	f002 fb1a 	bl	8003b70 <HAL_ADC_Stop_DMA>
						req_freq = 10000;
 800153c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001540:	623b      	str	r3, [r7, #32]
						req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 8001542:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001544:	3301      	adds	r3, #1
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <channel_task+0x3bc>)
 8001548:	fb92 f3f3 	sdiv	r3, r2, r3
 800154c:	461a      	mov	r2, r3
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	fbb2 f3f3 	udiv	r3, r2, r3
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
						TIM5->ARR = req_freq_div; //calculated for a frequency of 0.5 Hz (2s)
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <channel_task+0x3c0>)
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM5->EGR |= TIM_EGR_UG;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <channel_task+0x3c0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4a26      	ldr	r2, [pc, #152]	; (80015fc <channel_task+0x3c0>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim5);
 8001568:	4825      	ldr	r0, [pc, #148]	; (8001600 <channel_task+0x3c4>)
 800156a:	f005 feab 	bl	80072c4 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)adc_LUT_1, ADC_LUT_SIZE, DAC_ALIGN_12B_R);
 800156e:	2300      	movs	r3, #0
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001576:	4a23      	ldr	r2, [pc, #140]	; (8001604 <channel_task+0x3c8>)
 8001578:	2110      	movs	r1, #16
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <channel_task+0x3b0>)
 800157c:	f003 fb78 	bl	8004c70 <HAL_DAC_Start_DMA>
						TIM5->ARR = req_freq_div;
						TIM5->EGR |= TIM_EGR_UG;
						HAL_TIM_Base_Start(&htim5);
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)dac_LUT_2, LUT_SIZE, DAC_ALIGN_12B_R);
					}
					break;
 8001580:	e02f      	b.n	80015e2 <channel_task+0x3a6>
						TIM5->ARR = req_freq_div;
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <channel_task+0x3c0>)
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM5->EGR |= TIM_EGR_UG;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <channel_task+0x3c0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <channel_task+0x3c0>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim5);
 8001594:	481a      	ldr	r0, [pc, #104]	; (8001600 <channel_task+0x3c4>)
 8001596:	f005 fe95 	bl	80072c4 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)dac_LUT_2, LUT_SIZE, DAC_ALIGN_12B_R);
 800159a:	2300      	movs	r3, #0
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <channel_task+0x3cc>)
 80015a4:	2110      	movs	r1, #16
 80015a6:	4811      	ldr	r0, [pc, #68]	; (80015ec <channel_task+0x3b0>)
 80015a8:	f003 fb62 	bl	8004c70 <HAL_DAC_Start_DMA>
					break;
 80015ac:	e019      	b.n	80015e2 <channel_task+0x3a6>
				}
			} else if (strcasecmp((char *) rec_cmd->name, cap_cmd) == 0)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f00b fde3 	bl	800d184 <strcasecmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10e      	bne.n	80015e2 <channel_task+0x3a6>
			{
				TIM4->EGR |= TIM_EGR_UG;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <channel_task+0x3d0>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4a10      	ldr	r2, [pc, #64]	; (800160c <channel_task+0x3d0>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6153      	str	r3, [r2, #20]
				HAL_TIM_Base_Start(&htim4);
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <channel_task+0x3d4>)
 80015d2:	f005 fe77 	bl	80072c4 <HAL_TIM_Base_Start>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_LUT_1, ADC_LUT_SIZE);
 80015d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015da:	490a      	ldr	r1, [pc, #40]	; (8001604 <channel_task+0x3c8>)
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <channel_task+0x3b8>)
 80015de:	f002 fa0b 	bl	80039f8 <HAL_ADC_Start_DMA>
			}
		}
		vTaskDelay(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f009 f99c 	bl	800a920 <vTaskDelay>
		if(uxQueueMessagesWaiting(cmd_queue))
 80015e8:	e63e      	b.n	8001268 <channel_task+0x2c>
 80015ea:	bf00      	nop
 80015ec:	2000b5d0 	.word	0x2000b5d0
 80015f0:	40007400 	.word	0x40007400
 80015f4:	2000b524 	.word	0x2000b524
 80015f8:	04c4b400 	.word	0x04c4b400
 80015fc:	40000c00 	.word	0x40000c00
 8001600:	2000b768 	.word	0x2000b768
 8001604:	20000830 	.word	0x20000830
 8001608:	20000630 	.word	0x20000630
 800160c:	40000800 	.word	0x40000800
 8001610:	2000b71c 	.word	0x2000b71c

08001614 <generate_DC>:
	}
}


void generate_DC(int channel, uint16_t dac_minv, int noise)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	460b      	mov	r3, r1
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	817b      	strh	r3, [r7, #10]
	//generate lookup table for DC signal

	switch(channel)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d003      	beq.n	8001630 <generate_DC+0x1c>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d00f      	beq.n	800164e <generate_DC+0x3a>
			//add noise
			dac_LUT_2[i] = dac_minv;
		}
		break;
	}
}
 800162e:	e01d      	b.n	800166c <generate_DC+0x58>
		for(int i = 0; i < LUT_SIZE; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e007      	b.n	8001646 <generate_DC+0x32>
			dac_LUT_1[i] = dac_minv;
 8001636:	4910      	ldr	r1, [pc, #64]	; (8001678 <generate_DC+0x64>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	897a      	ldrh	r2, [r7, #10]
 800163c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	ddf4      	ble.n	8001636 <generate_DC+0x22>
		break;
 800164c:	e00e      	b.n	800166c <generate_DC+0x58>
		for(int i = 0; i < LUT_SIZE; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e007      	b.n	8001664 <generate_DC+0x50>
			dac_LUT_2[i] = dac_minv;
 8001654:	4909      	ldr	r1, [pc, #36]	; (800167c <generate_DC+0x68>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	897a      	ldrh	r2, [r7, #10]
 800165a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	3301      	adds	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	ddf4      	ble.n	8001654 <generate_DC+0x40>
		break;
 800166a:	bf00      	nop
}
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000430 	.word	0x20000430
 800167c:	20000630 	.word	0x20000630

08001680 <generate_rectangle>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_rectangle(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	817b      	strh	r3, [r7, #10]
 800168e:	4613      	mov	r3, r2
 8001690:	813b      	strh	r3, [r7, #8]
	//generate lookup table for rectangle signal where half is minv and 2nd half is maxv
	switch(channel)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d003      	beq.n	80016a0 <generate_rectangle+0x20>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d01d      	beq.n	80016da <generate_rectangle+0x5a>
			//set high part of rectangle
			dac_LUT_2[i] = dac_maxv;
		}
		break;
	}
}
 800169e:	e039      	b.n	8001714 <generate_rectangle+0x94>
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	e007      	b.n	80016b6 <generate_rectangle+0x36>
			dac_LUT_1[i] = dac_minv;
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <generate_rectangle+0xa0>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	897a      	ldrh	r2, [r7, #10]
 80016ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ba:	ddf4      	ble.n	80016a6 <generate_rectangle+0x26>
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e007      	b.n	80016d2 <generate_rectangle+0x52>
			dac_LUT_1[i] = dac_maxv;
 80016c2:	4917      	ldr	r1, [pc, #92]	; (8001720 <generate_rectangle+0xa0>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	893a      	ldrh	r2, [r7, #8]
 80016c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	3301      	adds	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	ddf4      	ble.n	80016c2 <generate_rectangle+0x42>
		break;
 80016d8:	e01c      	b.n	8001714 <generate_rectangle+0x94>
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e007      	b.n	80016f0 <generate_rectangle+0x70>
			dac_LUT_2[i] = dac_minv;
 80016e0:	4910      	ldr	r1, [pc, #64]	; (8001724 <generate_rectangle+0xa4>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	897a      	ldrh	r2, [r7, #10]
 80016e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE/2; i++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b7f      	cmp	r3, #127	; 0x7f
 80016f4:	ddf4      	ble.n	80016e0 <generate_rectangle+0x60>
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e007      	b.n	800170c <generate_rectangle+0x8c>
			dac_LUT_2[i] = dac_maxv;
 80016fc:	4909      	ldr	r1, [pc, #36]	; (8001724 <generate_rectangle+0xa4>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	893a      	ldrh	r2, [r7, #8]
 8001702:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3301      	adds	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	ddf4      	ble.n	80016fc <generate_rectangle+0x7c>
		break;
 8001712:	bf00      	nop
}
 8001714:	bf00      	nop
 8001716:	3724      	adds	r7, #36	; 0x24
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000430 	.word	0x20000430
 8001724:	20000630 	.word	0x20000630

08001728 <generate_sine>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_sine(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	817b      	strh	r3, [r7, #10]
 8001738:	4613      	mov	r3, r2
 800173a:	813b      	strh	r3, [r7, #8]
	uint16_t midv = (dac_minv + dac_maxv) / 2;
 800173c:	897a      	ldrh	r2, [r7, #10]
 800173e:	893b      	ldrh	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	0fda      	lsrs	r2, r3, #31
 8001744:	4413      	add	r3, r2
 8001746:	105b      	asrs	r3, r3, #1
 8001748:	82fb      	strh	r3, [r7, #22]
	float angle = (float)(2*M_PI)/LUT_SIZE;
 800174a:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <generate_sine+0x14c>)
 800174c:	613b      	str	r3, [r7, #16]
	switch(channel)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <generate_sine+0x34>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d043      	beq.n	80017e2 <generate_sine+0xba>
			//set LUT to be a sine wave and add noise
			dac_LUT_2[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
		}
		break;
	}
}
 800175a:	e085      	b.n	8001868 <generate_sine+0x140>
		for(int i = 0; i < LUT_SIZE; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	e03b      	b.n	80017da <generate_sine+0xb2>
			dac_LUT_1[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
 8001762:	8afb      	ldrh	r3, [r7, #22]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe feed 	bl	8000544 <__aeabi_i2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
 800176e:	893a      	ldrh	r2, [r7, #8]
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee5 	bl	8000544 <__aeabi_i2d>
 800177a:	4680      	mov	r8, r0
 800177c:	4689      	mov	r9, r1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001788:	edd7 7a04 	vldr	s15, [r7, #16]
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	ee17 0a90 	vmov	r0, s15
 8001794:	f7fe fee8 	bl	8000568 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	ec43 2b10 	vmov	d0, r2, r3
 80017a0:	f00f fb8a 	bl	8010eb8 <sin>
 80017a4:	ec53 2b10 	vmov	r2, r3, d0
 80017a8:	4640      	mov	r0, r8
 80017aa:	4649      	mov	r1, r9
 80017ac:	f7fe ff34 	bl	8000618 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd78 	bl	80002ac <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa00 	bl	8000bc8 <__aeabi_d2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b299      	uxth	r1, r3
 80017cc:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <generate_sine+0x150>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	2bff      	cmp	r3, #255	; 0xff
 80017de:	ddc0      	ble.n	8001762 <generate_sine+0x3a>
		break;
 80017e0:	e042      	b.n	8001868 <generate_sine+0x140>
		for(int i = 0; i < LUT_SIZE; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	e03b      	b.n	8001860 <generate_sine+0x138>
			dac_LUT_2[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
 80017e8:	8afb      	ldrh	r3, [r7, #22]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe feaa 	bl	8000544 <__aeabi_i2d>
 80017f0:	4604      	mov	r4, r0
 80017f2:	460d      	mov	r5, r1
 80017f4:	893a      	ldrh	r2, [r7, #8]
 80017f6:	8afb      	ldrh	r3, [r7, #22]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fea2 	bl	8000544 <__aeabi_i2d>
 8001800:	4680      	mov	r8, r0
 8001802:	4689      	mov	r9, r1
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	ee17 0a90 	vmov	r0, s15
 800181a:	f7fe fea5 	bl	8000568 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b10 	vmov	d0, r2, r3
 8001826:	f00f fb47 	bl	8010eb8 <sin>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
 800182e:	4640      	mov	r0, r8
 8001830:	4649      	mov	r1, r9
 8001832:	f7fe fef1 	bl	8000618 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fd35 	bl	80002ac <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9bd 	bl	8000bc8 <__aeabi_d2uiz>
 800184e:	4603      	mov	r3, r0
 8001850:	b299      	uxth	r1, r3
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <generate_sine+0x154>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	3301      	adds	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	ddc0      	ble.n	80017e8 <generate_sine+0xc0>
		break;
 8001866:	bf00      	nop
}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001872:	bf00      	nop
 8001874:	3cc90fdb 	.word	0x3cc90fdb
 8001878:	20000430 	.word	0x20000430
 800187c:	20000630 	.word	0x20000630

08001880 <generate_triangular>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_triangular(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	817b      	strh	r3, [r7, #10]
 800188e:	4613      	mov	r3, r2
 8001890:	813b      	strh	r3, [r7, #8]
	uint16_t slope = (dac_maxv - dac_minv)/(LUT_SIZE/2);
 8001892:	893a      	ldrh	r2, [r7, #8]
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	da00      	bge.n	800189e <generate_triangular+0x1e>
 800189c:	337f      	adds	r3, #127	; 0x7f
 800189e:	11db      	asrs	r3, r3, #7
 80018a0:	82fb      	strh	r3, [r7, #22]
	switch(channel)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d003      	beq.n	80018b0 <generate_triangular+0x30>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d02e      	beq.n	800190c <generate_triangular+0x8c>
			//set negative part of the triangular wave
			dac_LUT_2[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
		}
		break;
	}
}
 80018ae:	e05b      	b.n	8001968 <generate_triangular+0xe8>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	e00f      	b.n	80018d6 <generate_triangular+0x56>
			dac_LUT_1[i] = dac_minv + (i * slope);
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	8afa      	ldrh	r2, [r7, #22]
 80018bc:	fb12 f303 	smulbb	r3, r2, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	4413      	add	r3, r2
 80018c6:	b299      	uxth	r1, r3
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <generate_triangular+0xf4>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	3301      	adds	r3, #1
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	ddec      	ble.n	80018b6 <generate_triangular+0x36>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	e010      	b.n	8001904 <generate_triangular+0x84>
			dac_LUT_1[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8afa      	ldrh	r2, [r7, #22]
 80018e8:	fb12 f303 	smulbb	r3, r2, r3
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	3380      	adds	r3, #128	; 0x80
 80018f2:	8939      	ldrh	r1, [r7, #8]
 80018f4:	1a8a      	subs	r2, r1, r2
 80018f6:	b291      	uxth	r1, r2
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <generate_triangular+0xf4>)
 80018fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	3301      	adds	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2b7f      	cmp	r3, #127	; 0x7f
 8001908:	ddeb      	ble.n	80018e2 <generate_triangular+0x62>
		break;
 800190a:	e02d      	b.n	8001968 <generate_triangular+0xe8>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	e00f      	b.n	8001932 <generate_triangular+0xb2>
			dac_LUT_2[i] = dac_minv + (i * slope);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	b29b      	uxth	r3, r3
 8001916:	8afa      	ldrh	r2, [r7, #22]
 8001918:	fb12 f303 	smulbb	r3, r2, r3
 800191c:	b29a      	uxth	r2, r3
 800191e:	897b      	ldrh	r3, [r7, #10]
 8001920:	4413      	add	r3, r2
 8001922:	b299      	uxth	r1, r3
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <generate_triangular+0xf8>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	3301      	adds	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	ddec      	ble.n	8001912 <generate_triangular+0x92>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	e010      	b.n	8001960 <generate_triangular+0xe0>
			dac_LUT_2[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	b29b      	uxth	r3, r3
 8001942:	8afa      	ldrh	r2, [r7, #22]
 8001944:	fb12 f303 	smulbb	r3, r2, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3380      	adds	r3, #128	; 0x80
 800194e:	8939      	ldrh	r1, [r7, #8]
 8001950:	1a8a      	subs	r2, r1, r2
 8001952:	b291      	uxth	r1, r2
 8001954:	4a08      	ldr	r2, [pc, #32]	; (8001978 <generate_triangular+0xf8>)
 8001956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	3301      	adds	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b7f      	cmp	r3, #127	; 0x7f
 8001964:	ddeb      	ble.n	800193e <generate_triangular+0xbe>
		break;
 8001966:	bf00      	nop
}
 8001968:	bf00      	nop
 800196a:	372c      	adds	r7, #44	; 0x2c
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000430 	.word	0x20000430
 8001978:	20000630 	.word	0x20000630

0800197c <generate_arbitrary>:
 *
 * Param: int channel - # of DAC channel
 * 		  int noise - # of noise bits
 */
void generate_arbitrary(int channel, int noise)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]

	switch(channel)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d003      	beq.n	8001994 <generate_arbitrary+0x18>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d012      	beq.n	80019b8 <generate_arbitrary+0x3c>
			//set equal to EKG part of triangular and add noise
			dac_LUT_2[i] = ekg[i];
		}
		break;
	}
}
 8001992:	e023      	b.n	80019dc <generate_arbitrary+0x60>
		for(int i = 0; i < LUT_SIZE; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e00a      	b.n	80019b0 <generate_arbitrary+0x34>
			dac_LUT_1[i] = ekg[i];
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <generate_arbitrary+0x6c>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <generate_arbitrary+0x70>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3301      	adds	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	ddf1      	ble.n	800199a <generate_arbitrary+0x1e>
		break;
 80019b6:	e011      	b.n	80019dc <generate_arbitrary+0x60>
		for(int i = 0; i < LUT_SIZE; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e00a      	b.n	80019d4 <generate_arbitrary+0x58>
			dac_LUT_2[i] = ekg[i];
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <generate_arbitrary+0x6c>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <generate_arbitrary+0x74>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	ddf1      	ble.n	80019be <generate_arbitrary+0x42>
		break;
 80019da:	bf00      	nop
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	20000430 	.word	0x20000430
 80019f0:	20000630 	.word	0x20000630

080019f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <vApplicationGetIdleTaskMemory+0x30>)
 8001a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a12:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	2000a470 	.word	0x2000a470
 8001a24:	2000a524 	.word	0x2000a524

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2e:	f001 fc05 	bl	800323c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a32:	f000 f833 	bl	8001a9c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a36:	f000 f882 	bl	8001b3e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3a:	f000 fb7f 	bl	800213c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a3e:	f000 fb4f 	bl	80020e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a42:	f000 faed 	bl	8002020 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001a46:	f000 f921 	bl	8001c8c <MX_DAC1_Init>
  MX_RNG_Init();
 8001a4a:	f000 f971 	bl	8001d30 <MX_RNG_Init>
  MX_TIM2_Init();
 8001a4e:	f000 f9d7 	bl	8001e00 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001a52:	f000 f981 	bl	8001d58 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001a56:	f000 fa95 	bl	8001f84 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001a5a:	f000 f89f 	bl	8001b9c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001a5e:	f000 fa43 	bl	8001ee8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001a62:	f000 fb0d 	bl	8002080 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <main+0x6c>)
 8001a68:	1d3c      	adds	r4, r7, #4
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f008 f8c3 	bl	8009c08 <osThreadCreate>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <main+0x70>)
 8001a86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  app_init();
 8001a88:	f7ff fb84 	bl	8001194 <app_init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a8c:	f008 f8b5 	bl	8009bfa <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <main+0x68>
 8001a92:	bf00      	nop
 8001a94:	08011ffc 	.word	0x08011ffc
 8001a98:	2000b8bc 	.word	0x2000b8bc

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b096      	sub	sp, #88	; 0x58
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2244      	movs	r2, #68	; 0x44
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f00a f9e7 	bl	800be7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001abe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ac2:	f004 f80d 	bl	8005ae0 <HAL_PWREx_ControlVoltageScaling>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001acc:	f000 fba2 	bl	8002214 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ada:	2310      	movs	r3, #16
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001aea:	230a      	movs	r3, #10
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001aee:	2307      	movs	r3, #7
 8001af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001af2:	2302      	movs	r3, #2
 8001af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f844 	bl	8005b8c <HAL_RCC_OscConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b0a:	f000 fb83 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	230f      	movs	r3, #15
 8001b10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b12:	2303      	movs	r3, #3
 8001b14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	2104      	movs	r1, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fc0c 	bl	8006344 <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b32:	f000 fb6f 	bl	8002214 <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3758      	adds	r7, #88	; 0x58
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b0a2      	sub	sp, #136	; 0x88
 8001b42:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2288      	movs	r2, #136	; 0x88
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00a f997 	bl	800be7e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 8001b50:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8001b54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b5a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001b5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b60:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b62:	2302      	movs	r3, #2
 8001b64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001b72:	2304      	movs	r3, #4
 8001b74:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001b7a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001b7e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fe34 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001b8e:	f000 fb41 	bl	8002214 <Error_Handler>
  }
}
 8001b92:	bf00      	nop
 8001b94:	3788      	adds	r7, #136	; 0x88
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bc0:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <MX_ADC1_Init+0xe8>)
 8001bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bde:	2204      	movs	r2, #4
 8001be0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001bfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c22:	4817      	ldr	r0, [pc, #92]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c24:	f001 fd92 	bl	800374c <HAL_ADC_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001c2e:	f000 faf1 	bl	8002214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4810      	ldr	r0, [pc, #64]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c3e:	f002 fe63 	bl	8004908 <HAL_ADCEx_MultiModeConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001c48:	f000 fae4 	bl	8002214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_ADC1_Init+0xec>)
 8001c4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c50:	2306      	movs	r3, #6
 8001c52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c58:	237f      	movs	r3, #127	; 0x7f
 8001c5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_ADC1_Init+0xe4>)
 8001c6a:	f002 f801 	bl	8003c70 <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c74:	f000 face 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000b524 	.word	0x2000b524
 8001c84:	50040000 	.word	0x50040000
 8001c88:	14f00020 	.word	0x14f00020

08001c8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2224      	movs	r2, #36	; 0x24
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00a f8f0 	bl	800be7e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <MX_DAC1_Init+0xa0>)
 8001ca2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ca4:	4820      	ldr	r0, [pc, #128]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001ca6:	f002 ffc1 	bl	8004c2c <HAL_DAC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001cb0:	f000 fab0 	bl	8002214 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001cb8:	2324      	movs	r3, #36	; 0x24
 8001cba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001cd0:	f003 f8fd 	bl	8004ece <HAL_DAC_ConfigChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001cda:	f000 fa9b 	bl	8002214 <Error_Handler>
  }

  /** Configure Noise wave generation on DAC OUT1
  */
  if (HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_LFSRUNMASK_BIT0) != HAL_OK)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4811      	ldr	r0, [pc, #68]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001ce4:	f003 fa43 	bl	800516e <HAL_DACEx_NoiseWaveGenerate>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001cee:	f000 fa91 	bl	8002214 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001cf2:	231c      	movs	r3, #28
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001cfe:	f003 f8e6 	bl	8004ece <HAL_DAC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8001d08:	f000 fa84 	bl	8002214 <Error_Handler>
  }

  /** Configure Noise wave generation on DAC OUT2
  */
  if (HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_2, DAC_LFSRUNMASK_BIT0) != HAL_OK)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2110      	movs	r1, #16
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_DAC1_Init+0x9c>)
 8001d12:	f003 fa2c 	bl	800516e <HAL_DACEx_NoiseWaveGenerate>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_DAC1_Init+0x94>
  {
    Error_Handler();
 8001d1c:	f000 fa7a 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000b5d0 	.word	0x2000b5d0
 8001d2c:	40007400 	.word	0x40007400

08001d30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <MX_RNG_Init+0x24>)
 8001d38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d3c:	f005 fa14 	bl	8007168 <HAL_RNG_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001d46:	f000 fa65 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000b674 	.word	0x2000b674
 8001d54:	50060800 	.word	0x50060800

08001d58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <MX_TIM1_Init+0xa4>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001da2:	4815      	ldr	r0, [pc, #84]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001da4:	f005 fa37 	bl	8007216 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dae:	f000 fa31 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001dc0:	f005 fd52 	bl	8007868 <HAL_TIM_ConfigClockSource>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dca:	f000 fa23 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_TIM1_Init+0xa0>)
 8001de0:	f006 fa3e 	bl	8008260 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dea:	f000 fa13 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000b684 	.word	0x2000b684
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08e      	sub	sp, #56	; 0x38
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e20:	463b      	mov	r3, r7
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e3c:	224f      	movs	r2, #79	; 0x4f
 8001e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e5a:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e5c:	f005 f9db 	bl	8007216 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e66:	f000 f9d5 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	4619      	mov	r1, r3
 8001e76:	481b      	ldr	r0, [pc, #108]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e78:	f005 fcf6 	bl	8007868 <HAL_TIM_ConfigClockSource>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e82:	f000 f9c7 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001e88:	f005 faf4 	bl	8007474 <HAL_TIM_OC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e92:	f000 f9bf 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e96:	2320      	movs	r3, #32
 8001e98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001ea6:	f006 f9db 	bl	8008260 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001eb0:	f000 f9b0 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_RETRIGERRABLE_OPM1;
 8001eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM2_Init+0xe4>)
 8001ece:	f005 fc51 	bl	8007774 <HAL_TIM_OC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001ed8:	f000 f99c 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3738      	adds	r7, #56	; 0x38
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000b6d0 	.word	0x2000b6d0

08001ee8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <MX_TIM4_Init+0x98>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7999;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001f1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f2e:	f005 f972 	bl	8007216 <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001f38:	f000 f96c 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f4a:	f005 fc8d 	bl	8007868 <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001f54:	f000 f95e 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM4_Init+0x94>)
 8001f66:	f006 f97b 	bl	8008260 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f000 f950 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000b71c 	.word	0x2000b71c
 8001f80:	40000800 	.word	0x40000800

08001f84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	; (800201c <MX_TIM5_Init+0x98>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_TIM5_Init+0x94>)
 8001faa:	224f      	movs	r2, #79	; 0x4f
 8001fac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fca:	f005 f924 	bl	8007216 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001fd4:	f000 f91e 	bl	8002214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <MX_TIM5_Init+0x94>)
 8001fe6:	f005 fc3f 	bl	8007868 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f000 f910 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_TIM5_Init+0x94>)
 8002002:	f006 f92d 	bl	8008260 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800200c:	f000 f902 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2000b768 	.word	0x2000b768
 800201c:	40000c00 	.word	0x40000c00

08002020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <MX_USART2_UART_Init+0x5c>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800202c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART2_UART_Init+0x58>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <MX_USART2_UART_Init+0x58>)
 8002064:	f006 f9a2 	bl	80083ac <HAL_UART_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f8d1 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000b7b4 	.word	0x2000b7b4
 800207c:	40004400 	.word	0x40004400

08002080 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_USART3_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800208c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART3_UART_Init+0x58>)
 80020c4:	f006 f972 	bl	80083ac <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f000 f8a1 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000b838 	.word	0x2000b838
 80020dc:	40004800 	.word	0x40004800

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_DMA_Init+0x58>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <MX_DMA_Init+0x58>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6493      	str	r3, [r2, #72]	; 0x48
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_DMA_Init+0x58>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2105      	movs	r1, #5
 8002102:	200b      	movs	r0, #11
 8002104:	f002 fd68 	bl	8004bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002108:	200b      	movs	r0, #11
 800210a:	f002 fd81 	bl	8004c10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	200d      	movs	r0, #13
 8002114:	f002 fd60 	bl	8004bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002118:	200d      	movs	r0, #13
 800211a:	f002 fd79 	bl	8004c10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2105      	movs	r1, #5
 8002122:	200e      	movs	r0, #14
 8002124:	f002 fd58 	bl	8004bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002128:	200e      	movs	r0, #14
 800212a:	f002 fd71 	bl	8004c10 <HAL_NVIC_EnableIRQ>

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_GPIO_Init+0x9c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <MX_GPIO_Init+0x9c>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <MX_GPIO_Init+0x9c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <MX_GPIO_Init+0x9c>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_GPIO_Init+0x9c>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_GPIO_Init+0xa0>)
 80021ca:	f003 fad1 	bl	8005770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	48000800 	.word	0x48000800

080021e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f007 fd59 	bl	8009ca0 <osDelay>
 80021ee:	e7fb      	b.n	80021e8 <StartDefaultTask+0x8>

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002202:	f001 f83b 	bl	800327c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40000400 	.word	0x40000400

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	e7fe      	b.n	800221c <Error_Handler+0x8>
	...

08002220 <receive_task_init>:
static void receive_task(void *params);
static int print_command(COMMAND_c * c_print);

//create receive task
int receive_task_init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af02      	add	r7, sp, #8
	COMMAND_c * c = &cmd;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <receive_task_init+0x48>)
 8002228:	607b      	str	r3, [r7, #4]
	memset(c, 0, sizeof(COMMAND_c));
 800222a:	2220      	movs	r2, #32
 800222c:	2100      	movs	r1, #0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f009 fe25 	bl	800be7e <memset>
	BaseType_t err = xTaskCreate(receive_task, "Receive_Task", 1024, &cmd, 1, NULL);
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2301      	movs	r3, #1
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <receive_task_init+0x48>)
 800223e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <receive_task_init+0x4c>)
 8002244:	480a      	ldr	r0, [pc, #40]	; (8002270 <receive_task_init+0x50>)
 8002246:	f008 fa1e 	bl	800a686 <xTaskCreate>
 800224a:	6038      	str	r0, [r7, #0]
	assert(err == pdPASS);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <receive_task_init+0x3e>
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <receive_task_init+0x54>)
 8002254:	4a08      	ldr	r2, [pc, #32]	; (8002278 <receive_task_init+0x58>)
 8002256:	211b      	movs	r1, #27
 8002258:	4808      	ldr	r0, [pc, #32]	; (800227c <receive_task_init+0x5c>)
 800225a:	f009 fca7 	bl	800bbac <__assert_func>
	return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2000b990 	.word	0x2000b990
 800226c:	08012018 	.word	0x08012018
 8002270:	08002281 	.word	0x08002281
 8002274:	08012028 	.word	0x08012028
 8002278:	080122a4 	.word	0x080122a4
 800227c:	08012038 	.word	0x08012038

08002280 <receive_task>:

static void receive_task(void *params){
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	memset(txBuffer2, '\0', sizeof(txBuffer2));
 8002288:	2264      	movs	r2, #100	; 0x64
 800228a:	2100      	movs	r1, #0
 800228c:	4811      	ldr	r0, [pc, #68]	; (80022d4 <receive_task+0x54>)
 800228e:	f009 fdf6 	bl	800be7e <memset>
	while(1)
	{
		//check for a completed line
		if(USART_getline(USART2))
 8002292:	4811      	ldr	r0, [pc, #68]	; (80022d8 <receive_task+0x58>)
 8002294:	f000 fe78 	bl	8002f88 <USART_getline>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <receive_task+0x4a>
		{
			//append source ID and write to USART3
			msgSize = sprintf((char *)txBuffer2, "%s %s\r", ring.ringID, rxBuffer2);
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <receive_task+0x5c>)
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <receive_task+0x60>)
 80022a2:	4910      	ldr	r1, [pc, #64]	; (80022e4 <receive_task+0x64>)
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <receive_task+0x54>)
 80022a6:	f00a fedb 	bl	800d060 <siprintf>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <receive_task+0x68>)
 80022ae:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart3, txBuffer2, msgSize);
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <receive_task+0x68>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	4906      	ldr	r1, [pc, #24]	; (80022d4 <receive_task+0x54>)
 80022ba:	480c      	ldr	r0, [pc, #48]	; (80022ec <receive_task+0x6c>)
 80022bc:	f006 f8c4 	bl	8008448 <HAL_UART_Transmit_IT>
			memset(rxBuffer2, '\0',  sizeof(rxBuffer2));
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	2100      	movs	r1, #0
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <receive_task+0x5c>)
 80022c6:	f009 fdda 	bl	800be7e <memset>
		}
		vTaskDelay(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f008 fb28 	bl	800a920 <vTaskDelay>
		if(USART_getline(USART2))
 80022d0:	e7df      	b.n	8002292 <receive_task+0x12>
 80022d2:	bf00      	nop
 80022d4:	2000bb38 	.word	0x2000bb38
 80022d8:	40004400 	.word	0x40004400
 80022dc:	2000bad4 	.word	0x2000bad4
 80022e0:	2000b9b0 	.word	0x2000b9b0
 80022e4:	08012054 	.word	0x08012054
 80022e8:	2000b988 	.word	0x2000b988
 80022ec:	2000b838 	.word	0x2000b838

080022f0 <ring_task_init>:
const char *pc_r = "Ring\n";

static void ring_task(void* params);

int ring_task_init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
	int msgSize;
	//clear memory at ring
	RING_r  * r = &ring;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <ring_task_init+0x8c>)
 80022f8:	60fb      	str	r3, [r7, #12]
	memset(r, 0, sizeof(RING_r));
 80022fa:	22be      	movs	r2, #190	; 0xbe
 80022fc:	2100      	movs	r1, #0
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f009 fdbd 	bl	800be7e <memset>

	//prompt for source ID
	msgSize = sprintf((char *)txBuffer2, "Enter source name (letters only):\r\n");
 8002304:	491e      	ldr	r1, [pc, #120]	; (8002380 <ring_task_init+0x90>)
 8002306:	481f      	ldr	r0, [pc, #124]	; (8002384 <ring_task_init+0x94>)
 8002308:	f00a feaa 	bl	800d060 <siprintf>
 800230c:	60b8      	str	r0, [r7, #8]
	USART_Write(USART2, txBuffer2, msgSize);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	461a      	mov	r2, r3
 8002312:	491c      	ldr	r1, [pc, #112]	; (8002384 <ring_task_init+0x94>)
 8002314:	481c      	ldr	r0, [pc, #112]	; (8002388 <ring_task_init+0x98>)
 8002316:	f000 fe99 	bl	800304c <USART_Write>

	//wait until a user name is entered
	while(!USART_getline(USART2));
 800231a:	bf00      	nop
 800231c:	481a      	ldr	r0, [pc, #104]	; (8002388 <ring_task_init+0x98>)
 800231e:	f000 fe33 	bl	8002f88 <USART_getline>
 8002322:	4603      	mov	r3, r0
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f6      	bne.n	800231c <ring_task_init+0x2c>
	sscanf((char *)rxBuffer2, "%s", r->ringID);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	4916      	ldr	r1, [pc, #88]	; (800238c <ring_task_init+0x9c>)
 8002334:	4816      	ldr	r0, [pc, #88]	; (8002390 <ring_task_init+0xa0>)
 8002336:	f00a feb3 	bl	800d0a0 <siscanf>

	//create ring task
	BaseType_t err = xTaskCreate(ring_task, "Ring_Task", 1024, (void *) r, 2, NULL);
 800233a:	2300      	movs	r3, #0
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	2302      	movs	r3, #2
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002348:	4912      	ldr	r1, [pc, #72]	; (8002394 <ring_task_init+0xa4>)
 800234a:	4813      	ldr	r0, [pc, #76]	; (8002398 <ring_task_init+0xa8>)
 800234c:	f008 f99b 	bl	800a686 <xTaskCreate>
 8002350:	6078      	str	r0, [r7, #4]
	assert(err == pdPASS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <ring_task_init+0x74>
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <ring_task_init+0xac>)
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <ring_task_init+0xb0>)
 800235c:	212a      	movs	r1, #42	; 0x2a
 800235e:	4811      	ldr	r0, [pc, #68]	; (80023a4 <ring_task_init+0xb4>)
 8002360:	f009 fc24 	bl	800bbac <__assert_func>

	MFS_init();
 8002364:	f7fe febe 	bl	80010e4 <MFS_init>
	//enable interrupt
	HAL_UART_Receive_IT(&huart3, &rxByte3, 1);
 8002368:	2201      	movs	r2, #1
 800236a:	490f      	ldr	r1, [pc, #60]	; (80023a8 <ring_task_init+0xb8>)
 800236c:	480f      	ldr	r0, [pc, #60]	; (80023ac <ring_task_init+0xbc>)
 800236e:	f006 f8d9 	bl	8008524 <HAL_UART_Receive_IT>
	return 0;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000b9b0 	.word	0x2000b9b0
 8002380:	08012170 	.word	0x08012170
 8002384:	2000bb38 	.word	0x2000bb38
 8002388:	40004400 	.word	0x40004400
 800238c:	08012194 	.word	0x08012194
 8002390:	2000bad4 	.word	0x2000bad4
 8002394:	08012198 	.word	0x08012198
 8002398:	080023b1 	.word	0x080023b1
 800239c:	080121a4 	.word	0x080121a4
 80023a0:	080122b8 	.word	0x080122b8
 80023a4:	080121b4 	.word	0x080121b4
 80023a8:	2000bb9e 	.word	0x2000bb9e
 80023ac:	2000b838 	.word	0x2000b838

080023b0 <ring_task>:

static void ring_task(void* params){
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b09d      	sub	sp, #116	; 0x74
 80023b4:	af08      	add	r7, sp, #32
 80023b6:	6078      	str	r0, [r7, #4]
	RING_r * r = (RING_r *)params; //pointer to received command
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	char gen_cmd[] = "gen\0";
 80023bc:	4aa1      	ldr	r2, [pc, #644]	; (8002644 <ring_task+0x294>)
 80023be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023c6:	6018      	str	r0, [r3, #0]
 80023c8:	3304      	adds	r3, #4
 80023ca:	7019      	strb	r1, [r3, #0]
	char cap_cmd[] = "cap\0";
 80023cc:	4a9e      	ldr	r2, [pc, #632]	; (8002648 <ring_task+0x298>)
 80023ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d6:	6018      	str	r0, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	7019      	strb	r1, [r3, #0]
	char msg_cmd[] = "msg\0";
 80023dc:	4a9b      	ldr	r2, [pc, #620]	; (800264c <ring_task+0x29c>)
 80023de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e6:	6018      	str	r0, [r3, #0]
 80023e8:	3304      	adds	r3, #4
 80023ea:	7019      	strb	r1, [r3, #0]
	char led_cmd[] = "led\0";
 80023ec:	4a98      	ldr	r2, [pc, #608]	; (8002650 <ring_task+0x2a0>)
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023f6:	6018      	str	r0, [r3, #0]
 80023f8:	3304      	adds	r3, #4
 80023fa:	7019      	strb	r1, [r3, #0]
	char on[] = "on\0";
 80023fc:	f646 636f 	movw	r3, #28271	; 0x6e6f
 8002400:	61fb      	str	r3, [r7, #28]
	char off[] = "off\0";
 8002402:	4a94      	ldr	r2, [pc, #592]	; (8002654 <ring_task+0x2a4>)
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	e892 0003 	ldmia.w	r2, {r0, r1}
 800240c:	6018      	str	r0, [r3, #0]
 800240e:	3304      	adds	r3, #4
 8002410:	7019      	strb	r1, [r3, #0]
	int msgSize;
	unsigned char temp_ringID[10];
	//enable HAL UART interrupts
	HAL_UART_Receive_IT(&huart3, &rxByte3, 1);
 8002412:	2201      	movs	r2, #1
 8002414:	4990      	ldr	r1, [pc, #576]	; (8002658 <ring_task+0x2a8>)
 8002416:	4891      	ldr	r0, [pc, #580]	; (800265c <ring_task+0x2ac>)
 8002418:	f006 f884 	bl	8008524 <HAL_UART_Receive_IT>
	while(1)
	{
		//if flag is raised (UART3 has received a line)
		if(uart3_line_flag)
 800241c:	4b90      	ldr	r3, [pc, #576]	; (8002660 <ring_task+0x2b0>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 810a 	beq.w	800263a <ring_task+0x28a>
		{
			//read in command
			sscanf((char *)rxBuffer3, "%s %s %s %s %s %s %s %s %s", r->sourceID, r->destID, r->command, r->param_1, r->param_2, r->param_3, r->param_4, r->param_5, r->param_6);
 8002426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002428:	f103 0c0a 	add.w	ip, r3, #10
 800242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242e:	f103 0e14 	add.w	lr, r3, #20
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	331e      	adds	r3, #30
 8002436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002438:	325a      	adds	r2, #90	; 0x5a
 800243a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800243c:	318c      	adds	r1, #140	; 0x8c
 800243e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002440:	3096      	adds	r0, #150	; 0x96
 8002442:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002444:	34a0      	adds	r4, #160	; 0xa0
 8002446:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002448:	35aa      	adds	r5, #170	; 0xaa
 800244a:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800244c:	36b4      	adds	r6, #180	; 0xb4
 800244e:	9606      	str	r6, [sp, #24]
 8002450:	9505      	str	r5, [sp, #20]
 8002452:	9404      	str	r4, [sp, #16]
 8002454:	9003      	str	r0, [sp, #12]
 8002456:	9102      	str	r1, [sp, #8]
 8002458:	9201      	str	r2, [sp, #4]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4673      	mov	r3, lr
 800245e:	4662      	mov	r2, ip
 8002460:	4980      	ldr	r1, [pc, #512]	; (8002664 <ring_task+0x2b4>)
 8002462:	4881      	ldr	r0, [pc, #516]	; (8002668 <ring_task+0x2b8>)
 8002464:	f00a fe1c 	bl	800d0a0 <siscanf>

			//check if destination ID matches ring ID
			if(strcasecmp((char *) r->destID, (char *) r->ringID) == 0)
 8002468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246a:	3314      	adds	r3, #20
 800246c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f00a fe87 	bl	800d184 <strcasecmp>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8097 	bne.w	80025ac <ring_task+0x1fc>
			{
				//received command
				msgSize = sprintf((char *)txBuffer2, "Received command: %s\r\n", r->command);
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	331e      	adds	r3, #30
 8002482:	461a      	mov	r2, r3
 8002484:	4979      	ldr	r1, [pc, #484]	; (800266c <ring_task+0x2bc>)
 8002486:	487a      	ldr	r0, [pc, #488]	; (8002670 <ring_task+0x2c0>)
 8002488:	f00a fdea 	bl	800d060 <siprintf>
 800248c:	64b8      	str	r0, [r7, #72]	; 0x48
				USART_Write(USART2, txBuffer2, msgSize);
 800248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002490:	461a      	mov	r2, r3
 8002492:	4977      	ldr	r1, [pc, #476]	; (8002670 <ring_task+0x2c0>)
 8002494:	4877      	ldr	r0, [pc, #476]	; (8002674 <ring_task+0x2c4>)
 8002496:	f000 fdd9 	bl	800304c <USART_Write>
				memset(txBuffer2, '\0', sizeof(txBuffer2)); //reset buffer to all null terminators
 800249a:	2265      	movs	r2, #101	; 0x65
 800249c:	2100      	movs	r1, #0
 800249e:	4874      	ldr	r0, [pc, #464]	; (8002670 <ring_task+0x2c0>)
 80024a0:	f009 fced 	bl	800be7e <memset>
				//if command matches gen or cap
				if((strcasecmp((char *) r->command, gen_cmd) == 0) || strcasecmp((char *) r->command, cap_cmd) == 0)
 80024a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a6:	331e      	adds	r3, #30
 80024a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f00a fe68 	bl	800d184 <strcasecmp>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <ring_task+0x120>
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	331e      	adds	r3, #30
 80024be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00a fe5d 	bl	800d184 <strcasecmp>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <ring_task+0x126>
				{
					parse_channel_cmd(r);
 80024d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80024d2:	f000 f8dd 	bl	8002690 <parse_channel_cmd>
				}

				//if received command is msg, print out message
				if((strcasecmp((char *) r->command, msg_cmd) == 0))
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	331e      	adds	r3, #30
 80024da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00a fe4f 	bl	800d184 <strcasecmp>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10f      	bne.n	800250c <ring_task+0x15c>
				{
					msgSize = sprintf((char *)txBuffer2, "%s: %s\r\n", r->sourceID, r->param_1);
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	f103 020a 	add.w	r2, r3, #10
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	335a      	adds	r3, #90	; 0x5a
 80024f6:	4960      	ldr	r1, [pc, #384]	; (8002678 <ring_task+0x2c8>)
 80024f8:	485d      	ldr	r0, [pc, #372]	; (8002670 <ring_task+0x2c0>)
 80024fa:	f00a fdb1 	bl	800d060 <siprintf>
 80024fe:	64b8      	str	r0, [r7, #72]	; 0x48
					USART_Write(USART2, txBuffer2, msgSize);
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	461a      	mov	r2, r3
 8002504:	495a      	ldr	r1, [pc, #360]	; (8002670 <ring_task+0x2c0>)
 8002506:	485b      	ldr	r0, [pc, #364]	; (8002674 <ring_task+0x2c4>)
 8002508:	f000 fda0 	bl	800304c <USART_Write>
				}

				//if received command is LED, turn on LED
				if((strcasecmp((char *) r->command, led_cmd) == 0))
 800250c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250e:	331e      	adds	r3, #30
 8002510:	f107 0220 	add.w	r2, r7, #32
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f00a fe34 	bl	800d184 <strcasecmp>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d166      	bne.n	80025f0 <ring_task+0x240>
				{
					msgSize = sprintf((char *)txBuffer2, "%s: LED %s turned %s\r\n", r->sourceID, r->param_1, r->param_2);
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	f103 020a 	add.w	r2, r3, #10
 8002528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252a:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	338c      	adds	r3, #140	; 0x8c
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	460b      	mov	r3, r1
 8002536:	4951      	ldr	r1, [pc, #324]	; (800267c <ring_task+0x2cc>)
 8002538:	484d      	ldr	r0, [pc, #308]	; (8002670 <ring_task+0x2c0>)
 800253a:	f00a fd91 	bl	800d060 <siprintf>
 800253e:	64b8      	str	r0, [r7, #72]	; 0x48
					USART_Write(USART2, txBuffer2, msgSize);
 8002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002542:	461a      	mov	r2, r3
 8002544:	494a      	ldr	r1, [pc, #296]	; (8002670 <ring_task+0x2c0>)
 8002546:	484b      	ldr	r0, [pc, #300]	; (8002674 <ring_task+0x2c4>)
 8002548:	f000 fd80 	bl	800304c <USART_Write>
					if((strcasecmp((char *) r->param_2, on) == 0))
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	338c      	adds	r3, #140	; 0x8c
 8002550:	f107 021c 	add.w	r2, r7, #28
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f00a fe14 	bl	800d184 <strcasecmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <ring_task+0x1cc>
					{
						int led = atoi((const char*)r->param_1);
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	335a      	adds	r3, #90	; 0x5a
 8002566:	4618      	mov	r0, r3
 8002568:	f009 fb41 	bl	800bbee <atoi>
 800256c:	6438      	str	r0, [r7, #64]	; 0x40
						MFS_set_led(led, 1);
 800256e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2101      	movs	r1, #1
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fddd 	bl	8001134 <MFS_set_led>
 800257a:	e039      	b.n	80025f0 <ring_task+0x240>
					}else if((strcmp((char *) r->param_2, off) == 0))
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	338c      	adds	r3, #140	; 0x8c
 8002580:	f107 0214 	add.w	r2, r7, #20
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe22 	bl	80001d0 <strcmp>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12e      	bne.n	80025f0 <ring_task+0x240>
					{
						int led = atoi((const char*)r->param_1);
 8002592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002594:	335a      	adds	r3, #90	; 0x5a
 8002596:	4618      	mov	r0, r3
 8002598:	f009 fb29 	bl	800bbee <atoi>
 800259c:	6478      	str	r0, [r7, #68]	; 0x44
						MFS_set_led(led, 0);
 800259e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fdc5 	bl	8001134 <MFS_set_led>
 80025aa:	e021      	b.n	80025f0 <ring_task+0x240>
					}
				}
			} else{
				//if not the sender of the message, transmit it back
				if((strcasecmp((char *) r->sourceID, (char *) r->ringID) != 0)){
 80025ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ae:	330a      	adds	r3, #10
 80025b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00a fde5 	bl	800d184 <strcasecmp>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d017      	beq.n	80025f0 <ring_task+0x240>
					//if not intended destination, send message out
					msgSize = sprintf((char *)txBuffer2, "Not intended target\r\n");
 80025c0:	492f      	ldr	r1, [pc, #188]	; (8002680 <ring_task+0x2d0>)
 80025c2:	482b      	ldr	r0, [pc, #172]	; (8002670 <ring_task+0x2c0>)
 80025c4:	f00a fd4c 	bl	800d060 <siprintf>
 80025c8:	64b8      	str	r0, [r7, #72]	; 0x48
					USART_Write(USART2, txBuffer2, msgSize);
 80025ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025cc:	461a      	mov	r2, r3
 80025ce:	4928      	ldr	r1, [pc, #160]	; (8002670 <ring_task+0x2c0>)
 80025d0:	4828      	ldr	r0, [pc, #160]	; (8002674 <ring_task+0x2c4>)
 80025d2:	f000 fd3b 	bl	800304c <USART_Write>
					msgSize = sprintf((char *)txBuffer3, "%s\r", rxBuffer3);
 80025d6:	4a24      	ldr	r2, [pc, #144]	; (8002668 <ring_task+0x2b8>)
 80025d8:	492a      	ldr	r1, [pc, #168]	; (8002684 <ring_task+0x2d4>)
 80025da:	482b      	ldr	r0, [pc, #172]	; (8002688 <ring_task+0x2d8>)
 80025dc:	f00a fd40 	bl	800d060 <siprintf>
 80025e0:	64b8      	str	r0, [r7, #72]	; 0x48
					HAL_UART_Transmit_IT(&huart3, txBuffer3, msgSize);
 80025e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	4927      	ldr	r1, [pc, #156]	; (8002688 <ring_task+0x2d8>)
 80025ea:	481c      	ldr	r0, [pc, #112]	; (800265c <ring_task+0x2ac>)
 80025ec:	f005 ff2c 	bl	8008448 <HAL_UART_Transmit_IT>
				}
				//USART_Write(USART3, rxBuffer3, sizeof(rxBuffer3));
			}
			uart3_line_flag = 0;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <ring_task+0x2b0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
			memset(rxBuffer3, '\0', sizeof(rxBuffer3)); //reset buffer to all null terminators
 80025f6:	2264      	movs	r2, #100	; 0x64
 80025f8:	2100      	movs	r1, #0
 80025fa:	481b      	ldr	r0, [pc, #108]	; (8002668 <ring_task+0x2b8>)
 80025fc:	f009 fc3f 	bl	800be7e <memset>
			memset(txBuffer2, '\0', sizeof(txBuffer2)); //reset buffer to all null terminators
 8002600:	2265      	movs	r2, #101	; 0x65
 8002602:	2100      	movs	r1, #0
 8002604:	481a      	ldr	r0, [pc, #104]	; (8002670 <ring_task+0x2c0>)
 8002606:	f009 fc3a 	bl	800be7e <memset>

			//store ring ID and clear ring command
			// copying ring ID to temporary
			strcpy((char*)temp_ringID, (char*) r->ringID);
 800260a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f00a fdd0 	bl	800d1b8 <strcpy>
			memset(r, '\0', sizeof(RING_r));
 8002618:	22be      	movs	r2, #190	; 0xbe
 800261a:	2100      	movs	r1, #0
 800261c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800261e:	f009 fc2e 	bl	800be7e <memset>
			strcpy((char*) r->ringID, (char*)temp_ringID);
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	f107 0208 	add.w	r2, r7, #8
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f00a fdc4 	bl	800d1b8 <strcpy>

			//enable interrupt
			HAL_UART_Receive_IT(&huart3, &rxByte3, 1);
 8002630:	2201      	movs	r2, #1
 8002632:	4909      	ldr	r1, [pc, #36]	; (8002658 <ring_task+0x2a8>)
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <ring_task+0x2ac>)
 8002636:	f005 ff75 	bl	8008524 <HAL_UART_Receive_IT>
		}

		vTaskDelay(1);
 800263a:	2001      	movs	r0, #1
 800263c:	f008 f970 	bl	800a920 <vTaskDelay>
		if(uart3_line_flag)
 8002640:	e6ec      	b.n	800241c <ring_task+0x6c>
 8002642:	bf00      	nop
 8002644:	0801223c 	.word	0x0801223c
 8002648:	08012244 	.word	0x08012244
 800264c:	0801224c 	.word	0x0801224c
 8002650:	08012254 	.word	0x08012254
 8002654:	0801225c 	.word	0x0801225c
 8002658:	2000bb9e 	.word	0x2000bb9e
 800265c:	2000b838 	.word	0x2000b838
 8002660:	2000bac8 	.word	0x2000bac8
 8002664:	080121c8 	.word	0x080121c8
 8002668:	2000bba0 	.word	0x2000bba0
 800266c:	080121e4 	.word	0x080121e4
 8002670:	2000bb38 	.word	0x2000bb38
 8002674:	40004400 	.word	0x40004400
 8002678:	080121fc 	.word	0x080121fc
 800267c:	08012208 	.word	0x08012208
 8002680:	08012220 	.word	0x08012220
 8002684:	08012238 	.word	0x08012238
 8002688:	2000bc04 	.word	0x2000bc04
 800268c:	00000000 	.word	0x00000000

08002690 <parse_channel_cmd>:
	*/
}

//Use ring command parameters to create command for channel tasks
void parse_channel_cmd(RING_r * r)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	double minv, maxv;
	COMMAND_c * c = &cmd;
 8002698:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <parse_channel_cmd+0x100>)
 800269a:	60bb      	str	r3, [r7, #8]
	memset(c, 0, sizeof(COMMAND_c));
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2220      	movs	r2, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f009 fbeb 	bl	800be7e <memset>
	strcpy((char*) c->name, (char*) r->command);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	331e      	adds	r3, #30
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f00a fd80 	bl	800d1b8 <strcpy>
	c->channel = atoi((char *)r->param_1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	335a      	adds	r3, #90	; 0x5a
 80026bc:	68bc      	ldr	r4, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f009 fa95 	bl	800bbee <atoi>
 80026c4:	4603      	mov	r3, r0
 80026c6:	60a3      	str	r3, [r4, #8]
	c->type = (unsigned char) r->param_2[0];
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80026d0:	731a      	strb	r2, [r3, #12]
	c->freq = atof((char *)r->param_3);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3396      	adds	r3, #150	; 0x96
 80026d6:	68bc      	ldr	r4, [r7, #8]
 80026d8:	4618      	mov	r0, r3
 80026da:	f009 fa85 	bl	800bbe8 <atof>
 80026de:	eeb0 7a40 	vmov.f32	s14, s0
 80026e2:	eef0 7a60 	vmov.f32	s15, s1
 80026e6:	ed84 7b04 	vstr	d7, [r4, #16]

	minv = atof((char *)r->param_4);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	33a0      	adds	r3, #160	; 0xa0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f009 fa7a 	bl	800bbe8 <atof>
 80026f4:	ed87 0b06 	vstr	d0, [r7, #24]
	maxv = atof((char *)r->param_5);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	33aa      	adds	r3, #170	; 0xaa
 80026fc:	4618      	mov	r0, r3
 80026fe:	f009 fa73 	bl	800bbe8 <atof>
 8002702:	ed87 0b04 	vstr	d0, [r7, #16]
	c->dac_minv = (float) (4095/3.3) * minv;
 8002706:	a320      	add	r3, pc, #128	; (adr r3, 8002788 <parse_channel_cmd+0xf8>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002710:	f7fd ff82 	bl	8000618 <__aeabi_dmul>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	68bc      	ldr	r4, [r7, #8]
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fa53 	bl	8000bc8 <__aeabi_d2uiz>
 8002722:	4603      	mov	r3, r0
 8002724:	b29b      	uxth	r3, r3
 8002726:	8323      	strh	r3, [r4, #24]
	c->dac_maxv = (float) (4095/3.3) * maxv;
 8002728:	a317      	add	r3, pc, #92	; (adr r3, 8002788 <parse_channel_cmd+0xf8>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002732:	f7fd ff71 	bl	8000618 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	68bc      	ldr	r4, [r7, #8]
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe fa42 	bl	8000bc8 <__aeabi_d2uiz>
 8002744:	4603      	mov	r3, r0
 8002746:	b29b      	uxth	r3, r3
 8002748:	8363      	strh	r3, [r4, #26]

	c->noise = atoi((char *)r->param_6);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	33b4      	adds	r3, #180	; 0xb4
 800274e:	68bc      	ldr	r4, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f009 fa4c 	bl	800bbee <atoi>
 8002756:	4603      	mov	r3, r0
 8002758:	61e3      	str	r3, [r4, #28]
	BaseType_t err = xQueueSendToFront(cmd_queue, &c, 0);
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <parse_channel_cmd+0x104>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f107 0108 	add.w	r1, r7, #8
 8002762:	2301      	movs	r3, #1
 8002764:	2200      	movs	r2, #0
 8002766:	f007 fc25 	bl	8009fb4 <xQueueGenericSend>
 800276a:	60f8      	str	r0, [r7, #12]
	assert(err == pdPASS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d005      	beq.n	800277e <parse_channel_cmd+0xee>
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <parse_channel_cmd+0x108>)
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <parse_channel_cmd+0x10c>)
 8002776:	21ab      	movs	r1, #171	; 0xab
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <parse_channel_cmd+0x110>)
 800277a:	f009 fa17 	bl	800bbac <__assert_func>
}
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	e0000000 	.word	0xe0000000
 800278c:	409363a2 	.word	0x409363a2
 8002790:	2000b990 	.word	0x2000b990
 8002794:	2000042c 	.word	0x2000042c
 8002798:	080121a4 	.word	0x080121a4
 800279c:	080122c8 	.word	0x080122c8
 80027a0:	080121b4 	.word	0x080121b4

080027a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_MspInit+0x4c>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_MspInit+0x4c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6613      	str	r3, [r2, #96]	; 0x60
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_MspInit+0x4c>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_MspInit+0x4c>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_MspInit+0x4c>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6593      	str	r3, [r2, #88]	; 0x58
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_MspInit+0x4c>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	210f      	movs	r1, #15
 80027de:	f06f 0001 	mvn.w	r0, #1
 80027e2:	f002 f9f9 	bl	8004bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2b      	ldr	r2, [pc, #172]	; (80028c0 <HAL_ADC_MspInit+0xcc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d150      	bne.n	80028b8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <HAL_ADC_MspInit+0xd0>)
 800281c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_ADC_MspInit+0xd0>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_ADC_MspInit+0xd0>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002846:	2301      	movs	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800284a:	230b      	movs	r3, #11
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f002 ff88 	bl	8005770 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_ADC_MspInit+0xd8>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002884:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800289c:	480a      	ldr	r0, [pc, #40]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 800289e:	f002 fcf1 	bl	8005284 <HAL_DMA_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_ADC_MspInit+0xb8>
    {
      Error_Handler();
 80028a8:	f7ff fcb4 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a06      	ldr	r2, [pc, #24]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <HAL_ADC_MspInit+0xd4>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	50040000 	.word	0x50040000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	2000b588 	.word	0x2000b588
 80028cc:	40020008 	.word	0x40020008

080028d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a41      	ldr	r2, [pc, #260]	; (80029f4 <HAL_DAC_MspInit+0x124>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d17c      	bne.n	80029ec <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_DAC_MspInit+0x128>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <HAL_DAC_MspInit+0x128>)
 80028f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028fc:	6593      	str	r3, [r2, #88]	; 0x58
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_DAC_MspInit+0x128>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_DAC_MspInit+0x128>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <HAL_DAC_MspInit+0x128>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <HAL_DAC_MspInit+0x128>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002922:	2330      	movs	r3, #48	; 0x30
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002926:	2303      	movs	r3, #3
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002938:	f002 ff1a 	bl	8005770 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 800293e:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <HAL_DAC_MspInit+0x130>)
 8002940:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002942:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 8002944:	2206      	movs	r2, #6
 8002946:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002948:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 800294a:	2210      	movs	r2, #16
 800294c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 8002956:	2280      	movs	r2, #128	; 0x80
 8002958:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 800295c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002960:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 8002964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002968:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 800296c:	2220      	movs	r2, #32
 800296e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 8002972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002976:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002978:	4820      	ldr	r0, [pc, #128]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 800297a:	f002 fc83 	bl	8005284 <HAL_DMA_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8002984:	f7ff fc46 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_DAC_MspInit+0x12c>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 8002996:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <HAL_DAC_MspInit+0x138>)
 8002998:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 800299c:	2205      	movs	r2, #5
 800299e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029c4:	2220      	movs	r2, #32
 80029c6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029d2:	f002 fc57 	bl	8005284 <HAL_DMA_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80029dc:	f7ff fc1a 	bl	8002214 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_DAC_MspInit+0x134>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80029ec:	bf00      	nop
 80029ee:	3728      	adds	r7, #40	; 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40007400 	.word	0x40007400
 80029f8:	40021000 	.word	0x40021000
 80029fc:	2000b5e4 	.word	0x2000b5e4
 8002a00:	40020030 	.word	0x40020030
 8002a04:	2000b62c 	.word	0x2000b62c
 8002a08:	40020044 	.word	0x40020044

08002a0c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_RNG_MspInit+0x38>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RNG_MspInit+0x3c>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_RNG_MspInit+0x3c>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_RNG_MspInit+0x3c>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	50060800 	.word	0x50060800
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <HAL_TIM_Base_MspInit+0xa4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a68:	6613      	str	r3, [r2, #96]	; 0x60
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a76:	e034      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d10c      	bne.n	8002a9c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]
}
 8002a9a:	e022      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_TIM_Base_MspInit+0xac>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
}
 8002abe:	e010      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_TIM_Base_MspInit+0xb0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002ad0:	f043 0308 	orr.w	r3, r3, #8
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_TIM_Base_MspInit+0xa8>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0ae      	sub	sp, #184	; 0xb8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b18:	f107 031c 	add.w	r3, r7, #28
 8002b1c:	2288      	movs	r2, #136	; 0x88
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f009 f9ac 	bl	800be7e <memset>
  if(huart->Instance==USART2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a46      	ldr	r2, [pc, #280]	; (8002c44 <HAL_UART_MspInit+0x144>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d13c      	bne.n	8002baa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 fe57 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b48:	f7ff fb64 	bl	8002214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b4c:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	4a3d      	ldr	r2, [pc, #244]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	6593      	str	r3, [r2, #88]	; 0x58
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	4a37      	ldr	r2, [pc, #220]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b94:	2307      	movs	r3, #7
 8002b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f002 fde4 	bl	8005770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ba8:	e048      	b.n	8002c3c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <HAL_UART_MspInit+0x14c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d143      	bne.n	8002c3c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 8002bb8:	2320      	movs	r3, #32
 8002bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fe15 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002bcc:	f7ff fb22 	bl	8002214 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bec:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_UART_MspInit+0x148>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c24:	4619      	mov	r1, r3
 8002c26:	480a      	ldr	r0, [pc, #40]	; (8002c50 <HAL_UART_MspInit+0x150>)
 8002c28:	f002 fda2 	bl	8005770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2105      	movs	r1, #5
 8002c30:	2027      	movs	r0, #39	; 0x27
 8002c32:	f001 ffd1 	bl	8004bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c36:	2027      	movs	r0, #39	; 0x27
 8002c38:	f001 ffea 	bl	8004c10 <HAL_NVIC_EnableIRQ>
}
 8002c3c:	bf00      	nop
 8002c3e:	37b8      	adds	r7, #184	; 0xb8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	48000800 	.word	0x48000800

08002c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c62:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_InitTick+0xe0>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <HAL_InitTick+0xe0>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_InitTick+0xe0>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c7a:	f107 0210 	add.w	r2, r7, #16
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fd21 	bl	80066cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c94:	f003 fcee 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 8002c98:	6378      	str	r0, [r7, #52]	; 0x34
 8002c9a:	e004      	b.n	8002ca6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c9c:	f003 fcea 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_InitTick+0xe4>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0c9b      	lsrs	r3, r3, #18
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_InitTick+0xec>)
 8002cb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cc0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002cc2:	4a1e      	ldr	r2, [pc, #120]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002cda:	4818      	ldr	r0, [pc, #96]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cdc:	f004 fa9b 	bl	8007216 <HAL_TIM_Base_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11b      	bne.n	8002d26 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002cee:	4813      	ldr	r0, [pc, #76]	; (8002d3c <HAL_InitTick+0xe8>)
 8002cf0:	f004 fb50 	bl	8007394 <HAL_TIM_Base_Start_IT>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d111      	bne.n	8002d26 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d02:	201d      	movs	r0, #29
 8002d04:	f001 ff84 	bl	8004c10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d808      	bhi.n	8002d20 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	201d      	movs	r0, #29
 8002d14:	f001 ff60 	bl	8004bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d18:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_InitTick+0xf0>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e002      	b.n	8002d26 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3738      	adds	r7, #56	; 0x38
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	431bde83 	.word	0x431bde83
 8002d3c:	2000ba70 	.word	0x2000ba70
 8002d40:	40000400 	.word	0x40000400
 8002d44:	20000230 	.word	0x20000230

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <NMI_Handler+0x4>

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <DMA1_Channel1_IRQHandler+0x10>)
 8002d7a:	f002 fc1a 	bl	80055b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000b588 	.word	0x2000b588

08002d88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <DMA1_Channel3_IRQHandler+0x10>)
 8002d8e:	f002 fc10 	bl	80055b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000b5e4 	.word	0x2000b5e4

08002d9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Channel4_IRQHandler+0x10>)
 8002da2:	f002 fc06 	bl	80055b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000b62c 	.word	0x2000b62c

08002db0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <TIM3_IRQHandler+0x10>)
 8002db6:	f004 fbbe 	bl	8007536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000ba70 	.word	0x2000ba70

08002dc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART3_IRQHandler+0x10>)
 8002dca:	f005 fc01 	bl	80085d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000b838 	.word	0x2000b838

08002dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return 1;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_kill>:

int _kill(int pid, int sig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df2:	f008 ff01 	bl	800bbf8 <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2216      	movs	r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_exit>:

void _exit (int status)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e1a:	e7fe      	b.n	8002e1a <_exit+0x12>

08002e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e00a      	b.n	8002e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e2e:	f3af 8000 	nop.w
 8002e32:	4601      	mov	r1, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	b2ca      	uxtb	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf0      	blt.n	8002e2e <_read+0x12>
  }

  return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e009      	b.n	8002e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbf1      	blt.n	8002e68 <_write+0x12>
  }
  return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_close>:

int _close(int file)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <_isatty>:

int _isatty(int file)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f008 fe66 	bl	800bbf8 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20018000 	.word	0x20018000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	2000babc 	.word	0x2000babc
 8002f60:	20013308 	.word	0x20013308

08002f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <USART_getline>:
uint8_t rxByte3; //char and buffer for USART3
uint8_t rxBuffer3[UART_BUFFER_SIZE];
uint8_t txBuffer3[UART_BUFFER_SIZE+1];

_Bool USART_getline(USART_TypeDef * USARTx)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	rxByte2 = USART_Read(USARTx);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f88d 	bl	80030b0 <USART_Read>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <USART_getline+0xa8>)
 8002f9c:	701a      	strb	r2, [r3, #0]
	//if character isn't null
	if(rxByte2 != 255)
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <USART_getline+0xa8>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d03c      	beq.n	8003020 <USART_getline+0x98>
	{
		if(rxByte2 == '\r')
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <USART_getline+0xa8>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b0d      	cmp	r3, #13
 8002fac:	d112      	bne.n	8002fd4 <USART_getline+0x4c>
		{
			n = sprintf((char *)txBuffer2, "\r\n");
 8002fae:	4921      	ldr	r1, [pc, #132]	; (8003034 <USART_getline+0xac>)
 8002fb0:	4821      	ldr	r0, [pc, #132]	; (8003038 <USART_getline+0xb0>)
 8002fb2:	f00a f855 	bl	800d060 <siprintf>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4a20      	ldr	r2, [pc, #128]	; (800303c <USART_getline+0xb4>)
 8002fba:	6013      	str	r3, [r2, #0]
			USART_Write(USART2, txBuffer2, n);
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <USART_getline+0xb4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	491d      	ldr	r1, [pc, #116]	; (8003038 <USART_getline+0xb0>)
 8002fc4:	481e      	ldr	r0, [pc, #120]	; (8003040 <USART_getline+0xb8>)
 8002fc6:	f000 f841 	bl	800304c <USART_Write>
			uart2_index = 0;
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <USART_getline+0xbc>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
			return 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e028      	b.n	8003026 <USART_getline+0x9e>
		}
		else if(rxByte2 == '\177'){
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <USART_getline+0xa8>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002fda:	d110      	bne.n	8002ffe <USART_getline+0x76>
			if(uart2_index > 0)
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <USART_getline+0xbc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dd0a      	ble.n	8002ffa <USART_getline+0x72>
			{
				rxBuffer2[uart2_index - 1] = '\0';
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <USART_getline+0xbc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <USART_getline+0xc0>)
 8002fec:	2100      	movs	r1, #0
 8002fee:	54d1      	strb	r1, [r2, r3]
				uart2_index --;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <USART_getline+0xbc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <USART_getline+0xbc>)
 8002ff8:	6013      	str	r3, [r2, #0]
			}
			//USART_Write(USARTx, '\r\n');
			return 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e013      	b.n	8003026 <USART_getline+0x9e>
		}
		else if(uart2_index < UART_BUFFER_SIZE){
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <USART_getline+0xbc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b63      	cmp	r3, #99	; 0x63
 8003004:	dc0e      	bgt.n	8003024 <USART_getline+0x9c>
			rxBuffer2[uart2_index] = rxByte2;
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <USART_getline+0xbc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <USART_getline+0xa8>)
 800300c:	7811      	ldrb	r1, [r2, #0]
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <USART_getline+0xc0>)
 8003010:	54d1      	strb	r1, [r2, r3]
			uart2_index++;
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <USART_getline+0xbc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <USART_getline+0xbc>)
 800301a:	6013      	str	r3, [r2, #0]
       	    return 0;
 800301c:	2300      	movs	r3, #0
 800301e:	e002      	b.n	8003026 <USART_getline+0x9e>
		}
	}else{
		return 0;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <USART_getline+0x9e>
	}
	return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000bad0 	.word	0x2000bad0
 8003034:	08012264 	.word	0x08012264
 8003038:	2000bb38 	.word	0x2000bb38
 800303c:	2000bacc 	.word	0x2000bacc
 8003040:	40004400 	.word	0x40004400
 8003044:	2000bac0 	.word	0x2000bac0
 8003048:	2000bad4 	.word	0x2000bad4

0800304c <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e010      	b.n	8003080 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 800305e:	bf00      	nop
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f9      	beq.n	8003060 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d8ea      	bhi.n	800305e <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8003088:	bf00      	nop
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f9      	beq.n	800308a <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	61da      	str	r2, [r3, #28]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <USART_Read>:

uint8_t USART_Read (USART_TypeDef * USARTx) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if(!(USARTx->ISR & USART_ISR_RXNE))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <USART_Read+0x18>
	{
		return -1;
 80030c4:	23ff      	movs	r3, #255	; 0xff
 80030c6:	e018      	b.n	80030fa <USART_Read+0x4a>
	} else{
		// Reading USART_DR automatically clears the RXNE flag
		//USART_Write(USARTx, (uint8_t)(USARTx->RDR & 0xFF));
		rxBytePnt = ((uint8_t)(USARTx->RDR & 0xFF));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <USART_Read+0x54>)
 80030d2:	701a      	strb	r2, [r3, #0]
		n = sprintf((char *)txBuffer2, "%c", rxBytePnt);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <USART_Read+0x54>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	490b      	ldr	r1, [pc, #44]	; (8003108 <USART_Read+0x58>)
 80030dc:	480b      	ldr	r0, [pc, #44]	; (800310c <USART_Read+0x5c>)
 80030de:	f009 ffbf 	bl	800d060 <siprintf>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <USART_Read+0x60>)
 80030e6:	6013      	str	r3, [r2, #0]
 		USART_Write(USART2, txBuffer2, n);
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <USART_Read+0x60>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4907      	ldr	r1, [pc, #28]	; (800310c <USART_Read+0x5c>)
 80030f0:	4808      	ldr	r0, [pc, #32]	; (8003114 <USART_Read+0x64>)
 80030f2:	f7ff ffab 	bl	800304c <USART_Write>
		//HAL_UART_Transmit(USARTx, (uint8_t*)&rxBytePnt, sizeof(rxBytePnt), 1);
		return rxBytePnt;
 80030f6:	4b03      	ldr	r3, [pc, #12]	; (8003104 <USART_Read+0x54>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
	}
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000bb9d 	.word	0x2000bb9d
 8003108:	08012268 	.word	0x08012268
 800310c:	2000bb38 	.word	0x2000bb38
 8003110:	2000bacc 	.word	0x2000bacc
 8003114:	40004400 	.word	0x40004400

08003118 <HAL_UART_RxCpltCallback>:

//interrupt handler for USART3
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	//if character isn't null and if USART3 was triggered.
	if(huart == &huart3){
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_UART_RxCpltCallback+0xb8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d141      	bne.n	80031ac <HAL_UART_RxCpltCallback+0x94>
		if(rxByte3 != 255)
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2bff      	cmp	r3, #255	; 0xff
 800312e:	d03d      	beq.n	80031ac <HAL_UART_RxCpltCallback+0x94>
		{
			if(rxByte3 == '\n')
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b0a      	cmp	r3, #10
 8003136:	d10c      	bne.n	8003152 <HAL_UART_RxCpltCallback+0x3a>
			{
				rxBuffer3[uart3_index] = rxByte3;
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 800313e:	7811      	ldrb	r1, [r2, #0]
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_UART_RxCpltCallback+0xc4>)
 8003142:	54d1      	strb	r1, [r2, r3]
				uart3_index = 0;
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
				uart3_line_flag = 1; //don't recall interrupt
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_UART_RxCpltCallback+0xc8>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e02c      	b.n	80031ac <HAL_UART_RxCpltCallback+0x94>
			}
			else if(rxByte3 == '\177'){
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b7f      	cmp	r3, #127	; 0x7f
 8003158:	d114      	bne.n	8003184 <HAL_UART_RxCpltCallback+0x6c>
				if(uart3_index > 0)
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	dd0a      	ble.n	8003178 <HAL_UART_RxCpltCallback+0x60>
				{
					rxBuffer3[uart3_index - 1] = '\0';
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3b01      	subs	r3, #1
 8003168:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_UART_RxCpltCallback+0xc4>)
 800316a:	2100      	movs	r1, #0
 800316c:	54d1      	strb	r1, [r2, r3]
					uart3_index --;
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 8003176:	6013      	str	r3, [r2, #0]
				}
				HAL_UART_Receive_IT(huart, &rxByte3, 1);
 8003178:	2201      	movs	r2, #1
 800317a:	4916      	ldr	r1, [pc, #88]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f005 f9d1 	bl	8008524 <HAL_UART_Receive_IT>
 8003182:	e013      	b.n	80031ac <HAL_UART_RxCpltCallback+0x94>
				//USART_Write(USARTx, '\r\n');
			}
			else if(uart3_index < UART_BUFFER_SIZE){
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b63      	cmp	r3, #99	; 0x63
 800318a:	dc0f      	bgt.n	80031ac <HAL_UART_RxCpltCallback+0x94>
				rxBuffer3[uart3_index] = rxByte3;
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 8003192:	7811      	ldrb	r1, [r2, #0]
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_UART_RxCpltCallback+0xc4>)
 8003196:	54d1      	strb	r1, [r2, r3]
				uart3_index++;
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_UART_RxCpltCallback+0xc0>)
 80031a0:	6013      	str	r3, [r2, #0]
				HAL_UART_Receive_IT(huart, &rxByte3, 1);
 80031a2:	2201      	movs	r2, #1
 80031a4:	490b      	ldr	r1, [pc, #44]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f005 f9bc 	bl	8008524 <HAL_UART_Receive_IT>
			}
		}
	}
	//if uart2 triggered and line flag has not been raised
	if((huart == &huart2) && !uart3_line_flag){
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_UART_RxCpltCallback+0xcc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <HAL_UART_RxCpltCallback+0xae>
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_UART_RxCpltCallback+0xc8>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_UART_RxCpltCallback+0xae>
		HAL_UART_Receive_IT(huart, &rxByte3, 1);
 80031bc:	2201      	movs	r2, #1
 80031be:	4905      	ldr	r1, [pc, #20]	; (80031d4 <HAL_UART_RxCpltCallback+0xbc>)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f005 f9af 	bl	8008524 <HAL_UART_Receive_IT>
	}
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2000b838 	.word	0x2000b838
 80031d4:	2000bb9e 	.word	0x2000bb9e
 80031d8:	2000bac4 	.word	0x2000bac4
 80031dc:	2000bba0 	.word	0x2000bba0
 80031e0:	2000bac8 	.word	0x2000bac8
 80031e4:	2000b7b4 	.word	0x2000b7b4

080031e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031ec:	f7ff feba 	bl	8002f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031f0:	480c      	ldr	r0, [pc, #48]	; (8003224 <LoopForever+0x6>)
  ldr r1, =_edata
 80031f2:	490d      	ldr	r1, [pc, #52]	; (8003228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <LoopForever+0xe>)
  movs r3, #0
 80031f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f8:	e002      	b.n	8003200 <LoopCopyDataInit>

080031fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fe:	3304      	adds	r3, #4

08003200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003204:	d3f9      	bcc.n	80031fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003208:	4c0a      	ldr	r4, [pc, #40]	; (8003234 <LoopForever+0x16>)
  movs r3, #0
 800320a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800320c:	e001      	b.n	8003212 <LoopFillZerobss>

0800320e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003210:	3204      	adds	r2, #4

08003212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003214:	d3fb      	bcc.n	800320e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003216:	f008 fdfd 	bl	800be14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800321a:	f7fe fc05 	bl	8001a28 <main>

0800321e <LoopForever>:

LoopForever:
    b LoopForever
 800321e:	e7fe      	b.n	800321e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003220:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	20000410 	.word	0x20000410
  ldr r2, =_sidata
 800322c:	080129c8 	.word	0x080129c8
  ldr r2, =_sbss
 8003230:	20000410 	.word	0x20000410
  ldr r4, =_ebss
 8003234:	20013304 	.word	0x20013304

08003238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC1_2_IRQHandler>
	...

0800323c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <HAL_Init+0x3c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_Init+0x3c>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003252:	2003      	movs	r0, #3
 8003254:	f001 fcb5 	bl	8004bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003258:	200f      	movs	r0, #15
 800325a:	f7ff fcfb 	bl	8002c54 <HAL_InitTick>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	71fb      	strb	r3, [r7, #7]
 8003268:	e001      	b.n	800326e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800326a:	f7ff fa9b 	bl	80027a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800326e:	79fb      	ldrb	r3, [r7, #7]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40022000 	.word	0x40022000

0800327c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_IncTick+0x20>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_IncTick+0x24>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4413      	add	r3, r2
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_IncTick+0x24>)
 800328e:	6013      	str	r3, [r2, #0]
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000234 	.word	0x20000234
 80032a0:	2000bc6c 	.word	0x2000bc6c

080032a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTick;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_GetTick+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000bc6c 	.word	0x2000bc6c

080032bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff ffee 	bl	80032a4 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d005      	beq.n	80032e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_Delay+0x44>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032e2:	bf00      	nop
 80032e4:	f7ff ffde 	bl	80032a4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d8f7      	bhi.n	80032e4 <HAL_Delay+0x28>
  {
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000234 	.word	0x20000234

08003304 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	609a      	str	r2, [r3, #8]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3360      	adds	r3, #96	; 0x60
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <LL_ADC_SetOffset+0x44>)
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	4313      	orrs	r3, r2
 800339c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	03fff000 	.word	0x03fff000

080033b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3360      	adds	r3, #96	; 0x60
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3360      	adds	r3, #96	; 0x60
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3330      	adds	r3, #48	; 0x30
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	4413      	add	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	211f      	movs	r1, #31
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	f003 011f 	and.w	r1, r3, #31
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	431a      	orrs	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3314      	adds	r3, #20
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0e5b      	lsrs	r3, r3, #25
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	4413      	add	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	0d1b      	lsrs	r3, r3, #20
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2107      	movs	r1, #7
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	401a      	ands	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	0d1b      	lsrs	r3, r3, #20
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	431a      	orrs	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0318 	and.w	r3, r3, #24
 800350e:	4908      	ldr	r1, [pc, #32]	; (8003530 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003510:	40d9      	lsrs	r1, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	400b      	ands	r3, r1
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	431a      	orrs	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	0007ffff 	.word	0x0007ffff

08003534 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 031f 	and.w	r3, r3, #31
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6093      	str	r3, [r2, #8]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003588:	d101      	bne.n	800358e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d8:	d101      	bne.n	80035de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003628:	f043 0202 	orr.w	r2, r3, #2
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <LL_ADC_IsEnabled+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_ADC_IsEnabled+0x1a>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d101      	bne.n	800367a <LL_ADC_IsDisableOngoing+0x18>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <LL_ADC_IsDisableOngoing+0x1a>
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003698:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036c4:	f043 0210 	orr.w	r2, r3, #16
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d101      	bne.n	80036f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800370e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d101      	bne.n	800373e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e136      	b.n	80039d4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff f83d 	bl	80027f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fef1 	bl	8003574 <LL_ADC_IsDeepPowerDownEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fed7 	bl	8003550 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ff0c 	bl	80035c4 <LL_ADC_IsInternalRegulatorEnabled>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d115      	bne.n	80037de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fef0 	bl	800359c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037bc:	4b87      	ldr	r3, [pc, #540]	; (80039dc <HAL_ADC_Init+0x290>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	4a87      	ldr	r2, [pc, #540]	; (80039e0 <HAL_ADC_Init+0x294>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037d0:	e002      	b.n	80037d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f9      	bne.n	80037d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff feee 	bl	80035c4 <LL_ADC_IsInternalRegulatorEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff62 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 8003814:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 80cf 	bne.w	80039c2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 80cb 	bne.w	80039c2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003834:	f043 0202 	orr.w	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fefb 	bl	800363c <LL_ADC_IsEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d115      	bne.n	8003878 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800384c:	4865      	ldr	r0, [pc, #404]	; (80039e4 <HAL_ADC_Init+0x298>)
 800384e:	f7ff fef5 	bl	800363c <LL_ADC_IsEnabled>
 8003852:	4604      	mov	r4, r0
 8003854:	4864      	ldr	r0, [pc, #400]	; (80039e8 <HAL_ADC_Init+0x29c>)
 8003856:	f7ff fef1 	bl	800363c <LL_ADC_IsEnabled>
 800385a:	4603      	mov	r3, r0
 800385c:	431c      	orrs	r4, r3
 800385e:	4863      	ldr	r0, [pc, #396]	; (80039ec <HAL_ADC_Init+0x2a0>)
 8003860:	f7ff feec 	bl	800363c <LL_ADC_IsEnabled>
 8003864:	4603      	mov	r3, r0
 8003866:	4323      	orrs	r3, r4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4619      	mov	r1, r3
 8003872:	485f      	ldr	r0, [pc, #380]	; (80039f0 <HAL_ADC_Init+0x2a4>)
 8003874:	f7ff fd46 	bl	8003304 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7e5b      	ldrb	r3, [r3, #25]
 800387c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003882:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003888:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800388e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003896:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d106      	bne.n	80038b4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	3b01      	subs	r3, #1
 80038ac:	045b      	lsls	r3, r3, #17
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_ADC_Init+0x2a8>)
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fef5 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 80038ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff16 	bl	8003726 <LL_ADC_INJ_IsConversionOngoing>
 80038fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d13d      	bne.n	800397e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13a      	bne.n	800397e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800390c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003914:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	430b      	orrs	r3, r1
 8003930:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003938:	2b01      	cmp	r3, #1
 800393a:	d118      	bne.n	800396e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003946:	f023 0304 	bic.w	r3, r3, #4
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003952:	4311      	orrs	r1, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003958:	4311      	orrs	r1, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800395e:	430a      	orrs	r2, r1
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	611a      	str	r2, [r3, #16]
 800396c:	e007      	b.n	800397e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d10c      	bne.n	80039a0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f023 010f 	bic.w	r1, r3, #15
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	1e5a      	subs	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
 800399e:	e007      	b.n	80039b0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 020f 	bic.w	r2, r2, #15
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f023 0303 	bic.w	r3, r3, #3
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
 80039c0:	e007      	b.n	80039d2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3724      	adds	r7, #36	; 0x24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}
 80039dc:	2000022c 	.word	0x2000022c
 80039e0:	053e2d63 	.word	0x053e2d63
 80039e4:	50040000 	.word	0x50040000
 80039e8:	50040100 	.word	0x50040100
 80039ec:	50040200 	.word	0x50040200
 80039f0:	50040300 	.word	0x50040300
 80039f4:	fff0c007 	.word	0xfff0c007

080039f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a04:	4853      	ldr	r0, [pc, #332]	; (8003b54 <HAL_ADC_Start_DMA+0x15c>)
 8003a06:	f7ff fd95 	bl	8003534 <LL_ADC_GetMultimode>
 8003a0a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fe61 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 8093 	bne.w	8003b44 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_ADC_Start_DMA+0x34>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e08e      	b.n	8003b4a <HAL_ADC_Start_DMA+0x152>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a47      	ldr	r2, [pc, #284]	; (8003b58 <HAL_ADC_Start_DMA+0x160>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d008      	beq.n	8003a50 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d002      	beq.n	8003a50 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d172      	bne.n	8003b36 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fdb9 	bl	80045c8 <ADC_Enable>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d165      	bne.n	8003b2c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a38      	ldr	r2, [pc, #224]	; (8003b5c <HAL_ADC_Start_DMA+0x164>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d002      	beq.n	8003a84 <HAL_ADC_Start_DMA+0x8c>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	e000      	b.n	8003a86 <HAL_ADC_Start_DMA+0x8e>
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_ADC_Start_DMA+0x168>)
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d002      	beq.n	8003a94 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f023 0206 	bic.w	r2, r3, #6
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab8:	e002      	b.n	8003ac0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <HAL_ADC_Start_DMA+0x16c>)
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <HAL_ADC_Start_DMA+0x170>)
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_ADC_Start_DMA+0x174>)
 8003ad6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	221c      	movs	r2, #28
 8003ade:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0210 	orr.w	r2, r2, #16
 8003af6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3340      	adds	r3, #64	; 0x40
 8003b12:	4619      	mov	r1, r3
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f001 fc6c 	bl	80053f4 <HAL_DMA_Start_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fdaf 	bl	8003688 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b2a:	e00d      	b.n	8003b48 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003b34:	e008      	b.n	8003b48 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b42:	e001      	b.n	8003b48 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
 8003b46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	50040300 	.word	0x50040300
 8003b58:	50040200 	.word	0x50040200
 8003b5c:	50040100 	.word	0x50040100
 8003b60:	50040000 	.word	0x50040000
 8003b64:	08004793 	.word	0x08004793
 8003b68:	0800486b 	.word	0x0800486b
 8003b6c:	08004887 	.word	0x08004887

08003b70 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_Stop_DMA+0x16>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e051      	b.n	8003c2a <HAL_ADC_Stop_DMA+0xba>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b8e:	2103      	movs	r1, #3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fc5d 	bl	8004450 <ADC_ConversionStop>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d13f      	bne.n	8003c20 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d10f      	bne.n	8003bde <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fc76 	bl	80054b4 <HAL_DMA_Abort>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0210 	bic.w	r2, r2, #16
 8003bec:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fd6d 	bl	80046d4 <ADC_Disable>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e002      	b.n	8003c06 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fd67 	bl	80046d4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	f043 0201 	orr.w	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b0b6      	sub	sp, #216	; 0xd8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x22>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e3c7      	b.n	8004422 <HAL_ADC_ConfigChannel+0x7b2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fd1a 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 83a8 	bne.w	80043fc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d824      	bhi.n	8003cfe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	3b02      	subs	r3, #2
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d81b      	bhi.n	8003cf6 <HAL_ADC_ConfigChannel+0x86>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_ADC_ConfigChannel+0x54>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003cdd 	.word	0x08003cdd
 8003ccc:	08003ce5 	.word	0x08003ce5
 8003cd0:	08003ced 	.word	0x08003ced
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	220c      	movs	r2, #12
 8003cd8:	605a      	str	r2, [r3, #4]
          break;
 8003cda:	e011      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2212      	movs	r2, #18
 8003ce0:	605a      	str	r2, [r3, #4]
          break;
 8003ce2:	e00d      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	605a      	str	r2, [r3, #4]
          break;
 8003cea:	e009      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf2:	605a      	str	r2, [r3, #4]
          break;
 8003cf4:	e004      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2206      	movs	r2, #6
 8003cfa:	605a      	str	r2, [r3, #4]
          break;
 8003cfc:	e000      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003cfe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f7ff fb95 	bl	800343c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fcde 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 8003d1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fcfe 	bl	8003726 <LL_ADC_INJ_IsConversionOngoing>
 8003d2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 81a6 	bne.w	8004084 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f040 81a1 	bne.w	8004084 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7ff fba0 	bl	8003494 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	08db      	lsrs	r3, r3, #3
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d00a      	beq.n	8003d8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d86:	f7ff faf1 	bl	800336c <LL_ADC_SetOffset>
 8003d8a:	e17b      	b.n	8004084 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fb0e 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x148>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fb03 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	0e9b      	lsrs	r3, r3, #26
 8003db2:	f003 021f 	and.w	r2, r3, #31
 8003db6:	e01e      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x186>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff faf8 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e004      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x19e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	e018      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1d0>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e004      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fac7 	bl	80033e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff faab 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x20e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff faa0 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	e01e      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x24c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fa95 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e004      	b.n	8003eba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x264>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	e018      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x296>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e004      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fa64 	bl	80033e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fa48 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x2d4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fa3d 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	e01e      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x312>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fa32 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e004      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x32a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	e016      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x358>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e004      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fa03 	bl	80033e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2103      	movs	r1, #3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff f9e7 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x396>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2103      	movs	r1, #3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff f9dc 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	e017      	b.n	8004036 <HAL_ADC_ConfigChannel+0x3c6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2103      	movs	r1, #3
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f9d1 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004018:	fa93 f3a3 	rbit	r3, r3
 800401c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004020:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e003      	b.n	8004034 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800402c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <HAL_ADC_ConfigChannel+0x3de>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	0e9b      	lsrs	r3, r3, #26
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	e011      	b.n	8004072 <HAL_ADC_ConfigChannel+0x402>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004056:	fa93 f3a3 	rbit	r3, r3
 800405a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800405c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800405e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004066:	2320      	movs	r3, #32
 8004068:	e003      	b.n	8004072 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800406a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406c:	fab3 f383 	clz	r3, r3
 8004070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004072:	429a      	cmp	r2, r3
 8004074:	d106      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	2103      	movs	r1, #3
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f9ae 	bl	80033e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fad7 	bl	800363c <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 813f 	bne.w	8004314 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7ff fa22 	bl	80034ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a8e      	ldr	r2, [pc, #568]	; (80042e8 <HAL_ADC_ConfigChannel+0x678>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f040 8130 	bne.w	8004314 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x46c>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	bf94      	ite	ls
 80040d4:	2301      	movls	r3, #1
 80040d6:	2300      	movhi	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e019      	b.n	8004110 <HAL_ADC_ConfigChannel+0x4a0>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80040ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80040ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80040f4:	2320      	movs	r3, #32
 80040f6:	e003      	b.n	8004100 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80040f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	3301      	adds	r3, #1
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2b09      	cmp	r3, #9
 8004108:	bf94      	ite	ls
 800410a:	2301      	movls	r3, #1
 800410c:	2300      	movhi	r3, #0
 800410e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004110:	2b00      	cmp	r3, #0
 8004112:	d079      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x4c0>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	3301      	adds	r3, #1
 8004128:	069b      	lsls	r3, r3, #26
 800412a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412e:	e015      	b.n	800415c <HAL_ADC_ConfigChannel+0x4ec>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800414c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	069b      	lsls	r3, r3, #26
 8004158:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_ADC_ConfigChannel+0x50c>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0e9b      	lsrs	r3, r3, #26
 800416e:	3301      	adds	r3, #1
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2101      	movs	r1, #1
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	e017      	b.n	80041ac <HAL_ADC_ConfigChannel+0x53c>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e003      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	3301      	adds	r3, #1
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	ea42 0103 	orr.w	r1, r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x562>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0e9b      	lsrs	r3, r3, #26
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	051b      	lsls	r3, r3, #20
 80041d0:	e018      	b.n	8004204 <HAL_ADC_ConfigChannel+0x594>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80041ea:	2320      	movs	r3, #32
 80041ec:	e003      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004204:	430b      	orrs	r3, r1
 8004206:	e080      	b.n	800430a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x5b4>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	3301      	adds	r3, #1
 800421c:	069b      	lsls	r3, r3, #26
 800421e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004222:	e015      	b.n	8004250 <HAL_ADC_ConfigChannel+0x5e0>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800423c:	2320      	movs	r3, #32
 800423e:	e003      	b.n	8004248 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	3301      	adds	r3, #1
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x600>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	3301      	adds	r3, #1
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	e017      	b.n	80042a0 <HAL_ADC_ConfigChannel+0x630>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	61fb      	str	r3, [r7, #28]
  return result;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2101      	movs	r1, #1
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	ea42 0103 	orr.w	r1, r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x65c>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	3b1e      	subs	r3, #30
 80042c4:	051b      	lsls	r3, r3, #20
 80042c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ca:	e01d      	b.n	8004308 <HAL_ADC_ConfigChannel+0x698>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	613b      	str	r3, [r7, #16]
  return result;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e005      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x684>
 80042e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f003 021f 	and.w	r2, r3, #31
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	3b1e      	subs	r3, #30
 8004302:	051b      	lsls	r3, r3, #20
 8004304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004308:	430b      	orrs	r3, r1
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	6892      	ldr	r2, [r2, #8]
 800430e:	4619      	mov	r1, r3
 8004310:	f7ff f8c0 	bl	8003494 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_ADC_ConfigChannel+0x7bc>)
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d07a      	beq.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004320:	4843      	ldr	r0, [pc, #268]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 8004322:	f7ff f815 	bl	8003350 <LL_ADC_GetCommonPathInternalCh>
 8004326:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a41      	ldr	r2, [pc, #260]	; (8004434 <HAL_ADC_ConfigChannel+0x7c4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d12c      	bne.n	800438e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <HAL_ADC_ConfigChannel+0x7c8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x6e4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3b      	ldr	r2, [pc, #236]	; (800443c <HAL_ADC_ConfigChannel+0x7cc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d15d      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800435c:	4619      	mov	r1, r3
 800435e:	4834      	ldr	r0, [pc, #208]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 8004360:	f7fe ffe3 	bl	800332a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_ADC_ConfigChannel+0x7d0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	4a36      	ldr	r2, [pc, #216]	; (8004444 <HAL_ADC_ConfigChannel+0x7d4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	099b      	lsrs	r3, r3, #6
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800437e:	e002      	b.n	8004386 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b01      	subs	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f9      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800438c:	e040      	b.n	8004410 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <HAL_ADC_ConfigChannel+0x7d8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d118      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x75a>
 8004398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800439c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d112      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <HAL_ADC_ConfigChannel+0x7c8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_ADC_ConfigChannel+0x748>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a22      	ldr	r2, [pc, #136]	; (800443c <HAL_ADC_ConfigChannel+0x7cc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12d      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c0:	4619      	mov	r1, r3
 80043c2:	481b      	ldr	r0, [pc, #108]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 80043c4:	f7fe ffb1 	bl	800332a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c8:	e024      	b.n	8004414 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_ADC_ConfigChannel+0x7dc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d120      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11a      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <HAL_ADC_ConfigChannel+0x7c8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d115      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043f2:	4619      	mov	r1, r3
 80043f4:	480e      	ldr	r0, [pc, #56]	; (8004430 <HAL_ADC_ConfigChannel+0x7c0>)
 80043f6:	f7fe ff98 	bl	800332a <LL_ADC_SetCommonPathInternalCh>
 80043fa:	e00c      	b.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800440e:	e002      	b.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800441e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004422:	4618      	mov	r0, r3
 8004424:	37d8      	adds	r7, #216	; 0xd8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	80080000 	.word	0x80080000
 8004430:	50040300 	.word	0x50040300
 8004434:	c7520000 	.word	0xc7520000
 8004438:	50040000 	.word	0x50040000
 800443c:	50040200 	.word	0x50040200
 8004440:	2000022c 	.word	0x2000022c
 8004444:	053e2d63 	.word	0x053e2d63
 8004448:	cb840000 	.word	0xcb840000
 800444c:	80000001 	.word	0x80000001

08004450 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff f936 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 800446c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff f957 	bl	8003726 <LL_ADC_INJ_IsConversionOngoing>
 8004478:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8098 	beq.w	80045b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02a      	beq.n	80044ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	7e5b      	ldrb	r3, [r3, #25]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d126      	bne.n	80044ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7e1b      	ldrb	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d122      	bne.n	80044ec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044aa:	e014      	b.n	80044d6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4a45      	ldr	r2, [pc, #276]	; (80045c4 <ADC_ConversionStop+0x174>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d90d      	bls.n	80044d0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f043 0210 	orr.w	r2, r3, #16
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e074      	b.n	80045ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d1e3      	bne.n	80044ac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2240      	movs	r2, #64	; 0x40
 80044ea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d014      	beq.n	800451c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f8ee 	bl	80036d8 <LL_ADC_REG_IsConversionOngoing>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff f8ab 	bl	8003662 <LL_ADC_IsDisableOngoing>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d104      	bne.n	800451c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f8ca 	bl	80036b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d014      	beq.n	800454c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f8fd 	bl	8003726 <LL_ADC_INJ_IsConversionOngoing>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f893 	bl	8003662 <LL_ADC_IsDisableOngoing>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f8d9 	bl	80036fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d005      	beq.n	800455e <ADC_ConversionStop+0x10e>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d105      	bne.n	8004564 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004558:	230c      	movs	r3, #12
 800455a:	617b      	str	r3, [r7, #20]
        break;
 800455c:	e005      	b.n	800456a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800455e:	2308      	movs	r3, #8
 8004560:	617b      	str	r3, [r7, #20]
        break;
 8004562:	e002      	b.n	800456a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004564:	2304      	movs	r3, #4
 8004566:	617b      	str	r3, [r7, #20]
        break;
 8004568:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800456a:	f7fe fe9b 	bl	80032a4 <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004570:	e01b      	b.n	80045aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004572:	f7fe fe97 	bl	80032a4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b05      	cmp	r3, #5
 800457e:	d914      	bls.n	80045aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	f043 0210 	orr.w	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e007      	b.n	80045ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1dc      	bne.n	8004572 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	a33fffff 	.word	0xa33fffff

080045c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff f82f 	bl	800363c <LL_ADC_IsEnabled>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d169      	bne.n	80046b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <ADC_Enable+0xfc>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	f043 0210 	orr.w	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	f043 0201 	orr.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e055      	b.n	80046ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe ffea 	bl	80035ec <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004618:	482b      	ldr	r0, [pc, #172]	; (80046c8 <ADC_Enable+0x100>)
 800461a:	f7fe fe99 	bl	8003350 <LL_ADC_GetCommonPathInternalCh>
 800461e:	4603      	mov	r3, r0
 8004620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004628:	4b28      	ldr	r3, [pc, #160]	; (80046cc <ADC_Enable+0x104>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	4a28      	ldr	r2, [pc, #160]	; (80046d0 <ADC_Enable+0x108>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004642:	e002      	b.n	800464a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f9      	bne.n	8004644 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004650:	f7fe fe28 	bl	80032a4 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004656:	e028      	b.n	80046aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe ffed 	bl	800363c <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe ffbd 	bl	80035ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004672:	f7fe fe17 	bl	80032a4 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d914      	bls.n	80046aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d00d      	beq.n	80046aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	f043 0210 	orr.w	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e007      	b.n	80046ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d1cf      	bne.n	8004658 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	8000003f 	.word	0x8000003f
 80046c8:	50040300 	.word	0x50040300
 80046cc:	2000022c 	.word	0x2000022c
 80046d0:	053e2d63 	.word	0x053e2d63

080046d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe ffbe 	bl	8003662 <LL_ADC_IsDisableOngoing>
 80046e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe ffa5 	bl	800363c <LL_ADC_IsEnabled>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d047      	beq.n	8004788 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d144      	bne.n	8004788 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030d 	and.w	r3, r3, #13
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10c      	bne.n	8004726 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe ff7f 	bl	8003614 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2203      	movs	r2, #3
 800471c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800471e:	f7fe fdc1 	bl	80032a4 <HAL_GetTick>
 8004722:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004724:	e029      	b.n	800477a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f043 0210 	orr.w	r2, r3, #16
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e023      	b.n	800478a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004742:	f7fe fdaf 	bl	80032a4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d914      	bls.n	800477a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e007      	b.n	800478a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1dc      	bne.n	8004742 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d14b      	bne.n	8004844 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d021      	beq.n	800480a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fe23 	bl	8003416 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d032      	beq.n	800483c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d12b      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11f      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	f043 0201 	orr.w	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
 8004808:	e018      	b.n	800483c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff f9f8 	bl	8003c32 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004842:	e00e      	b.n	8004862 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff fa02 	bl	8003c5a <HAL_ADC_ErrorCallback>
}
 8004856:	e004      	b.n	8004862 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff f9e4 	bl	8003c46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff f9d4 	bl	8003c5a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <LL_ADC_IsEnabled>:
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <LL_ADC_IsEnabled+0x18>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <LL_ADC_IsEnabled+0x1a>
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_REG_IsConversionOngoing>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d101      	bne.n	80048f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b09f      	sub	sp, #124	; 0x7c
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004922:	2302      	movs	r3, #2
 8004924:	e093      	b.n	8004a4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800492e:	2300      	movs	r3, #0
 8004930:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004932:	2300      	movs	r3, #0
 8004934:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a47      	ldr	r2, [pc, #284]	; (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d102      	bne.n	8004946 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004940:	4b46      	ldr	r3, [pc, #280]	; (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	e001      	b.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e072      	b.n	8004a4e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ffb8 	bl	80048e0 <LL_ADC_REG_IsConversionOngoing>
 8004970:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ffb2 	bl	80048e0 <LL_ADC_REG_IsConversionOngoing>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d154      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004984:	2b00      	cmp	r3, #0
 8004986:	d151      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004988:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800498a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02c      	beq.n	80049ee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049a6:	035b      	lsls	r3, r3, #13
 80049a8:	430b      	orrs	r3, r1
 80049aa:	431a      	orrs	r2, r3
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049b0:	4829      	ldr	r0, [pc, #164]	; (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80049b2:	f7ff ff82 	bl	80048ba <LL_ADC_IsEnabled>
 80049b6:	4604      	mov	r4, r0
 80049b8:	4828      	ldr	r0, [pc, #160]	; (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049ba:	f7ff ff7e 	bl	80048ba <LL_ADC_IsEnabled>
 80049be:	4603      	mov	r3, r0
 80049c0:	431c      	orrs	r4, r3
 80049c2:	4828      	ldr	r0, [pc, #160]	; (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80049c4:	f7ff ff79 	bl	80048ba <LL_ADC_IsEnabled>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4323      	orrs	r3, r4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d137      	bne.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049d8:	f023 030f 	bic.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	6811      	ldr	r1, [r2, #0]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	431a      	orrs	r2, r3
 80049e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ec:	e028      	b.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049fa:	4817      	ldr	r0, [pc, #92]	; (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80049fc:	f7ff ff5d 	bl	80048ba <LL_ADC_IsEnabled>
 8004a00:	4604      	mov	r4, r0
 8004a02:	4816      	ldr	r0, [pc, #88]	; (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004a04:	f7ff ff59 	bl	80048ba <LL_ADC_IsEnabled>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	431c      	orrs	r4, r3
 8004a0c:	4815      	ldr	r0, [pc, #84]	; (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a0e:	f7ff ff54 	bl	80048ba <LL_ADC_IsEnabled>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4323      	orrs	r3, r4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d112      	bne.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a22:	f023 030f 	bic.w	r3, r3, #15
 8004a26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a28:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a2a:	e009      	b.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004a3e:	e000      	b.n	8004a42 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	377c      	adds	r7, #124	; 0x7c
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	50040000 	.word	0x50040000
 8004a5c:	50040100 	.word	0x50040100
 8004a60:	50040300 	.word	0x50040300
 8004a64:	50040200 	.word	0x50040200

08004a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <__NVIC_SetPriorityGrouping+0x44>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a84:	4013      	ands	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	; (8004aac <__NVIC_SetPriorityGrouping+0x44>)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	60d3      	str	r3, [r2, #12]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	f003 0307 	and.w	r3, r3, #7
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	db0b      	blt.n	8004af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4907      	ldr	r1, [pc, #28]	; (8004b04 <__NVIC_EnableIRQ+0x38>)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2001      	movs	r0, #1
 8004aee:	fa00 f202 	lsl.w	r2, r0, r2
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000e100 	.word	0xe000e100

08004b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	db0a      	blt.n	8004b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	490c      	ldr	r1, [pc, #48]	; (8004b54 <__NVIC_SetPriority+0x4c>)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	0112      	lsls	r2, r2, #4
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b30:	e00a      	b.n	8004b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4908      	ldr	r1, [pc, #32]	; (8004b58 <__NVIC_SetPriority+0x50>)
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	440b      	add	r3, r1
 8004b46:	761a      	strb	r2, [r3, #24]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	e000e100 	.word	0xe000e100
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f1c3 0307 	rsb	r3, r3, #7
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	bf28      	it	cs
 8004b7a:	2304      	movcs	r3, #4
 8004b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d902      	bls.n	8004b8c <NVIC_EncodePriority+0x30>
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3b03      	subs	r3, #3
 8004b8a:	e000      	b.n	8004b8e <NVIC_EncodePriority+0x32>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	43d9      	mvns	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb4:	4313      	orrs	r3, r2
         );
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3724      	adds	r7, #36	; 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ff4c 	bl	8004a68 <__NVIC_SetPriorityGrouping>
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bea:	f7ff ff61 	bl	8004ab0 <__NVIC_GetPriorityGrouping>
 8004bee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	6978      	ldr	r0, [r7, #20]
 8004bf6:	f7ff ffb1 	bl	8004b5c <NVIC_EncodePriority>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c00:	4611      	mov	r1, r2
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ff80 	bl	8004b08 <__NVIC_SetPriority>
}
 8004c08:	bf00      	nop
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff54 	bl	8004acc <__NVIC_EnableIRQ>
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e014      	b.n	8004c68 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	791b      	ldrb	r3, [r3, #4]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fd fe3e 	bl	80028d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	795b      	ldrb	r3, [r3, #5]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_DAC_Start_DMA+0x1e>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0ab      	b.n	8004de6 <HAL_DAC_Start_DMA+0x176>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2202      	movs	r2, #2
 8004c98:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d12f      	bne.n	8004d00 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_DAC_Start_DMA+0x180>)
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a51      	ldr	r2, [pc, #324]	; (8004df4 <HAL_DAC_Start_DMA+0x184>)
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a50      	ldr	r2, [pc, #320]	; (8004df8 <HAL_DAC_Start_DMA+0x188>)
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d013      	beq.n	8004cf6 <HAL_DAC_Start_DMA+0x86>
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d845      	bhi.n	8004d60 <HAL_DAC_Start_DMA+0xf0>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_DAC_Start_DMA+0x72>
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d005      	beq.n	8004cec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004ce0:	e03e      	b.n	8004d60 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	613b      	str	r3, [r7, #16]
        break;
 8004cea:	e03c      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	613b      	str	r3, [r7, #16]
        break;
 8004cf4:	e037      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3310      	adds	r3, #16
 8004cfc:	613b      	str	r3, [r7, #16]
        break;
 8004cfe:	e032      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4a3d      	ldr	r2, [pc, #244]	; (8004dfc <HAL_DAC_Start_DMA+0x18c>)
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <HAL_DAC_Start_DMA+0x190>)
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <HAL_DAC_Start_DMA+0x194>)
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d013      	beq.n	8004d56 <HAL_DAC_Start_DMA+0xe6>
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d817      	bhi.n	8004d64 <HAL_DAC_Start_DMA+0xf4>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_DAC_Start_DMA+0xd2>
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d005      	beq.n	8004d4c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004d40:	e010      	b.n	8004d64 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	613b      	str	r3, [r7, #16]
        break;
 8004d4a:	e00c      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3318      	adds	r3, #24
 8004d52:	613b      	str	r3, [r7, #16]
        break;
 8004d54:	e007      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	331c      	adds	r3, #28
 8004d5c:	613b      	str	r3, [r7, #16]
        break;
 8004d5e:	e002      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004d64:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d111      	bne.n	8004d90 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6898      	ldr	r0, [r3, #8]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	f000 fb35 	bl	80053f4 <HAL_DMA_Start_IT>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]
 8004d8e:	e010      	b.n	8004db2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68d8      	ldr	r0, [r3, #12]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	f000 fb23 	bl	80053f4 <HAL_DMA_Start_IT>
 8004dae:	4603      	mov	r3, r0
 8004db0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2201      	movs	r2, #1
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e005      	b.n	8004de4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f043 0204 	orr.w	r2, r3, #4
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	08005103 	.word	0x08005103
 8004df4:	08005125 	.word	0x08005125
 8004df8:	08005141 	.word	0x08005141
 8004dfc:	08005219 	.word	0x08005219
 8004e00:	0800523b 	.word	0x0800523b
 8004e04:	08005257 	.word	0x08005257

08004e08 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6819      	ldr	r1, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43da      	mvns	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43da      	mvns	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	400a      	ands	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fb2c 	bl	80054b4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e00c      	b.n	8004e88 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fb1e 	bl	80054b4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004e86:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b088      	sub	sp, #32
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	795b      	ldrb	r3, [r3, #5]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_DAC_ConfigChannel+0x1c>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e107      	b.n	80050fa <HAL_DAC_ConfigChannel+0x22c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d174      	bne.n	8004fe8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004efe:	f7fe f9d1 	bl	80032a4 <HAL_GetTick>
 8004f02:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d134      	bne.n	8004f74 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f0a:	e011      	b.n	8004f30 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f0c:	f7fe f9ca 	bl	80032a4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d90a      	bls.n	8004f30 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0e4      	b.n	80050fa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f7fe f9bc 	bl	80032bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	6992      	ldr	r2, [r2, #24]
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f4e:	e01e      	b.n	8004f8e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f50:	f7fe f9a8 	bl	80032a4 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d90a      	bls.n	8004f74 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f043 0208 	orr.w	r2, r3, #8
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0c2      	b.n	80050fa <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dbe8      	blt.n	8004f50 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004f7e:	2001      	movs	r0, #1
 8004f80:	f7fe f99c 	bl	80032bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	6992      	ldr	r2, [r2, #24]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	ea02 0103 	and.w	r1, r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	21ff      	movs	r1, #255	; 0xff
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	ea02 0103 	and.w	r1, r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6a1a      	ldr	r2, [r3, #32]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d11d      	bne.n	800502c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	221f      	movs	r2, #31
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2207      	movs	r2, #7
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	431a      	orrs	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43da      	mvns	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	400a      	ands	r2, r1
 8005090:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	22c0      	movs	r2, #192	; 0xc0
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	400a      	ands	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff febe 	bl	8004e92 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	711a      	strb	r2, [r3, #4]
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff feb7 	bl	8004ea6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f043 0204 	orr.w	r2, r3, #4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fead 	bl	8004eba <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	711a      	strb	r2, [r3, #4]
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	795b      	ldrb	r3, [r3, #5]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_DACEx_NoiseWaveGenerate+0x18>
 8005182:	2302      	movs	r3, #2
 8005184:	e024      	b.n	80051d0 <HAL_DACEx_NoiseWaveGenerate+0x62>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2202      	movs	r2, #2
 8005190:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	ea02 0103 	and.w	r1, r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	409a      	lsls	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ffd8 	bl	80051dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	711a      	strb	r2, [r3, #4]
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff ffd1 	bl	80051f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f043 0204 	orr.w	r2, r3, #4
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ffc7 	bl	8005204 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	711a      	strb	r2, [r3, #4]
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e098      	b.n	80053c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_DMA_Init+0x150>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d80f      	bhi.n	80052c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b4b      	ldr	r3, [pc, #300]	; (80053d8 <HAL_DMA_Init+0x154>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a4b      	ldr	r2, [pc, #300]	; (80053dc <HAL_DMA_Init+0x158>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a48      	ldr	r2, [pc, #288]	; (80053e0 <HAL_DMA_Init+0x15c>)
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
 80052c0:	e00e      	b.n	80052e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b46      	ldr	r3, [pc, #280]	; (80053e4 <HAL_DMA_Init+0x160>)
 80052ca:	4413      	add	r3, r2
 80052cc:	4a43      	ldr	r2, [pc, #268]	; (80053dc <HAL_DMA_Init+0x158>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a42      	ldr	r2, [pc, #264]	; (80053e8 <HAL_DMA_Init+0x164>)
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533a:	d039      	beq.n	80053b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <HAL_DMA_Init+0x15c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d11a      	bne.n	800537c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005346:	4b29      	ldr	r3, [pc, #164]	; (80053ec <HAL_DMA_Init+0x168>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f003 031c 	and.w	r3, r3, #28
 8005352:	210f      	movs	r1, #15
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	4924      	ldr	r1, [pc, #144]	; (80053ec <HAL_DMA_Init+0x168>)
 800535c:	4013      	ands	r3, r2
 800535e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005360:	4b22      	ldr	r3, [pc, #136]	; (80053ec <HAL_DMA_Init+0x168>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f003 031c 	and.w	r3, r3, #28
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	491d      	ldr	r1, [pc, #116]	; (80053ec <HAL_DMA_Init+0x168>)
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
 800537a:	e019      	b.n	80053b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <HAL_DMA_Init+0x16c>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	f003 031c 	and.w	r3, r3, #28
 8005388:	210f      	movs	r1, #15
 800538a:	fa01 f303 	lsl.w	r3, r1, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	4917      	ldr	r1, [pc, #92]	; (80053f0 <HAL_DMA_Init+0x16c>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <HAL_DMA_Init+0x16c>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6859      	ldr	r1, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f003 031c 	and.w	r3, r3, #28
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	4911      	ldr	r1, [pc, #68]	; (80053f0 <HAL_DMA_Init+0x16c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40020407 	.word	0x40020407
 80053d8:	bffdfff8 	.word	0xbffdfff8
 80053dc:	cccccccd 	.word	0xcccccccd
 80053e0:	40020000 	.word	0x40020000
 80053e4:	bffdfbf8 	.word	0xbffdfbf8
 80053e8:	40020400 	.word	0x40020400
 80053ec:	400200a8 	.word	0x400200a8
 80053f0:	400204a8 	.word	0x400204a8

080053f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_DMA_Start_IT+0x20>
 8005410:	2302      	movs	r3, #2
 8005412:	e04b      	b.n	80054ac <HAL_DMA_Start_IT+0xb8>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d13a      	bne.n	800549e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0201 	bic.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f95f 	bl	8005710 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 020e 	orr.w	r2, r2, #14
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e00f      	b.n	800548c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0204 	bic.w	r2, r2, #4
 800547a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 020a 	orr.w	r2, r2, #10
 800548a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e005      	b.n	80054aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
 80054a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d008      	beq.n	80054de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2204      	movs	r2, #4
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e022      	b.n	8005524 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 020e 	bic.w	r2, r2, #14
 80054ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f003 021c 	and.w	r2, r3, #28
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f202 	lsl.w	r2, r1, r2
 8005510:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d005      	beq.n	8005554 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e029      	b.n	80055a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 020e 	bic.w	r2, r2, #14
 8005562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	f003 021c 	and.w	r2, r3, #28
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f202 	lsl.w	r2, r1, r2
 8005586:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
    }
  }
  return status;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	f003 031c 	and.w	r3, r3, #28
 80055d2:	2204      	movs	r2, #4
 80055d4:	409a      	lsls	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d026      	beq.n	800562c <HAL_DMA_IRQHandler+0x7a>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d021      	beq.n	800562c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0204 	bic.w	r2, r2, #4
 8005604:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f003 021c 	and.w	r2, r3, #28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2104      	movs	r1, #4
 8005614:	fa01 f202 	lsl.w	r2, r1, r2
 8005618:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	2b00      	cmp	r3, #0
 8005620:	d071      	beq.n	8005706 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800562a:	e06c      	b.n	8005706 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f003 031c 	and.w	r3, r3, #28
 8005634:	2202      	movs	r2, #2
 8005636:	409a      	lsls	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02e      	beq.n	800569e <HAL_DMA_IRQHandler+0xec>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d029      	beq.n	800569e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 020a 	bic.w	r2, r2, #10
 8005666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	f003 021c 	and.w	r2, r3, #28
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2102      	movs	r1, #2
 800567e:	fa01 f202 	lsl.w	r2, r1, r2
 8005682:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d038      	beq.n	8005706 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800569c:	e033      	b.n	8005706 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f003 031c 	and.w	r3, r3, #28
 80056a6:	2208      	movs	r2, #8
 80056a8:	409a      	lsls	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02a      	beq.n	8005708 <HAL_DMA_IRQHandler+0x156>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d025      	beq.n	8005708 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 020e 	bic.w	r2, r2, #14
 80056ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d0:	f003 021c 	and.w	r2, r3, #28
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f202 	lsl.w	r2, r1, r2
 80056de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005706:	bf00      	nop
 8005708:	bf00      	nop
}
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f003 021c 	and.w	r2, r3, #28
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b10      	cmp	r3, #16
 8005740:	d108      	bne.n	8005754 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005752:	e007      	b.n	8005764 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800577e:	e17f      	b.n	8005a80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8171 	beq.w	8005a7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d005      	beq.n	80057b0 <HAL_GPIO_Init+0x40>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d130      	bne.n	8005812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	2203      	movs	r2, #3
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057e6:	2201      	movs	r2, #1
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	f003 0201 	and.w	r2, r3, #1
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b03      	cmp	r3, #3
 800581c:	d118      	bne.n	8005850 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005824:	2201      	movs	r2, #1
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4013      	ands	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	f003 0201 	and.w	r2, r3, #1
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d017      	beq.n	800588c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	2203      	movs	r2, #3
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4013      	ands	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d123      	bne.n	80058e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	220f      	movs	r2, #15
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	08da      	lsrs	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3208      	adds	r2, #8
 80058da:	6939      	ldr	r1, [r7, #16]
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0203 	and.w	r2, r3, #3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80ac 	beq.w	8005a7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005922:	4b5f      	ldr	r3, [pc, #380]	; (8005aa0 <HAL_GPIO_Init+0x330>)
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	4a5e      	ldr	r2, [pc, #376]	; (8005aa0 <HAL_GPIO_Init+0x330>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	6613      	str	r3, [r2, #96]	; 0x60
 800592e:	4b5c      	ldr	r3, [pc, #368]	; (8005aa0 <HAL_GPIO_Init+0x330>)
 8005930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800593a:	4a5a      	ldr	r2, [pc, #360]	; (8005aa4 <HAL_GPIO_Init+0x334>)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	3302      	adds	r3, #2
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005946:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	220f      	movs	r2, #15
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005964:	d025      	beq.n	80059b2 <HAL_GPIO_Init+0x242>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a4f      	ldr	r2, [pc, #316]	; (8005aa8 <HAL_GPIO_Init+0x338>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01f      	beq.n	80059ae <HAL_GPIO_Init+0x23e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a4e      	ldr	r2, [pc, #312]	; (8005aac <HAL_GPIO_Init+0x33c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d019      	beq.n	80059aa <HAL_GPIO_Init+0x23a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a4d      	ldr	r2, [pc, #308]	; (8005ab0 <HAL_GPIO_Init+0x340>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <HAL_GPIO_Init+0x236>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a4c      	ldr	r2, [pc, #304]	; (8005ab4 <HAL_GPIO_Init+0x344>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00d      	beq.n	80059a2 <HAL_GPIO_Init+0x232>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a4b      	ldr	r2, [pc, #300]	; (8005ab8 <HAL_GPIO_Init+0x348>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <HAL_GPIO_Init+0x22e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <HAL_GPIO_Init+0x34c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <HAL_GPIO_Init+0x22a>
 8005996:	2306      	movs	r3, #6
 8005998:	e00c      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 800599a:	2307      	movs	r3, #7
 800599c:	e00a      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 800599e:	2305      	movs	r3, #5
 80059a0:	e008      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 80059a2:	2304      	movs	r3, #4
 80059a4:	e006      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 80059a6:	2303      	movs	r3, #3
 80059a8:	e004      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e002      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_GPIO_Init+0x244>
 80059b2:	2300      	movs	r3, #0
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	f002 0203 	and.w	r2, r2, #3
 80059ba:	0092      	lsls	r2, r2, #2
 80059bc:	4093      	lsls	r3, r2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059c4:	4937      	ldr	r1, [pc, #220]	; (8005aa4 <HAL_GPIO_Init+0x334>)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	3302      	adds	r3, #2
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	43db      	mvns	r3, r3
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4013      	ands	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059f6:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059fc:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a20:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4013      	ands	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a74:	4a12      	ldr	r2, [pc, #72]	; (8005ac0 <HAL_GPIO_Init+0x350>)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f47f ae78 	bne.w	8005780 <HAL_GPIO_Init+0x10>
  }
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	48000400 	.word	0x48000400
 8005aac:	48000800 	.word	0x48000800
 8005ab0:	48000c00 	.word	0x48000c00
 8005ab4:	48001000 	.word	0x48001000
 8005ab8:	48001400 	.word	0x48001400
 8005abc:	48001800 	.word	0x48001800
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <HAL_PWREx_GetVoltageRange+0x18>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40007000 	.word	0x40007000

08005ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aee:	d130      	bne.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005af0:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d038      	beq.n	8005b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005afe:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2232      	movs	r2, #50	; 0x32
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	0c9b      	lsrs	r3, r3, #18
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b24:	e002      	b.n	8005b2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b38:	d102      	bne.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f2      	bne.n	8005b26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4c:	d110      	bne.n	8005b70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e00f      	b.n	8005b72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5e:	d007      	beq.n	8005b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b68:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40007000 	.word	0x40007000
 8005b84:	2000022c 	.word	0x2000022c
 8005b88:	431bde83 	.word	0x431bde83

08005b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e3ca      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b9e:	4b97      	ldr	r3, [pc, #604]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba8:	4b94      	ldr	r3, [pc, #592]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80e4 	beq.w	8005d88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x4a>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	f040 808b 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	f040 8087 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bd6:	4b89      	ldr	r3, [pc, #548]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_RCC_OscConfig+0x62>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e3a2      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1a      	ldr	r2, [r3, #32]
 8005bf2:	4b82      	ldr	r3, [pc, #520]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <HAL_RCC_OscConfig+0x7c>
 8005bfe:	4b7f      	ldr	r3, [pc, #508]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c06:	e005      	b.n	8005c14 <HAL_RCC_OscConfig+0x88>
 8005c08:	4b7c      	ldr	r3, [pc, #496]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d223      	bcs.n	8005c60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fd87 	bl	8006730 <RCC_SetFlashLatencyFromMSIRange>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e383      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c2c:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a72      	ldr	r2, [pc, #456]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c32:	f043 0308 	orr.w	r3, r3, #8
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	4b70      	ldr	r3, [pc, #448]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	496d      	ldr	r1, [pc, #436]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c4a:	4b6c      	ldr	r3, [pc, #432]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	4968      	ldr	r1, [pc, #416]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
 8005c5e:	e025      	b.n	8005cac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c60:	4b66      	ldr	r3, [pc, #408]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a65      	ldr	r2, [pc, #404]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c66:	f043 0308 	orr.w	r3, r3, #8
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	4b63      	ldr	r3, [pc, #396]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	4960      	ldr	r1, [pc, #384]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c7e:	4b5f      	ldr	r3, [pc, #380]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	495b      	ldr	r1, [pc, #364]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d109      	bne.n	8005cac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fd47 	bl	8006730 <RCC_SetFlashLatencyFromMSIRange>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e343      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cac:	f000 fc4a 	bl	8006544 <HAL_RCC_GetSysClockFreq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b52      	ldr	r3, [pc, #328]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	4950      	ldr	r1, [pc, #320]	; (8005e00 <HAL_RCC_OscConfig+0x274>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc8:	4a4e      	ldr	r2, [pc, #312]	; (8005e04 <HAL_RCC_OscConfig+0x278>)
 8005cca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ccc:	4b4e      	ldr	r3, [pc, #312]	; (8005e08 <HAL_RCC_OscConfig+0x27c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fc ffbf 	bl	8002c54 <HAL_InitTick>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d052      	beq.n	8005d86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	e327      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d032      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cec:	4b43      	ldr	r3, [pc, #268]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a42      	ldr	r2, [pc, #264]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cf8:	f7fd fad4 	bl	80032a4 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d00:	f7fd fad0 	bl	80032a4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e310      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d12:	4b3a      	ldr	r3, [pc, #232]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d1e:	4b37      	ldr	r3, [pc, #220]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a36      	ldr	r2, [pc, #216]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d24:	f043 0308 	orr.w	r3, r3, #8
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4931      	ldr	r1, [pc, #196]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	492c      	ldr	r1, [pc, #176]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	604b      	str	r3, [r1, #4]
 8005d50:	e01a      	b.n	8005d88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a29      	ldr	r2, [pc, #164]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d5e:	f7fd faa1 	bl	80032a4 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d66:	f7fd fa9d 	bl	80032a4 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e2dd      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d78:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1f0      	bne.n	8005d66 <HAL_RCC_OscConfig+0x1da>
 8005d84:	e000      	b.n	8005d88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d074      	beq.n	8005e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d005      	beq.n	8005da6 <HAL_RCC_OscConfig+0x21a>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b0c      	cmp	r3, #12
 8005d9e:	d10e      	bne.n	8005dbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d10b      	bne.n	8005dbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da6:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d064      	beq.n	8005e7c <HAL_RCC_OscConfig+0x2f0>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d160      	bne.n	8005e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e2ba      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc6:	d106      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x24a>
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a0b      	ldr	r2, [pc, #44]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e026      	b.n	8005e24 <HAL_RCC_OscConfig+0x298>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dde:	d115      	bne.n	8005e0c <HAL_RCC_OscConfig+0x280>
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a05      	ldr	r2, [pc, #20]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a02      	ldr	r2, [pc, #8]	; (8005dfc <HAL_RCC_OscConfig+0x270>)
 8005df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e014      	b.n	8005e24 <HAL_RCC_OscConfig+0x298>
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	080122dc 	.word	0x080122dc
 8005e04:	2000022c 	.word	0x2000022c
 8005e08:	20000230 	.word	0x20000230
 8005e0c:	4ba0      	ldr	r3, [pc, #640]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a9f      	ldr	r2, [pc, #636]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	4b9d      	ldr	r3, [pc, #628]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a9c      	ldr	r2, [pc, #624]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fd fa3a 	bl	80032a4 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e34:	f7fd fa36 	bl	80032a4 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	; 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e276      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e46:	4b92      	ldr	r3, [pc, #584]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x2a8>
 8005e52:	e014      	b.n	8005e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fd fa26 	bl	80032a4 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e5c:	f7fd fa22 	bl	80032a4 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b64      	cmp	r3, #100	; 0x64
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e262      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e6e:	4b88      	ldr	r3, [pc, #544]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f0      	bne.n	8005e5c <HAL_RCC_OscConfig+0x2d0>
 8005e7a:	e000      	b.n	8005e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d060      	beq.n	8005f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCC_OscConfig+0x310>
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d119      	bne.n	8005eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d116      	bne.n	8005eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e9c:	4b7c      	ldr	r3, [pc, #496]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x328>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e23f      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb4:	4b76      	ldr	r3, [pc, #472]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	4973      	ldr	r1, [pc, #460]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec8:	e040      	b.n	8005f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d023      	beq.n	8005f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed2:	4b6f      	ldr	r3, [pc, #444]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a6e      	ldr	r2, [pc, #440]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ede:	f7fd f9e1 	bl	80032a4 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee6:	f7fd f9dd 	bl	80032a4 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e21d      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ef8:	4b65      	ldr	r3, [pc, #404]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f04:	4b62      	ldr	r3, [pc, #392]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	061b      	lsls	r3, r3, #24
 8005f12:	495f      	ldr	r1, [pc, #380]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	604b      	str	r3, [r1, #4]
 8005f18:	e018      	b.n	8005f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1a:	4b5d      	ldr	r3, [pc, #372]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a5c      	ldr	r2, [pc, #368]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fd f9bd 	bl	80032a4 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f2e:	f7fd f9b9 	bl	80032a4 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e1f9      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f40:	4b53      	ldr	r3, [pc, #332]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f0      	bne.n	8005f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d03c      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01c      	beq.n	8005f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f60:	4b4b      	ldr	r3, [pc, #300]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f66:	4a4a      	ldr	r2, [pc, #296]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fd f998 	bl	80032a4 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fd f994 	bl	80032a4 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e1d4      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f8a:	4b41      	ldr	r3, [pc, #260]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0ef      	beq.n	8005f78 <HAL_RCC_OscConfig+0x3ec>
 8005f98:	e01b      	b.n	8005fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f9a:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa0:	4a3b      	ldr	r2, [pc, #236]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005faa:	f7fd f97b 	bl	80032a4 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb2:	f7fd f977 	bl	80032a4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1b7      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fc4:	4b32      	ldr	r3, [pc, #200]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1ef      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80a6 	beq.w	800612c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10d      	bne.n	800600c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff0:	4b27      	ldr	r3, [pc, #156]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	4a26      	ldr	r2, [pc, #152]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8005ffc:	4b24      	ldr	r3, [pc, #144]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006008:	2301      	movs	r3, #1
 800600a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800600c:	4b21      	ldr	r3, [pc, #132]	; (8006094 <HAL_RCC_OscConfig+0x508>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d118      	bne.n	800604a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <HAL_RCC_OscConfig+0x508>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <HAL_RCC_OscConfig+0x508>)
 800601e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006024:	f7fd f93e 	bl	80032a4 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602c:	f7fd f93a 	bl	80032a4 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e17a      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <HAL_RCC_OscConfig+0x508>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d108      	bne.n	8006064 <HAL_RCC_OscConfig+0x4d8>
 8006052:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006062:	e029      	b.n	80060b8 <HAL_RCC_OscConfig+0x52c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	2b05      	cmp	r3, #5
 800606a:	d115      	bne.n	8006098 <HAL_RCC_OscConfig+0x50c>
 800606c:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8006074:	f043 0304 	orr.w	r3, r3, #4
 8006078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006082:	4a03      	ldr	r2, [pc, #12]	; (8006090 <HAL_RCC_OscConfig+0x504>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800608c:	e014      	b.n	80060b8 <HAL_RCC_OscConfig+0x52c>
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000
 8006094:	40007000 	.word	0x40007000
 8006098:	4b9c      	ldr	r3, [pc, #624]	; (800630c <HAL_RCC_OscConfig+0x780>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	4a9b      	ldr	r2, [pc, #620]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060a8:	4b98      	ldr	r3, [pc, #608]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	4a97      	ldr	r2, [pc, #604]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80060b0:	f023 0304 	bic.w	r3, r3, #4
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d016      	beq.n	80060ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c0:	f7fd f8f0 	bl	80032a4 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f7fd f8ec 	bl	80032a4 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e12a      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060de:	4b8b      	ldr	r3, [pc, #556]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0ed      	beq.n	80060c8 <HAL_RCC_OscConfig+0x53c>
 80060ec:	e015      	b.n	800611a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ee:	f7fd f8d9 	bl	80032a4 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060f4:	e00a      	b.n	800610c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f6:	f7fd f8d5 	bl	80032a4 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f241 3288 	movw	r2, #5000	; 0x1388
 8006104:	4293      	cmp	r3, r2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e113      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800610c:	4b7f      	ldr	r3, [pc, #508]	; (800630c <HAL_RCC_OscConfig+0x780>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1ed      	bne.n	80060f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800611a:	7ffb      	ldrb	r3, [r7, #31]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d105      	bne.n	800612c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006120:	4b7a      	ldr	r3, [pc, #488]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	4a79      	ldr	r2, [pc, #484]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80fe 	beq.w	8006332 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	2b02      	cmp	r3, #2
 800613c:	f040 80d0 	bne.w	80062e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006140:	4b72      	ldr	r3, [pc, #456]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f003 0203 	and.w	r2, r3, #3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d130      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	3b01      	subs	r3, #1
 8006160:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d127      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006170:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d11f      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006180:	2a07      	cmp	r2, #7
 8006182:	bf14      	ite	ne
 8006184:	2201      	movne	r2, #1
 8006186:	2200      	moveq	r2, #0
 8006188:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800618a:	4293      	cmp	r3, r2
 800618c:	d113      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	3b01      	subs	r3, #1
 800619c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800619e:	429a      	cmp	r2, r3
 80061a0:	d109      	bne.n	80061b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	3b01      	subs	r3, #1
 80061b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d06e      	beq.n	8006294 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b0c      	cmp	r3, #12
 80061ba:	d069      	beq.n	8006290 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061bc:	4b53      	ldr	r3, [pc, #332]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80061c8:	4b50      	ldr	r3, [pc, #320]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0ad      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061d8:	4b4c      	ldr	r3, [pc, #304]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a4b      	ldr	r2, [pc, #300]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80061de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061e4:	f7fd f85e 	bl	80032a4 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fd f85a 	bl	80032a4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e09a      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061fe:	4b43      	ldr	r3, [pc, #268]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800620a:	4b40      	ldr	r3, [pc, #256]	; (800630c <HAL_RCC_OscConfig+0x780>)
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	4b40      	ldr	r3, [pc, #256]	; (8006310 <HAL_RCC_OscConfig+0x784>)
 8006210:	4013      	ands	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800621a:	3a01      	subs	r2, #1
 800621c:	0112      	lsls	r2, r2, #4
 800621e:	4311      	orrs	r1, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006224:	0212      	lsls	r2, r2, #8
 8006226:	4311      	orrs	r1, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800622c:	0852      	lsrs	r2, r2, #1
 800622e:	3a01      	subs	r2, #1
 8006230:	0552      	lsls	r2, r2, #21
 8006232:	4311      	orrs	r1, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006238:	0852      	lsrs	r2, r2, #1
 800623a:	3a01      	subs	r2, #1
 800623c:	0652      	lsls	r2, r2, #25
 800623e:	4311      	orrs	r1, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006244:	0912      	lsrs	r2, r2, #4
 8006246:	0452      	lsls	r2, r2, #17
 8006248:	430a      	orrs	r2, r1
 800624a:	4930      	ldr	r1, [pc, #192]	; (800630c <HAL_RCC_OscConfig+0x780>)
 800624c:	4313      	orrs	r3, r2
 800624e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006250:	4b2e      	ldr	r3, [pc, #184]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800625a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800625c:	4b2b      	ldr	r3, [pc, #172]	; (800630c <HAL_RCC_OscConfig+0x780>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006268:	f7fd f81c 	bl	80032a4 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fd f818 	bl	80032a4 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e058      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006282:	4b22      	ldr	r3, [pc, #136]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800628e:	e050      	b.n	8006332 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e04f      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006294:	4b1d      	ldr	r3, [pc, #116]	; (800630c <HAL_RCC_OscConfig+0x780>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d148      	bne.n	8006332 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a19      	ldr	r2, [pc, #100]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062ac:	4b17      	ldr	r3, [pc, #92]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062b8:	f7fc fff4 	bl	80032a4 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fc fff0 	bl	80032a4 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e030      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d2:	4b0e      	ldr	r3, [pc, #56]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0x734>
 80062de:	e028      	b.n	8006332 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d023      	beq.n	800632e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a08      	ldr	r2, [pc, #32]	; (800630c <HAL_RCC_OscConfig+0x780>)
 80062ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fc ffd7 	bl	80032a4 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062f8:	e00c      	b.n	8006314 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fa:	f7fc ffd3 	bl	80032a4 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d905      	bls.n	8006314 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e013      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
 800630c:	40021000 	.word	0x40021000
 8006310:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <HAL_RCC_OscConfig+0x7b0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ec      	bne.n	80062fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <HAL_RCC_OscConfig+0x7b0>)
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	4905      	ldr	r1, [pc, #20]	; (800633c <HAL_RCC_OscConfig+0x7b0>)
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <HAL_RCC_OscConfig+0x7b4>)
 8006328:	4013      	ands	r3, r2
 800632a:	60cb      	str	r3, [r1, #12]
 800632c:	e001      	b.n	8006332 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40021000 	.word	0x40021000
 8006340:	feeefffc 	.word	0xfeeefffc

08006344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0e7      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006358:	4b75      	ldr	r3, [pc, #468]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d910      	bls.n	8006388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006366:	4b72      	ldr	r3, [pc, #456]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 0207 	bic.w	r2, r3, #7
 800636e:	4970      	ldr	r1, [pc, #448]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	4313      	orrs	r3, r2
 8006374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006376:	4b6e      	ldr	r3, [pc, #440]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d001      	beq.n	8006388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0cf      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d010      	beq.n	80063b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	4b66      	ldr	r3, [pc, #408]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d908      	bls.n	80063b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a4:	4b63      	ldr	r3, [pc, #396]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4960      	ldr	r1, [pc, #384]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d04c      	beq.n	800645c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d107      	bne.n	80063da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ca:	4b5a      	ldr	r3, [pc, #360]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d121      	bne.n	800641a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e0a6      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d107      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e2:	4b54      	ldr	r3, [pc, #336]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d115      	bne.n	800641a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e09a      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063fa:	4b4e      	ldr	r3, [pc, #312]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e08e      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800640a:	4b4a      	ldr	r3, [pc, #296]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e086      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800641a:	4b46      	ldr	r3, [pc, #280]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f023 0203 	bic.w	r2, r3, #3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4943      	ldr	r1, [pc, #268]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642c:	f7fc ff3a 	bl	80032a4 <HAL_GetTick>
 8006430:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006432:	e00a      	b.n	800644a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006434:	f7fc ff36 	bl	80032a4 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e06e      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644a:	4b3a      	ldr	r3, [pc, #232]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 020c 	and.w	r2, r3, #12
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	429a      	cmp	r2, r3
 800645a:	d1eb      	bne.n	8006434 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	4b31      	ldr	r3, [pc, #196]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006474:	429a      	cmp	r2, r3
 8006476:	d208      	bcs.n	800648a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006478:	4b2e      	ldr	r3, [pc, #184]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	492b      	ldr	r1, [pc, #172]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d210      	bcs.n	80064ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f023 0207 	bic.w	r2, r3, #7
 80064a0:	4923      	ldr	r1, [pc, #140]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a8:	4b21      	ldr	r3, [pc, #132]	; (8006530 <HAL_RCC_ClockConfig+0x1ec>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e036      	b.n	8006528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064c6:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4918      	ldr	r1, [pc, #96]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4910      	ldr	r1, [pc, #64]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064f8:	f000 f824 	bl	8006544 <HAL_RCC_GetSysClockFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <HAL_RCC_ClockConfig+0x1f0>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	091b      	lsrs	r3, r3, #4
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	490b      	ldr	r1, [pc, #44]	; (8006538 <HAL_RCC_ClockConfig+0x1f4>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
 8006514:	4a09      	ldr	r2, [pc, #36]	; (800653c <HAL_RCC_ClockConfig+0x1f8>)
 8006516:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <HAL_RCC_ClockConfig+0x1fc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fc fb99 	bl	8002c54 <HAL_InitTick>
 8006522:	4603      	mov	r3, r0
 8006524:	72fb      	strb	r3, [r7, #11]

  return status;
 8006526:	7afb      	ldrb	r3, [r7, #11]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40022000 	.word	0x40022000
 8006534:	40021000 	.word	0x40021000
 8006538:	080122dc 	.word	0x080122dc
 800653c:	2000022c 	.word	0x2000022c
 8006540:	20000230 	.word	0x20000230

08006544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	2300      	movs	r3, #0
 8006550:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800655c:	4b3b      	ldr	r3, [pc, #236]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_RCC_GetSysClockFreq+0x34>
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b0c      	cmp	r3, #12
 8006570:	d121      	bne.n	80065b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d11e      	bne.n	80065b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006578:	4b34      	ldr	r3, [pc, #208]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d107      	bne.n	8006594 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006584:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 8006586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	e005      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006594:	4b2d      	ldr	r3, [pc, #180]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80065a0:	4a2b      	ldr	r2, [pc, #172]	; (8006650 <HAL_RCC_GetSysClockFreq+0x10c>)
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065b4:	e00a      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d102      	bne.n	80065c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCC_GetSysClockFreq+0x110>)
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e004      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065c8:	4b23      	ldr	r3, [pc, #140]	; (8006658 <HAL_RCC_GetSysClockFreq+0x114>)
 80065ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b0c      	cmp	r3, #12
 80065d0:	d134      	bne.n	800663c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d003      	beq.n	80065ea <HAL_RCC_GetSysClockFreq+0xa6>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d003      	beq.n	80065f0 <HAL_RCC_GetSysClockFreq+0xac>
 80065e8:	e005      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <HAL_RCC_GetSysClockFreq+0x110>)
 80065ec:	617b      	str	r3, [r7, #20]
      break;
 80065ee:	e005      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <HAL_RCC_GetSysClockFreq+0x114>)
 80065f2:	617b      	str	r3, [r7, #20]
      break;
 80065f4:	e002      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	617b      	str	r3, [r7, #20]
      break;
 80065fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065fc:	4b13      	ldr	r3, [pc, #76]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	091b      	lsrs	r3, r3, #4
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	3301      	adds	r3, #1
 8006608:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	fb03 f202 	mul.w	r2, r3, r2
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <HAL_RCC_GetSysClockFreq+0x108>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	0e5b      	lsrs	r3, r3, #25
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	3301      	adds	r3, #1
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	fbb2 f3f3 	udiv	r3, r2, r3
 800663a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800663c:	69bb      	ldr	r3, [r7, #24]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3724      	adds	r7, #36	; 0x24
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40021000 	.word	0x40021000
 8006650:	080122f4 	.word	0x080122f4
 8006654:	00f42400 	.word	0x00f42400
 8006658:	007a1200 	.word	0x007a1200

0800665c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006660:	4b03      	ldr	r3, [pc, #12]	; (8006670 <HAL_RCC_GetHCLKFreq+0x14>)
 8006662:	681b      	ldr	r3, [r3, #0]
}
 8006664:	4618      	mov	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	2000022c 	.word	0x2000022c

08006674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006678:	f7ff fff0 	bl	800665c <HAL_RCC_GetHCLKFreq>
 800667c:	4602      	mov	r2, r0
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	4904      	ldr	r1, [pc, #16]	; (800669c <HAL_RCC_GetPCLK1Freq+0x28>)
 800668a:	5ccb      	ldrb	r3, [r1, r3]
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000
 800669c:	080122ec 	.word	0x080122ec

080066a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066a4:	f7ff ffda 	bl	800665c <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0adb      	lsrs	r3, r3, #11
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4904      	ldr	r1, [pc, #16]	; (80066c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40021000 	.word	0x40021000
 80066c8:	080122ec 	.word	0x080122ec

080066cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	220f      	movs	r2, #15
 80066da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80066dc:	4b12      	ldr	r3, [pc, #72]	; (8006728 <HAL_RCC_GetClockConfig+0x5c>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0203 	and.w	r2, r3, #3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80066e8:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <HAL_RCC_GetClockConfig+0x5c>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <HAL_RCC_GetClockConfig+0x5c>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006700:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_RCC_GetClockConfig+0x5c>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	08db      	lsrs	r3, r3, #3
 8006706:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <HAL_RCC_GetClockConfig+0x60>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0207 	and.w	r2, r3, #7
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	40022000 	.word	0x40022000

08006730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800673c:	4b2a      	ldr	r3, [pc, #168]	; (80067e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006748:	f7ff f9bc 	bl	8005ac4 <HAL_PWREx_GetVoltageRange>
 800674c:	6178      	str	r0, [r7, #20]
 800674e:	e014      	b.n	800677a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006754:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675a:	6593      	str	r3, [r2, #88]	; 0x58
 800675c:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006768:	f7ff f9ac 	bl	8005ac4 <HAL_PWREx_GetVoltageRange>
 800676c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800676e:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006778:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d10b      	bne.n	800679a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d919      	bls.n	80067bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2ba0      	cmp	r3, #160	; 0xa0
 800678c:	d902      	bls.n	8006794 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800678e:	2302      	movs	r3, #2
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	e013      	b.n	80067bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006794:	2301      	movs	r3, #1
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e010      	b.n	80067bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d902      	bls.n	80067a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80067a0:	2303      	movs	r3, #3
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	e00a      	b.n	80067bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b80      	cmp	r3, #128	; 0x80
 80067aa:	d102      	bne.n	80067b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067ac:	2302      	movs	r3, #2
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e004      	b.n	80067bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b70      	cmp	r3, #112	; 0x70
 80067b6:	d101      	bne.n	80067bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067b8:	2301      	movs	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f023 0207 	bic.w	r2, r3, #7
 80067c4:	4909      	ldr	r1, [pc, #36]	; (80067ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d001      	beq.n	80067de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40022000 	.word	0x40022000

080067f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067f8:	2300      	movs	r3, #0
 80067fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067fc:	2300      	movs	r3, #0
 80067fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006808:	2b00      	cmp	r3, #0
 800680a:	d041      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006814:	d02a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006816:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800681a:	d824      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800681c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006820:	d008      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006826:	d81e      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800682c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006830:	d010      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006832:	e018      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006834:	4b86      	ldr	r3, [pc, #536]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	4a85      	ldr	r2, [pc, #532]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800683a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006840:	e015      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fabb 	bl	8006dc4 <RCCEx_PLLSAI1_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006852:	e00c      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3320      	adds	r3, #32
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fba6 	bl	8006fac <RCCEx_PLLSAI2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006864:	e003      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	74fb      	strb	r3, [r7, #19]
      break;
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800686c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686e:	7cfb      	ldrb	r3, [r7, #19]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006874:	4b76      	ldr	r3, [pc, #472]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006882:	4973      	ldr	r1, [pc, #460]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800688a:	e001      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	7cfb      	ldrb	r3, [r7, #19]
 800688e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d041      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068a4:	d02a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80068a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068aa:	d824      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80068ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b0:	d008      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b6:	d81e      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80068bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068c0:	d010      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80068c2:	e018      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068c4:	4b62      	ldr	r3, [pc, #392]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a61      	ldr	r2, [pc, #388]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068d0:	e015      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	2100      	movs	r1, #0
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fa73 	bl	8006dc4 <RCCEx_PLLSAI1_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068e2:	e00c      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3320      	adds	r3, #32
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fb5e 	bl	8006fac <RCCEx_PLLSAI2_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068f4:	e003      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	74fb      	strb	r3, [r7, #19]
      break;
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80068fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fe:	7cfb      	ldrb	r3, [r7, #19]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006904:	4b52      	ldr	r3, [pc, #328]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006912:	494f      	ldr	r1, [pc, #316]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800691a:	e001      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691c:	7cfb      	ldrb	r3, [r7, #19]
 800691e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80a0 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006932:	4b47      	ldr	r3, [pc, #284]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006948:	4b41      	ldr	r3, [pc, #260]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800694a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694c:	4a40      	ldr	r2, [pc, #256]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006952:	6593      	str	r3, [r2, #88]	; 0x58
 8006954:	4b3e      	ldr	r3, [pc, #248]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006960:	2301      	movs	r3, #1
 8006962:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006964:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3a      	ldr	r2, [pc, #232]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800696a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006970:	f7fc fc98 	bl	80032a4 <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006976:	e009      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fc fc94 	bl	80032a4 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	74fb      	strb	r3, [r7, #19]
        break;
 800698a:	e005      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800698c:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ef      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d15c      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01f      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d019      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069bc:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069c8:	4b21      	ldr	r3, [pc, #132]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	4a20      	ldr	r2, [pc, #128]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069d8:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	4a1c      	ldr	r2, [pc, #112]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069e8:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fa:	f7fc fc53 	bl	80032a4 <HAL_GetTick>
 80069fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a00:	e00b      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a02:	f7fc fc4f 	bl	80032a4 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d902      	bls.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	74fb      	strb	r3, [r7, #19]
            break;
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0ec      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006a28:	7cfb      	ldrb	r3, [r7, #19]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a2e:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3e:	4904      	ldr	r1, [pc, #16]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a46:	e009      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a48:	7cfb      	ldrb	r3, [r7, #19]
 8006a4a:	74bb      	strb	r3, [r7, #18]
 8006a4c:	e006      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000
 8006a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	7cfb      	ldrb	r3, [r7, #19]
 8006a5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a5c:	7c7b      	ldrb	r3, [r7, #17]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d105      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a62:	4b9e      	ldr	r3, [pc, #632]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a66:	4a9d      	ldr	r2, [pc, #628]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a7a:	4b98      	ldr	r3, [pc, #608]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a80:	f023 0203 	bic.w	r2, r3, #3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	4994      	ldr	r1, [pc, #592]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a9c:	4b8f      	ldr	r3, [pc, #572]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa2:	f023 020c 	bic.w	r2, r3, #12
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	498c      	ldr	r1, [pc, #560]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006abe:	4b87      	ldr	r3, [pc, #540]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	4983      	ldr	r1, [pc, #524]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ae0:	4b7e      	ldr	r3, [pc, #504]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	497b      	ldr	r1, [pc, #492]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b02:	4b76      	ldr	r3, [pc, #472]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b10:	4972      	ldr	r1, [pc, #456]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b24:	4b6d      	ldr	r3, [pc, #436]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b32:	496a      	ldr	r1, [pc, #424]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b46:	4b65      	ldr	r3, [pc, #404]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b54:	4961      	ldr	r1, [pc, #388]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b68:	4b5c      	ldr	r3, [pc, #368]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b76:	4959      	ldr	r1, [pc, #356]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b8a:	4b54      	ldr	r3, [pc, #336]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	4950      	ldr	r1, [pc, #320]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bac:	4b4b      	ldr	r3, [pc, #300]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	4948      	ldr	r1, [pc, #288]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bce:	4b43      	ldr	r3, [pc, #268]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bdc:	493f      	ldr	r1, [pc, #252]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d028      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bf0:	4b3a      	ldr	r3, [pc, #232]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfe:	4937      	ldr	r1, [pc, #220]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c0e:	d106      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c10:	4b32      	ldr	r3, [pc, #200]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4a31      	ldr	r2, [pc, #196]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c1a:	60d3      	str	r3, [r2, #12]
 8006c1c:	e011      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c26:	d10c      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f8c8 	bl	8006dc4 <RCCEx_PLLSAI1_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006c3e:	7cfb      	ldrb	r3, [r7, #19]
 8006c40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d028      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c4e:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	491f      	ldr	r1, [pc, #124]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6c:	d106      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c6e:	4b1b      	ldr	r3, [pc, #108]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	4a1a      	ldr	r2, [pc, #104]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c78:	60d3      	str	r3, [r2, #12]
 8006c7a:	e011      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c84:	d10c      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f899 	bl	8006dc4 <RCCEx_PLLSAI1_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c96:	7cfb      	ldrb	r3, [r7, #19]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006c9c:	7cfb      	ldrb	r3, [r7, #19]
 8006c9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d02b      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cba:	4908      	ldr	r1, [pc, #32]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cca:	d109      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ccc:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4a02      	ldr	r2, [pc, #8]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd6:	60d3      	str	r3, [r2, #12]
 8006cd8:	e014      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006cda:	bf00      	nop
 8006cdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f867 	bl	8006dc4 <RCCEx_PLLSAI1_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cfa:	7cfb      	ldrb	r3, [r7, #19]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d02f      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d10:	4b2b      	ldr	r3, [pc, #172]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1e:	4928      	ldr	r1, [pc, #160]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d2e:	d10d      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3304      	adds	r3, #4
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f844 	bl	8006dc4 <RCCEx_PLLSAI1_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d014      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d46:	7cfb      	ldrb	r3, [r7, #19]
 8006d48:	74bb      	strb	r3, [r7, #18]
 8006d4a:	e011      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3320      	adds	r3, #32
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f925 	bl	8006fac <RCCEx_PLLSAI2_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d66:	7cfb      	ldrb	r3, [r7, #19]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006d6c:	7cfb      	ldrb	r3, [r7, #19]
 8006d6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8a:	490d      	ldr	r1, [pc, #52]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d9e:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dae:	4904      	ldr	r1, [pc, #16]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006db6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000

08006dc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dd2:	4b75      	ldr	r3, [pc, #468]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d018      	beq.n	8006e10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006dde:	4b72      	ldr	r3, [pc, #456]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f003 0203 	and.w	r2, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d10d      	bne.n	8006e0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
       ||
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006df6:	4b6c      	ldr	r3, [pc, #432]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	091b      	lsrs	r3, r3, #4
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
       ||
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d047      	beq.n	8006e9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	e044      	b.n	8006e9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d018      	beq.n	8006e4a <RCCEx_PLLSAI1_Config+0x86>
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d825      	bhi.n	8006e68 <RCCEx_PLLSAI1_Config+0xa4>
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d002      	beq.n	8006e26 <RCCEx_PLLSAI1_Config+0x62>
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d009      	beq.n	8006e38 <RCCEx_PLLSAI1_Config+0x74>
 8006e24:	e020      	b.n	8006e68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e26:	4b60      	ldr	r3, [pc, #384]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d11d      	bne.n	8006e6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e36:	e01a      	b.n	8006e6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e38:	4b5b      	ldr	r3, [pc, #364]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d116      	bne.n	8006e72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e48:	e013      	b.n	8006e72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e4a:	4b57      	ldr	r3, [pc, #348]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10f      	bne.n	8006e76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e56:	4b54      	ldr	r3, [pc, #336]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e66:	e006      	b.n	8006e76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e004      	b.n	8006e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e002      	b.n	8006e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e76:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10d      	bne.n	8006e9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e7e:	4b4a      	ldr	r3, [pc, #296]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	430b      	orrs	r3, r1
 8006e94:	4944      	ldr	r1, [pc, #272]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d17d      	bne.n	8006f9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ea0:	4b41      	ldr	r3, [pc, #260]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a40      	ldr	r2, [pc, #256]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fc f9fa 	bl	80032a4 <HAL_GetTick>
 8006eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006eb2:	e009      	b.n	8006ec8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006eb4:	f7fc f9f6 	bl	80032a4 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d902      	bls.n	8006ec8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ec6:	e005      	b.n	8006ed4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ec8:	4b37      	ldr	r3, [pc, #220]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1ef      	bne.n	8006eb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d160      	bne.n	8006f9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d111      	bne.n	8006f04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ee0:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6892      	ldr	r2, [r2, #8]
 8006ef0:	0211      	lsls	r1, r2, #8
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68d2      	ldr	r2, [r2, #12]
 8006ef6:	0912      	lsrs	r2, r2, #4
 8006ef8:	0452      	lsls	r2, r2, #17
 8006efa:	430a      	orrs	r2, r1
 8006efc:	492a      	ldr	r1, [pc, #168]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	610b      	str	r3, [r1, #16]
 8006f02:	e027      	b.n	8006f54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d112      	bne.n	8006f30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006f12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	0211      	lsls	r1, r2, #8
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6912      	ldr	r2, [r2, #16]
 8006f20:	0852      	lsrs	r2, r2, #1
 8006f22:	3a01      	subs	r2, #1
 8006f24:	0552      	lsls	r2, r2, #21
 8006f26:	430a      	orrs	r2, r1
 8006f28:	491f      	ldr	r1, [pc, #124]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	610b      	str	r3, [r1, #16]
 8006f2e:	e011      	b.n	8006f54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006f30:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6892      	ldr	r2, [r2, #8]
 8006f40:	0211      	lsls	r1, r2, #8
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6952      	ldr	r2, [r2, #20]
 8006f46:	0852      	lsrs	r2, r2, #1
 8006f48:	3a01      	subs	r2, #1
 8006f4a:	0652      	lsls	r2, r2, #25
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	4916      	ldr	r1, [pc, #88]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fc f9a0 	bl	80032a4 <HAL_GetTick>
 8006f64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f66:	e009      	b.n	8006f7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f68:	f7fc f99c 	bl	80032a4 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d902      	bls.n	8006f7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	73fb      	strb	r3, [r7, #15]
          break;
 8006f7a:	e005      	b.n	8006f88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ef      	beq.n	8006f68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	4904      	ldr	r1, [pc, #16]	; (8006fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000

08006fac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fba:	4b6a      	ldr	r3, [pc, #424]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d018      	beq.n	8006ff8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006fc6:	4b67      	ldr	r3, [pc, #412]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0203 	and.w	r2, r3, #3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d10d      	bne.n	8006ff2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006fde:	4b61      	ldr	r3, [pc, #388]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	091b      	lsrs	r3, r3, #4
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
       ||
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d047      	beq.n	8007082 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]
 8006ff6:	e044      	b.n	8007082 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d018      	beq.n	8007032 <RCCEx_PLLSAI2_Config+0x86>
 8007000:	2b03      	cmp	r3, #3
 8007002:	d825      	bhi.n	8007050 <RCCEx_PLLSAI2_Config+0xa4>
 8007004:	2b01      	cmp	r3, #1
 8007006:	d002      	beq.n	800700e <RCCEx_PLLSAI2_Config+0x62>
 8007008:	2b02      	cmp	r3, #2
 800700a:	d009      	beq.n	8007020 <RCCEx_PLLSAI2_Config+0x74>
 800700c:	e020      	b.n	8007050 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800700e:	4b55      	ldr	r3, [pc, #340]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d11d      	bne.n	8007056 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800701e:	e01a      	b.n	8007056 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007020:	4b50      	ldr	r3, [pc, #320]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007028:	2b00      	cmp	r3, #0
 800702a:	d116      	bne.n	800705a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007030:	e013      	b.n	800705a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007032:	4b4c      	ldr	r3, [pc, #304]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10f      	bne.n	800705e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800703e:	4b49      	ldr	r3, [pc, #292]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800704e:	e006      	b.n	800705e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	73fb      	strb	r3, [r7, #15]
      break;
 8007054:	e004      	b.n	8007060 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007056:	bf00      	nop
 8007058:	e002      	b.n	8007060 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800705a:	bf00      	nop
 800705c:	e000      	b.n	8007060 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800705e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10d      	bne.n	8007082 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007066:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	3b01      	subs	r3, #1
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	430b      	orrs	r3, r1
 800707c:	4939      	ldr	r1, [pc, #228]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800707e:	4313      	orrs	r3, r2
 8007080:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d167      	bne.n	8007158 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007088:	4b36      	ldr	r3, [pc, #216]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a35      	ldr	r2, [pc, #212]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800708e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007094:	f7fc f906 	bl	80032a4 <HAL_GetTick>
 8007098:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800709a:	e009      	b.n	80070b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800709c:	f7fc f902 	bl	80032a4 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d902      	bls.n	80070b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	73fb      	strb	r3, [r7, #15]
        break;
 80070ae:	e005      	b.n	80070bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80070b0:	4b2c      	ldr	r3, [pc, #176]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1ef      	bne.n	800709c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d14a      	bne.n	8007158 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d111      	bne.n	80070ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070c8:	4b26      	ldr	r3, [pc, #152]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80070d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6892      	ldr	r2, [r2, #8]
 80070d8:	0211      	lsls	r1, r2, #8
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68d2      	ldr	r2, [r2, #12]
 80070de:	0912      	lsrs	r2, r2, #4
 80070e0:	0452      	lsls	r2, r2, #17
 80070e2:	430a      	orrs	r2, r1
 80070e4:	491f      	ldr	r1, [pc, #124]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	614b      	str	r3, [r1, #20]
 80070ea:	e011      	b.n	8007110 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070ec:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6892      	ldr	r2, [r2, #8]
 80070fc:	0211      	lsls	r1, r2, #8
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6912      	ldr	r2, [r2, #16]
 8007102:	0852      	lsrs	r2, r2, #1
 8007104:	3a01      	subs	r2, #1
 8007106:	0652      	lsls	r2, r2, #25
 8007108:	430a      	orrs	r2, r1
 800710a:	4916      	ldr	r1, [pc, #88]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800710c:	4313      	orrs	r3, r2
 800710e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007110:	4b14      	ldr	r3, [pc, #80]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a13      	ldr	r2, [pc, #76]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711c:	f7fc f8c2 	bl	80032a4 <HAL_GetTick>
 8007120:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007122:	e009      	b.n	8007138 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007124:	f7fc f8be 	bl	80032a4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d902      	bls.n	8007138 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	73fb      	strb	r3, [r7, #15]
          break;
 8007136:	e005      	b.n	8007144 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0ef      	beq.n	8007124 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	4904      	ldr	r1, [pc, #16]	; (8007164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007154:	4313      	orrs	r3, r2
 8007156:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40021000 	.word	0x40021000

08007168 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e049      	b.n	800720e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	795b      	ldrb	r3, [r3, #5]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d105      	bne.n	8007190 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fb fc3e 	bl	8002a0c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0204 	orr.w	r2, r2, #4
 80071a4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d104      	bne.n	80071be <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2204      	movs	r2, #4
 80071b8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e027      	b.n	800720e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80071be:	f7fc f871 	bl	80032a4 <HAL_GetTick>
 80071c2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071c4:	e015      	b.n	80071f2 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80071c6:	f7fc f86d 	bl	80032a4 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d90e      	bls.n	80071f2 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d107      	bne.n	80071f2 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e00d      	b.n	800720e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d0e2      	beq.n	80071c6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e049      	b.n	80072bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fb fc05 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3304      	adds	r3, #4
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f000 fbf9 	bl	8007a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e047      	b.n	800736c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a23      	ldr	r2, [pc, #140]	; (8007378 <HAL_TIM_Base_Start+0xb4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <HAL_TIM_Base_Start+0x66>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f6:	d018      	beq.n	800732a <HAL_TIM_Base_Start+0x66>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1f      	ldr	r2, [pc, #124]	; (800737c <HAL_TIM_Base_Start+0xb8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <HAL_TIM_Base_Start+0x66>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1e      	ldr	r2, [pc, #120]	; (8007380 <HAL_TIM_Base_Start+0xbc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <HAL_TIM_Base_Start+0x66>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <HAL_TIM_Base_Start+0xc0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_TIM_Base_Start+0x66>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <HAL_TIM_Base_Start+0xc4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIM_Base_Start+0x66>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a19      	ldr	r2, [pc, #100]	; (800738c <HAL_TIM_Base_Start+0xc8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d115      	bne.n	8007356 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <HAL_TIM_Base_Start+0xcc>)
 8007332:	4013      	ands	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b06      	cmp	r3, #6
 800733a:	d015      	beq.n	8007368 <HAL_TIM_Base_Start+0xa4>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007342:	d011      	beq.n	8007368 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007354:	e008      	b.n	8007368 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0201 	orr.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e000      	b.n	800736a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007368:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40013400 	.word	0x40013400
 800738c:	40014000 	.word	0x40014000
 8007390:	00010007 	.word	0x00010007

08007394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d001      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e04f      	b.n	800744c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a23      	ldr	r2, [pc, #140]	; (8007458 <HAL_TIM_Base_Start_IT+0xc4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d018      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1f      	ldr	r2, [pc, #124]	; (800745c <HAL_TIM_Base_Start_IT+0xc8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1e      	ldr	r2, [pc, #120]	; (8007460 <HAL_TIM_Base_Start_IT+0xcc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	; (8007464 <HAL_TIM_Base_Start_IT+0xd0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <HAL_TIM_Base_Start_IT+0xd4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_TIM_Base_Start_IT+0x76>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	; (800746c <HAL_TIM_Base_Start_IT+0xd8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d115      	bne.n	8007436 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	4b17      	ldr	r3, [pc, #92]	; (8007470 <HAL_TIM_Base_Start_IT+0xdc>)
 8007412:	4013      	ands	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b06      	cmp	r3, #6
 800741a:	d015      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007422:	d011      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007434:	e008      	b.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e000      	b.n	800744a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007448:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00
 8007468:	40013400 	.word	0x40013400
 800746c:	40014000 	.word	0x40014000
 8007470:	00010007 	.word	0x00010007

08007474 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e049      	b.n	800751a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f841 	bl	8007522 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f000 faca 	bl	8007a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d122      	bne.n	8007592 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b02      	cmp	r3, #2
 8007558:	d11b      	bne.n	8007592 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f06f 0202 	mvn.w	r2, #2
 8007562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa48 	bl	8007a0e <HAL_TIM_IC_CaptureCallback>
 800757e:	e005      	b.n	800758c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fa3a 	bl	80079fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa4b 	bl	8007a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b04      	cmp	r3, #4
 800759e:	d122      	bne.n	80075e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d11b      	bne.n	80075e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0204 	mvn.w	r2, #4
 80075b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa1e 	bl	8007a0e <HAL_TIM_IC_CaptureCallback>
 80075d2:	e005      	b.n	80075e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fa10 	bl	80079fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa21 	bl	8007a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d122      	bne.n	800763a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d11b      	bne.n	800763a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f06f 0208 	mvn.w	r2, #8
 800760a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2204      	movs	r2, #4
 8007610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	f003 0303 	and.w	r3, r3, #3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f9f4 	bl	8007a0e <HAL_TIM_IC_CaptureCallback>
 8007626:	e005      	b.n	8007634 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f9e6 	bl	80079fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9f7 	bl	8007a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b10      	cmp	r3, #16
 8007646:	d122      	bne.n	800768e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0310 	and.w	r3, r3, #16
 8007652:	2b10      	cmp	r3, #16
 8007654:	d11b      	bne.n	800768e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0210 	mvn.w	r2, #16
 800765e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2208      	movs	r2, #8
 8007664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9ca 	bl	8007a0e <HAL_TIM_IC_CaptureCallback>
 800767a:	e005      	b.n	8007688 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f9bc 	bl	80079fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9cd 	bl	8007a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d10e      	bne.n	80076ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d107      	bne.n	80076ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0201 	mvn.w	r2, #1
 80076b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7fa fd9b 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d10e      	bne.n	80076e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d107      	bne.n	80076e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fe4f 	bl	8008384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f4:	d10e      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d107      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800770c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fe42 	bl	8008398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771e:	2b40      	cmp	r3, #64	; 0x40
 8007720:	d10e      	bne.n	8007740 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d107      	bne.n	8007740 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f97b 	bl	8007a36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b20      	cmp	r3, #32
 800774c:	d10e      	bne.n	800776c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b20      	cmp	r3, #32
 800775a:	d107      	bne.n	800776c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0220 	mvn.w	r2, #32
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fe02 	bl	8008370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_TIM_OC_ConfigChannel+0x1e>
 800778e:	2302      	movs	r3, #2
 8007790:	e066      	b.n	8007860 <HAL_TIM_OC_ConfigChannel+0xec>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b14      	cmp	r3, #20
 800779e:	d857      	bhi.n	8007850 <HAL_TIM_OC_ConfigChannel+0xdc>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	08007851 	.word	0x08007851
 80077b0:	08007851 	.word	0x08007851
 80077b4:	08007851 	.word	0x08007851
 80077b8:	0800780b 	.word	0x0800780b
 80077bc:	08007851 	.word	0x08007851
 80077c0:	08007851 	.word	0x08007851
 80077c4:	08007851 	.word	0x08007851
 80077c8:	08007819 	.word	0x08007819
 80077cc:	08007851 	.word	0x08007851
 80077d0:	08007851 	.word	0x08007851
 80077d4:	08007851 	.word	0x08007851
 80077d8:	08007827 	.word	0x08007827
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007851 	.word	0x08007851
 80077e4:	08007851 	.word	0x08007851
 80077e8:	08007835 	.word	0x08007835
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007851 	.word	0x08007851
 80077f4:	08007851 	.word	0x08007851
 80077f8:	08007843 	.word	0x08007843
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f9bc 	bl	8007b80 <TIM_OC1_SetConfig>
      break;
 8007808:	e025      	b.n	8007856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fa45 	bl	8007ca0 <TIM_OC2_SetConfig>
      break;
 8007816:	e01e      	b.n	8007856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fac8 	bl	8007db4 <TIM_OC3_SetConfig>
      break;
 8007824:	e017      	b.n	8007856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fb49 	bl	8007ec4 <TIM_OC4_SetConfig>
      break;
 8007832:	e010      	b.n	8007856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fbac 	bl	8007f98 <TIM_OC5_SetConfig>
      break;
 8007840:	e009      	b.n	8007856 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fc09 	bl	8008060 <TIM_OC6_SetConfig>
      break;
 800784e:	e002      	b.n	8007856 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
      break;
 8007854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIM_ConfigClockSource+0x1c>
 8007880:	2302      	movs	r3, #2
 8007882:	e0b6      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x18a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c0:	d03e      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0xd8>
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	f200 8087 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ce:	f000 8086 	beq.w	80079de <HAL_TIM_ConfigClockSource+0x176>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d6:	d87f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 80078d8:	2b70      	cmp	r3, #112	; 0x70
 80078da:	d01a      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0xaa>
 80078dc:	2b70      	cmp	r3, #112	; 0x70
 80078de:	d87b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 80078e0:	2b60      	cmp	r3, #96	; 0x60
 80078e2:	d050      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x11e>
 80078e4:	2b60      	cmp	r3, #96	; 0x60
 80078e6:	d877      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 80078e8:	2b50      	cmp	r3, #80	; 0x50
 80078ea:	d03c      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0xfe>
 80078ec:	2b50      	cmp	r3, #80	; 0x50
 80078ee:	d873      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d058      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x13e>
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d86f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 80078f8:	2b30      	cmp	r3, #48	; 0x30
 80078fa:	d064      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15e>
 80078fc:	2b30      	cmp	r3, #48	; 0x30
 80078fe:	d86b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d060      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15e>
 8007904:	2b20      	cmp	r3, #32
 8007906:	d867      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05c      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15e>
 800790c:	2b10      	cmp	r3, #16
 800790e:	d05a      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15e>
 8007910:	e062      	b.n	80079d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6899      	ldr	r1, [r3, #8]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f000 fc7d 	bl	8008220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	609a      	str	r2, [r3, #8]
      break;
 800793e:	e04f      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6899      	ldr	r1, [r3, #8]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f000 fc66 	bl	8008220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007962:	609a      	str	r2, [r3, #8]
      break;
 8007964:	e03c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	f000 fbda 	bl	800812c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2150      	movs	r1, #80	; 0x50
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fc33 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 8007984:	e02c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	461a      	mov	r2, r3
 8007994:	f000 fbf9 	bl	800818a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2160      	movs	r1, #96	; 0x60
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fc23 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 80079a4:	e01c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 fbba 	bl	800812c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2140      	movs	r1, #64	; 0x40
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fc13 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 80079c4:	e00c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f000 fc0a 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 80079d6:	e003      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e000      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80079de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a40      	ldr	r2, [pc, #256]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a3d      	ldr	r2, [pc, #244]	; (8007b64 <TIM_Base_SetConfig+0x118>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a3c      	ldr	r2, [pc, #240]	; (8007b68 <TIM_Base_SetConfig+0x11c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3b      	ldr	r2, [pc, #236]	; (8007b6c <TIM_Base_SetConfig+0x120>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a3a      	ldr	r2, [pc, #232]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01f      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aac:	d01b      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <TIM_Base_SetConfig+0x118>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d017      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2b      	ldr	r2, [pc, #172]	; (8007b68 <TIM_Base_SetConfig+0x11c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <TIM_Base_SetConfig+0x120>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a29      	ldr	r2, [pc, #164]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <TIM_Base_SetConfig+0x128>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_Base_SetConfig+0x9a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <TIM_Base_SetConfig+0x130>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d108      	bne.n	8007af8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a10      	ldr	r2, [pc, #64]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00f      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a12      	ldr	r2, [pc, #72]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00b      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a11      	ldr	r2, [pc, #68]	; (8007b74 <TIM_Base_SetConfig+0x128>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d007      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a0f      	ldr	r2, [pc, #60]	; (8007b7c <TIM_Base_SetConfig+0x130>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d103      	bne.n	8007b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	615a      	str	r2, [r3, #20]
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800
 8007b6c:	40000c00 	.word	0x40000c00
 8007b70:	40013400 	.word	0x40013400
 8007b74:	40014000 	.word	0x40014000
 8007b78:	40014400 	.word	0x40014400
 8007b7c:	40014800 	.word	0x40014800

08007b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f023 0201 	bic.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f023 0302 	bic.w	r3, r3, #2
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2c      	ldr	r2, [pc, #176]	; (8007c8c <TIM_OC1_SetConfig+0x10c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00f      	beq.n	8007c00 <TIM_OC1_SetConfig+0x80>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a2b      	ldr	r2, [pc, #172]	; (8007c90 <TIM_OC1_SetConfig+0x110>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <TIM_OC1_SetConfig+0x80>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a2a      	ldr	r2, [pc, #168]	; (8007c94 <TIM_OC1_SetConfig+0x114>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d007      	beq.n	8007c00 <TIM_OC1_SetConfig+0x80>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a29      	ldr	r2, [pc, #164]	; (8007c98 <TIM_OC1_SetConfig+0x118>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_OC1_SetConfig+0x80>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <TIM_OC1_SetConfig+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10c      	bne.n	8007c1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0308 	bic.w	r3, r3, #8
 8007c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 0304 	bic.w	r3, r3, #4
 8007c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1b      	ldr	r2, [pc, #108]	; (8007c8c <TIM_OC1_SetConfig+0x10c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00f      	beq.n	8007c42 <TIM_OC1_SetConfig+0xc2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1a      	ldr	r2, [pc, #104]	; (8007c90 <TIM_OC1_SetConfig+0x110>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00b      	beq.n	8007c42 <TIM_OC1_SetConfig+0xc2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <TIM_OC1_SetConfig+0x114>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d007      	beq.n	8007c42 <TIM_OC1_SetConfig+0xc2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a18      	ldr	r2, [pc, #96]	; (8007c98 <TIM_OC1_SetConfig+0x118>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_OC1_SetConfig+0xc2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <TIM_OC1_SetConfig+0x11c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d111      	bne.n	8007c66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800

08007ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0210 	bic.w	r2, r3, #16
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0320 	bic.w	r3, r3, #32
 8007cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <TIM_OC2_SetConfig+0x100>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_OC2_SetConfig+0x6c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <TIM_OC2_SetConfig+0x104>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d10d      	bne.n	8007d28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1d      	ldr	r2, [pc, #116]	; (8007da0 <TIM_OC2_SetConfig+0x100>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00f      	beq.n	8007d50 <TIM_OC2_SetConfig+0xb0>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1c      	ldr	r2, [pc, #112]	; (8007da4 <TIM_OC2_SetConfig+0x104>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00b      	beq.n	8007d50 <TIM_OC2_SetConfig+0xb0>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <TIM_OC2_SetConfig+0x108>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_OC2_SetConfig+0xb0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a1a      	ldr	r2, [pc, #104]	; (8007dac <TIM_OC2_SetConfig+0x10c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_OC2_SetConfig+0xb0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a19      	ldr	r2, [pc, #100]	; (8007db0 <TIM_OC2_SetConfig+0x110>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d113      	bne.n	8007d78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40013400 	.word	0x40013400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40014400 	.word	0x40014400
 8007db0:	40014800 	.word	0x40014800

08007db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	021b      	lsls	r3, r3, #8
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a27      	ldr	r2, [pc, #156]	; (8007eb0 <TIM_OC3_SetConfig+0xfc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_OC3_SetConfig+0x6a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a26      	ldr	r2, [pc, #152]	; (8007eb4 <TIM_OC3_SetConfig+0x100>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d10d      	bne.n	8007e3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <TIM_OC3_SetConfig+0xfc>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <TIM_OC3_SetConfig+0xae>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <TIM_OC3_SetConfig+0x100>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_OC3_SetConfig+0xae>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <TIM_OC3_SetConfig+0x104>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_OC3_SetConfig+0xae>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a19      	ldr	r2, [pc, #100]	; (8007ebc <TIM_OC3_SetConfig+0x108>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_OC3_SetConfig+0xae>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a18      	ldr	r2, [pc, #96]	; (8007ec0 <TIM_OC3_SetConfig+0x10c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d113      	bne.n	8007e8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40013400 	.word	0x40013400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40014400 	.word	0x40014400
 8007ec0:	40014800 	.word	0x40014800

08007ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a18      	ldr	r2, [pc, #96]	; (8007f84 <TIM_OC4_SetConfig+0xc0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00f      	beq.n	8007f48 <TIM_OC4_SetConfig+0x84>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <TIM_OC4_SetConfig+0xc4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_OC4_SetConfig+0x84>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a16      	ldr	r2, [pc, #88]	; (8007f8c <TIM_OC4_SetConfig+0xc8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_OC4_SetConfig+0x84>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <TIM_OC4_SetConfig+0xcc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC4_SetConfig+0x84>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a14      	ldr	r2, [pc, #80]	; (8007f94 <TIM_OC4_SetConfig+0xd0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d109      	bne.n	8007f5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	019b      	lsls	r3, r3, #6
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40013400 	.word	0x40013400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800

08007f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	041b      	lsls	r3, r3, #16
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a17      	ldr	r2, [pc, #92]	; (800804c <TIM_OC5_SetConfig+0xb4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00f      	beq.n	8008012 <TIM_OC5_SetConfig+0x7a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <TIM_OC5_SetConfig+0xb8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00b      	beq.n	8008012 <TIM_OC5_SetConfig+0x7a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <TIM_OC5_SetConfig+0xbc>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d007      	beq.n	8008012 <TIM_OC5_SetConfig+0x7a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a14      	ldr	r2, [pc, #80]	; (8008058 <TIM_OC5_SetConfig+0xc0>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d003      	beq.n	8008012 <TIM_OC5_SetConfig+0x7a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a13      	ldr	r2, [pc, #76]	; (800805c <TIM_OC5_SetConfig+0xc4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d109      	bne.n	8008026 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	4313      	orrs	r3, r2
 8008024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	40012c00 	.word	0x40012c00
 8008050:	40013400 	.word	0x40013400
 8008054:	40014000 	.word	0x40014000
 8008058:	40014400 	.word	0x40014400
 800805c:	40014800 	.word	0x40014800

08008060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800808e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	051b      	lsls	r3, r3, #20
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <TIM_OC6_SetConfig+0xb8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00f      	beq.n	80080dc <TIM_OC6_SetConfig+0x7c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a17      	ldr	r2, [pc, #92]	; (800811c <TIM_OC6_SetConfig+0xbc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d00b      	beq.n	80080dc <TIM_OC6_SetConfig+0x7c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a16      	ldr	r2, [pc, #88]	; (8008120 <TIM_OC6_SetConfig+0xc0>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d007      	beq.n	80080dc <TIM_OC6_SetConfig+0x7c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a15      	ldr	r2, [pc, #84]	; (8008124 <TIM_OC6_SetConfig+0xc4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d003      	beq.n	80080dc <TIM_OC6_SetConfig+0x7c>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a14      	ldr	r2, [pc, #80]	; (8008128 <TIM_OC6_SetConfig+0xc8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d109      	bne.n	80080f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	029b      	lsls	r3, r3, #10
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	40012c00 	.word	0x40012c00
 800811c:	40013400 	.word	0x40013400
 8008120:	40014000 	.word	0x40014000
 8008124:	40014400 	.word	0x40014400
 8008128:	40014800 	.word	0x40014800

0800812c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f023 0201 	bic.w	r2, r3, #1
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f023 030a 	bic.w	r3, r3, #10
 8008168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	621a      	str	r2, [r3, #32]
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800818a:	b480      	push	{r7}
 800818c:	b087      	sub	sp, #28
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0210 	bic.w	r2, r3, #16
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	031b      	lsls	r3, r3, #12
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4313      	orrs	r3, r2
 8008208:	f043 0307 	orr.w	r3, r3, #7
 800820c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	609a      	str	r2, [r3, #8]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800823a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	021a      	lsls	r2, r3, #8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	431a      	orrs	r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4313      	orrs	r3, r2
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	609a      	str	r2, [r3, #8]
}
 8008254:	bf00      	nop
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008270:	2b01      	cmp	r3, #1
 8008272:	d101      	bne.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008274:	2302      	movs	r3, #2
 8008276:	e068      	b.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a2e      	ldr	r2, [pc, #184]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d004      	beq.n	80082ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a2d      	ldr	r2, [pc, #180]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d108      	bne.n	80082be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a1e      	ldr	r2, [pc, #120]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01d      	beq.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ea:	d018      	beq.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1b      	ldr	r2, [pc, #108]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00e      	beq.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a18      	ldr	r2, [pc, #96]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d009      	beq.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a13      	ldr	r2, [pc, #76]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d004      	beq.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a14      	ldr	r2, [pc, #80]	; (800836c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d10c      	bne.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	4313      	orrs	r3, r2
 800832e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40013400 	.word	0x40013400
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40014000 	.word	0x40014000

08008370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e040      	b.n	8008440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fa fb96 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0201 	bic.w	r2, r2, #1
 80083e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fbf2 	bl	8008bd4 <UART_SetConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e022      	b.n	8008440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fe9e 	bl	8009144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 ff25 	bl	8009288 <UART_CheckIdleState>
 800843e:	4603      	mov	r3, r0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008448:	b480      	push	{r7}
 800844a:	b08b      	sub	sp, #44	; 0x2c
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845a:	2b20      	cmp	r3, #32
 800845c:	d156      	bne.n	800850c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_UART_Transmit_IT+0x22>
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e04f      	b.n	800850e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Transmit_IT+0x34>
 8008478:	2302      	movs	r3, #2
 800847a:	e048      	b.n	800850e <HAL_UART_Transmit_IT+0xc6>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	88fa      	ldrh	r2, [r7, #6]
 800848e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2221      	movs	r2, #33	; 0x21
 80084ac:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b6:	d107      	bne.n	80084c8 <HAL_UART_Transmit_IT+0x80>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a16      	ldr	r2, [pc, #88]	; (800851c <HAL_UART_Transmit_IT+0xd4>)
 80084c4:	669a      	str	r2, [r3, #104]	; 0x68
 80084c6:	e002      	b.n	80084ce <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a15      	ldr	r2, [pc, #84]	; (8008520 <HAL_UART_Transmit_IT+0xd8>)
 80084cc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	613b      	str	r3, [r7, #16]
   return(result);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	69f9      	ldr	r1, [r7, #28]
 80084fa:	6a3a      	ldr	r2, [r7, #32]
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	61bb      	str	r3, [r7, #24]
   return(result);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	e000      	b.n	800850e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800850c:	2302      	movs	r3, #2
  }
}
 800850e:	4618      	mov	r0, r3
 8008510:	372c      	adds	r7, #44	; 0x2c
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	080097e3 	.word	0x080097e3
 8008520:	0800972b 	.word	0x0800972b

08008524 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008536:	2b20      	cmp	r3, #32
 8008538:	d142      	bne.n	80085c0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_UART_Receive_IT+0x22>
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e03b      	b.n	80085c2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_UART_Receive_IT+0x34>
 8008554:	2302      	movs	r3, #2
 8008556:	e034      	b.n	80085c2 <HAL_UART_Receive_IT+0x9e>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a18      	ldr	r2, [pc, #96]	; (80085cc <HAL_UART_Receive_IT+0xa8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d01f      	beq.n	80085b0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d018      	beq.n	80085b0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	613b      	str	r3, [r7, #16]
   return(result);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	623b      	str	r3, [r7, #32]
 800859e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	69f9      	ldr	r1, [r7, #28]
 80085a2:	6a3a      	ldr	r2, [r7, #32]
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e6      	bne.n	800857e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	461a      	mov	r2, r3
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 ff74 	bl	80094a4 <UART_Start_Receive_IT>
 80085bc:	4603      	mov	r3, r0
 80085be:	e000      	b.n	80085c2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80085c0:	2302      	movs	r3, #2
  }
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3728      	adds	r7, #40	; 0x28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40008000 	.word	0x40008000

080085d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b0ba      	sub	sp, #232	; 0xe8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80085fe:	4013      	ands	r3, r2
 8008600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d115      	bne.n	8008638 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00f      	beq.n	8008638 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 82a6 	beq.w	8008b7a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
      }
      return;
 8008636:	e2a0      	b.n	8008b7a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 8117 	beq.w	8008870 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800864e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008652:	4b85      	ldr	r3, [pc, #532]	; (8008868 <HAL_UART_IRQHandler+0x298>)
 8008654:	4013      	ands	r3, r2
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 810a 	beq.w	8008870 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800865c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d011      	beq.n	800868c <HAL_UART_IRQHandler+0xbc>
 8008668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2201      	movs	r2, #1
 800867a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008682:	f043 0201 	orr.w	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800868c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d011      	beq.n	80086bc <HAL_UART_IRQHandler+0xec>
 8008698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2202      	movs	r2, #2
 80086aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b2:	f043 0204 	orr.w	r2, r3, #4
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d011      	beq.n	80086ec <HAL_UART_IRQHandler+0x11c>
 80086c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2204      	movs	r2, #4
 80086da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e2:	f043 0202 	orr.w	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d017      	beq.n	8008728 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d105      	bne.n	8008710 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008708:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2208      	movs	r2, #8
 8008716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800871e:	f043 0208 	orr.w	r2, r3, #8
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008730:	2b00      	cmp	r3, #0
 8008732:	d012      	beq.n	800875a <HAL_UART_IRQHandler+0x18a>
 8008734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00c      	beq.n	800875a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008750:	f043 0220 	orr.w	r2, r3, #32
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 820c 	beq.w	8008b7e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00d      	beq.n	800878e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	d007      	beq.n	800878e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d005      	beq.n	80087b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d04f      	beq.n	8008852 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 ff40 	bl	8009638 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c2:	2b40      	cmp	r3, #64	; 0x40
 80087c4:	d141      	bne.n	800884a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800880a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1d9      	bne.n	80087c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	2b00      	cmp	r3, #0
 8008818:	d013      	beq.n	8008842 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	4a13      	ldr	r2, [pc, #76]	; (800886c <HAL_UART_IRQHandler+0x29c>)
 8008820:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	4618      	mov	r0, r3
 8008828:	f7fc fe82 	bl	8005530 <HAL_DMA_Abort_IT>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d017      	beq.n	8008862 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	e00f      	b.n	8008862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f9b0 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	e00b      	b.n	8008862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f9ac 	bl	8008ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008850:	e007      	b.n	8008862 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f9a8 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008860:	e18d      	b.n	8008b7e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008862:	bf00      	nop
    return;
 8008864:	e18b      	b.n	8008b7e <HAL_UART_IRQHandler+0x5ae>
 8008866:	bf00      	nop
 8008868:	04000120 	.word	0x04000120
 800886c:	080096ff 	.word	0x080096ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008874:	2b01      	cmp	r3, #1
 8008876:	f040 8146 	bne.w	8008b06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 813f 	beq.w	8008b06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8138 	beq.w	8008b06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2210      	movs	r2, #16
 800889c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b40      	cmp	r3, #64	; 0x40
 80088aa:	f040 80b4 	bne.w	8008a16 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 815f 	beq.w	8008b82 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ce:	429a      	cmp	r2, r3
 80088d0:	f080 8157 	bcs.w	8008b82 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 8085 	bne.w	80089fa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800890c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800891a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800891e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1da      	bne.n	80088f0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800894a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800895e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e1      	bne.n	800893a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800899a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800899c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e3      	bne.n	8008976 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ca:	f023 0310 	bic.w	r3, r3, #16
 80089ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80089de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e4      	bne.n	80089ba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fc fd5d 	bl	80054b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f8d4 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a14:	e0b5      	b.n	8008b82 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80a7 	beq.w	8008b86 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80a2 	beq.w	8008b86 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a64:	647b      	str	r3, [r7, #68]	; 0x44
 8008a66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e4      	bne.n	8008a42 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	623b      	str	r3, [r7, #32]
   return(result);
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	f023 0301 	bic.w	r3, r3, #1
 8008a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a9c:	633a      	str	r2, [r7, #48]	; 0x30
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e3      	bne.n	8008a78 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0310 	bic.w	r3, r3, #16
 8008ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	617b      	str	r3, [r7, #20]
   return(result);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e4      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f85c 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b04:	e03f      	b.n	8008b86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00e      	beq.n	8008b30 <HAL_UART_IRQHandler+0x560>
 8008b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f844 	bl	8009bb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b2e:	e02d      	b.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00e      	beq.n	8008b5a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d01c      	beq.n	8008b8a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
    }
    return;
 8008b58:	e017      	b.n	8008b8a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d012      	beq.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
 8008b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00c      	beq.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fe95 	bl	80098a2 <UART_EndTransmit_IT>
    return;
 8008b78:	e008      	b.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b7a:	bf00      	nop
 8008b7c:	e006      	b.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8008b7e:	bf00      	nop
 8008b80:	e004      	b.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b82:	bf00      	nop
 8008b84:	e002      	b.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <HAL_UART_IRQHandler+0x5bc>
    return;
 8008b8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b8c:	37e8      	adds	r7, #232	; 0xe8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop

08008b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd8:	b08a      	sub	sp, #40	; 0x28
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4ba4      	ldr	r3, [pc, #656]	; (8008e94 <UART_SetConfig+0x2c0>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a99      	ldr	r2, [pc, #612]	; (8008e98 <UART_SetConfig+0x2c4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c50:	430a      	orrs	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a90      	ldr	r2, [pc, #576]	; (8008e9c <UART_SetConfig+0x2c8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d126      	bne.n	8008cac <UART_SetConfig+0xd8>
 8008c5e:	4b90      	ldr	r3, [pc, #576]	; (8008ea0 <UART_SetConfig+0x2cc>)
 8008c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d81b      	bhi.n	8008ca4 <UART_SetConfig+0xd0>
 8008c6c:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <UART_SetConfig+0xa0>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008c85 	.word	0x08008c85
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	2301      	movs	r3, #1
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c8a:	e116      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c92:	e112      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c9a:	e10e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ca2:	e10a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008caa:	e106      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a7c      	ldr	r2, [pc, #496]	; (8008ea4 <UART_SetConfig+0x2d0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d138      	bne.n	8008d28 <UART_SetConfig+0x154>
 8008cb6:	4b7a      	ldr	r3, [pc, #488]	; (8008ea0 <UART_SetConfig+0x2cc>)
 8008cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbc:	f003 030c 	and.w	r3, r3, #12
 8008cc0:	2b0c      	cmp	r3, #12
 8008cc2:	d82d      	bhi.n	8008d20 <UART_SetConfig+0x14c>
 8008cc4:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <UART_SetConfig+0xf8>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d21 	.word	0x08008d21
 8008cd4:	08008d21 	.word	0x08008d21
 8008cd8:	08008d21 	.word	0x08008d21
 8008cdc:	08008d11 	.word	0x08008d11
 8008ce0:	08008d21 	.word	0x08008d21
 8008ce4:	08008d21 	.word	0x08008d21
 8008ce8:	08008d21 	.word	0x08008d21
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	08008d21 	.word	0x08008d21
 8008cf4:	08008d21 	.word	0x08008d21
 8008cf8:	08008d21 	.word	0x08008d21
 8008cfc:	08008d19 	.word	0x08008d19
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d06:	e0d8      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d0e:	e0d4      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d10:	2304      	movs	r3, #4
 8008d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d16:	e0d0      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d18:	2308      	movs	r3, #8
 8008d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d1e:	e0cc      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d20:	2310      	movs	r3, #16
 8008d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d26:	e0c8      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a5e      	ldr	r2, [pc, #376]	; (8008ea8 <UART_SetConfig+0x2d4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d125      	bne.n	8008d7e <UART_SetConfig+0x1aa>
 8008d32:	4b5b      	ldr	r3, [pc, #364]	; (8008ea0 <UART_SetConfig+0x2cc>)
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d3c:	2b30      	cmp	r3, #48	; 0x30
 8008d3e:	d016      	beq.n	8008d6e <UART_SetConfig+0x19a>
 8008d40:	2b30      	cmp	r3, #48	; 0x30
 8008d42:	d818      	bhi.n	8008d76 <UART_SetConfig+0x1a2>
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	d00a      	beq.n	8008d5e <UART_SetConfig+0x18a>
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d814      	bhi.n	8008d76 <UART_SetConfig+0x1a2>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <UART_SetConfig+0x182>
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d008      	beq.n	8008d66 <UART_SetConfig+0x192>
 8008d54:	e00f      	b.n	8008d76 <UART_SetConfig+0x1a2>
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d5c:	e0ad      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d64:	e0a9      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d66:	2304      	movs	r3, #4
 8008d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d6c:	e0a5      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d6e:	2308      	movs	r3, #8
 8008d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d74:	e0a1      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d76:	2310      	movs	r3, #16
 8008d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7c:	e09d      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a4a      	ldr	r2, [pc, #296]	; (8008eac <UART_SetConfig+0x2d8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d125      	bne.n	8008dd4 <UART_SetConfig+0x200>
 8008d88:	4b45      	ldr	r3, [pc, #276]	; (8008ea0 <UART_SetConfig+0x2cc>)
 8008d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d92:	2bc0      	cmp	r3, #192	; 0xc0
 8008d94:	d016      	beq.n	8008dc4 <UART_SetConfig+0x1f0>
 8008d96:	2bc0      	cmp	r3, #192	; 0xc0
 8008d98:	d818      	bhi.n	8008dcc <UART_SetConfig+0x1f8>
 8008d9a:	2b80      	cmp	r3, #128	; 0x80
 8008d9c:	d00a      	beq.n	8008db4 <UART_SetConfig+0x1e0>
 8008d9e:	2b80      	cmp	r3, #128	; 0x80
 8008da0:	d814      	bhi.n	8008dcc <UART_SetConfig+0x1f8>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <UART_SetConfig+0x1d8>
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d008      	beq.n	8008dbc <UART_SetConfig+0x1e8>
 8008daa:	e00f      	b.n	8008dcc <UART_SetConfig+0x1f8>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008db2:	e082      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dba:	e07e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dc2:	e07a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dc4:	2308      	movs	r3, #8
 8008dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dca:	e076      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dcc:	2310      	movs	r3, #16
 8008dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd2:	e072      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a35      	ldr	r2, [pc, #212]	; (8008eb0 <UART_SetConfig+0x2dc>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d12a      	bne.n	8008e34 <UART_SetConfig+0x260>
 8008dde:	4b30      	ldr	r3, [pc, #192]	; (8008ea0 <UART_SetConfig+0x2cc>)
 8008de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dec:	d01a      	beq.n	8008e24 <UART_SetConfig+0x250>
 8008dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008df2:	d81b      	bhi.n	8008e2c <UART_SetConfig+0x258>
 8008df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df8:	d00c      	beq.n	8008e14 <UART_SetConfig+0x240>
 8008dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dfe:	d815      	bhi.n	8008e2c <UART_SetConfig+0x258>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <UART_SetConfig+0x238>
 8008e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e08:	d008      	beq.n	8008e1c <UART_SetConfig+0x248>
 8008e0a:	e00f      	b.n	8008e2c <UART_SetConfig+0x258>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e12:	e052      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e14:	2302      	movs	r3, #2
 8008e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e1a:	e04e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e22:	e04a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e2a:	e046      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e32:	e042      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a17      	ldr	r2, [pc, #92]	; (8008e98 <UART_SetConfig+0x2c4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d13a      	bne.n	8008eb4 <UART_SetConfig+0x2e0>
 8008e3e:	4b18      	ldr	r3, [pc, #96]	; (8008ea0 <UART_SetConfig+0x2cc>)
 8008e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e4c:	d01a      	beq.n	8008e84 <UART_SetConfig+0x2b0>
 8008e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e52:	d81b      	bhi.n	8008e8c <UART_SetConfig+0x2b8>
 8008e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e58:	d00c      	beq.n	8008e74 <UART_SetConfig+0x2a0>
 8008e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e5e:	d815      	bhi.n	8008e8c <UART_SetConfig+0x2b8>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <UART_SetConfig+0x298>
 8008e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e68:	d008      	beq.n	8008e7c <UART_SetConfig+0x2a8>
 8008e6a:	e00f      	b.n	8008e8c <UART_SetConfig+0x2b8>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e72:	e022      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e74:	2302      	movs	r3, #2
 8008e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e7a:	e01e      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e82:	e01a      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e8a:	e016      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e92:	e012      	b.n	8008eba <UART_SetConfig+0x2e6>
 8008e94:	efff69f3 	.word	0xefff69f3
 8008e98:	40008000 	.word	0x40008000
 8008e9c:	40013800 	.word	0x40013800
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	40004400 	.word	0x40004400
 8008ea8:	40004800 	.word	0x40004800
 8008eac:	40004c00 	.word	0x40004c00
 8008eb0:	40005000 	.word	0x40005000
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a9f      	ldr	r2, [pc, #636]	; (800913c <UART_SetConfig+0x568>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d17a      	bne.n	8008fba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d824      	bhi.n	8008f16 <UART_SetConfig+0x342>
 8008ecc:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <UART_SetConfig+0x300>)
 8008ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed2:	bf00      	nop
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f17 	.word	0x08008f17
 8008edc:	08008f01 	.word	0x08008f01
 8008ee0:	08008f17 	.word	0x08008f17
 8008ee4:	08008f07 	.word	0x08008f07
 8008ee8:	08008f17 	.word	0x08008f17
 8008eec:	08008f17 	.word	0x08008f17
 8008ef0:	08008f17 	.word	0x08008f17
 8008ef4:	08008f0f 	.word	0x08008f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef8:	f7fd fbbc 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 8008efc:	61f8      	str	r0, [r7, #28]
        break;
 8008efe:	e010      	b.n	8008f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f00:	4b8f      	ldr	r3, [pc, #572]	; (8009140 <UART_SetConfig+0x56c>)
 8008f02:	61fb      	str	r3, [r7, #28]
        break;
 8008f04:	e00d      	b.n	8008f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f06:	f7fd fb1d 	bl	8006544 <HAL_RCC_GetSysClockFreq>
 8008f0a:	61f8      	str	r0, [r7, #28]
        break;
 8008f0c:	e009      	b.n	8008f22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f12:	61fb      	str	r3, [r7, #28]
        break;
 8008f14:	e005      	b.n	8008f22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80fb 	beq.w	8009120 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4413      	add	r3, r2
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d305      	bcc.n	8008f46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d903      	bls.n	8008f4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f4c:	e0e8      	b.n	8009120 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	2200      	movs	r2, #0
 8008f52:	461c      	mov	r4, r3
 8008f54:	4615      	mov	r5, r2
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	022b      	lsls	r3, r5, #8
 8008f60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f64:	0222      	lsls	r2, r4, #8
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	6849      	ldr	r1, [r1, #4]
 8008f6a:	0849      	lsrs	r1, r1, #1
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4688      	mov	r8, r1
 8008f70:	4681      	mov	r9, r0
 8008f72:	eb12 0a08 	adds.w	sl, r2, r8
 8008f76:	eb43 0b09 	adc.w	fp, r3, r9
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f88:	4650      	mov	r0, sl
 8008f8a:	4659      	mov	r1, fp
 8008f8c:	f7f7 fe8c 	bl	8000ca8 <__aeabi_uldivmod>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	4613      	mov	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f9e:	d308      	bcc.n	8008fb2 <UART_SetConfig+0x3de>
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fa6:	d204      	bcs.n	8008fb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	60da      	str	r2, [r3, #12]
 8008fb0:	e0b6      	b.n	8009120 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008fb8:	e0b2      	b.n	8009120 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc2:	d15e      	bne.n	8009082 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d828      	bhi.n	800901e <UART_SetConfig+0x44a>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <UART_SetConfig+0x400>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	0800901f 	.word	0x0800901f
 8008fe4:	0800900f 	.word	0x0800900f
 8008fe8:	0800901f 	.word	0x0800901f
 8008fec:	0800901f 	.word	0x0800901f
 8008ff0:	0800901f 	.word	0x0800901f
 8008ff4:	08009017 	.word	0x08009017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff8:	f7fd fb3c 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 8008ffc:	61f8      	str	r0, [r7, #28]
        break;
 8008ffe:	e014      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009000:	f7fd fb4e 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 8009004:	61f8      	str	r0, [r7, #28]
        break;
 8009006:	e010      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009008:	4b4d      	ldr	r3, [pc, #308]	; (8009140 <UART_SetConfig+0x56c>)
 800900a:	61fb      	str	r3, [r7, #28]
        break;
 800900c:	e00d      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800900e:	f7fd fa99 	bl	8006544 <HAL_RCC_GetSysClockFreq>
 8009012:	61f8      	str	r0, [r7, #28]
        break;
 8009014:	e009      	b.n	800902a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800901a:	61fb      	str	r3, [r7, #28]
        break;
 800901c:	e005      	b.n	800902a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009028:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d077      	beq.n	8009120 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	005a      	lsls	r2, r3, #1
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	441a      	add	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	fbb2 f3f3 	udiv	r3, r2, r3
 8009044:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b0f      	cmp	r3, #15
 800904a:	d916      	bls.n	800907a <UART_SetConfig+0x4a6>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009052:	d212      	bcs.n	800907a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	b29b      	uxth	r3, r3
 8009058:	f023 030f 	bic.w	r3, r3, #15
 800905c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	085b      	lsrs	r3, r3, #1
 8009062:	b29b      	uxth	r3, r3
 8009064:	f003 0307 	and.w	r3, r3, #7
 8009068:	b29a      	uxth	r2, r3
 800906a:	8afb      	ldrh	r3, [r7, #22]
 800906c:	4313      	orrs	r3, r2
 800906e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	8afa      	ldrh	r2, [r7, #22]
 8009076:	60da      	str	r2, [r3, #12]
 8009078:	e052      	b.n	8009120 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009080:	e04e      	b.n	8009120 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009086:	2b08      	cmp	r3, #8
 8009088:	d827      	bhi.n	80090da <UART_SetConfig+0x506>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <UART_SetConfig+0x4bc>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090bd 	.word	0x080090bd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	080090db 	.word	0x080090db
 80090a0:	080090cb 	.word	0x080090cb
 80090a4:	080090db 	.word	0x080090db
 80090a8:	080090db 	.word	0x080090db
 80090ac:	080090db 	.word	0x080090db
 80090b0:	080090d3 	.word	0x080090d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090b4:	f7fd fade 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 80090b8:	61f8      	str	r0, [r7, #28]
        break;
 80090ba:	e014      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7fd faf0 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 80090c0:	61f8      	str	r0, [r7, #28]
        break;
 80090c2:	e010      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <UART_SetConfig+0x56c>)
 80090c6:	61fb      	str	r3, [r7, #28]
        break;
 80090c8:	e00d      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ca:	f7fd fa3b 	bl	8006544 <HAL_RCC_GetSysClockFreq>
 80090ce:	61f8      	str	r0, [r7, #28]
        break;
 80090d0:	e009      	b.n	80090e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090d6:	61fb      	str	r3, [r7, #28]
        break;
 80090d8:	e005      	b.n	80090e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090e4:	bf00      	nop
    }

    if (pclk != 0U)
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d019      	beq.n	8009120 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	085a      	lsrs	r2, r3, #1
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	441a      	add	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b0f      	cmp	r3, #15
 8009104:	d909      	bls.n	800911a <UART_SetConfig+0x546>
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800910c:	d205      	bcs.n	800911a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60da      	str	r2, [r3, #12]
 8009118:	e002      	b.n	8009120 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800912c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009130:	4618      	mov	r0, r3
 8009132:	3728      	adds	r7, #40	; 0x28
 8009134:	46bd      	mov	sp, r7
 8009136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800913a:	bf00      	nop
 800913c:	40008000 	.word	0x40008000
 8009140:	00f42400 	.word	0x00f42400

08009144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	f003 0304 	and.w	r3, r3, #4
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01a      	beq.n	800925a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009242:	d10a      	bne.n	800925a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	605a      	str	r2, [r3, #4]
  }
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af02      	add	r7, sp, #8
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009298:	f7fa f804 	bl	80032a4 <HAL_GetTick>
 800929c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d10e      	bne.n	80092ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f82d 	bl	800931a <UART_WaitOnFlagUntilTimeout>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e023      	b.n	8009312 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d10e      	bne.n	80092f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f817 	bl	800931a <UART_WaitOnFlagUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e00d      	b.n	8009312 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b09c      	sub	sp, #112	; 0x70
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	603b      	str	r3, [r7, #0]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800932a:	e0a5      	b.n	8009478 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800932c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800932e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009332:	f000 80a1 	beq.w	8009478 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009336:	f7f9 ffb5 	bl	80032a4 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <UART_WaitOnFlagUntilTimeout+0x32>
 8009346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009348:	2b00      	cmp	r3, #0
 800934a:	d13e      	bne.n	80093ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800935a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009360:	667b      	str	r3, [r7, #100]	; 0x64
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800936a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800936c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e6      	bne.n	800934c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3308      	adds	r3, #8
 8009384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	f023 0301 	bic.w	r3, r3, #1
 8009394:	663b      	str	r3, [r7, #96]	; 0x60
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800939e:	64ba      	str	r2, [r7, #72]	; 0x48
 80093a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e5      	bne.n	800937e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2220      	movs	r2, #32
 80093b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2220      	movs	r2, #32
 80093bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e067      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d04f      	beq.n	8009478 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093e6:	d147      	bne.n	8009478 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009410:	637b      	str	r3, [r7, #52]	; 0x34
 8009412:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800941e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e6      	bne.n	80093f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	e853 3f00 	ldrex	r3, [r3]
 8009432:	613b      	str	r3, [r7, #16]
   return(result);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f023 0301 	bic.w	r3, r3, #1
 800943a:	66bb      	str	r3, [r7, #104]	; 0x68
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3308      	adds	r3, #8
 8009442:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009444:	623a      	str	r2, [r7, #32]
 8009446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	69f9      	ldr	r1, [r7, #28]
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	61bb      	str	r3, [r7, #24]
   return(result);
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e5      	bne.n	8009424 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2220      	movs	r2, #32
 8009468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e010      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	69da      	ldr	r2, [r3, #28]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	4013      	ands	r3, r2
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	429a      	cmp	r2, r3
 8009486:	bf0c      	ite	eq
 8009488:	2301      	moveq	r3, #1
 800948a:	2300      	movne	r3, #0
 800948c:	b2db      	uxtb	r3, r3
 800948e:	461a      	mov	r2, r3
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	429a      	cmp	r2, r3
 8009494:	f43f af4a 	beq.w	800932c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3770      	adds	r7, #112	; 0x70
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b097      	sub	sp, #92	; 0x5c
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	88fa      	ldrh	r2, [r7, #6]
 80094bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d6:	d10e      	bne.n	80094f6 <UART_Start_Receive_IT+0x52>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d105      	bne.n	80094ec <UART_Start_Receive_IT+0x48>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80094e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094ea:	e02d      	b.n	8009548 <UART_Start_Receive_IT+0xa4>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	22ff      	movs	r2, #255	; 0xff
 80094f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094f4:	e028      	b.n	8009548 <UART_Start_Receive_IT+0xa4>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10d      	bne.n	800951a <UART_Start_Receive_IT+0x76>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <UART_Start_Receive_IT+0x6c>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800950e:	e01b      	b.n	8009548 <UART_Start_Receive_IT+0xa4>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	227f      	movs	r2, #127	; 0x7f
 8009514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009518:	e016      	b.n	8009548 <UART_Start_Receive_IT+0xa4>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009522:	d10d      	bne.n	8009540 <UART_Start_Receive_IT+0x9c>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d104      	bne.n	8009536 <UART_Start_Receive_IT+0x92>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	227f      	movs	r2, #127	; 0x7f
 8009530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009534:	e008      	b.n	8009548 <UART_Start_Receive_IT+0xa4>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	223f      	movs	r2, #63	; 0x3f
 800953a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800953e:	e003      	b.n	8009548 <UART_Start_Receive_IT+0xa4>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2222      	movs	r2, #34	; 0x22
 8009554:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3308      	adds	r3, #8
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	f043 0301 	orr.w	r3, r3, #1
 800956c:	657b      	str	r3, [r7, #84]	; 0x54
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3308      	adds	r3, #8
 8009574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009576:	64ba      	str	r2, [r7, #72]	; 0x48
 8009578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800957c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e5      	bne.n	8009556 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009592:	d107      	bne.n	80095a4 <UART_Start_Receive_IT+0x100>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4a24      	ldr	r2, [pc, #144]	; (8009630 <UART_Start_Receive_IT+0x18c>)
 80095a0:	665a      	str	r2, [r3, #100]	; 0x64
 80095a2:	e002      	b.n	80095aa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4a23      	ldr	r2, [pc, #140]	; (8009634 <UART_Start_Receive_IT+0x190>)
 80095a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d019      	beq.n	80095ee <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80095ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d8:	637b      	str	r3, [r7, #52]	; 0x34
 80095da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_Start_Receive_IT+0x116>
 80095ec:	e018      	b.n	8009620 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	613b      	str	r3, [r7, #16]
   return(result);
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f043 0320 	orr.w	r3, r3, #32
 8009602:	653b      	str	r3, [r7, #80]	; 0x50
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960c:	623b      	str	r3, [r7, #32]
 800960e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	6a3a      	ldr	r2, [r7, #32]
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	61bb      	str	r3, [r7, #24]
   return(result);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	375c      	adds	r7, #92	; 0x5c
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	08009a57 	.word	0x08009a57
 8009634:	080098f7 	.word	0x080098f7

08009638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b095      	sub	sp, #84	; 0x54
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965e:	643b      	str	r3, [r7, #64]	; 0x40
 8009660:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800966c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e6      	bne.n	8009640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	61fb      	str	r3, [r7, #28]
   return(result);
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	64bb      	str	r3, [r7, #72]	; 0x48
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e5      	bne.n	8009672 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d118      	bne.n	80096e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f023 0310 	bic.w	r3, r3, #16
 80096c2:	647b      	str	r3, [r7, #68]	; 0x44
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	6979      	ldr	r1, [r7, #20]
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	e841 2300 	strex	r3, r2, [r1]
 80096d8:	613b      	str	r3, [r7, #16]
   return(result);
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e6      	bne.n	80096ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2220      	movs	r2, #32
 80096e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80096f2:	bf00      	nop
 80096f4:	3754      	adds	r7, #84	; 0x54
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f7ff fa43 	bl	8008ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009722:	bf00      	nop
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800972a:	b480      	push	{r7}
 800972c:	b08f      	sub	sp, #60	; 0x3c
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009736:	2b21      	cmp	r3, #33	; 0x21
 8009738:	d14d      	bne.n	80097d6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d132      	bne.n	80097ac <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	61fb      	str	r3, [r7, #28]
   return(result);
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009766:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800976a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e6      	bne.n	8009746 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	60bb      	str	r3, [r7, #8]
   return(result);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978c:	633b      	str	r3, [r7, #48]	; 0x30
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6979      	ldr	r1, [r7, #20]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	613b      	str	r3, [r7, #16]
   return(result);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e6      	bne.n	8009778 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80097aa:	e014      	b.n	80097d6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	b292      	uxth	r2, r2
 80097b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80097d6:	bf00      	nop
 80097d8:	373c      	adds	r7, #60	; 0x3c
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b091      	sub	sp, #68	; 0x44
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ee:	2b21      	cmp	r3, #33	; 0x21
 80097f0:	d151      	bne.n	8009896 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d132      	bne.n	8009864 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	623b      	str	r3, [r7, #32]
   return(result);
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009812:	63bb      	str	r3, [r7, #56]	; 0x38
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	633b      	str	r3, [r7, #48]	; 0x30
 800981e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e6      	bne.n	80097fe <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	e853 3f00 	ldrex	r3, [r3]
 800983c:	60fb      	str	r3, [r7, #12]
   return(result);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009852:	69b9      	ldr	r1, [r7, #24]
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	e841 2300 	strex	r3, r2, [r1]
 800985a:	617b      	str	r3, [r7, #20]
   return(result);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1e6      	bne.n	8009830 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009862:	e018      	b.n	8009896 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800986a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986c:	881a      	ldrh	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009876:	b292      	uxth	r2, r2
 8009878:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800987e:	1c9a      	adds	r2, r3, #2
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009896:	bf00      	nop
 8009898:	3744      	adds	r7, #68	; 0x44
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b088      	sub	sp, #32
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6979      	ldr	r1, [r7, #20]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	613b      	str	r3, [r7, #16]
   return(result);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e6      	bne.n	80098aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff f953 	bl	8008b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ee:	bf00      	nop
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b096      	sub	sp, #88	; 0x58
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009904:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990c:	2b22      	cmp	r3, #34	; 0x22
 800990e:	f040 8094 	bne.w	8009a3a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009918:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800991c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009920:	b2d9      	uxtb	r1, r3
 8009922:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009926:	b2da      	uxtb	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992c:	400a      	ands	r2, r1
 800992e:	b2d2      	uxtb	r2, r2
 8009930:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009954:	b29b      	uxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d179      	bne.n	8009a4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	e853 3f00 	ldrex	r3, [r3]
 8009966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800996e:	653b      	str	r3, [r7, #80]	; 0x50
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009978:	647b      	str	r3, [r7, #68]	; 0x44
 800997a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800997e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009980:	e841 2300 	strex	r3, r2, [r1]
 8009984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1e6      	bne.n	800995a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	623b      	str	r3, [r7, #32]
   return(result);
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3308      	adds	r3, #8
 80099aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099ac:	633a      	str	r2, [r7, #48]	; 0x30
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e5      	bne.n	800998c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d12e      	bne.n	8009a32 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f023 0310 	bic.w	r3, r3, #16
 80099ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f8:	61fb      	str	r3, [r7, #28]
 80099fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	69b9      	ldr	r1, [r7, #24]
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	617b      	str	r3, [r7, #20]
   return(result);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e6      	bne.n	80099da <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b10      	cmp	r3, #16
 8009a18:	d103      	bne.n	8009a22 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2210      	movs	r2, #16
 8009a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff f8c6 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a30:	e00d      	b.n	8009a4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7f9 fb70 	bl	8003118 <HAL_UART_RxCpltCallback>
}
 8009a38:	e009      	b.n	8009a4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	8b1b      	ldrh	r3, [r3, #24]
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0208 	orr.w	r2, r2, #8
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	831a      	strh	r2, [r3, #24]
}
 8009a4e:	bf00      	nop
 8009a50:	3758      	adds	r7, #88	; 0x58
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b096      	sub	sp, #88	; 0x58
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a6c:	2b22      	cmp	r3, #34	; 0x22
 8009a6e:	f040 8094 	bne.w	8009b9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009a86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	1c9a      	adds	r2, r3, #2
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d179      	bne.n	8009bae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8009ada:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e6      	bne.n	8009aba <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	f023 0301 	bic.w	r3, r3, #1
 8009b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e5      	bne.n	8009aec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d12e      	bne.n	8009b92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f023 0310 	bic.w	r3, r3, #16
 8009b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6979      	ldr	r1, [r7, #20]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	613b      	str	r3, [r7, #16]
   return(result);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e6      	bne.n	8009b3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d103      	bne.n	8009b82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2210      	movs	r2, #16
 8009b80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff f816 	bl	8008bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b90:	e00d      	b.n	8009bae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f9 fac0 	bl	8003118 <HAL_UART_RxCpltCallback>
}
 8009b98:	e009      	b.n	8009bae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	8b1b      	ldrh	r3, [r3, #24]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0208 	orr.w	r2, r2, #8
 8009baa:	b292      	uxth	r2, r2
 8009bac:	831a      	strh	r2, [r3, #24]
}
 8009bae:	bf00      	nop
 8009bb0:	3758      	adds	r7, #88	; 0x58
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bdc:	2b84      	cmp	r3, #132	; 0x84
 8009bde:	d005      	beq.n	8009bec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009be0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4413      	add	r3, r2
 8009be8:	3303      	adds	r3, #3
 8009bea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009bec:	68fb      	ldr	r3, [r7, #12]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009bfe:	f000 fec3 	bl	800a988 <vTaskStartScheduler>
  
  return osOK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0a:	b089      	sub	sp, #36	; 0x24
 8009c0c:	af04      	add	r7, sp, #16
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d020      	beq.n	8009c5c <osThreadCreate+0x54>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01c      	beq.n	8009c5c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685c      	ldr	r4, [r3, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681d      	ldr	r5, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	691e      	ldr	r6, [r3, #16]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff ffc8 	bl	8009bca <makeFreeRtosPriority>
 8009c3a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c44:	9202      	str	r2, [sp, #8]
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	9100      	str	r1, [sp, #0]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 fcbb 	bl	800a5cc <xTaskCreateStatic>
 8009c56:	4603      	mov	r3, r0
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	e01c      	b.n	8009c96 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685c      	ldr	r4, [r3, #4]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c68:	b29e      	uxth	r6, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ffaa 	bl	8009bca <makeFreeRtosPriority>
 8009c76:	4602      	mov	r2, r0
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	9200      	str	r2, [sp, #0]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	4632      	mov	r2, r6
 8009c84:	4629      	mov	r1, r5
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fcfd 	bl	800a686 <xTaskCreate>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d001      	beq.n	8009c96 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	e000      	b.n	8009c98 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ca0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <osDelay+0x16>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	e000      	b.n	8009cb8 <osDelay+0x18>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fe31 	bl	800a920 <vTaskDelay>
  
  return osOK;
 8009cbe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f103 0208 	add.w	r2, r3, #8
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f103 0208 	add.w	r2, r3, #8
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f103 0208 	add.w	r2, r3, #8
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d16:	bf00      	nop
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	601a      	str	r2, [r3, #0]
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d80:	d103      	bne.n	8009d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	e00c      	b.n	8009da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	e002      	b.n	8009d98 <vListInsert+0x2e>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d2f6      	bcs.n	8009d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	601a      	str	r2, [r3, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6892      	ldr	r2, [r2, #8]
 8009df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6852      	ldr	r2, [r2, #4]
 8009dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d103      	bne.n	8009e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	1e5a      	subs	r2, r3, #1
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3714      	adds	r7, #20
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e5a:	f001 fbdb 	bl	800b614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e66:	68f9      	ldr	r1, [r7, #12]
 8009e68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e6a:	fb01 f303 	mul.w	r3, r1, r3
 8009e6e:	441a      	add	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	68f9      	ldr	r1, [r7, #12]
 8009e8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	441a      	add	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	22ff      	movs	r2, #255	; 0xff
 8009e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	22ff      	movs	r2, #255	; 0xff
 8009ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d114      	bne.n	8009eda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01a      	beq.n	8009eee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3310      	adds	r3, #16
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 ffb5 	bl	800ae2c <xTaskRemoveFromEventList>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d012      	beq.n	8009eee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <xQueueGenericReset+0xcc>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	e009      	b.n	8009eee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3310      	adds	r3, #16
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff fef2 	bl	8009cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3324      	adds	r3, #36	; 0x24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff feed 	bl	8009cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009eee:	f001 fbc1 	bl	800b674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ef2:	2301      	movs	r3, #1
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	e000ed04 	.word	0xe000ed04

08009f00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af02      	add	r7, sp, #8
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	613b      	str	r3, [r7, #16]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	fb02 f303 	mul.w	r3, r2, r3
 8009f32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	3348      	adds	r3, #72	; 0x48
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fc4d 	bl	800b7d8 <pvPortMalloc>
 8009f3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d011      	beq.n	8009f6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	3348      	adds	r3, #72	; 0x48
 8009f4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f58:	79fa      	ldrb	r2, [r7, #7]
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	68b9      	ldr	r1, [r7, #8]
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 f805 	bl	8009f74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3720      	adds	r7, #32
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d103      	bne.n	8009f90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	e002      	b.n	8009f96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	69b8      	ldr	r0, [r7, #24]
 8009fa6:	f7ff ff43 	bl	8009e30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08e      	sub	sp, #56	; 0x38
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xQueueGenericSend+0x32>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <xQueueGenericSend+0x40>
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <xQueueGenericSend+0x44>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <xQueueGenericSend+0x46>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10a      	bne.n	800a014 <xQueueGenericSend+0x60>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d103      	bne.n	800a022 <xQueueGenericSend+0x6e>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d101      	bne.n	800a026 <xQueueGenericSend+0x72>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <xQueueGenericSend+0x74>
 800a026:	2300      	movs	r3, #0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xQueueGenericSend+0x8e>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	623b      	str	r3, [r7, #32]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a042:	f001 f8b3 	bl	800b1ac <xTaskGetSchedulerState>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <xQueueGenericSend+0x9e>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <xQueueGenericSend+0xa2>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericSend+0xa4>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueGenericSend+0xbe>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61fb      	str	r3, [r7, #28]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a072:	f001 facf 	bl	800b614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d302      	bcc.n	800a088 <xQueueGenericSend+0xd4>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d129      	bne.n	800a0dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08e:	f000 f98d 	bl	800a3ac <prvCopyDataToQueue>
 800a092:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d010      	beq.n	800a0be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	3324      	adds	r3, #36	; 0x24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fec3 	bl	800ae2c <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d013      	beq.n	800a0d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0ac:	4b3f      	ldr	r3, [pc, #252]	; (800a1ac <xQueueGenericSend+0x1f8>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	e00a      	b.n	800a0d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0c4:	4b39      	ldr	r3, [pc, #228]	; (800a1ac <xQueueGenericSend+0x1f8>)
 800a0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0d4:	f001 face 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e063      	b.n	800a1a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d103      	bne.n	800a0ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e2:	f001 fac7 	bl	800b674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e05c      	b.n	800a1a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 fefb 	bl	800aef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fe:	f001 fab9 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a102:	f000 fcab 	bl	800aa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a106:	f001 fa85 	bl	800b614 <vPortEnterCritical>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d103      	bne.n	800a120 <xQueueGenericSend+0x16c>
 800a118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a126:	b25b      	sxtb	r3, r3
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d103      	bne.n	800a136 <xQueueGenericSend+0x182>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a136:	f001 fa9d 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a13a:	1d3a      	adds	r2, r7, #4
 800a13c:	f107 0314 	add.w	r3, r7, #20
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f000 feea 	bl	800af1c <xTaskCheckForTimeOut>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d124      	bne.n	800a198 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a150:	f000 fa24 	bl	800a59c <prvIsQueueFull>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d018      	beq.n	800a18c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	3310      	adds	r3, #16
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	4611      	mov	r1, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fe3e 	bl	800ade4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a16a:	f000 f9af 	bl	800a4cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a16e:	f000 fc83 	bl	800aa78 <xTaskResumeAll>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f af7c 	bne.w	800a072 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a17a:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <xQueueGenericSend+0x1f8>)
 800a17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	e772      	b.n	800a072 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18e:	f000 f99d 	bl	800a4cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a192:	f000 fc71 	bl	800aa78 <xTaskResumeAll>
 800a196:	e76c      	b.n	800a072 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19a:	f000 f997 	bl	800a4cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19e:	f000 fc6b 	bl	800aa78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3738      	adds	r7, #56	; 0x38
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08c      	sub	sp, #48	; 0x30
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <xQueueReceive+0x30>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	623b      	str	r3, [r7, #32]
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <xQueueReceive+0x3e>
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <xQueueReceive+0x42>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueReceive+0x44>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10a      	bne.n	800a20e <xQueueReceive+0x5e>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	61fb      	str	r3, [r7, #28]
}
 800a20a:	bf00      	nop
 800a20c:	e7fe      	b.n	800a20c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a20e:	f000 ffcd 	bl	800b1ac <xTaskGetSchedulerState>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <xQueueReceive+0x6e>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <xQueueReceive+0x72>
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <xQueueReceive+0x74>
 800a222:	2300      	movs	r3, #0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <xQueueReceive+0x8e>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	61bb      	str	r3, [r7, #24]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a23e:	f001 f9e9 	bl	800b614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01f      	beq.n	800a28e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a252:	f000 f915 	bl	800a480 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	1e5a      	subs	r2, r3, #1
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00f      	beq.n	800a286 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	3310      	adds	r3, #16
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fdde 	bl	800ae2c <xTaskRemoveFromEventList>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d007      	beq.n	800a286 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a276:	4b3d      	ldr	r3, [pc, #244]	; (800a36c <xQueueReceive+0x1bc>)
 800a278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a286:	f001 f9f5 	bl	800b674 <vPortExitCritical>
				return pdPASS;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e069      	b.n	800a362 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d103      	bne.n	800a29c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a294:	f001 f9ee 	bl	800b674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a298:	2300      	movs	r3, #0
 800a29a:	e062      	b.n	800a362 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2a2:	f107 0310 	add.w	r3, r7, #16
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fe22 	bl	800aef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2b0:	f001 f9e0 	bl	800b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2b4:	f000 fbd2 	bl	800aa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2b8:	f001 f9ac 	bl	800b614 <vPortEnterCritical>
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2c2:	b25b      	sxtb	r3, r3
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c8:	d103      	bne.n	800a2d2 <xQueueReceive+0x122>
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2d8:	b25b      	sxtb	r3, r3
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2de:	d103      	bne.n	800a2e8 <xQueueReceive+0x138>
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2e8:	f001 f9c4 	bl	800b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ec:	1d3a      	adds	r2, r7, #4
 800a2ee:	f107 0310 	add.w	r3, r7, #16
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fe11 	bl	800af1c <xTaskCheckForTimeOut>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d123      	bne.n	800a348 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a302:	f000 f935 	bl	800a570 <prvIsQueueEmpty>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d017      	beq.n	800a33c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	3324      	adds	r3, #36	; 0x24
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fd65 	bl	800ade4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a31c:	f000 f8d6 	bl	800a4cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a320:	f000 fbaa 	bl	800aa78 <xTaskResumeAll>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d189      	bne.n	800a23e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a32a:	4b10      	ldr	r3, [pc, #64]	; (800a36c <xQueueReceive+0x1bc>)
 800a32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	e780      	b.n	800a23e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33e:	f000 f8c5 	bl	800a4cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a342:	f000 fb99 	bl	800aa78 <xTaskResumeAll>
 800a346:	e77a      	b.n	800a23e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a34a:	f000 f8bf 	bl	800a4cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a34e:	f000 fb93 	bl	800aa78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a354:	f000 f90c 	bl	800a570 <prvIsQueueEmpty>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f43f af6f 	beq.w	800a23e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a362:	4618      	mov	r0, r3
 800a364:	3730      	adds	r7, #48	; 0x30
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10a      	bne.n	800a394 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	60bb      	str	r3, [r7, #8]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a394:	f001 f93e 	bl	800b614 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a39e:	f001 f969 	bl	800b674 <vPortExitCritical>

	return uxReturn;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10d      	bne.n	800a3e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d14d      	bne.n	800a46e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 ff06 	bl	800b1e8 <xTaskPriorityDisinherit>
 800a3dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	609a      	str	r2, [r3, #8]
 800a3e4:	e043      	b.n	800a46e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d119      	bne.n	800a420 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6858      	ldr	r0, [r3, #4]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	f001 fd33 	bl	800be62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a404:	441a      	add	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	429a      	cmp	r2, r3
 800a414:	d32b      	bcc.n	800a46e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	605a      	str	r2, [r3, #4]
 800a41e:	e026      	b.n	800a46e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	68d8      	ldr	r0, [r3, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a428:	461a      	mov	r2, r3
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	f001 fd19 	bl	800be62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a438:	425b      	negs	r3, r3
 800a43a:	441a      	add	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d207      	bcs.n	800a45c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a454:	425b      	negs	r3, r3
 800a456:	441a      	add	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d105      	bne.n	800a46e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a476:	697b      	ldr	r3, [r7, #20]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d018      	beq.n	800a4c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49a:	441a      	add	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d303      	bcc.n	800a4b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68d9      	ldr	r1, [r3, #12]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6838      	ldr	r0, [r7, #0]
 800a4c0:	f001 fccf 	bl	800be62 <memcpy>
	}
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4d4:	f001 f89e 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4e0:	e011      	b.n	800a506 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d012      	beq.n	800a510 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3324      	adds	r3, #36	; 0x24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fc9c 	bl	800ae2c <xTaskRemoveFromEventList>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4fa:	f000 fd71 	bl	800afe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
 800a500:	3b01      	subs	r3, #1
 800a502:	b2db      	uxtb	r3, r3
 800a504:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dce9      	bgt.n	800a4e2 <prvUnlockQueue+0x16>
 800a50e:	e000      	b.n	800a512 <prvUnlockQueue+0x46>
					break;
 800a510:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	22ff      	movs	r2, #255	; 0xff
 800a516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a51a:	f001 f8ab 	bl	800b674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a51e:	f001 f879 	bl	800b614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a528:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a52a:	e011      	b.n	800a550 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d012      	beq.n	800a55a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3310      	adds	r3, #16
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 fc77 	bl	800ae2c <xTaskRemoveFromEventList>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a544:	f000 fd4c 	bl	800afe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a554:	2b00      	cmp	r3, #0
 800a556:	dce9      	bgt.n	800a52c <prvUnlockQueue+0x60>
 800a558:	e000      	b.n	800a55c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a55a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	22ff      	movs	r2, #255	; 0xff
 800a560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a564:	f001 f886 	bl	800b674 <vPortExitCritical>
}
 800a568:	bf00      	nop
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a578:	f001 f84c 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d102      	bne.n	800a58a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a584:	2301      	movs	r3, #1
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	e001      	b.n	800a58e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a58e:	f001 f871 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800a592:	68fb      	ldr	r3, [r7, #12]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5a4:	f001 f836 	bl	800b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d102      	bne.n	800a5ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	e001      	b.n	800a5be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5be:	f001 f859 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08e      	sub	sp, #56	; 0x38
 800a5d0:	af04      	add	r7, sp, #16
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10a      	bne.n	800a5f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	623b      	str	r3, [r7, #32]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xTaskCreateStatic+0x46>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	61fb      	str	r3, [r7, #28]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a612:	23b4      	movs	r3, #180	; 0xb4
 800a614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2bb4      	cmp	r3, #180	; 0xb4
 800a61a:	d00a      	beq.n	800a632 <xTaskCreateStatic+0x66>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	61bb      	str	r3, [r7, #24]
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01e      	beq.n	800a678 <xTaskCreateStatic+0xac>
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01b      	beq.n	800a678 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	2202      	movs	r2, #2
 800a64e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a652:	2300      	movs	r3, #0
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	9302      	str	r3, [sp, #8]
 800a65a:	f107 0314 	add.w	r3, r7, #20
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	68b9      	ldr	r1, [r7, #8]
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 f850 	bl	800a710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a672:	f000 f8eb 	bl	800a84c <prvAddNewTaskToReadyList>
 800a676:	e001      	b.n	800a67c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a67c:	697b      	ldr	r3, [r7, #20]
	}
 800a67e:	4618      	mov	r0, r3
 800a680:	3728      	adds	r7, #40	; 0x28
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a686:	b580      	push	{r7, lr}
 800a688:	b08c      	sub	sp, #48	; 0x30
 800a68a:	af04      	add	r7, sp, #16
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	603b      	str	r3, [r7, #0]
 800a692:	4613      	mov	r3, r2
 800a694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f001 f89c 	bl	800b7d8 <pvPortMalloc>
 800a6a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00e      	beq.n	800a6c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a6a8:	20b4      	movs	r0, #180	; 0xb4
 800a6aa:	f001 f895 	bl	800b7d8 <pvPortMalloc>
 800a6ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30
 800a6bc:	e005      	b.n	800a6ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6be:	6978      	ldr	r0, [r7, #20]
 800a6c0:	f001 f956 	bl	800b970 <vPortFree>
 800a6c4:	e001      	b.n	800a6ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d017      	beq.n	800a700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6d8:	88fa      	ldrh	r2, [r7, #6]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	9302      	str	r3, [sp, #8]
 800a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68b9      	ldr	r1, [r7, #8]
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f80e 	bl	800a710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6f4:	69f8      	ldr	r0, [r7, #28]
 800a6f6:	f000 f8a9 	bl	800a84c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	e002      	b.n	800a706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a700:	f04f 33ff 	mov.w	r3, #4294967295
 800a704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a706:	69bb      	ldr	r3, [r7, #24]
	}
 800a708:	4618      	mov	r0, r3
 800a70a:	3720      	adds	r7, #32
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a728:	3b01      	subs	r3, #1
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00a      	beq.n	800a758 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	617b      	str	r3, [r7, #20]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d01f      	beq.n	800a79e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a75e:	2300      	movs	r3, #0
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	e012      	b.n	800a78a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	4413      	add	r3, r2
 800a76a:	7819      	ldrb	r1, [r3, #0]
 800a76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	4413      	add	r3, r2
 800a772:	3334      	adds	r3, #52	; 0x34
 800a774:	460a      	mov	r2, r1
 800a776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d006      	beq.n	800a792 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	3301      	adds	r3, #1
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	2b0f      	cmp	r3, #15
 800a78e:	d9e9      	bls.n	800a764 <prvInitialiseNewTask+0x54>
 800a790:	e000      	b.n	800a794 <prvInitialiseNewTask+0x84>
			{
				break;
 800a792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a79c:	e003      	b.n	800a7a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	2b06      	cmp	r3, #6
 800a7aa:	d901      	bls.n	800a7b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7ac:	2306      	movs	r3, #6
 800a7ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	2200      	movs	r2, #0
 800a7c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff fa9e 	bl	8009d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	3318      	adds	r3, #24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff fa99 	bl	8009d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7de:	f1c3 0207 	rsb	r2, r3, #7
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	334c      	adds	r3, #76	; 0x4c
 800a800:	2260      	movs	r2, #96	; 0x60
 800a802:	2100      	movs	r1, #0
 800a804:	4618      	mov	r0, r3
 800a806:	f001 fb3a 	bl	800be7e <memset>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	4a0c      	ldr	r2, [pc, #48]	; (800a840 <prvInitialiseNewTask+0x130>)
 800a80e:	651a      	str	r2, [r3, #80]	; 0x50
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	4a0c      	ldr	r2, [pc, #48]	; (800a844 <prvInitialiseNewTask+0x134>)
 800a814:	655a      	str	r2, [r3, #84]	; 0x54
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	4a0b      	ldr	r2, [pc, #44]	; (800a848 <prvInitialiseNewTask+0x138>)
 800a81a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	68f9      	ldr	r1, [r7, #12]
 800a820:	69b8      	ldr	r0, [r7, #24]
 800a822:	f000 fdcd 	bl	800b3c0 <pxPortInitialiseStack>
 800a826:	4602      	mov	r2, r0
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a838:	bf00      	nop
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	08012484 	.word	0x08012484
 800a844:	080124a4 	.word	0x080124a4
 800a848:	08012464 	.word	0x08012464

0800a84c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a854:	f000 fede 	bl	800b614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a858:	4b2a      	ldr	r3, [pc, #168]	; (800a904 <prvAddNewTaskToReadyList+0xb8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3301      	adds	r3, #1
 800a85e:	4a29      	ldr	r2, [pc, #164]	; (800a904 <prvAddNewTaskToReadyList+0xb8>)
 800a860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a862:	4b29      	ldr	r3, [pc, #164]	; (800a908 <prvAddNewTaskToReadyList+0xbc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d109      	bne.n	800a87e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a86a:	4a27      	ldr	r2, [pc, #156]	; (800a908 <prvAddNewTaskToReadyList+0xbc>)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a870:	4b24      	ldr	r3, [pc, #144]	; (800a904 <prvAddNewTaskToReadyList+0xb8>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d110      	bne.n	800a89a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a878:	f000 fbd6 	bl	800b028 <prvInitialiseTaskLists>
 800a87c:	e00d      	b.n	800a89a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a87e:	4b23      	ldr	r3, [pc, #140]	; (800a90c <prvAddNewTaskToReadyList+0xc0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a886:	4b20      	ldr	r3, [pc, #128]	; (800a908 <prvAddNewTaskToReadyList+0xbc>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a890:	429a      	cmp	r2, r3
 800a892:	d802      	bhi.n	800a89a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a894:	4a1c      	ldr	r2, [pc, #112]	; (800a908 <prvAddNewTaskToReadyList+0xbc>)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a89a:	4b1d      	ldr	r3, [pc, #116]	; (800a910 <prvAddNewTaskToReadyList+0xc4>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	4a1b      	ldr	r2, [pc, #108]	; (800a910 <prvAddNewTaskToReadyList+0xc4>)
 800a8a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	409a      	lsls	r2, r3
 800a8ac:	4b19      	ldr	r3, [pc, #100]	; (800a914 <prvAddNewTaskToReadyList+0xc8>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	4a18      	ldr	r2, [pc, #96]	; (800a914 <prvAddNewTaskToReadyList+0xc8>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4a15      	ldr	r2, [pc, #84]	; (800a918 <prvAddNewTaskToReadyList+0xcc>)
 800a8c4:	441a      	add	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	f7ff fa28 	bl	8009d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8d2:	f000 fecf 	bl	800b674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8d6:	4b0d      	ldr	r3, [pc, #52]	; (800a90c <prvAddNewTaskToReadyList+0xc0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00e      	beq.n	800a8fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8de:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <prvAddNewTaskToReadyList+0xbc>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d207      	bcs.n	800a8fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <prvAddNewTaskToReadyList+0xd0>)
 800a8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	2000bd70 	.word	0x2000bd70
 800a908:	2000bc70 	.word	0x2000bc70
 800a90c:	2000bd7c 	.word	0x2000bd7c
 800a910:	2000bd8c 	.word	0x2000bd8c
 800a914:	2000bd78 	.word	0x2000bd78
 800a918:	2000bc74 	.word	0x2000bc74
 800a91c:	e000ed04 	.word	0xe000ed04

0800a920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a928:	2300      	movs	r3, #0
 800a92a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d017      	beq.n	800a962 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a932:	4b13      	ldr	r3, [pc, #76]	; (800a980 <vTaskDelay+0x60>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <vTaskDelay+0x30>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	60bb      	str	r3, [r7, #8]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a950:	f000 f884 	bl	800aa5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a954:	2100      	movs	r1, #0
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fccc 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a95c:	f000 f88c 	bl	800aa78 <xTaskResumeAll>
 800a960:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d107      	bne.n	800a978 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <vTaskDelay+0x64>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a978:	bf00      	nop
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	2000bd98 	.word	0x2000bd98
 800a984:	e000ed04 	.word	0xe000ed04

0800a988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a98e:	2300      	movs	r3, #0
 800a990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a996:	463a      	mov	r2, r7
 800a998:	1d39      	adds	r1, r7, #4
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7f7 f828 	bl	80019f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	9202      	str	r2, [sp, #8]
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	460a      	mov	r2, r1
 800a9b6:	4921      	ldr	r1, [pc, #132]	; (800aa3c <vTaskStartScheduler+0xb4>)
 800a9b8:	4821      	ldr	r0, [pc, #132]	; (800aa40 <vTaskStartScheduler+0xb8>)
 800a9ba:	f7ff fe07 	bl	800a5cc <xTaskCreateStatic>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4a20      	ldr	r2, [pc, #128]	; (800aa44 <vTaskStartScheduler+0xbc>)
 800a9c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9c4:	4b1f      	ldr	r3, [pc, #124]	; (800aa44 <vTaskStartScheduler+0xbc>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	e001      	b.n	800a9d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d11b      	bne.n	800aa14 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	613b      	str	r3, [r7, #16]
}
 800a9ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9f0:	4b15      	ldr	r3, [pc, #84]	; (800aa48 <vTaskStartScheduler+0xc0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	334c      	adds	r3, #76	; 0x4c
 800a9f6:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <vTaskStartScheduler+0xc4>)
 800a9f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9fa:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <vTaskStartScheduler+0xc8>)
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa02:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <vTaskStartScheduler+0xcc>)
 800aa04:	2201      	movs	r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa08:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <vTaskStartScheduler+0xd0>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa0e:	f000 fd5f 	bl	800b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa12:	e00e      	b.n	800aa32 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d10a      	bne.n	800aa32 <vTaskStartScheduler+0xaa>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60fb      	str	r3, [r7, #12]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <vTaskStartScheduler+0xa8>
}
 800aa32:	bf00      	nop
 800aa34:	3718      	adds	r7, #24
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0801226c 	.word	0x0801226c
 800aa40:	0800aff9 	.word	0x0800aff9
 800aa44:	2000bd94 	.word	0x2000bd94
 800aa48:	2000bc70 	.word	0x2000bc70
 800aa4c:	2000023c 	.word	0x2000023c
 800aa50:	2000bd90 	.word	0x2000bd90
 800aa54:	2000bd7c 	.word	0x2000bd7c
 800aa58:	2000bd74 	.word	0x2000bd74

0800aa5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa60:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <vTaskSuspendAll+0x18>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	4a03      	ldr	r2, [pc, #12]	; (800aa74 <vTaskSuspendAll+0x18>)
 800aa68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa6a:	bf00      	nop
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	2000bd98 	.word	0x2000bd98

0800aa78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa86:	4b41      	ldr	r3, [pc, #260]	; (800ab8c <xTaskResumeAll+0x114>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	603b      	str	r3, [r7, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaa4:	f000 fdb6 	bl	800b614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaa8:	4b38      	ldr	r3, [pc, #224]	; (800ab8c <xTaskResumeAll+0x114>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	4a37      	ldr	r2, [pc, #220]	; (800ab8c <xTaskResumeAll+0x114>)
 800aab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab2:	4b36      	ldr	r3, [pc, #216]	; (800ab8c <xTaskResumeAll+0x114>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d161      	bne.n	800ab7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaba:	4b35      	ldr	r3, [pc, #212]	; (800ab90 <xTaskResumeAll+0x118>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d05d      	beq.n	800ab7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aac2:	e02e      	b.n	800ab22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac4:	4b33      	ldr	r3, [pc, #204]	; (800ab94 <xTaskResumeAll+0x11c>)
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3318      	adds	r3, #24
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff f983 	bl	8009ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3304      	adds	r3, #4
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff f97e 	bl	8009ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	2201      	movs	r2, #1
 800aae6:	409a      	lsls	r2, r3
 800aae8:	4b2b      	ldr	r3, [pc, #172]	; (800ab98 <xTaskResumeAll+0x120>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <xTaskResumeAll+0x120>)
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4a27      	ldr	r2, [pc, #156]	; (800ab9c <xTaskResumeAll+0x124>)
 800ab00:	441a      	add	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f7ff f90a 	bl	8009d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab12:	4b23      	ldr	r3, [pc, #140]	; (800aba0 <xTaskResumeAll+0x128>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ab1c:	4b21      	ldr	r3, [pc, #132]	; (800aba4 <xTaskResumeAll+0x12c>)
 800ab1e:	2201      	movs	r2, #1
 800ab20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab22:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <xTaskResumeAll+0x11c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1cc      	bne.n	800aac4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab30:	f000 fb1c 	bl	800b16c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab34:	4b1c      	ldr	r3, [pc, #112]	; (800aba8 <xTaskResumeAll+0x130>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab40:	f000 f836 	bl	800abb0 <xTaskIncrementTick>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ab4a:	4b16      	ldr	r3, [pc, #88]	; (800aba4 <xTaskResumeAll+0x12c>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3b01      	subs	r3, #1
 800ab54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1f1      	bne.n	800ab40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ab5c:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <xTaskResumeAll+0x130>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab62:	4b10      	ldr	r3, [pc, #64]	; (800aba4 <xTaskResumeAll+0x12c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab6e:	4b0f      	ldr	r3, [pc, #60]	; (800abac <xTaskResumeAll+0x134>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab7e:	f000 fd79 	bl	800b674 <vPortExitCritical>

	return xAlreadyYielded;
 800ab82:	68bb      	ldr	r3, [r7, #8]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	2000bd98 	.word	0x2000bd98
 800ab90:	2000bd70 	.word	0x2000bd70
 800ab94:	2000bd30 	.word	0x2000bd30
 800ab98:	2000bd78 	.word	0x2000bd78
 800ab9c:	2000bc74 	.word	0x2000bc74
 800aba0:	2000bc70 	.word	0x2000bc70
 800aba4:	2000bd84 	.word	0x2000bd84
 800aba8:	2000bd80 	.word	0x2000bd80
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abba:	4b4e      	ldr	r3, [pc, #312]	; (800acf4 <xTaskIncrementTick+0x144>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f040 808e 	bne.w	800ace0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abc4:	4b4c      	ldr	r3, [pc, #304]	; (800acf8 <xTaskIncrementTick+0x148>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3301      	adds	r3, #1
 800abca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abcc:	4a4a      	ldr	r2, [pc, #296]	; (800acf8 <xTaskIncrementTick+0x148>)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d120      	bne.n	800ac1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800abd8:	4b48      	ldr	r3, [pc, #288]	; (800acfc <xTaskIncrementTick+0x14c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00a      	beq.n	800abf8 <xTaskIncrementTick+0x48>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	603b      	str	r3, [r7, #0]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <xTaskIncrementTick+0x46>
 800abf8:	4b40      	ldr	r3, [pc, #256]	; (800acfc <xTaskIncrementTick+0x14c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60fb      	str	r3, [r7, #12]
 800abfe:	4b40      	ldr	r3, [pc, #256]	; (800ad00 <xTaskIncrementTick+0x150>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a3e      	ldr	r2, [pc, #248]	; (800acfc <xTaskIncrementTick+0x14c>)
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	4a3e      	ldr	r2, [pc, #248]	; (800ad00 <xTaskIncrementTick+0x150>)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	4b3d      	ldr	r3, [pc, #244]	; (800ad04 <xTaskIncrementTick+0x154>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3301      	adds	r3, #1
 800ac12:	4a3c      	ldr	r2, [pc, #240]	; (800ad04 <xTaskIncrementTick+0x154>)
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	f000 faa9 	bl	800b16c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac1a:	4b3b      	ldr	r3, [pc, #236]	; (800ad08 <xTaskIncrementTick+0x158>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d348      	bcc.n	800acb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac24:	4b35      	ldr	r3, [pc, #212]	; (800acfc <xTaskIncrementTick+0x14c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d104      	bne.n	800ac38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac2e:	4b36      	ldr	r3, [pc, #216]	; (800ad08 <xTaskIncrementTick+0x158>)
 800ac30:	f04f 32ff 	mov.w	r2, #4294967295
 800ac34:	601a      	str	r2, [r3, #0]
					break;
 800ac36:	e03e      	b.n	800acb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac38:	4b30      	ldr	r3, [pc, #192]	; (800acfc <xTaskIncrementTick+0x14c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d203      	bcs.n	800ac58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac50:	4a2d      	ldr	r2, [pc, #180]	; (800ad08 <xTaskIncrementTick+0x158>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac56:	e02e      	b.n	800acb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff f8bd 	bl	8009ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d004      	beq.n	800ac74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	3318      	adds	r3, #24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff f8b4 	bl	8009ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	2201      	movs	r2, #1
 800ac7a:	409a      	lsls	r2, r3
 800ac7c:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <xTaskIncrementTick+0x15c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	4a22      	ldr	r2, [pc, #136]	; (800ad0c <xTaskIncrementTick+0x15c>)
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4a1f      	ldr	r2, [pc, #124]	; (800ad10 <xTaskIncrementTick+0x160>)
 800ac94:	441a      	add	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	f7ff f840 	bl	8009d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca6:	4b1b      	ldr	r3, [pc, #108]	; (800ad14 <xTaskIncrementTick+0x164>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	429a      	cmp	r2, r3
 800acae:	d3b9      	bcc.n	800ac24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acb4:	e7b6      	b.n	800ac24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acb6:	4b17      	ldr	r3, [pc, #92]	; (800ad14 <xTaskIncrementTick+0x164>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbc:	4914      	ldr	r1, [pc, #80]	; (800ad10 <xTaskIncrementTick+0x160>)
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	440b      	add	r3, r1
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d901      	bls.n	800acd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800acce:	2301      	movs	r3, #1
 800acd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800acd2:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <xTaskIncrementTick+0x168>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d007      	beq.n	800acea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800acda:	2301      	movs	r3, #1
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	e004      	b.n	800acea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ace0:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <xTaskIncrementTick+0x16c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3301      	adds	r3, #1
 800ace6:	4a0d      	ldr	r2, [pc, #52]	; (800ad1c <xTaskIncrementTick+0x16c>)
 800ace8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800acea:	697b      	ldr	r3, [r7, #20]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	2000bd98 	.word	0x2000bd98
 800acf8:	2000bd74 	.word	0x2000bd74
 800acfc:	2000bd28 	.word	0x2000bd28
 800ad00:	2000bd2c 	.word	0x2000bd2c
 800ad04:	2000bd88 	.word	0x2000bd88
 800ad08:	2000bd90 	.word	0x2000bd90
 800ad0c:	2000bd78 	.word	0x2000bd78
 800ad10:	2000bc74 	.word	0x2000bc74
 800ad14:	2000bc70 	.word	0x2000bc70
 800ad18:	2000bd84 	.word	0x2000bd84
 800ad1c:	2000bd80 	.word	0x2000bd80

0800ad20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad26:	4b29      	ldr	r3, [pc, #164]	; (800adcc <vTaskSwitchContext+0xac>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad2e:	4b28      	ldr	r3, [pc, #160]	; (800add0 <vTaskSwitchContext+0xb0>)
 800ad30:	2201      	movs	r2, #1
 800ad32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad34:	e044      	b.n	800adc0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ad36:	4b26      	ldr	r3, [pc, #152]	; (800add0 <vTaskSwitchContext+0xb0>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3c:	4b25      	ldr	r3, [pc, #148]	; (800add4 <vTaskSwitchContext+0xb4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	fab3 f383 	clz	r3, r3
 800ad48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ad4a:	7afb      	ldrb	r3, [r7, #11]
 800ad4c:	f1c3 031f 	rsb	r3, r3, #31
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	4921      	ldr	r1, [pc, #132]	; (800add8 <vTaskSwitchContext+0xb8>)
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10a      	bne.n	800ad7c <vTaskSwitchContext+0x5c>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	607b      	str	r3, [r7, #4]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <vTaskSwitchContext+0x5a>
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4a14      	ldr	r2, [pc, #80]	; (800add8 <vTaskSwitchContext+0xb8>)
 800ad88:	4413      	add	r3, r2
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	605a      	str	r2, [r3, #4]
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d104      	bne.n	800adac <vTaskSwitchContext+0x8c>
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	605a      	str	r2, [r3, #4]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	4a0a      	ldr	r2, [pc, #40]	; (800addc <vTaskSwitchContext+0xbc>)
 800adb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adb6:	4b09      	ldr	r3, [pc, #36]	; (800addc <vTaskSwitchContext+0xbc>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	334c      	adds	r3, #76	; 0x4c
 800adbc:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <vTaskSwitchContext+0xc0>)
 800adbe:	6013      	str	r3, [r2, #0]
}
 800adc0:	bf00      	nop
 800adc2:	371c      	adds	r7, #28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	2000bd98 	.word	0x2000bd98
 800add0:	2000bd84 	.word	0x2000bd84
 800add4:	2000bd78 	.word	0x2000bd78
 800add8:	2000bc74 	.word	0x2000bc74
 800addc:	2000bc70 	.word	0x2000bc70
 800ade0:	2000023c 	.word	0x2000023c

0800ade4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	60fb      	str	r3, [r7, #12]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <vTaskPlaceOnEventList+0x44>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3318      	adds	r3, #24
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7fe ffa9 	bl	8009d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae18:	2101      	movs	r1, #1
 800ae1a:	6838      	ldr	r0, [r7, #0]
 800ae1c:	f000 fa6a 	bl	800b2f4 <prvAddCurrentTaskToDelayedList>
}
 800ae20:	bf00      	nop
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	2000bc70 	.word	0x2000bc70

0800ae2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	60fb      	str	r3, [r7, #12]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	3318      	adds	r3, #24
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe ffbd 	bl	8009ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <xTaskRemoveFromEventList+0xac>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d11c      	bne.n	800aea4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe ffb4 	bl	8009ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	2201      	movs	r2, #1
 800ae7a:	409a      	lsls	r2, r3
 800ae7c:	4b17      	ldr	r3, [pc, #92]	; (800aedc <xTaskRemoveFromEventList+0xb0>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	4a16      	ldr	r2, [pc, #88]	; (800aedc <xTaskRemoveFromEventList+0xb0>)
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4a13      	ldr	r2, [pc, #76]	; (800aee0 <xTaskRemoveFromEventList+0xb4>)
 800ae94:	441a      	add	r2, r3
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	f7fe ff40 	bl	8009d22 <vListInsertEnd>
 800aea2:	e005      	b.n	800aeb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	3318      	adds	r3, #24
 800aea8:	4619      	mov	r1, r3
 800aeaa:	480e      	ldr	r0, [pc, #56]	; (800aee4 <xTaskRemoveFromEventList+0xb8>)
 800aeac:	f7fe ff39 	bl	8009d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <xTaskRemoveFromEventList+0xbc>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d905      	bls.n	800aeca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aec2:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <xTaskRemoveFromEventList+0xc0>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	e001      	b.n	800aece <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aece:	697b      	ldr	r3, [r7, #20]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	2000bd98 	.word	0x2000bd98
 800aedc:	2000bd78 	.word	0x2000bd78
 800aee0:	2000bc74 	.word	0x2000bc74
 800aee4:	2000bd30 	.word	0x2000bd30
 800aee8:	2000bc70 	.word	0x2000bc70
 800aeec:	2000bd84 	.word	0x2000bd84

0800aef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aef8:	4b06      	ldr	r3, [pc, #24]	; (800af14 <vTaskInternalSetTimeOutState+0x24>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <vTaskInternalSetTimeOutState+0x28>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	605a      	str	r2, [r3, #4]
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	2000bd88 	.word	0x2000bd88
 800af18:	2000bd74 	.word	0x2000bd74

0800af1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10a      	bne.n	800af42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	613b      	str	r3, [r7, #16]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	60fb      	str	r3, [r7, #12]
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af5e:	f000 fb59 	bl	800b614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af62:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <xTaskCheckForTimeOut+0xbc>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	69ba      	ldr	r2, [r7, #24]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7a:	d102      	bne.n	800af82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af7c:	2300      	movs	r3, #0
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	e023      	b.n	800afca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	4b15      	ldr	r3, [pc, #84]	; (800afdc <xTaskCheckForTimeOut+0xc0>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d007      	beq.n	800af9e <xTaskCheckForTimeOut+0x82>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	429a      	cmp	r2, r3
 800af96:	d302      	bcc.n	800af9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af98:	2301      	movs	r3, #1
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	e015      	b.n	800afca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d20b      	bcs.n	800afc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ff9b 	bl	800aef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afba:	2300      	movs	r3, #0
 800afbc:	61fb      	str	r3, [r7, #28]
 800afbe:	e004      	b.n	800afca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afc6:	2301      	movs	r3, #1
 800afc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800afca:	f000 fb53 	bl	800b674 <vPortExitCritical>

	return xReturn;
 800afce:	69fb      	ldr	r3, [r7, #28]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3720      	adds	r7, #32
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	2000bd74 	.word	0x2000bd74
 800afdc:	2000bd88 	.word	0x2000bd88

0800afe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800afe0:	b480      	push	{r7}
 800afe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800afe4:	4b03      	ldr	r3, [pc, #12]	; (800aff4 <vTaskMissedYield+0x14>)
 800afe6:	2201      	movs	r2, #1
 800afe8:	601a      	str	r2, [r3, #0]
}
 800afea:	bf00      	nop
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr
 800aff4:	2000bd84 	.word	0x2000bd84

0800aff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b000:	f000 f852 	bl	800b0a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <prvIdleTask+0x28>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d9f9      	bls.n	800b000 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <prvIdleTask+0x2c>)
 800b00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b01c:	e7f0      	b.n	800b000 <prvIdleTask+0x8>
 800b01e:	bf00      	nop
 800b020:	2000bc74 	.word	0x2000bc74
 800b024:	e000ed04 	.word	0xe000ed04

0800b028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b02e:	2300      	movs	r3, #0
 800b030:	607b      	str	r3, [r7, #4]
 800b032:	e00c      	b.n	800b04e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4a12      	ldr	r2, [pc, #72]	; (800b088 <prvInitialiseTaskLists+0x60>)
 800b040:	4413      	add	r3, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe fe40 	bl	8009cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3301      	adds	r3, #1
 800b04c:	607b      	str	r3, [r7, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b06      	cmp	r3, #6
 800b052:	d9ef      	bls.n	800b034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b054:	480d      	ldr	r0, [pc, #52]	; (800b08c <prvInitialiseTaskLists+0x64>)
 800b056:	f7fe fe37 	bl	8009cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b05a:	480d      	ldr	r0, [pc, #52]	; (800b090 <prvInitialiseTaskLists+0x68>)
 800b05c:	f7fe fe34 	bl	8009cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b060:	480c      	ldr	r0, [pc, #48]	; (800b094 <prvInitialiseTaskLists+0x6c>)
 800b062:	f7fe fe31 	bl	8009cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b066:	480c      	ldr	r0, [pc, #48]	; (800b098 <prvInitialiseTaskLists+0x70>)
 800b068:	f7fe fe2e 	bl	8009cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b06c:	480b      	ldr	r0, [pc, #44]	; (800b09c <prvInitialiseTaskLists+0x74>)
 800b06e:	f7fe fe2b 	bl	8009cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b072:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <prvInitialiseTaskLists+0x78>)
 800b074:	4a05      	ldr	r2, [pc, #20]	; (800b08c <prvInitialiseTaskLists+0x64>)
 800b076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b078:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <prvInitialiseTaskLists+0x7c>)
 800b07a:	4a05      	ldr	r2, [pc, #20]	; (800b090 <prvInitialiseTaskLists+0x68>)
 800b07c:	601a      	str	r2, [r3, #0]
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	2000bc74 	.word	0x2000bc74
 800b08c:	2000bd00 	.word	0x2000bd00
 800b090:	2000bd14 	.word	0x2000bd14
 800b094:	2000bd30 	.word	0x2000bd30
 800b098:	2000bd44 	.word	0x2000bd44
 800b09c:	2000bd5c 	.word	0x2000bd5c
 800b0a0:	2000bd28 	.word	0x2000bd28
 800b0a4:	2000bd2c 	.word	0x2000bd2c

0800b0a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0ae:	e019      	b.n	800b0e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0b0:	f000 fab0 	bl	800b614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b4:	4b10      	ldr	r3, [pc, #64]	; (800b0f8 <prvCheckTasksWaitingTermination+0x50>)
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe fe8b 	bl	8009ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0c6:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <prvCheckTasksWaitingTermination+0x54>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	4a0b      	ldr	r2, [pc, #44]	; (800b0fc <prvCheckTasksWaitingTermination+0x54>)
 800b0ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <prvCheckTasksWaitingTermination+0x58>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	4a0a      	ldr	r2, [pc, #40]	; (800b100 <prvCheckTasksWaitingTermination+0x58>)
 800b0d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b0da:	f000 facb 	bl	800b674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f810 	bl	800b104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0e4:	4b06      	ldr	r3, [pc, #24]	; (800b100 <prvCheckTasksWaitingTermination+0x58>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e1      	bne.n	800b0b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b0ec:	bf00      	nop
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	2000bd44 	.word	0x2000bd44
 800b0fc:	2000bd70 	.word	0x2000bd70
 800b100:	2000bd58 	.word	0x2000bd58

0800b104 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	334c      	adds	r3, #76	; 0x4c
 800b110:	4618      	mov	r0, r3
 800b112:	f001 ff33 	bl	800cf7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d108      	bne.n	800b132 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fc23 	bl	800b970 <vPortFree>
				vPortFree( pxTCB );
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 fc20 	bl	800b970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b130:	e018      	b.n	800b164 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d103      	bne.n	800b144 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fc17 	bl	800b970 <vPortFree>
	}
 800b142:	e00f      	b.n	800b164 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d00a      	beq.n	800b164 <prvDeleteTCB+0x60>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60fb      	str	r3, [r7, #12]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <prvDeleteTCB+0x5e>
	}
 800b164:	bf00      	nop
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b172:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <prvResetNextTaskUnblockTime+0x38>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d104      	bne.n	800b186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b17c:	4b0a      	ldr	r3, [pc, #40]	; (800b1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b17e:	f04f 32ff 	mov.w	r2, #4294967295
 800b182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b184:	e008      	b.n	800b198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b186:	4b07      	ldr	r3, [pc, #28]	; (800b1a4 <prvResetNextTaskUnblockTime+0x38>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4a04      	ldr	r2, [pc, #16]	; (800b1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b196:	6013      	str	r3, [r2, #0]
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr
 800b1a4:	2000bd28 	.word	0x2000bd28
 800b1a8:	2000bd90 	.word	0x2000bd90

0800b1ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1b2:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <xTaskGetSchedulerState+0x34>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d102      	bne.n	800b1c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	607b      	str	r3, [r7, #4]
 800b1be:	e008      	b.n	800b1d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1c0:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <xTaskGetSchedulerState+0x38>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	607b      	str	r3, [r7, #4]
 800b1cc:	e001      	b.n	800b1d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1d2:	687b      	ldr	r3, [r7, #4]
	}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	2000bd7c 	.word	0x2000bd7c
 800b1e4:	2000bd98 	.word	0x2000bd98

0800b1e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d06e      	beq.n	800b2dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1fe:	4b3a      	ldr	r3, [pc, #232]	; (800b2e8 <xTaskPriorityDisinherit+0x100>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	429a      	cmp	r2, r3
 800b206:	d00a      	beq.n	800b21e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	60fb      	str	r3, [r7, #12]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10a      	bne.n	800b23c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22a:	f383 8811 	msr	BASEPRI, r3
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	60bb      	str	r3, [r7, #8]
}
 800b238:	bf00      	nop
 800b23a:	e7fe      	b.n	800b23a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24e:	429a      	cmp	r2, r3
 800b250:	d044      	beq.n	800b2dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b256:	2b00      	cmp	r3, #0
 800b258:	d140      	bne.n	800b2dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3304      	adds	r3, #4
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fdbc 	bl	8009ddc <uxListRemove>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d115      	bne.n	800b296 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26e:	491f      	ldr	r1, [pc, #124]	; (800b2ec <xTaskPriorityDisinherit+0x104>)
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	440b      	add	r3, r1
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10a      	bne.n	800b296 <xTaskPriorityDisinherit+0xae>
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b284:	2201      	movs	r2, #1
 800b286:	fa02 f303 	lsl.w	r3, r2, r3
 800b28a:	43da      	mvns	r2, r3
 800b28c:	4b18      	ldr	r3, [pc, #96]	; (800b2f0 <xTaskPriorityDisinherit+0x108>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4013      	ands	r3, r2
 800b292:	4a17      	ldr	r2, [pc, #92]	; (800b2f0 <xTaskPriorityDisinherit+0x108>)
 800b294:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a2:	f1c3 0207 	rsb	r2, r3, #7
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	409a      	lsls	r2, r3
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <xTaskPriorityDisinherit+0x108>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	4a0d      	ldr	r2, [pc, #52]	; (800b2f0 <xTaskPriorityDisinherit+0x108>)
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4a08      	ldr	r2, [pc, #32]	; (800b2ec <xTaskPriorityDisinherit+0x104>)
 800b2ca:	441a      	add	r2, r3
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4610      	mov	r0, r2
 800b2d4:	f7fe fd25 	bl	8009d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2dc:	697b      	ldr	r3, [r7, #20]
	}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	2000bc70 	.word	0x2000bc70
 800b2ec:	2000bc74 	.word	0x2000bc74
 800b2f0:	2000bd78 	.word	0x2000bd78

0800b2f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2fe:	4b29      	ldr	r3, [pc, #164]	; (800b3a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b304:	4b28      	ldr	r3, [pc, #160]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3304      	adds	r3, #4
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fd66 	bl	8009ddc <uxListRemove>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b316:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	2201      	movs	r2, #1
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	43da      	mvns	r2, r3
 800b324:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4013      	ands	r3, r2
 800b32a:	4a20      	ldr	r2, [pc, #128]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800b32c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b334:	d10a      	bne.n	800b34c <prvAddCurrentTaskToDelayedList+0x58>
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d007      	beq.n	800b34c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b33c:	4b1a      	ldr	r3, [pc, #104]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3304      	adds	r3, #4
 800b342:	4619      	mov	r1, r3
 800b344:	481a      	ldr	r0, [pc, #104]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b346:	f7fe fcec 	bl	8009d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b34a:	e026      	b.n	800b39a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4413      	add	r3, r2
 800b352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b354:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	429a      	cmp	r2, r3
 800b362:	d209      	bcs.n	800b378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b364:	4b13      	ldr	r3, [pc, #76]	; (800b3b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4619      	mov	r1, r3
 800b370:	4610      	mov	r0, r2
 800b372:	f7fe fcfa 	bl	8009d6a <vListInsert>
}
 800b376:	e010      	b.n	800b39a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b378:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f7fe fcf0 	bl	8009d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	429a      	cmp	r2, r3
 800b392:	d202      	bcs.n	800b39a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b394:	4a09      	ldr	r2, [pc, #36]	; (800b3bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6013      	str	r3, [r2, #0]
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	2000bd74 	.word	0x2000bd74
 800b3a8:	2000bc70 	.word	0x2000bc70
 800b3ac:	2000bd78 	.word	0x2000bd78
 800b3b0:	2000bd5c 	.word	0x2000bd5c
 800b3b4:	2000bd2c 	.word	0x2000bd2c
 800b3b8:	2000bd28 	.word	0x2000bd28
 800b3bc:	2000bd90 	.word	0x2000bd90

0800b3c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3b04      	subs	r3, #4
 800b3d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3b04      	subs	r3, #4
 800b3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f023 0201 	bic.w	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3b04      	subs	r3, #4
 800b3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3f0:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <pxPortInitialiseStack+0x64>)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3b14      	subs	r3, #20
 800b3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3b04      	subs	r3, #4
 800b406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f06f 0202 	mvn.w	r2, #2
 800b40e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3b20      	subs	r3, #32
 800b414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b416:	68fb      	ldr	r3, [r7, #12]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	0800b429 	.word	0x0800b429

0800b428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <prvTaskExitError+0x54>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43a:	d00a      	beq.n	800b452 <prvTaskExitError+0x2a>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	60fb      	str	r3, [r7, #12]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <prvTaskExitError+0x28>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	60bb      	str	r3, [r7, #8]
}
 800b464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b466:	bf00      	nop
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0fc      	beq.n	800b468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	20000238 	.word	0x20000238

0800b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b480:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <pxCurrentTCBConst2>)
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f380 8809 	msr	PSP, r0
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	4770      	bx	lr
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst2>:
 800b4a0:	2000bc70 	.word	0x2000bc70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4a8:	4808      	ldr	r0, [pc, #32]	; (800b4cc <prvPortStartFirstTask+0x24>)
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	6800      	ldr	r0, [r0, #0]
 800b4ae:	f380 8808 	msr	MSP, r0
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8814 	msr	CONTROL, r0
 800b4ba:	b662      	cpsie	i
 800b4bc:	b661      	cpsie	f
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	df00      	svc	0
 800b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ca:	bf00      	nop
 800b4cc:	e000ed08 	.word	0xe000ed08

0800b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4d6:	4b46      	ldr	r3, [pc, #280]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a46      	ldr	r2, [pc, #280]	; (800b5f4 <xPortStartScheduler+0x124>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d10a      	bne.n	800b4f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4f6:	4b3e      	ldr	r3, [pc, #248]	; (800b5f0 <xPortStartScheduler+0x120>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a3f      	ldr	r2, [pc, #252]	; (800b5f8 <xPortStartScheduler+0x128>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10a      	bne.n	800b516 <xPortStartScheduler+0x46>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b516:	4b39      	ldr	r3, [pc, #228]	; (800b5fc <xPortStartScheduler+0x12c>)
 800b518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	22ff      	movs	r2, #255	; 0xff
 800b526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	4b31      	ldr	r3, [pc, #196]	; (800b600 <xPortStartScheduler+0x130>)
 800b53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b53e:	4b31      	ldr	r3, [pc, #196]	; (800b604 <xPortStartScheduler+0x134>)
 800b540:	2207      	movs	r2, #7
 800b542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b544:	e009      	b.n	800b55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b546:	4b2f      	ldr	r3, [pc, #188]	; (800b604 <xPortStartScheduler+0x134>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <xPortStartScheduler+0x134>)
 800b54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	b2db      	uxtb	r3, r3
 800b558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b55a:	78fb      	ldrb	r3, [r7, #3]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b562:	2b80      	cmp	r3, #128	; 0x80
 800b564:	d0ef      	beq.n	800b546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b566:	4b27      	ldr	r3, [pc, #156]	; (800b604 <xPortStartScheduler+0x134>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f1c3 0307 	rsb	r3, r3, #7
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d00a      	beq.n	800b588 <xPortStartScheduler+0xb8>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	60bb      	str	r3, [r7, #8]
}
 800b584:	bf00      	nop
 800b586:	e7fe      	b.n	800b586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b588:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <xPortStartScheduler+0x134>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	4a1d      	ldr	r2, [pc, #116]	; (800b604 <xPortStartScheduler+0x134>)
 800b590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b592:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <xPortStartScheduler+0x134>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b59a:	4a1a      	ldr	r2, [pc, #104]	; (800b604 <xPortStartScheduler+0x134>)
 800b59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5a6:	4b18      	ldr	r3, [pc, #96]	; (800b608 <xPortStartScheduler+0x138>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <xPortStartScheduler+0x138>)
 800b5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <xPortStartScheduler+0x138>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a14      	ldr	r2, [pc, #80]	; (800b608 <xPortStartScheduler+0x138>)
 800b5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5be:	f000 f8dd 	bl	800b77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5c2:	4b12      	ldr	r3, [pc, #72]	; (800b60c <xPortStartScheduler+0x13c>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5c8:	f000 f8fc 	bl	800b7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <xPortStartScheduler+0x140>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a0f      	ldr	r2, [pc, #60]	; (800b610 <xPortStartScheduler+0x140>)
 800b5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5d8:	f7ff ff66 	bl	800b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5dc:	f7ff fba0 	bl	800ad20 <vTaskSwitchContext>
	prvTaskExitError();
 800b5e0:	f7ff ff22 	bl	800b428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	e000ed00 	.word	0xe000ed00
 800b5f4:	410fc271 	.word	0x410fc271
 800b5f8:	410fc270 	.word	0x410fc270
 800b5fc:	e000e400 	.word	0xe000e400
 800b600:	2000bd9c 	.word	0x2000bd9c
 800b604:	2000bda0 	.word	0x2000bda0
 800b608:	e000ed20 	.word	0xe000ed20
 800b60c:	20000238 	.word	0x20000238
 800b610:	e000ef34 	.word	0xe000ef34

0800b614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	607b      	str	r3, [r7, #4]
}
 800b62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b62e:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <vPortEnterCritical+0x58>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	4a0d      	ldr	r2, [pc, #52]	; (800b66c <vPortEnterCritical+0x58>)
 800b636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <vPortEnterCritical+0x58>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d10f      	bne.n	800b660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b640:	4b0b      	ldr	r3, [pc, #44]	; (800b670 <vPortEnterCritical+0x5c>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <vPortEnterCritical+0x4c>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	603b      	str	r3, [r7, #0]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <vPortEnterCritical+0x4a>
	}
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	20000238 	.word	0x20000238
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b67a:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <vPortExitCritical+0x50>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10a      	bne.n	800b698 <vPortExitCritical+0x24>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	607b      	str	r3, [r7, #4]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b698:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <vPortExitCritical+0x50>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	4a09      	ldr	r2, [pc, #36]	; (800b6c4 <vPortExitCritical+0x50>)
 800b6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6a2:	4b08      	ldr	r3, [pc, #32]	; (800b6c4 <vPortExitCritical+0x50>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d105      	bne.n	800b6b6 <vPortExitCritical+0x42>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	20000238 	.word	0x20000238
	...

0800b6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6d0:	f3ef 8009 	mrs	r0, PSP
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	4b15      	ldr	r3, [pc, #84]	; (800b730 <pxCurrentTCBConst>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	f01e 0f10 	tst.w	lr, #16
 800b6e0:	bf08      	it	eq
 800b6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6f4:	f380 8811 	msr	BASEPRI, r0
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f7ff fb0e 	bl	800ad20 <vTaskSwitchContext>
 800b704:	f04f 0000 	mov.w	r0, #0
 800b708:	f380 8811 	msr	BASEPRI, r0
 800b70c:	bc09      	pop	{r0, r3}
 800b70e:	6819      	ldr	r1, [r3, #0]
 800b710:	6808      	ldr	r0, [r1, #0]
 800b712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	f01e 0f10 	tst.w	lr, #16
 800b71a:	bf08      	it	eq
 800b71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b720:	f380 8809 	msr	PSP, r0
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst>:
 800b730:	2000bc70 	.word	0x2000bc70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	607b      	str	r3, [r7, #4]
}
 800b750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b752:	f7ff fa2d 	bl	800abb0 <xTaskIncrementTick>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b75c:	4b06      	ldr	r3, [pc, #24]	; (800b778 <SysTick_Handler+0x40>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f383 8811 	msr	BASEPRI, r3
}
 800b76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b780:	4b0b      	ldr	r3, [pc, #44]	; (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <vPortSetupTimerInterrupt+0x38>)
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <vPortSetupTimerInterrupt+0x3c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0a      	ldr	r2, [pc, #40]	; (800b7bc <vPortSetupTimerInterrupt+0x40>)
 800b792:	fba2 2303 	umull	r2, r3, r2, r3
 800b796:	099b      	lsrs	r3, r3, #6
 800b798:	4a09      	ldr	r2, [pc, #36]	; (800b7c0 <vPortSetupTimerInterrupt+0x44>)
 800b79a:	3b01      	subs	r3, #1
 800b79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b79e:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <vPortSetupTimerInterrupt+0x34>)
 800b7a0:	2207      	movs	r2, #7
 800b7a2:	601a      	str	r2, [r3, #0]
}
 800b7a4:	bf00      	nop
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	e000e010 	.word	0xe000e010
 800b7b4:	e000e018 	.word	0xe000e018
 800b7b8:	2000022c 	.word	0x2000022c
 800b7bc:	10624dd3 	.word	0x10624dd3
 800b7c0:	e000e014 	.word	0xe000e014

0800b7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7d4 <vPortEnableVFP+0x10>
 800b7c8:	6801      	ldr	r1, [r0, #0]
 800b7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7ce:	6001      	str	r1, [r0, #0]
 800b7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7d2:	bf00      	nop
 800b7d4:	e000ed88 	.word	0xe000ed88

0800b7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7e4:	f7ff f93a 	bl	800aa5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7e8:	4b5b      	ldr	r3, [pc, #364]	; (800b958 <pvPortMalloc+0x180>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d101      	bne.n	800b7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7f0:	f000 f920 	bl	800ba34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7f4:	4b59      	ldr	r3, [pc, #356]	; (800b95c <pvPortMalloc+0x184>)
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f040 8093 	bne.w	800b928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d01d      	beq.n	800b844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b808:	2208      	movs	r2, #8
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	2b00      	cmp	r3, #0
 800b818:	d014      	beq.n	800b844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f023 0307 	bic.w	r3, r3, #7
 800b820:	3308      	adds	r3, #8
 800b822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f003 0307 	and.w	r3, r3, #7
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00a      	beq.n	800b844 <pvPortMalloc+0x6c>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	617b      	str	r3, [r7, #20]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d06e      	beq.n	800b928 <pvPortMalloc+0x150>
 800b84a:	4b45      	ldr	r3, [pc, #276]	; (800b960 <pvPortMalloc+0x188>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d869      	bhi.n	800b928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b854:	4b43      	ldr	r3, [pc, #268]	; (800b964 <pvPortMalloc+0x18c>)
 800b856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b858:	4b42      	ldr	r3, [pc, #264]	; (800b964 <pvPortMalloc+0x18c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b85e:	e004      	b.n	800b86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d903      	bls.n	800b87c <pvPortMalloc+0xa4>
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1f1      	bne.n	800b860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b87c:	4b36      	ldr	r3, [pc, #216]	; (800b958 <pvPortMalloc+0x180>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b882:	429a      	cmp	r2, r3
 800b884:	d050      	beq.n	800b928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b886:	6a3b      	ldr	r3, [r7, #32]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2208      	movs	r2, #8
 800b88c:	4413      	add	r3, r2
 800b88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	685a      	ldr	r2, [r3, #4]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	1ad2      	subs	r2, r2, r3
 800b8a0:	2308      	movs	r3, #8
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d91f      	bls.n	800b8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	613b      	str	r3, [r7, #16]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	1ad2      	subs	r2, r2, r3
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8e2:	69b8      	ldr	r0, [r7, #24]
 800b8e4:	f000 f908 	bl	800baf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8e8:	4b1d      	ldr	r3, [pc, #116]	; (800b960 <pvPortMalloc+0x188>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	4a1b      	ldr	r2, [pc, #108]	; (800b960 <pvPortMalloc+0x188>)
 800b8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8f6:	4b1a      	ldr	r3, [pc, #104]	; (800b960 <pvPortMalloc+0x188>)
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	4b1b      	ldr	r3, [pc, #108]	; (800b968 <pvPortMalloc+0x190>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d203      	bcs.n	800b90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b902:	4b17      	ldr	r3, [pc, #92]	; (800b960 <pvPortMalloc+0x188>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a18      	ldr	r2, [pc, #96]	; (800b968 <pvPortMalloc+0x190>)
 800b908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <pvPortMalloc+0x184>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	431a      	orrs	r2, r3
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b91e:	4b13      	ldr	r3, [pc, #76]	; (800b96c <pvPortMalloc+0x194>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3301      	adds	r3, #1
 800b924:	4a11      	ldr	r2, [pc, #68]	; (800b96c <pvPortMalloc+0x194>)
 800b926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b928:	f7ff f8a6 	bl	800aa78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	f003 0307 	and.w	r3, r3, #7
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <pvPortMalloc+0x174>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60fb      	str	r3, [r7, #12]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <pvPortMalloc+0x172>
	return pvReturn;
 800b94c:	69fb      	ldr	r3, [r7, #28]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3728      	adds	r7, #40	; 0x28
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	200132dc 	.word	0x200132dc
 800b95c:	200132f0 	.word	0x200132f0
 800b960:	200132e0 	.word	0x200132e0
 800b964:	200132d4 	.word	0x200132d4
 800b968:	200132e4 	.word	0x200132e4
 800b96c:	200132e8 	.word	0x200132e8

0800b970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d04d      	beq.n	800ba1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b982:	2308      	movs	r3, #8
 800b984:	425b      	negs	r3, r3
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	4413      	add	r3, r2
 800b98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	4b24      	ldr	r3, [pc, #144]	; (800ba28 <vPortFree+0xb8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4013      	ands	r3, r2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10a      	bne.n	800b9b4 <vPortFree+0x44>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	60fb      	str	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <vPortFree+0x62>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60bb      	str	r3, [r7, #8]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	4b14      	ldr	r3, [pc, #80]	; (800ba28 <vPortFree+0xb8>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4013      	ands	r3, r2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d01e      	beq.n	800ba1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d11a      	bne.n	800ba1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ba28 <vPortFree+0xb8>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	43db      	mvns	r3, r3
 800b9f2:	401a      	ands	r2, r3
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9f8:	f7ff f830 	bl	800aa5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	685a      	ldr	r2, [r3, #4]
 800ba00:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <vPortFree+0xbc>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4413      	add	r3, r2
 800ba06:	4a09      	ldr	r2, [pc, #36]	; (800ba2c <vPortFree+0xbc>)
 800ba08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba0a:	6938      	ldr	r0, [r7, #16]
 800ba0c:	f000 f874 	bl	800baf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba10:	4b07      	ldr	r3, [pc, #28]	; (800ba30 <vPortFree+0xc0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3301      	adds	r3, #1
 800ba16:	4a06      	ldr	r2, [pc, #24]	; (800ba30 <vPortFree+0xc0>)
 800ba18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba1a:	f7ff f82d 	bl	800aa78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba1e:	bf00      	nop
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	200132f0 	.word	0x200132f0
 800ba2c:	200132e0 	.word	0x200132e0
 800ba30:	200132ec 	.word	0x200132ec

0800ba34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba3a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ba3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba40:	4b27      	ldr	r3, [pc, #156]	; (800bae0 <prvHeapInit+0xac>)
 800ba42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f003 0307 	and.w	r3, r3, #7
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00c      	beq.n	800ba68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3307      	adds	r3, #7
 800ba52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f023 0307 	bic.w	r3, r3, #7
 800ba5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	4a1f      	ldr	r2, [pc, #124]	; (800bae0 <prvHeapInit+0xac>)
 800ba64:	4413      	add	r3, r2
 800ba66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba6c:	4a1d      	ldr	r2, [pc, #116]	; (800bae4 <prvHeapInit+0xb0>)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba72:	4b1c      	ldr	r3, [pc, #112]	; (800bae4 <prvHeapInit+0xb0>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba80:	2208      	movs	r2, #8
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	1a9b      	subs	r3, r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f023 0307 	bic.w	r3, r3, #7
 800ba8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <prvHeapInit+0xb4>)
 800ba94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba96:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <prvHeapInit+0xb4>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba9e:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <prvHeapInit+0xb4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2200      	movs	r2, #0
 800baa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	1ad2      	subs	r2, r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bab4:	4b0c      	ldr	r3, [pc, #48]	; (800bae8 <prvHeapInit+0xb4>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	4a0a      	ldr	r2, [pc, #40]	; (800baec <prvHeapInit+0xb8>)
 800bac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	4a09      	ldr	r2, [pc, #36]	; (800baf0 <prvHeapInit+0xbc>)
 800baca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bacc:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <prvHeapInit+0xc0>)
 800bace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bad2:	601a      	str	r2, [r3, #0]
}
 800bad4:	bf00      	nop
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	2000bda4 	.word	0x2000bda4
 800bae4:	200132d4 	.word	0x200132d4
 800bae8:	200132dc 	.word	0x200132dc
 800baec:	200132e4 	.word	0x200132e4
 800baf0:	200132e0 	.word	0x200132e0
 800baf4:	200132f0 	.word	0x200132f0

0800baf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb00:	4b28      	ldr	r3, [pc, #160]	; (800bba4 <prvInsertBlockIntoFreeList+0xac>)
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e002      	b.n	800bb0c <prvInsertBlockIntoFreeList+0x14>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d8f7      	bhi.n	800bb06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4413      	add	r3, r2
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d108      	bne.n	800bb3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	441a      	add	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	441a      	add	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d118      	bne.n	800bb80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b15      	ldr	r3, [pc, #84]	; (800bba8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d00d      	beq.n	800bb76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	441a      	add	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	e008      	b.n	800bb88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb76:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	e003      	b.n	800bb88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d002      	beq.n	800bb96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb96:	bf00      	nop
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	200132d4 	.word	0x200132d4
 800bba8:	200132dc 	.word	0x200132dc

0800bbac <__assert_func>:
 800bbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbae:	4614      	mov	r4, r2
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <__assert_func+0x2c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	68d8      	ldr	r0, [r3, #12]
 800bbba:	b14c      	cbz	r4, 800bbd0 <__assert_func+0x24>
 800bbbc:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <__assert_func+0x30>)
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc4:	4906      	ldr	r1, [pc, #24]	; (800bbe0 <__assert_func+0x34>)
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	f000 f8f2 	bl	800bdb0 <fiprintf>
 800bbcc:	f002 fa90 	bl	800e0f0 <abort>
 800bbd0:	4b04      	ldr	r3, [pc, #16]	; (800bbe4 <__assert_func+0x38>)
 800bbd2:	461c      	mov	r4, r3
 800bbd4:	e7f3      	b.n	800bbbe <__assert_func+0x12>
 800bbd6:	bf00      	nop
 800bbd8:	2000023c 	.word	0x2000023c
 800bbdc:	08012324 	.word	0x08012324
 800bbe0:	08012331 	.word	0x08012331
 800bbe4:	0801235f 	.word	0x0801235f

0800bbe8 <atof>:
 800bbe8:	2100      	movs	r1, #0
 800bbea:	f002 b915 	b.w	800de18 <strtod>

0800bbee <atoi>:
 800bbee:	220a      	movs	r2, #10
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	f002 b9a1 	b.w	800df38 <strtol>
	...

0800bbf8 <__errno>:
 800bbf8:	4b01      	ldr	r3, [pc, #4]	; (800bc00 <__errno+0x8>)
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	2000023c 	.word	0x2000023c

0800bc04 <std>:
 800bc04:	2300      	movs	r3, #0
 800bc06:	b510      	push	{r4, lr}
 800bc08:	4604      	mov	r4, r0
 800bc0a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc12:	6083      	str	r3, [r0, #8]
 800bc14:	8181      	strh	r1, [r0, #12]
 800bc16:	6643      	str	r3, [r0, #100]	; 0x64
 800bc18:	81c2      	strh	r2, [r0, #14]
 800bc1a:	6183      	str	r3, [r0, #24]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	2208      	movs	r2, #8
 800bc20:	305c      	adds	r0, #92	; 0x5c
 800bc22:	f000 f92c 	bl	800be7e <memset>
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <std+0x38>)
 800bc28:	6263      	str	r3, [r4, #36]	; 0x24
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <std+0x3c>)
 800bc2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <std+0x40>)
 800bc30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <std+0x44>)
 800bc34:	6224      	str	r4, [r4, #32]
 800bc36:	6323      	str	r3, [r4, #48]	; 0x30
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	bf00      	nop
 800bc3c:	0800d0f9 	.word	0x0800d0f9
 800bc40:	0800d11f 	.word	0x0800d11f
 800bc44:	0800d157 	.word	0x0800d157
 800bc48:	0800d17b 	.word	0x0800d17b

0800bc4c <_cleanup_r>:
 800bc4c:	4901      	ldr	r1, [pc, #4]	; (800bc54 <_cleanup_r+0x8>)
 800bc4e:	f000 b8c1 	b.w	800bdd4 <_fwalk_reent>
 800bc52:	bf00      	nop
 800bc54:	0800ef21 	.word	0x0800ef21

0800bc58 <__sfmoreglue>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	2268      	movs	r2, #104	; 0x68
 800bc5c:	1e4d      	subs	r5, r1, #1
 800bc5e:	4355      	muls	r5, r2
 800bc60:	460e      	mov	r6, r1
 800bc62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc66:	f000 f933 	bl	800bed0 <_malloc_r>
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	b140      	cbz	r0, 800bc80 <__sfmoreglue+0x28>
 800bc6e:	2100      	movs	r1, #0
 800bc70:	e9c0 1600 	strd	r1, r6, [r0]
 800bc74:	300c      	adds	r0, #12
 800bc76:	60a0      	str	r0, [r4, #8]
 800bc78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc7c:	f000 f8ff 	bl	800be7e <memset>
 800bc80:	4620      	mov	r0, r4
 800bc82:	bd70      	pop	{r4, r5, r6, pc}

0800bc84 <__sfp_lock_acquire>:
 800bc84:	4801      	ldr	r0, [pc, #4]	; (800bc8c <__sfp_lock_acquire+0x8>)
 800bc86:	f000 b8ea 	b.w	800be5e <__retarget_lock_acquire_recursive>
 800bc8a:	bf00      	nop
 800bc8c:	200132f5 	.word	0x200132f5

0800bc90 <__sfp_lock_release>:
 800bc90:	4801      	ldr	r0, [pc, #4]	; (800bc98 <__sfp_lock_release+0x8>)
 800bc92:	f000 b8e5 	b.w	800be60 <__retarget_lock_release_recursive>
 800bc96:	bf00      	nop
 800bc98:	200132f5 	.word	0x200132f5

0800bc9c <__sinit_lock_acquire>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	; (800bca4 <__sinit_lock_acquire+0x8>)
 800bc9e:	f000 b8de 	b.w	800be5e <__retarget_lock_acquire_recursive>
 800bca2:	bf00      	nop
 800bca4:	200132f6 	.word	0x200132f6

0800bca8 <__sinit_lock_release>:
 800bca8:	4801      	ldr	r0, [pc, #4]	; (800bcb0 <__sinit_lock_release+0x8>)
 800bcaa:	f000 b8d9 	b.w	800be60 <__retarget_lock_release_recursive>
 800bcae:	bf00      	nop
 800bcb0:	200132f6 	.word	0x200132f6

0800bcb4 <__sinit>:
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	f7ff fff0 	bl	800bc9c <__sinit_lock_acquire>
 800bcbc:	69a3      	ldr	r3, [r4, #24]
 800bcbe:	b11b      	cbz	r3, 800bcc8 <__sinit+0x14>
 800bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc4:	f7ff bff0 	b.w	800bca8 <__sinit_lock_release>
 800bcc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bccc:	6523      	str	r3, [r4, #80]	; 0x50
 800bcce:	4b13      	ldr	r3, [pc, #76]	; (800bd1c <__sinit+0x68>)
 800bcd0:	4a13      	ldr	r2, [pc, #76]	; (800bd20 <__sinit+0x6c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcd6:	42a3      	cmp	r3, r4
 800bcd8:	bf04      	itt	eq
 800bcda:	2301      	moveq	r3, #1
 800bcdc:	61a3      	streq	r3, [r4, #24]
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 f820 	bl	800bd24 <__sfp>
 800bce4:	6060      	str	r0, [r4, #4]
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 f81c 	bl	800bd24 <__sfp>
 800bcec:	60a0      	str	r0, [r4, #8]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 f818 	bl	800bd24 <__sfp>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	60e0      	str	r0, [r4, #12]
 800bcf8:	2104      	movs	r1, #4
 800bcfa:	6860      	ldr	r0, [r4, #4]
 800bcfc:	f7ff ff82 	bl	800bc04 <std>
 800bd00:	68a0      	ldr	r0, [r4, #8]
 800bd02:	2201      	movs	r2, #1
 800bd04:	2109      	movs	r1, #9
 800bd06:	f7ff ff7d 	bl	800bc04 <std>
 800bd0a:	68e0      	ldr	r0, [r4, #12]
 800bd0c:	2202      	movs	r2, #2
 800bd0e:	2112      	movs	r1, #18
 800bd10:	f7ff ff78 	bl	800bc04 <std>
 800bd14:	2301      	movs	r3, #1
 800bd16:	61a3      	str	r3, [r4, #24]
 800bd18:	e7d2      	b.n	800bcc0 <__sinit+0xc>
 800bd1a:	bf00      	nop
 800bd1c:	080124c4 	.word	0x080124c4
 800bd20:	0800bc4d 	.word	0x0800bc4d

0800bd24 <__sfp>:
 800bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd26:	4607      	mov	r7, r0
 800bd28:	f7ff ffac 	bl	800bc84 <__sfp_lock_acquire>
 800bd2c:	4b1e      	ldr	r3, [pc, #120]	; (800bda8 <__sfp+0x84>)
 800bd2e:	681e      	ldr	r6, [r3, #0]
 800bd30:	69b3      	ldr	r3, [r6, #24]
 800bd32:	b913      	cbnz	r3, 800bd3a <__sfp+0x16>
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7ff ffbd 	bl	800bcb4 <__sinit>
 800bd3a:	3648      	adds	r6, #72	; 0x48
 800bd3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	d503      	bpl.n	800bd4c <__sfp+0x28>
 800bd44:	6833      	ldr	r3, [r6, #0]
 800bd46:	b30b      	cbz	r3, 800bd8c <__sfp+0x68>
 800bd48:	6836      	ldr	r6, [r6, #0]
 800bd4a:	e7f7      	b.n	800bd3c <__sfp+0x18>
 800bd4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd50:	b9d5      	cbnz	r5, 800bd88 <__sfp+0x64>
 800bd52:	4b16      	ldr	r3, [pc, #88]	; (800bdac <__sfp+0x88>)
 800bd54:	60e3      	str	r3, [r4, #12]
 800bd56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd5a:	6665      	str	r5, [r4, #100]	; 0x64
 800bd5c:	f000 f87e 	bl	800be5c <__retarget_lock_init_recursive>
 800bd60:	f7ff ff96 	bl	800bc90 <__sfp_lock_release>
 800bd64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd6c:	6025      	str	r5, [r4, #0]
 800bd6e:	61a5      	str	r5, [r4, #24]
 800bd70:	2208      	movs	r2, #8
 800bd72:	4629      	mov	r1, r5
 800bd74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd78:	f000 f881 	bl	800be7e <memset>
 800bd7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd84:	4620      	mov	r0, r4
 800bd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd88:	3468      	adds	r4, #104	; 0x68
 800bd8a:	e7d9      	b.n	800bd40 <__sfp+0x1c>
 800bd8c:	2104      	movs	r1, #4
 800bd8e:	4638      	mov	r0, r7
 800bd90:	f7ff ff62 	bl	800bc58 <__sfmoreglue>
 800bd94:	4604      	mov	r4, r0
 800bd96:	6030      	str	r0, [r6, #0]
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d1d5      	bne.n	800bd48 <__sfp+0x24>
 800bd9c:	f7ff ff78 	bl	800bc90 <__sfp_lock_release>
 800bda0:	230c      	movs	r3, #12
 800bda2:	603b      	str	r3, [r7, #0]
 800bda4:	e7ee      	b.n	800bd84 <__sfp+0x60>
 800bda6:	bf00      	nop
 800bda8:	080124c4 	.word	0x080124c4
 800bdac:	ffff0001 	.word	0xffff0001

0800bdb0 <fiprintf>:
 800bdb0:	b40e      	push	{r1, r2, r3}
 800bdb2:	b503      	push	{r0, r1, lr}
 800bdb4:	4601      	mov	r1, r0
 800bdb6:	ab03      	add	r3, sp, #12
 800bdb8:	4805      	ldr	r0, [pc, #20]	; (800bdd0 <fiprintf+0x20>)
 800bdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdbe:	6800      	ldr	r0, [r0, #0]
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	f000 f923 	bl	800c00c <_vfiprintf_r>
 800bdc6:	b002      	add	sp, #8
 800bdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdcc:	b003      	add	sp, #12
 800bdce:	4770      	bx	lr
 800bdd0:	2000023c 	.word	0x2000023c

0800bdd4 <_fwalk_reent>:
 800bdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd8:	4606      	mov	r6, r0
 800bdda:	4688      	mov	r8, r1
 800bddc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bde0:	2700      	movs	r7, #0
 800bde2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bde6:	f1b9 0901 	subs.w	r9, r9, #1
 800bdea:	d505      	bpl.n	800bdf8 <_fwalk_reent+0x24>
 800bdec:	6824      	ldr	r4, [r4, #0]
 800bdee:	2c00      	cmp	r4, #0
 800bdf0:	d1f7      	bne.n	800bde2 <_fwalk_reent+0xe>
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdf8:	89ab      	ldrh	r3, [r5, #12]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d907      	bls.n	800be0e <_fwalk_reent+0x3a>
 800bdfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be02:	3301      	adds	r3, #1
 800be04:	d003      	beq.n	800be0e <_fwalk_reent+0x3a>
 800be06:	4629      	mov	r1, r5
 800be08:	4630      	mov	r0, r6
 800be0a:	47c0      	blx	r8
 800be0c:	4307      	orrs	r7, r0
 800be0e:	3568      	adds	r5, #104	; 0x68
 800be10:	e7e9      	b.n	800bde6 <_fwalk_reent+0x12>
	...

0800be14 <__libc_init_array>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4d0d      	ldr	r5, [pc, #52]	; (800be4c <__libc_init_array+0x38>)
 800be18:	4c0d      	ldr	r4, [pc, #52]	; (800be50 <__libc_init_array+0x3c>)
 800be1a:	1b64      	subs	r4, r4, r5
 800be1c:	10a4      	asrs	r4, r4, #2
 800be1e:	2600      	movs	r6, #0
 800be20:	42a6      	cmp	r6, r4
 800be22:	d109      	bne.n	800be38 <__libc_init_array+0x24>
 800be24:	4d0b      	ldr	r5, [pc, #44]	; (800be54 <__libc_init_array+0x40>)
 800be26:	4c0c      	ldr	r4, [pc, #48]	; (800be58 <__libc_init_array+0x44>)
 800be28:	f006 f890 	bl	8011f4c <_init>
 800be2c:	1b64      	subs	r4, r4, r5
 800be2e:	10a4      	asrs	r4, r4, #2
 800be30:	2600      	movs	r6, #0
 800be32:	42a6      	cmp	r6, r4
 800be34:	d105      	bne.n	800be42 <__libc_init_array+0x2e>
 800be36:	bd70      	pop	{r4, r5, r6, pc}
 800be38:	f855 3b04 	ldr.w	r3, [r5], #4
 800be3c:	4798      	blx	r3
 800be3e:	3601      	adds	r6, #1
 800be40:	e7ee      	b.n	800be20 <__libc_init_array+0xc>
 800be42:	f855 3b04 	ldr.w	r3, [r5], #4
 800be46:	4798      	blx	r3
 800be48:	3601      	adds	r6, #1
 800be4a:	e7f2      	b.n	800be32 <__libc_init_array+0x1e>
 800be4c:	080129c0 	.word	0x080129c0
 800be50:	080129c0 	.word	0x080129c0
 800be54:	080129c0 	.word	0x080129c0
 800be58:	080129c4 	.word	0x080129c4

0800be5c <__retarget_lock_init_recursive>:
 800be5c:	4770      	bx	lr

0800be5e <__retarget_lock_acquire_recursive>:
 800be5e:	4770      	bx	lr

0800be60 <__retarget_lock_release_recursive>:
 800be60:	4770      	bx	lr

0800be62 <memcpy>:
 800be62:	440a      	add	r2, r1
 800be64:	4291      	cmp	r1, r2
 800be66:	f100 33ff 	add.w	r3, r0, #4294967295
 800be6a:	d100      	bne.n	800be6e <memcpy+0xc>
 800be6c:	4770      	bx	lr
 800be6e:	b510      	push	{r4, lr}
 800be70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be78:	4291      	cmp	r1, r2
 800be7a:	d1f9      	bne.n	800be70 <memcpy+0xe>
 800be7c:	bd10      	pop	{r4, pc}

0800be7e <memset>:
 800be7e:	4402      	add	r2, r0
 800be80:	4603      	mov	r3, r0
 800be82:	4293      	cmp	r3, r2
 800be84:	d100      	bne.n	800be88 <memset+0xa>
 800be86:	4770      	bx	lr
 800be88:	f803 1b01 	strb.w	r1, [r3], #1
 800be8c:	e7f9      	b.n	800be82 <memset+0x4>
	...

0800be90 <sbrk_aligned>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	4e0e      	ldr	r6, [pc, #56]	; (800becc <sbrk_aligned+0x3c>)
 800be94:	460c      	mov	r4, r1
 800be96:	6831      	ldr	r1, [r6, #0]
 800be98:	4605      	mov	r5, r0
 800be9a:	b911      	cbnz	r1, 800bea2 <sbrk_aligned+0x12>
 800be9c:	f001 f8ca 	bl	800d034 <_sbrk_r>
 800bea0:	6030      	str	r0, [r6, #0]
 800bea2:	4621      	mov	r1, r4
 800bea4:	4628      	mov	r0, r5
 800bea6:	f001 f8c5 	bl	800d034 <_sbrk_r>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	d00a      	beq.n	800bec4 <sbrk_aligned+0x34>
 800beae:	1cc4      	adds	r4, r0, #3
 800beb0:	f024 0403 	bic.w	r4, r4, #3
 800beb4:	42a0      	cmp	r0, r4
 800beb6:	d007      	beq.n	800bec8 <sbrk_aligned+0x38>
 800beb8:	1a21      	subs	r1, r4, r0
 800beba:	4628      	mov	r0, r5
 800bebc:	f001 f8ba 	bl	800d034 <_sbrk_r>
 800bec0:	3001      	adds	r0, #1
 800bec2:	d101      	bne.n	800bec8 <sbrk_aligned+0x38>
 800bec4:	f04f 34ff 	mov.w	r4, #4294967295
 800bec8:	4620      	mov	r0, r4
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	200132fc 	.word	0x200132fc

0800bed0 <_malloc_r>:
 800bed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed4:	1ccd      	adds	r5, r1, #3
 800bed6:	f025 0503 	bic.w	r5, r5, #3
 800beda:	3508      	adds	r5, #8
 800bedc:	2d0c      	cmp	r5, #12
 800bede:	bf38      	it	cc
 800bee0:	250c      	movcc	r5, #12
 800bee2:	2d00      	cmp	r5, #0
 800bee4:	4607      	mov	r7, r0
 800bee6:	db01      	blt.n	800beec <_malloc_r+0x1c>
 800bee8:	42a9      	cmp	r1, r5
 800beea:	d905      	bls.n	800bef8 <_malloc_r+0x28>
 800beec:	230c      	movs	r3, #12
 800beee:	603b      	str	r3, [r7, #0]
 800bef0:	2600      	movs	r6, #0
 800bef2:	4630      	mov	r0, r6
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	4e2e      	ldr	r6, [pc, #184]	; (800bfb4 <_malloc_r+0xe4>)
 800befa:	f003 fc6d 	bl	800f7d8 <__malloc_lock>
 800befe:	6833      	ldr	r3, [r6, #0]
 800bf00:	461c      	mov	r4, r3
 800bf02:	bb34      	cbnz	r4, 800bf52 <_malloc_r+0x82>
 800bf04:	4629      	mov	r1, r5
 800bf06:	4638      	mov	r0, r7
 800bf08:	f7ff ffc2 	bl	800be90 <sbrk_aligned>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	4604      	mov	r4, r0
 800bf10:	d14d      	bne.n	800bfae <_malloc_r+0xde>
 800bf12:	6834      	ldr	r4, [r6, #0]
 800bf14:	4626      	mov	r6, r4
 800bf16:	2e00      	cmp	r6, #0
 800bf18:	d140      	bne.n	800bf9c <_malloc_r+0xcc>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4638      	mov	r0, r7
 800bf20:	eb04 0803 	add.w	r8, r4, r3
 800bf24:	f001 f886 	bl	800d034 <_sbrk_r>
 800bf28:	4580      	cmp	r8, r0
 800bf2a:	d13a      	bne.n	800bfa2 <_malloc_r+0xd2>
 800bf2c:	6821      	ldr	r1, [r4, #0]
 800bf2e:	3503      	adds	r5, #3
 800bf30:	1a6d      	subs	r5, r5, r1
 800bf32:	f025 0503 	bic.w	r5, r5, #3
 800bf36:	3508      	adds	r5, #8
 800bf38:	2d0c      	cmp	r5, #12
 800bf3a:	bf38      	it	cc
 800bf3c:	250c      	movcc	r5, #12
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff ffa5 	bl	800be90 <sbrk_aligned>
 800bf46:	3001      	adds	r0, #1
 800bf48:	d02b      	beq.n	800bfa2 <_malloc_r+0xd2>
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	442b      	add	r3, r5
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	e00e      	b.n	800bf70 <_malloc_r+0xa0>
 800bf52:	6822      	ldr	r2, [r4, #0]
 800bf54:	1b52      	subs	r2, r2, r5
 800bf56:	d41e      	bmi.n	800bf96 <_malloc_r+0xc6>
 800bf58:	2a0b      	cmp	r2, #11
 800bf5a:	d916      	bls.n	800bf8a <_malloc_r+0xba>
 800bf5c:	1961      	adds	r1, r4, r5
 800bf5e:	42a3      	cmp	r3, r4
 800bf60:	6025      	str	r5, [r4, #0]
 800bf62:	bf18      	it	ne
 800bf64:	6059      	strne	r1, [r3, #4]
 800bf66:	6863      	ldr	r3, [r4, #4]
 800bf68:	bf08      	it	eq
 800bf6a:	6031      	streq	r1, [r6, #0]
 800bf6c:	5162      	str	r2, [r4, r5]
 800bf6e:	604b      	str	r3, [r1, #4]
 800bf70:	4638      	mov	r0, r7
 800bf72:	f104 060b 	add.w	r6, r4, #11
 800bf76:	f003 fc35 	bl	800f7e4 <__malloc_unlock>
 800bf7a:	f026 0607 	bic.w	r6, r6, #7
 800bf7e:	1d23      	adds	r3, r4, #4
 800bf80:	1af2      	subs	r2, r6, r3
 800bf82:	d0b6      	beq.n	800bef2 <_malloc_r+0x22>
 800bf84:	1b9b      	subs	r3, r3, r6
 800bf86:	50a3      	str	r3, [r4, r2]
 800bf88:	e7b3      	b.n	800bef2 <_malloc_r+0x22>
 800bf8a:	6862      	ldr	r2, [r4, #4]
 800bf8c:	42a3      	cmp	r3, r4
 800bf8e:	bf0c      	ite	eq
 800bf90:	6032      	streq	r2, [r6, #0]
 800bf92:	605a      	strne	r2, [r3, #4]
 800bf94:	e7ec      	b.n	800bf70 <_malloc_r+0xa0>
 800bf96:	4623      	mov	r3, r4
 800bf98:	6864      	ldr	r4, [r4, #4]
 800bf9a:	e7b2      	b.n	800bf02 <_malloc_r+0x32>
 800bf9c:	4634      	mov	r4, r6
 800bf9e:	6876      	ldr	r6, [r6, #4]
 800bfa0:	e7b9      	b.n	800bf16 <_malloc_r+0x46>
 800bfa2:	230c      	movs	r3, #12
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f003 fc1c 	bl	800f7e4 <__malloc_unlock>
 800bfac:	e7a1      	b.n	800bef2 <_malloc_r+0x22>
 800bfae:	6025      	str	r5, [r4, #0]
 800bfb0:	e7de      	b.n	800bf70 <_malloc_r+0xa0>
 800bfb2:	bf00      	nop
 800bfb4:	200132f8 	.word	0x200132f8

0800bfb8 <__sfputc_r>:
 800bfb8:	6893      	ldr	r3, [r2, #8]
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	b410      	push	{r4}
 800bfc0:	6093      	str	r3, [r2, #8]
 800bfc2:	da08      	bge.n	800bfd6 <__sfputc_r+0x1e>
 800bfc4:	6994      	ldr	r4, [r2, #24]
 800bfc6:	42a3      	cmp	r3, r4
 800bfc8:	db01      	blt.n	800bfce <__sfputc_r+0x16>
 800bfca:	290a      	cmp	r1, #10
 800bfcc:	d103      	bne.n	800bfd6 <__sfputc_r+0x1e>
 800bfce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd2:	f001 bfbb 	b.w	800df4c <__swbuf_r>
 800bfd6:	6813      	ldr	r3, [r2, #0]
 800bfd8:	1c58      	adds	r0, r3, #1
 800bfda:	6010      	str	r0, [r2, #0]
 800bfdc:	7019      	strb	r1, [r3, #0]
 800bfde:	4608      	mov	r0, r1
 800bfe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <__sfputs_r>:
 800bfe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe8:	4606      	mov	r6, r0
 800bfea:	460f      	mov	r7, r1
 800bfec:	4614      	mov	r4, r2
 800bfee:	18d5      	adds	r5, r2, r3
 800bff0:	42ac      	cmp	r4, r5
 800bff2:	d101      	bne.n	800bff8 <__sfputs_r+0x12>
 800bff4:	2000      	movs	r0, #0
 800bff6:	e007      	b.n	800c008 <__sfputs_r+0x22>
 800bff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffc:	463a      	mov	r2, r7
 800bffe:	4630      	mov	r0, r6
 800c000:	f7ff ffda 	bl	800bfb8 <__sfputc_r>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d1f3      	bne.n	800bff0 <__sfputs_r+0xa>
 800c008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c00c <_vfiprintf_r>:
 800c00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	460d      	mov	r5, r1
 800c012:	b09d      	sub	sp, #116	; 0x74
 800c014:	4614      	mov	r4, r2
 800c016:	4698      	mov	r8, r3
 800c018:	4606      	mov	r6, r0
 800c01a:	b118      	cbz	r0, 800c024 <_vfiprintf_r+0x18>
 800c01c:	6983      	ldr	r3, [r0, #24]
 800c01e:	b90b      	cbnz	r3, 800c024 <_vfiprintf_r+0x18>
 800c020:	f7ff fe48 	bl	800bcb4 <__sinit>
 800c024:	4b89      	ldr	r3, [pc, #548]	; (800c24c <_vfiprintf_r+0x240>)
 800c026:	429d      	cmp	r5, r3
 800c028:	d11b      	bne.n	800c062 <_vfiprintf_r+0x56>
 800c02a:	6875      	ldr	r5, [r6, #4]
 800c02c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c02e:	07d9      	lsls	r1, r3, #31
 800c030:	d405      	bmi.n	800c03e <_vfiprintf_r+0x32>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	059a      	lsls	r2, r3, #22
 800c036:	d402      	bmi.n	800c03e <_vfiprintf_r+0x32>
 800c038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c03a:	f7ff ff10 	bl	800be5e <__retarget_lock_acquire_recursive>
 800c03e:	89ab      	ldrh	r3, [r5, #12]
 800c040:	071b      	lsls	r3, r3, #28
 800c042:	d501      	bpl.n	800c048 <_vfiprintf_r+0x3c>
 800c044:	692b      	ldr	r3, [r5, #16]
 800c046:	b9eb      	cbnz	r3, 800c084 <_vfiprintf_r+0x78>
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f001 ffe2 	bl	800e014 <__swsetup_r>
 800c050:	b1c0      	cbz	r0, 800c084 <_vfiprintf_r+0x78>
 800c052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c054:	07dc      	lsls	r4, r3, #31
 800c056:	d50e      	bpl.n	800c076 <_vfiprintf_r+0x6a>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	b01d      	add	sp, #116	; 0x74
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	4b7b      	ldr	r3, [pc, #492]	; (800c250 <_vfiprintf_r+0x244>)
 800c064:	429d      	cmp	r5, r3
 800c066:	d101      	bne.n	800c06c <_vfiprintf_r+0x60>
 800c068:	68b5      	ldr	r5, [r6, #8]
 800c06a:	e7df      	b.n	800c02c <_vfiprintf_r+0x20>
 800c06c:	4b79      	ldr	r3, [pc, #484]	; (800c254 <_vfiprintf_r+0x248>)
 800c06e:	429d      	cmp	r5, r3
 800c070:	bf08      	it	eq
 800c072:	68f5      	ldreq	r5, [r6, #12]
 800c074:	e7da      	b.n	800c02c <_vfiprintf_r+0x20>
 800c076:	89ab      	ldrh	r3, [r5, #12]
 800c078:	0598      	lsls	r0, r3, #22
 800c07a:	d4ed      	bmi.n	800c058 <_vfiprintf_r+0x4c>
 800c07c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c07e:	f7ff feef 	bl	800be60 <__retarget_lock_release_recursive>
 800c082:	e7e9      	b.n	800c058 <_vfiprintf_r+0x4c>
 800c084:	2300      	movs	r3, #0
 800c086:	9309      	str	r3, [sp, #36]	; 0x24
 800c088:	2320      	movs	r3, #32
 800c08a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c08e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c092:	2330      	movs	r3, #48	; 0x30
 800c094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c258 <_vfiprintf_r+0x24c>
 800c098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c09c:	f04f 0901 	mov.w	r9, #1
 800c0a0:	4623      	mov	r3, r4
 800c0a2:	469a      	mov	sl, r3
 800c0a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0a8:	b10a      	cbz	r2, 800c0ae <_vfiprintf_r+0xa2>
 800c0aa:	2a25      	cmp	r2, #37	; 0x25
 800c0ac:	d1f9      	bne.n	800c0a2 <_vfiprintf_r+0x96>
 800c0ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b2:	d00b      	beq.n	800c0cc <_vfiprintf_r+0xc0>
 800c0b4:	465b      	mov	r3, fp
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	f7ff ff93 	bl	800bfe6 <__sfputs_r>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f000 80aa 	beq.w	800c21a <_vfiprintf_r+0x20e>
 800c0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0c8:	445a      	add	r2, fp
 800c0ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 80a2 	beq.w	800c21a <_vfiprintf_r+0x20e>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0e0:	f10a 0a01 	add.w	sl, sl, #1
 800c0e4:	9304      	str	r3, [sp, #16]
 800c0e6:	9307      	str	r3, [sp, #28]
 800c0e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0ec:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ee:	4654      	mov	r4, sl
 800c0f0:	2205      	movs	r2, #5
 800c0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0f6:	4858      	ldr	r0, [pc, #352]	; (800c258 <_vfiprintf_r+0x24c>)
 800c0f8:	f7f4 f882 	bl	8000200 <memchr>
 800c0fc:	9a04      	ldr	r2, [sp, #16]
 800c0fe:	b9d8      	cbnz	r0, 800c138 <_vfiprintf_r+0x12c>
 800c100:	06d1      	lsls	r1, r2, #27
 800c102:	bf44      	itt	mi
 800c104:	2320      	movmi	r3, #32
 800c106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c10a:	0713      	lsls	r3, r2, #28
 800c10c:	bf44      	itt	mi
 800c10e:	232b      	movmi	r3, #43	; 0x2b
 800c110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c114:	f89a 3000 	ldrb.w	r3, [sl]
 800c118:	2b2a      	cmp	r3, #42	; 0x2a
 800c11a:	d015      	beq.n	800c148 <_vfiprintf_r+0x13c>
 800c11c:	9a07      	ldr	r2, [sp, #28]
 800c11e:	4654      	mov	r4, sl
 800c120:	2000      	movs	r0, #0
 800c122:	f04f 0c0a 	mov.w	ip, #10
 800c126:	4621      	mov	r1, r4
 800c128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c12c:	3b30      	subs	r3, #48	; 0x30
 800c12e:	2b09      	cmp	r3, #9
 800c130:	d94e      	bls.n	800c1d0 <_vfiprintf_r+0x1c4>
 800c132:	b1b0      	cbz	r0, 800c162 <_vfiprintf_r+0x156>
 800c134:	9207      	str	r2, [sp, #28]
 800c136:	e014      	b.n	800c162 <_vfiprintf_r+0x156>
 800c138:	eba0 0308 	sub.w	r3, r0, r8
 800c13c:	fa09 f303 	lsl.w	r3, r9, r3
 800c140:	4313      	orrs	r3, r2
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	46a2      	mov	sl, r4
 800c146:	e7d2      	b.n	800c0ee <_vfiprintf_r+0xe2>
 800c148:	9b03      	ldr	r3, [sp, #12]
 800c14a:	1d19      	adds	r1, r3, #4
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	9103      	str	r1, [sp, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfbb      	ittet	lt
 800c154:	425b      	neglt	r3, r3
 800c156:	f042 0202 	orrlt.w	r2, r2, #2
 800c15a:	9307      	strge	r3, [sp, #28]
 800c15c:	9307      	strlt	r3, [sp, #28]
 800c15e:	bfb8      	it	lt
 800c160:	9204      	strlt	r2, [sp, #16]
 800c162:	7823      	ldrb	r3, [r4, #0]
 800c164:	2b2e      	cmp	r3, #46	; 0x2e
 800c166:	d10c      	bne.n	800c182 <_vfiprintf_r+0x176>
 800c168:	7863      	ldrb	r3, [r4, #1]
 800c16a:	2b2a      	cmp	r3, #42	; 0x2a
 800c16c:	d135      	bne.n	800c1da <_vfiprintf_r+0x1ce>
 800c16e:	9b03      	ldr	r3, [sp, #12]
 800c170:	1d1a      	adds	r2, r3, #4
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	9203      	str	r2, [sp, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	bfb8      	it	lt
 800c17a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c17e:	3402      	adds	r4, #2
 800c180:	9305      	str	r3, [sp, #20]
 800c182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c268 <_vfiprintf_r+0x25c>
 800c186:	7821      	ldrb	r1, [r4, #0]
 800c188:	2203      	movs	r2, #3
 800c18a:	4650      	mov	r0, sl
 800c18c:	f7f4 f838 	bl	8000200 <memchr>
 800c190:	b140      	cbz	r0, 800c1a4 <_vfiprintf_r+0x198>
 800c192:	2340      	movs	r3, #64	; 0x40
 800c194:	eba0 000a 	sub.w	r0, r0, sl
 800c198:	fa03 f000 	lsl.w	r0, r3, r0
 800c19c:	9b04      	ldr	r3, [sp, #16]
 800c19e:	4303      	orrs	r3, r0
 800c1a0:	3401      	adds	r4, #1
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a8:	482c      	ldr	r0, [pc, #176]	; (800c25c <_vfiprintf_r+0x250>)
 800c1aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1ae:	2206      	movs	r2, #6
 800c1b0:	f7f4 f826 	bl	8000200 <memchr>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d03f      	beq.n	800c238 <_vfiprintf_r+0x22c>
 800c1b8:	4b29      	ldr	r3, [pc, #164]	; (800c260 <_vfiprintf_r+0x254>)
 800c1ba:	bb1b      	cbnz	r3, 800c204 <_vfiprintf_r+0x1f8>
 800c1bc:	9b03      	ldr	r3, [sp, #12]
 800c1be:	3307      	adds	r3, #7
 800c1c0:	f023 0307 	bic.w	r3, r3, #7
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	9303      	str	r3, [sp, #12]
 800c1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ca:	443b      	add	r3, r7
 800c1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ce:	e767      	b.n	800c0a0 <_vfiprintf_r+0x94>
 800c1d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e7a5      	b.n	800c126 <_vfiprintf_r+0x11a>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	3401      	adds	r4, #1
 800c1de:	9305      	str	r3, [sp, #20]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f04f 0c0a 	mov.w	ip, #10
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ec:	3a30      	subs	r2, #48	; 0x30
 800c1ee:	2a09      	cmp	r2, #9
 800c1f0:	d903      	bls.n	800c1fa <_vfiprintf_r+0x1ee>
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0c5      	beq.n	800c182 <_vfiprintf_r+0x176>
 800c1f6:	9105      	str	r1, [sp, #20]
 800c1f8:	e7c3      	b.n	800c182 <_vfiprintf_r+0x176>
 800c1fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1fe:	4604      	mov	r4, r0
 800c200:	2301      	movs	r3, #1
 800c202:	e7f0      	b.n	800c1e6 <_vfiprintf_r+0x1da>
 800c204:	ab03      	add	r3, sp, #12
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	462a      	mov	r2, r5
 800c20a:	4b16      	ldr	r3, [pc, #88]	; (800c264 <_vfiprintf_r+0x258>)
 800c20c:	a904      	add	r1, sp, #16
 800c20e:	4630      	mov	r0, r6
 800c210:	f000 f8cc 	bl	800c3ac <_printf_float>
 800c214:	4607      	mov	r7, r0
 800c216:	1c78      	adds	r0, r7, #1
 800c218:	d1d6      	bne.n	800c1c8 <_vfiprintf_r+0x1bc>
 800c21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c21c:	07d9      	lsls	r1, r3, #31
 800c21e:	d405      	bmi.n	800c22c <_vfiprintf_r+0x220>
 800c220:	89ab      	ldrh	r3, [r5, #12]
 800c222:	059a      	lsls	r2, r3, #22
 800c224:	d402      	bmi.n	800c22c <_vfiprintf_r+0x220>
 800c226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c228:	f7ff fe1a 	bl	800be60 <__retarget_lock_release_recursive>
 800c22c:	89ab      	ldrh	r3, [r5, #12]
 800c22e:	065b      	lsls	r3, r3, #25
 800c230:	f53f af12 	bmi.w	800c058 <_vfiprintf_r+0x4c>
 800c234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c236:	e711      	b.n	800c05c <_vfiprintf_r+0x50>
 800c238:	ab03      	add	r3, sp, #12
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	462a      	mov	r2, r5
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <_vfiprintf_r+0x258>)
 800c240:	a904      	add	r1, sp, #16
 800c242:	4630      	mov	r0, r6
 800c244:	f000 fb56 	bl	800c8f4 <_printf_i>
 800c248:	e7e4      	b.n	800c214 <_vfiprintf_r+0x208>
 800c24a:	bf00      	nop
 800c24c:	08012484 	.word	0x08012484
 800c250:	080124a4 	.word	0x080124a4
 800c254:	08012464 	.word	0x08012464
 800c258:	080124c8 	.word	0x080124c8
 800c25c:	080124d2 	.word	0x080124d2
 800c260:	0800c3ad 	.word	0x0800c3ad
 800c264:	0800bfe7 	.word	0x0800bfe7
 800c268:	080124ce 	.word	0x080124ce

0800c26c <__cvt>:
 800c26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	ec55 4b10 	vmov	r4, r5, d0
 800c274:	2d00      	cmp	r5, #0
 800c276:	460e      	mov	r6, r1
 800c278:	4619      	mov	r1, r3
 800c27a:	462b      	mov	r3, r5
 800c27c:	bfbb      	ittet	lt
 800c27e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c282:	461d      	movlt	r5, r3
 800c284:	2300      	movge	r3, #0
 800c286:	232d      	movlt	r3, #45	; 0x2d
 800c288:	700b      	strb	r3, [r1, #0]
 800c28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c28c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c290:	4691      	mov	r9, r2
 800c292:	f023 0820 	bic.w	r8, r3, #32
 800c296:	bfbc      	itt	lt
 800c298:	4622      	movlt	r2, r4
 800c29a:	4614      	movlt	r4, r2
 800c29c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2a0:	d005      	beq.n	800c2ae <__cvt+0x42>
 800c2a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c2a6:	d100      	bne.n	800c2aa <__cvt+0x3e>
 800c2a8:	3601      	adds	r6, #1
 800c2aa:	2102      	movs	r1, #2
 800c2ac:	e000      	b.n	800c2b0 <__cvt+0x44>
 800c2ae:	2103      	movs	r1, #3
 800c2b0:	ab03      	add	r3, sp, #12
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	ab02      	add	r3, sp, #8
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	ec45 4b10 	vmov	d0, r4, r5
 800c2bc:	4653      	mov	r3, sl
 800c2be:	4632      	mov	r2, r6
 800c2c0:	f001 ffba 	bl	800e238 <_dtoa_r>
 800c2c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c2c8:	4607      	mov	r7, r0
 800c2ca:	d102      	bne.n	800c2d2 <__cvt+0x66>
 800c2cc:	f019 0f01 	tst.w	r9, #1
 800c2d0:	d022      	beq.n	800c318 <__cvt+0xac>
 800c2d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c2d6:	eb07 0906 	add.w	r9, r7, r6
 800c2da:	d110      	bne.n	800c2fe <__cvt+0x92>
 800c2dc:	783b      	ldrb	r3, [r7, #0]
 800c2de:	2b30      	cmp	r3, #48	; 0x30
 800c2e0:	d10a      	bne.n	800c2f8 <__cvt+0x8c>
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f4 fbfd 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2ee:	b918      	cbnz	r0, 800c2f8 <__cvt+0x8c>
 800c2f0:	f1c6 0601 	rsb	r6, r6, #1
 800c2f4:	f8ca 6000 	str.w	r6, [sl]
 800c2f8:	f8da 3000 	ldr.w	r3, [sl]
 800c2fc:	4499      	add	r9, r3
 800c2fe:	2200      	movs	r2, #0
 800c300:	2300      	movs	r3, #0
 800c302:	4620      	mov	r0, r4
 800c304:	4629      	mov	r1, r5
 800c306:	f7f4 fbef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c30a:	b108      	cbz	r0, 800c310 <__cvt+0xa4>
 800c30c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c310:	2230      	movs	r2, #48	; 0x30
 800c312:	9b03      	ldr	r3, [sp, #12]
 800c314:	454b      	cmp	r3, r9
 800c316:	d307      	bcc.n	800c328 <__cvt+0xbc>
 800c318:	9b03      	ldr	r3, [sp, #12]
 800c31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c31c:	1bdb      	subs	r3, r3, r7
 800c31e:	4638      	mov	r0, r7
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	b004      	add	sp, #16
 800c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c328:	1c59      	adds	r1, r3, #1
 800c32a:	9103      	str	r1, [sp, #12]
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	e7f0      	b.n	800c312 <__cvt+0xa6>

0800c330 <__exponent>:
 800c330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c332:	4603      	mov	r3, r0
 800c334:	2900      	cmp	r1, #0
 800c336:	bfb8      	it	lt
 800c338:	4249      	neglt	r1, r1
 800c33a:	f803 2b02 	strb.w	r2, [r3], #2
 800c33e:	bfb4      	ite	lt
 800c340:	222d      	movlt	r2, #45	; 0x2d
 800c342:	222b      	movge	r2, #43	; 0x2b
 800c344:	2909      	cmp	r1, #9
 800c346:	7042      	strb	r2, [r0, #1]
 800c348:	dd2a      	ble.n	800c3a0 <__exponent+0x70>
 800c34a:	f10d 0407 	add.w	r4, sp, #7
 800c34e:	46a4      	mov	ip, r4
 800c350:	270a      	movs	r7, #10
 800c352:	46a6      	mov	lr, r4
 800c354:	460a      	mov	r2, r1
 800c356:	fb91 f6f7 	sdiv	r6, r1, r7
 800c35a:	fb07 1516 	mls	r5, r7, r6, r1
 800c35e:	3530      	adds	r5, #48	; 0x30
 800c360:	2a63      	cmp	r2, #99	; 0x63
 800c362:	f104 34ff 	add.w	r4, r4, #4294967295
 800c366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c36a:	4631      	mov	r1, r6
 800c36c:	dcf1      	bgt.n	800c352 <__exponent+0x22>
 800c36e:	3130      	adds	r1, #48	; 0x30
 800c370:	f1ae 0502 	sub.w	r5, lr, #2
 800c374:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c378:	1c44      	adds	r4, r0, #1
 800c37a:	4629      	mov	r1, r5
 800c37c:	4561      	cmp	r1, ip
 800c37e:	d30a      	bcc.n	800c396 <__exponent+0x66>
 800c380:	f10d 0209 	add.w	r2, sp, #9
 800c384:	eba2 020e 	sub.w	r2, r2, lr
 800c388:	4565      	cmp	r5, ip
 800c38a:	bf88      	it	hi
 800c38c:	2200      	movhi	r2, #0
 800c38e:	4413      	add	r3, r2
 800c390:	1a18      	subs	r0, r3, r0
 800c392:	b003      	add	sp, #12
 800c394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c39a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c39e:	e7ed      	b.n	800c37c <__exponent+0x4c>
 800c3a0:	2330      	movs	r3, #48	; 0x30
 800c3a2:	3130      	adds	r1, #48	; 0x30
 800c3a4:	7083      	strb	r3, [r0, #2]
 800c3a6:	70c1      	strb	r1, [r0, #3]
 800c3a8:	1d03      	adds	r3, r0, #4
 800c3aa:	e7f1      	b.n	800c390 <__exponent+0x60>

0800c3ac <_printf_float>:
 800c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b0:	ed2d 8b02 	vpush	{d8}
 800c3b4:	b08d      	sub	sp, #52	; 0x34
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c3bc:	4616      	mov	r6, r2
 800c3be:	461f      	mov	r7, r3
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	f003 f959 	bl	800f678 <_localeconv_r>
 800c3c6:	f8d0 a000 	ldr.w	sl, [r0]
 800c3ca:	4650      	mov	r0, sl
 800c3cc:	f7f3 ff0a 	bl	80001e4 <strlen>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	9305      	str	r3, [sp, #20]
 800c3d8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c3e0:	3307      	adds	r3, #7
 800c3e2:	f023 0307 	bic.w	r3, r3, #7
 800c3e6:	f103 0208 	add.w	r2, r3, #8
 800c3ea:	f8c8 2000 	str.w	r2, [r8]
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	f8cd 8018 	str.w	r8, [sp, #24]
 800c404:	ee08 0a10 	vmov	s16, r0
 800c408:	4b9f      	ldr	r3, [pc, #636]	; (800c688 <_printf_float+0x2dc>)
 800c40a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c40e:	f04f 32ff 	mov.w	r2, #4294967295
 800c412:	f7f4 fb9b 	bl	8000b4c <__aeabi_dcmpun>
 800c416:	bb88      	cbnz	r0, 800c47c <_printf_float+0xd0>
 800c418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c41c:	4b9a      	ldr	r3, [pc, #616]	; (800c688 <_printf_float+0x2dc>)
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
 800c422:	f7f4 fb75 	bl	8000b10 <__aeabi_dcmple>
 800c426:	bb48      	cbnz	r0, 800c47c <_printf_float+0xd0>
 800c428:	2200      	movs	r2, #0
 800c42a:	2300      	movs	r3, #0
 800c42c:	4640      	mov	r0, r8
 800c42e:	4649      	mov	r1, r9
 800c430:	f7f4 fb64 	bl	8000afc <__aeabi_dcmplt>
 800c434:	b110      	cbz	r0, 800c43c <_printf_float+0x90>
 800c436:	232d      	movs	r3, #45	; 0x2d
 800c438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c43c:	4b93      	ldr	r3, [pc, #588]	; (800c68c <_printf_float+0x2e0>)
 800c43e:	4894      	ldr	r0, [pc, #592]	; (800c690 <_printf_float+0x2e4>)
 800c440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c444:	bf94      	ite	ls
 800c446:	4698      	movls	r8, r3
 800c448:	4680      	movhi	r8, r0
 800c44a:	2303      	movs	r3, #3
 800c44c:	6123      	str	r3, [r4, #16]
 800c44e:	9b05      	ldr	r3, [sp, #20]
 800c450:	f023 0204 	bic.w	r2, r3, #4
 800c454:	6022      	str	r2, [r4, #0]
 800c456:	f04f 0900 	mov.w	r9, #0
 800c45a:	9700      	str	r7, [sp, #0]
 800c45c:	4633      	mov	r3, r6
 800c45e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c460:	4621      	mov	r1, r4
 800c462:	4628      	mov	r0, r5
 800c464:	f000 f9d8 	bl	800c818 <_printf_common>
 800c468:	3001      	adds	r0, #1
 800c46a:	f040 8090 	bne.w	800c58e <_printf_float+0x1e2>
 800c46e:	f04f 30ff 	mov.w	r0, #4294967295
 800c472:	b00d      	add	sp, #52	; 0x34
 800c474:	ecbd 8b02 	vpop	{d8}
 800c478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	4642      	mov	r2, r8
 800c47e:	464b      	mov	r3, r9
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	f7f4 fb62 	bl	8000b4c <__aeabi_dcmpun>
 800c488:	b140      	cbz	r0, 800c49c <_printf_float+0xf0>
 800c48a:	464b      	mov	r3, r9
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bfbc      	itt	lt
 800c490:	232d      	movlt	r3, #45	; 0x2d
 800c492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c496:	487f      	ldr	r0, [pc, #508]	; (800c694 <_printf_float+0x2e8>)
 800c498:	4b7f      	ldr	r3, [pc, #508]	; (800c698 <_printf_float+0x2ec>)
 800c49a:	e7d1      	b.n	800c440 <_printf_float+0x94>
 800c49c:	6863      	ldr	r3, [r4, #4]
 800c49e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c4a2:	9206      	str	r2, [sp, #24]
 800c4a4:	1c5a      	adds	r2, r3, #1
 800c4a6:	d13f      	bne.n	800c528 <_printf_float+0x17c>
 800c4a8:	2306      	movs	r3, #6
 800c4aa:	6063      	str	r3, [r4, #4]
 800c4ac:	9b05      	ldr	r3, [sp, #20]
 800c4ae:	6861      	ldr	r1, [r4, #4]
 800c4b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9303      	str	r3, [sp, #12]
 800c4b8:	ab0a      	add	r3, sp, #40	; 0x28
 800c4ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c4be:	ab09      	add	r3, sp, #36	; 0x24
 800c4c0:	ec49 8b10 	vmov	d0, r8, r9
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	6022      	str	r2, [r4, #0]
 800c4c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f7ff fecd 	bl	800c26c <__cvt>
 800c4d2:	9b06      	ldr	r3, [sp, #24]
 800c4d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4d6:	2b47      	cmp	r3, #71	; 0x47
 800c4d8:	4680      	mov	r8, r0
 800c4da:	d108      	bne.n	800c4ee <_printf_float+0x142>
 800c4dc:	1cc8      	adds	r0, r1, #3
 800c4de:	db02      	blt.n	800c4e6 <_printf_float+0x13a>
 800c4e0:	6863      	ldr	r3, [r4, #4]
 800c4e2:	4299      	cmp	r1, r3
 800c4e4:	dd41      	ble.n	800c56a <_printf_float+0x1be>
 800c4e6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c4ea:	fa5f fb8b 	uxtb.w	fp, fp
 800c4ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4f2:	d820      	bhi.n	800c536 <_printf_float+0x18a>
 800c4f4:	3901      	subs	r1, #1
 800c4f6:	465a      	mov	r2, fp
 800c4f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4fc:	9109      	str	r1, [sp, #36]	; 0x24
 800c4fe:	f7ff ff17 	bl	800c330 <__exponent>
 800c502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c504:	1813      	adds	r3, r2, r0
 800c506:	2a01      	cmp	r2, #1
 800c508:	4681      	mov	r9, r0
 800c50a:	6123      	str	r3, [r4, #16]
 800c50c:	dc02      	bgt.n	800c514 <_printf_float+0x168>
 800c50e:	6822      	ldr	r2, [r4, #0]
 800c510:	07d2      	lsls	r2, r2, #31
 800c512:	d501      	bpl.n	800c518 <_printf_float+0x16c>
 800c514:	3301      	adds	r3, #1
 800c516:	6123      	str	r3, [r4, #16]
 800c518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d09c      	beq.n	800c45a <_printf_float+0xae>
 800c520:	232d      	movs	r3, #45	; 0x2d
 800c522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c526:	e798      	b.n	800c45a <_printf_float+0xae>
 800c528:	9a06      	ldr	r2, [sp, #24]
 800c52a:	2a47      	cmp	r2, #71	; 0x47
 800c52c:	d1be      	bne.n	800c4ac <_printf_float+0x100>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1bc      	bne.n	800c4ac <_printf_float+0x100>
 800c532:	2301      	movs	r3, #1
 800c534:	e7b9      	b.n	800c4aa <_printf_float+0xfe>
 800c536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c53a:	d118      	bne.n	800c56e <_printf_float+0x1c2>
 800c53c:	2900      	cmp	r1, #0
 800c53e:	6863      	ldr	r3, [r4, #4]
 800c540:	dd0b      	ble.n	800c55a <_printf_float+0x1ae>
 800c542:	6121      	str	r1, [r4, #16]
 800c544:	b913      	cbnz	r3, 800c54c <_printf_float+0x1a0>
 800c546:	6822      	ldr	r2, [r4, #0]
 800c548:	07d0      	lsls	r0, r2, #31
 800c54a:	d502      	bpl.n	800c552 <_printf_float+0x1a6>
 800c54c:	3301      	adds	r3, #1
 800c54e:	440b      	add	r3, r1
 800c550:	6123      	str	r3, [r4, #16]
 800c552:	65a1      	str	r1, [r4, #88]	; 0x58
 800c554:	f04f 0900 	mov.w	r9, #0
 800c558:	e7de      	b.n	800c518 <_printf_float+0x16c>
 800c55a:	b913      	cbnz	r3, 800c562 <_printf_float+0x1b6>
 800c55c:	6822      	ldr	r2, [r4, #0]
 800c55e:	07d2      	lsls	r2, r2, #31
 800c560:	d501      	bpl.n	800c566 <_printf_float+0x1ba>
 800c562:	3302      	adds	r3, #2
 800c564:	e7f4      	b.n	800c550 <_printf_float+0x1a4>
 800c566:	2301      	movs	r3, #1
 800c568:	e7f2      	b.n	800c550 <_printf_float+0x1a4>
 800c56a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c570:	4299      	cmp	r1, r3
 800c572:	db05      	blt.n	800c580 <_printf_float+0x1d4>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	6121      	str	r1, [r4, #16]
 800c578:	07d8      	lsls	r0, r3, #31
 800c57a:	d5ea      	bpl.n	800c552 <_printf_float+0x1a6>
 800c57c:	1c4b      	adds	r3, r1, #1
 800c57e:	e7e7      	b.n	800c550 <_printf_float+0x1a4>
 800c580:	2900      	cmp	r1, #0
 800c582:	bfd4      	ite	le
 800c584:	f1c1 0202 	rsble	r2, r1, #2
 800c588:	2201      	movgt	r2, #1
 800c58a:	4413      	add	r3, r2
 800c58c:	e7e0      	b.n	800c550 <_printf_float+0x1a4>
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	055a      	lsls	r2, r3, #21
 800c592:	d407      	bmi.n	800c5a4 <_printf_float+0x1f8>
 800c594:	6923      	ldr	r3, [r4, #16]
 800c596:	4642      	mov	r2, r8
 800c598:	4631      	mov	r1, r6
 800c59a:	4628      	mov	r0, r5
 800c59c:	47b8      	blx	r7
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d12c      	bne.n	800c5fc <_printf_float+0x250>
 800c5a2:	e764      	b.n	800c46e <_printf_float+0xc2>
 800c5a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c5a8:	f240 80e0 	bls.w	800c76c <_printf_float+0x3c0>
 800c5ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f7f4 fa98 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d034      	beq.n	800c626 <_printf_float+0x27a>
 800c5bc:	4a37      	ldr	r2, [pc, #220]	; (800c69c <_printf_float+0x2f0>)
 800c5be:	2301      	movs	r3, #1
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	47b8      	blx	r7
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	f43f af51 	beq.w	800c46e <_printf_float+0xc2>
 800c5cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	db02      	blt.n	800c5da <_printf_float+0x22e>
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	07d8      	lsls	r0, r3, #31
 800c5d8:	d510      	bpl.n	800c5fc <_printf_float+0x250>
 800c5da:	ee18 3a10 	vmov	r3, s16
 800c5de:	4652      	mov	r2, sl
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	47b8      	blx	r7
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f43f af41 	beq.w	800c46e <_printf_float+0xc2>
 800c5ec:	f04f 0800 	mov.w	r8, #0
 800c5f0:	f104 091a 	add.w	r9, r4, #26
 800c5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	4543      	cmp	r3, r8
 800c5fa:	dc09      	bgt.n	800c610 <_printf_float+0x264>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	079b      	lsls	r3, r3, #30
 800c600:	f100 8105 	bmi.w	800c80e <_printf_float+0x462>
 800c604:	68e0      	ldr	r0, [r4, #12]
 800c606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c608:	4298      	cmp	r0, r3
 800c60a:	bfb8      	it	lt
 800c60c:	4618      	movlt	r0, r3
 800c60e:	e730      	b.n	800c472 <_printf_float+0xc6>
 800c610:	2301      	movs	r3, #1
 800c612:	464a      	mov	r2, r9
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	f43f af27 	beq.w	800c46e <_printf_float+0xc2>
 800c620:	f108 0801 	add.w	r8, r8, #1
 800c624:	e7e6      	b.n	800c5f4 <_printf_float+0x248>
 800c626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	dc39      	bgt.n	800c6a0 <_printf_float+0x2f4>
 800c62c:	4a1b      	ldr	r2, [pc, #108]	; (800c69c <_printf_float+0x2f0>)
 800c62e:	2301      	movs	r3, #1
 800c630:	4631      	mov	r1, r6
 800c632:	4628      	mov	r0, r5
 800c634:	47b8      	blx	r7
 800c636:	3001      	adds	r0, #1
 800c638:	f43f af19 	beq.w	800c46e <_printf_float+0xc2>
 800c63c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c640:	4313      	orrs	r3, r2
 800c642:	d102      	bne.n	800c64a <_printf_float+0x29e>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	07d9      	lsls	r1, r3, #31
 800c648:	d5d8      	bpl.n	800c5fc <_printf_float+0x250>
 800c64a:	ee18 3a10 	vmov	r3, s16
 800c64e:	4652      	mov	r2, sl
 800c650:	4631      	mov	r1, r6
 800c652:	4628      	mov	r0, r5
 800c654:	47b8      	blx	r7
 800c656:	3001      	adds	r0, #1
 800c658:	f43f af09 	beq.w	800c46e <_printf_float+0xc2>
 800c65c:	f04f 0900 	mov.w	r9, #0
 800c660:	f104 0a1a 	add.w	sl, r4, #26
 800c664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c666:	425b      	negs	r3, r3
 800c668:	454b      	cmp	r3, r9
 800c66a:	dc01      	bgt.n	800c670 <_printf_float+0x2c4>
 800c66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c66e:	e792      	b.n	800c596 <_printf_float+0x1ea>
 800c670:	2301      	movs	r3, #1
 800c672:	4652      	mov	r2, sl
 800c674:	4631      	mov	r1, r6
 800c676:	4628      	mov	r0, r5
 800c678:	47b8      	blx	r7
 800c67a:	3001      	adds	r0, #1
 800c67c:	f43f aef7 	beq.w	800c46e <_printf_float+0xc2>
 800c680:	f109 0901 	add.w	r9, r9, #1
 800c684:	e7ee      	b.n	800c664 <_printf_float+0x2b8>
 800c686:	bf00      	nop
 800c688:	7fefffff 	.word	0x7fefffff
 800c68c:	080124d9 	.word	0x080124d9
 800c690:	080124dd 	.word	0x080124dd
 800c694:	080124e5 	.word	0x080124e5
 800c698:	080124e1 	.word	0x080124e1
 800c69c:	080127c8 	.word	0x080127c8
 800c6a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	bfa8      	it	ge
 800c6a8:	461a      	movge	r2, r3
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	4691      	mov	r9, r2
 800c6ae:	dc37      	bgt.n	800c720 <_printf_float+0x374>
 800c6b0:	f04f 0b00 	mov.w	fp, #0
 800c6b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6b8:	f104 021a 	add.w	r2, r4, #26
 800c6bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6be:	9305      	str	r3, [sp, #20]
 800c6c0:	eba3 0309 	sub.w	r3, r3, r9
 800c6c4:	455b      	cmp	r3, fp
 800c6c6:	dc33      	bgt.n	800c730 <_printf_float+0x384>
 800c6c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	db3b      	blt.n	800c748 <_printf_float+0x39c>
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	07da      	lsls	r2, r3, #31
 800c6d4:	d438      	bmi.n	800c748 <_printf_float+0x39c>
 800c6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d8:	9a05      	ldr	r2, [sp, #20]
 800c6da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6dc:	1a9a      	subs	r2, r3, r2
 800c6de:	eba3 0901 	sub.w	r9, r3, r1
 800c6e2:	4591      	cmp	r9, r2
 800c6e4:	bfa8      	it	ge
 800c6e6:	4691      	movge	r9, r2
 800c6e8:	f1b9 0f00 	cmp.w	r9, #0
 800c6ec:	dc35      	bgt.n	800c75a <_printf_float+0x3ae>
 800c6ee:	f04f 0800 	mov.w	r8, #0
 800c6f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6f6:	f104 0a1a 	add.w	sl, r4, #26
 800c6fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6fe:	1a9b      	subs	r3, r3, r2
 800c700:	eba3 0309 	sub.w	r3, r3, r9
 800c704:	4543      	cmp	r3, r8
 800c706:	f77f af79 	ble.w	800c5fc <_printf_float+0x250>
 800c70a:	2301      	movs	r3, #1
 800c70c:	4652      	mov	r2, sl
 800c70e:	4631      	mov	r1, r6
 800c710:	4628      	mov	r0, r5
 800c712:	47b8      	blx	r7
 800c714:	3001      	adds	r0, #1
 800c716:	f43f aeaa 	beq.w	800c46e <_printf_float+0xc2>
 800c71a:	f108 0801 	add.w	r8, r8, #1
 800c71e:	e7ec      	b.n	800c6fa <_printf_float+0x34e>
 800c720:	4613      	mov	r3, r2
 800c722:	4631      	mov	r1, r6
 800c724:	4642      	mov	r2, r8
 800c726:	4628      	mov	r0, r5
 800c728:	47b8      	blx	r7
 800c72a:	3001      	adds	r0, #1
 800c72c:	d1c0      	bne.n	800c6b0 <_printf_float+0x304>
 800c72e:	e69e      	b.n	800c46e <_printf_float+0xc2>
 800c730:	2301      	movs	r3, #1
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	9205      	str	r2, [sp, #20]
 800c738:	47b8      	blx	r7
 800c73a:	3001      	adds	r0, #1
 800c73c:	f43f ae97 	beq.w	800c46e <_printf_float+0xc2>
 800c740:	9a05      	ldr	r2, [sp, #20]
 800c742:	f10b 0b01 	add.w	fp, fp, #1
 800c746:	e7b9      	b.n	800c6bc <_printf_float+0x310>
 800c748:	ee18 3a10 	vmov	r3, s16
 800c74c:	4652      	mov	r2, sl
 800c74e:	4631      	mov	r1, r6
 800c750:	4628      	mov	r0, r5
 800c752:	47b8      	blx	r7
 800c754:	3001      	adds	r0, #1
 800c756:	d1be      	bne.n	800c6d6 <_printf_float+0x32a>
 800c758:	e689      	b.n	800c46e <_printf_float+0xc2>
 800c75a:	9a05      	ldr	r2, [sp, #20]
 800c75c:	464b      	mov	r3, r9
 800c75e:	4442      	add	r2, r8
 800c760:	4631      	mov	r1, r6
 800c762:	4628      	mov	r0, r5
 800c764:	47b8      	blx	r7
 800c766:	3001      	adds	r0, #1
 800c768:	d1c1      	bne.n	800c6ee <_printf_float+0x342>
 800c76a:	e680      	b.n	800c46e <_printf_float+0xc2>
 800c76c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c76e:	2a01      	cmp	r2, #1
 800c770:	dc01      	bgt.n	800c776 <_printf_float+0x3ca>
 800c772:	07db      	lsls	r3, r3, #31
 800c774:	d538      	bpl.n	800c7e8 <_printf_float+0x43c>
 800c776:	2301      	movs	r3, #1
 800c778:	4642      	mov	r2, r8
 800c77a:	4631      	mov	r1, r6
 800c77c:	4628      	mov	r0, r5
 800c77e:	47b8      	blx	r7
 800c780:	3001      	adds	r0, #1
 800c782:	f43f ae74 	beq.w	800c46e <_printf_float+0xc2>
 800c786:	ee18 3a10 	vmov	r3, s16
 800c78a:	4652      	mov	r2, sl
 800c78c:	4631      	mov	r1, r6
 800c78e:	4628      	mov	r0, r5
 800c790:	47b8      	blx	r7
 800c792:	3001      	adds	r0, #1
 800c794:	f43f ae6b 	beq.w	800c46e <_printf_float+0xc2>
 800c798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c79c:	2200      	movs	r2, #0
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f7f4 f9a2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7a4:	b9d8      	cbnz	r0, 800c7de <_printf_float+0x432>
 800c7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a8:	f108 0201 	add.w	r2, r8, #1
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b8      	blx	r7
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d10e      	bne.n	800c7d6 <_printf_float+0x42a>
 800c7b8:	e659      	b.n	800c46e <_printf_float+0xc2>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4652      	mov	r2, sl
 800c7be:	4631      	mov	r1, r6
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	47b8      	blx	r7
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	f43f ae52 	beq.w	800c46e <_printf_float+0xc2>
 800c7ca:	f108 0801 	add.w	r8, r8, #1
 800c7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	4543      	cmp	r3, r8
 800c7d4:	dcf1      	bgt.n	800c7ba <_printf_float+0x40e>
 800c7d6:	464b      	mov	r3, r9
 800c7d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7dc:	e6dc      	b.n	800c598 <_printf_float+0x1ec>
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	f104 0a1a 	add.w	sl, r4, #26
 800c7e6:	e7f2      	b.n	800c7ce <_printf_float+0x422>
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	4642      	mov	r2, r8
 800c7ec:	e7df      	b.n	800c7ae <_printf_float+0x402>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	464a      	mov	r2, r9
 800c7f2:	4631      	mov	r1, r6
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	47b8      	blx	r7
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	f43f ae38 	beq.w	800c46e <_printf_float+0xc2>
 800c7fe:	f108 0801 	add.w	r8, r8, #1
 800c802:	68e3      	ldr	r3, [r4, #12]
 800c804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c806:	1a5b      	subs	r3, r3, r1
 800c808:	4543      	cmp	r3, r8
 800c80a:	dcf0      	bgt.n	800c7ee <_printf_float+0x442>
 800c80c:	e6fa      	b.n	800c604 <_printf_float+0x258>
 800c80e:	f04f 0800 	mov.w	r8, #0
 800c812:	f104 0919 	add.w	r9, r4, #25
 800c816:	e7f4      	b.n	800c802 <_printf_float+0x456>

0800c818 <_printf_common>:
 800c818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c81c:	4616      	mov	r6, r2
 800c81e:	4699      	mov	r9, r3
 800c820:	688a      	ldr	r2, [r1, #8]
 800c822:	690b      	ldr	r3, [r1, #16]
 800c824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c828:	4293      	cmp	r3, r2
 800c82a:	bfb8      	it	lt
 800c82c:	4613      	movlt	r3, r2
 800c82e:	6033      	str	r3, [r6, #0]
 800c830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c834:	4607      	mov	r7, r0
 800c836:	460c      	mov	r4, r1
 800c838:	b10a      	cbz	r2, 800c83e <_printf_common+0x26>
 800c83a:	3301      	adds	r3, #1
 800c83c:	6033      	str	r3, [r6, #0]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	0699      	lsls	r1, r3, #26
 800c842:	bf42      	ittt	mi
 800c844:	6833      	ldrmi	r3, [r6, #0]
 800c846:	3302      	addmi	r3, #2
 800c848:	6033      	strmi	r3, [r6, #0]
 800c84a:	6825      	ldr	r5, [r4, #0]
 800c84c:	f015 0506 	ands.w	r5, r5, #6
 800c850:	d106      	bne.n	800c860 <_printf_common+0x48>
 800c852:	f104 0a19 	add.w	sl, r4, #25
 800c856:	68e3      	ldr	r3, [r4, #12]
 800c858:	6832      	ldr	r2, [r6, #0]
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	42ab      	cmp	r3, r5
 800c85e:	dc26      	bgt.n	800c8ae <_printf_common+0x96>
 800c860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c864:	1e13      	subs	r3, r2, #0
 800c866:	6822      	ldr	r2, [r4, #0]
 800c868:	bf18      	it	ne
 800c86a:	2301      	movne	r3, #1
 800c86c:	0692      	lsls	r2, r2, #26
 800c86e:	d42b      	bmi.n	800c8c8 <_printf_common+0xb0>
 800c870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c874:	4649      	mov	r1, r9
 800c876:	4638      	mov	r0, r7
 800c878:	47c0      	blx	r8
 800c87a:	3001      	adds	r0, #1
 800c87c:	d01e      	beq.n	800c8bc <_printf_common+0xa4>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	68e5      	ldr	r5, [r4, #12]
 800c882:	6832      	ldr	r2, [r6, #0]
 800c884:	f003 0306 	and.w	r3, r3, #6
 800c888:	2b04      	cmp	r3, #4
 800c88a:	bf08      	it	eq
 800c88c:	1aad      	subeq	r5, r5, r2
 800c88e:	68a3      	ldr	r3, [r4, #8]
 800c890:	6922      	ldr	r2, [r4, #16]
 800c892:	bf0c      	ite	eq
 800c894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c898:	2500      	movne	r5, #0
 800c89a:	4293      	cmp	r3, r2
 800c89c:	bfc4      	itt	gt
 800c89e:	1a9b      	subgt	r3, r3, r2
 800c8a0:	18ed      	addgt	r5, r5, r3
 800c8a2:	2600      	movs	r6, #0
 800c8a4:	341a      	adds	r4, #26
 800c8a6:	42b5      	cmp	r5, r6
 800c8a8:	d11a      	bne.n	800c8e0 <_printf_common+0xc8>
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	e008      	b.n	800c8c0 <_printf_common+0xa8>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	4652      	mov	r2, sl
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	4638      	mov	r0, r7
 800c8b6:	47c0      	blx	r8
 800c8b8:	3001      	adds	r0, #1
 800c8ba:	d103      	bne.n	800c8c4 <_printf_common+0xac>
 800c8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	e7c6      	b.n	800c856 <_printf_common+0x3e>
 800c8c8:	18e1      	adds	r1, r4, r3
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	2030      	movs	r0, #48	; 0x30
 800c8ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8d2:	4422      	add	r2, r4
 800c8d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8dc:	3302      	adds	r3, #2
 800c8de:	e7c7      	b.n	800c870 <_printf_common+0x58>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	47c0      	blx	r8
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d0e6      	beq.n	800c8bc <_printf_common+0xa4>
 800c8ee:	3601      	adds	r6, #1
 800c8f0:	e7d9      	b.n	800c8a6 <_printf_common+0x8e>
	...

0800c8f4 <_printf_i>:
 800c8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	7e0f      	ldrb	r7, [r1, #24]
 800c8fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8fc:	2f78      	cmp	r7, #120	; 0x78
 800c8fe:	4691      	mov	r9, r2
 800c900:	4680      	mov	r8, r0
 800c902:	460c      	mov	r4, r1
 800c904:	469a      	mov	sl, r3
 800c906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c90a:	d807      	bhi.n	800c91c <_printf_i+0x28>
 800c90c:	2f62      	cmp	r7, #98	; 0x62
 800c90e:	d80a      	bhi.n	800c926 <_printf_i+0x32>
 800c910:	2f00      	cmp	r7, #0
 800c912:	f000 80d8 	beq.w	800cac6 <_printf_i+0x1d2>
 800c916:	2f58      	cmp	r7, #88	; 0x58
 800c918:	f000 80a3 	beq.w	800ca62 <_printf_i+0x16e>
 800c91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c924:	e03a      	b.n	800c99c <_printf_i+0xa8>
 800c926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c92a:	2b15      	cmp	r3, #21
 800c92c:	d8f6      	bhi.n	800c91c <_printf_i+0x28>
 800c92e:	a101      	add	r1, pc, #4	; (adr r1, 800c934 <_printf_i+0x40>)
 800c930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c934:	0800c98d 	.word	0x0800c98d
 800c938:	0800c9a1 	.word	0x0800c9a1
 800c93c:	0800c91d 	.word	0x0800c91d
 800c940:	0800c91d 	.word	0x0800c91d
 800c944:	0800c91d 	.word	0x0800c91d
 800c948:	0800c91d 	.word	0x0800c91d
 800c94c:	0800c9a1 	.word	0x0800c9a1
 800c950:	0800c91d 	.word	0x0800c91d
 800c954:	0800c91d 	.word	0x0800c91d
 800c958:	0800c91d 	.word	0x0800c91d
 800c95c:	0800c91d 	.word	0x0800c91d
 800c960:	0800caad 	.word	0x0800caad
 800c964:	0800c9d1 	.word	0x0800c9d1
 800c968:	0800ca8f 	.word	0x0800ca8f
 800c96c:	0800c91d 	.word	0x0800c91d
 800c970:	0800c91d 	.word	0x0800c91d
 800c974:	0800cacf 	.word	0x0800cacf
 800c978:	0800c91d 	.word	0x0800c91d
 800c97c:	0800c9d1 	.word	0x0800c9d1
 800c980:	0800c91d 	.word	0x0800c91d
 800c984:	0800c91d 	.word	0x0800c91d
 800c988:	0800ca97 	.word	0x0800ca97
 800c98c:	682b      	ldr	r3, [r5, #0]
 800c98e:	1d1a      	adds	r2, r3, #4
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	602a      	str	r2, [r5, #0]
 800c994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c99c:	2301      	movs	r3, #1
 800c99e:	e0a3      	b.n	800cae8 <_printf_i+0x1f4>
 800c9a0:	6820      	ldr	r0, [r4, #0]
 800c9a2:	6829      	ldr	r1, [r5, #0]
 800c9a4:	0606      	lsls	r6, r0, #24
 800c9a6:	f101 0304 	add.w	r3, r1, #4
 800c9aa:	d50a      	bpl.n	800c9c2 <_printf_i+0xce>
 800c9ac:	680e      	ldr	r6, [r1, #0]
 800c9ae:	602b      	str	r3, [r5, #0]
 800c9b0:	2e00      	cmp	r6, #0
 800c9b2:	da03      	bge.n	800c9bc <_printf_i+0xc8>
 800c9b4:	232d      	movs	r3, #45	; 0x2d
 800c9b6:	4276      	negs	r6, r6
 800c9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9bc:	485e      	ldr	r0, [pc, #376]	; (800cb38 <_printf_i+0x244>)
 800c9be:	230a      	movs	r3, #10
 800c9c0:	e019      	b.n	800c9f6 <_printf_i+0x102>
 800c9c2:	680e      	ldr	r6, [r1, #0]
 800c9c4:	602b      	str	r3, [r5, #0]
 800c9c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9ca:	bf18      	it	ne
 800c9cc:	b236      	sxthne	r6, r6
 800c9ce:	e7ef      	b.n	800c9b0 <_printf_i+0xbc>
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	6820      	ldr	r0, [r4, #0]
 800c9d4:	1d19      	adds	r1, r3, #4
 800c9d6:	6029      	str	r1, [r5, #0]
 800c9d8:	0601      	lsls	r1, r0, #24
 800c9da:	d501      	bpl.n	800c9e0 <_printf_i+0xec>
 800c9dc:	681e      	ldr	r6, [r3, #0]
 800c9de:	e002      	b.n	800c9e6 <_printf_i+0xf2>
 800c9e0:	0646      	lsls	r6, r0, #25
 800c9e2:	d5fb      	bpl.n	800c9dc <_printf_i+0xe8>
 800c9e4:	881e      	ldrh	r6, [r3, #0]
 800c9e6:	4854      	ldr	r0, [pc, #336]	; (800cb38 <_printf_i+0x244>)
 800c9e8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9ea:	bf0c      	ite	eq
 800c9ec:	2308      	moveq	r3, #8
 800c9ee:	230a      	movne	r3, #10
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9f6:	6865      	ldr	r5, [r4, #4]
 800c9f8:	60a5      	str	r5, [r4, #8]
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	bfa2      	ittt	ge
 800c9fe:	6821      	ldrge	r1, [r4, #0]
 800ca00:	f021 0104 	bicge.w	r1, r1, #4
 800ca04:	6021      	strge	r1, [r4, #0]
 800ca06:	b90e      	cbnz	r6, 800ca0c <_printf_i+0x118>
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	d04d      	beq.n	800caa8 <_printf_i+0x1b4>
 800ca0c:	4615      	mov	r5, r2
 800ca0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca12:	fb03 6711 	mls	r7, r3, r1, r6
 800ca16:	5dc7      	ldrb	r7, [r0, r7]
 800ca18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca1c:	4637      	mov	r7, r6
 800ca1e:	42bb      	cmp	r3, r7
 800ca20:	460e      	mov	r6, r1
 800ca22:	d9f4      	bls.n	800ca0e <_printf_i+0x11a>
 800ca24:	2b08      	cmp	r3, #8
 800ca26:	d10b      	bne.n	800ca40 <_printf_i+0x14c>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	07de      	lsls	r6, r3, #31
 800ca2c:	d508      	bpl.n	800ca40 <_printf_i+0x14c>
 800ca2e:	6923      	ldr	r3, [r4, #16]
 800ca30:	6861      	ldr	r1, [r4, #4]
 800ca32:	4299      	cmp	r1, r3
 800ca34:	bfde      	ittt	le
 800ca36:	2330      	movle	r3, #48	; 0x30
 800ca38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca40:	1b52      	subs	r2, r2, r5
 800ca42:	6122      	str	r2, [r4, #16]
 800ca44:	f8cd a000 	str.w	sl, [sp]
 800ca48:	464b      	mov	r3, r9
 800ca4a:	aa03      	add	r2, sp, #12
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4640      	mov	r0, r8
 800ca50:	f7ff fee2 	bl	800c818 <_printf_common>
 800ca54:	3001      	adds	r0, #1
 800ca56:	d14c      	bne.n	800caf2 <_printf_i+0x1fe>
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	b004      	add	sp, #16
 800ca5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca62:	4835      	ldr	r0, [pc, #212]	; (800cb38 <_printf_i+0x244>)
 800ca64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca68:	6829      	ldr	r1, [r5, #0]
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca70:	6029      	str	r1, [r5, #0]
 800ca72:	061d      	lsls	r5, r3, #24
 800ca74:	d514      	bpl.n	800caa0 <_printf_i+0x1ac>
 800ca76:	07df      	lsls	r7, r3, #31
 800ca78:	bf44      	itt	mi
 800ca7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ca7e:	6023      	strmi	r3, [r4, #0]
 800ca80:	b91e      	cbnz	r6, 800ca8a <_printf_i+0x196>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	f023 0320 	bic.w	r3, r3, #32
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	2310      	movs	r3, #16
 800ca8c:	e7b0      	b.n	800c9f0 <_printf_i+0xfc>
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	f043 0320 	orr.w	r3, r3, #32
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	2378      	movs	r3, #120	; 0x78
 800ca98:	4828      	ldr	r0, [pc, #160]	; (800cb3c <_printf_i+0x248>)
 800ca9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca9e:	e7e3      	b.n	800ca68 <_printf_i+0x174>
 800caa0:	0659      	lsls	r1, r3, #25
 800caa2:	bf48      	it	mi
 800caa4:	b2b6      	uxthmi	r6, r6
 800caa6:	e7e6      	b.n	800ca76 <_printf_i+0x182>
 800caa8:	4615      	mov	r5, r2
 800caaa:	e7bb      	b.n	800ca24 <_printf_i+0x130>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	6826      	ldr	r6, [r4, #0]
 800cab0:	6961      	ldr	r1, [r4, #20]
 800cab2:	1d18      	adds	r0, r3, #4
 800cab4:	6028      	str	r0, [r5, #0]
 800cab6:	0635      	lsls	r5, r6, #24
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	d501      	bpl.n	800cac0 <_printf_i+0x1cc>
 800cabc:	6019      	str	r1, [r3, #0]
 800cabe:	e002      	b.n	800cac6 <_printf_i+0x1d2>
 800cac0:	0670      	lsls	r0, r6, #25
 800cac2:	d5fb      	bpl.n	800cabc <_printf_i+0x1c8>
 800cac4:	8019      	strh	r1, [r3, #0]
 800cac6:	2300      	movs	r3, #0
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	4615      	mov	r5, r2
 800cacc:	e7ba      	b.n	800ca44 <_printf_i+0x150>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	602a      	str	r2, [r5, #0]
 800cad4:	681d      	ldr	r5, [r3, #0]
 800cad6:	6862      	ldr	r2, [r4, #4]
 800cad8:	2100      	movs	r1, #0
 800cada:	4628      	mov	r0, r5
 800cadc:	f7f3 fb90 	bl	8000200 <memchr>
 800cae0:	b108      	cbz	r0, 800cae6 <_printf_i+0x1f2>
 800cae2:	1b40      	subs	r0, r0, r5
 800cae4:	6060      	str	r0, [r4, #4]
 800cae6:	6863      	ldr	r3, [r4, #4]
 800cae8:	6123      	str	r3, [r4, #16]
 800caea:	2300      	movs	r3, #0
 800caec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf0:	e7a8      	b.n	800ca44 <_printf_i+0x150>
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	462a      	mov	r2, r5
 800caf6:	4649      	mov	r1, r9
 800caf8:	4640      	mov	r0, r8
 800cafa:	47d0      	blx	sl
 800cafc:	3001      	adds	r0, #1
 800cafe:	d0ab      	beq.n	800ca58 <_printf_i+0x164>
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	079b      	lsls	r3, r3, #30
 800cb04:	d413      	bmi.n	800cb2e <_printf_i+0x23a>
 800cb06:	68e0      	ldr	r0, [r4, #12]
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	4298      	cmp	r0, r3
 800cb0c:	bfb8      	it	lt
 800cb0e:	4618      	movlt	r0, r3
 800cb10:	e7a4      	b.n	800ca5c <_printf_i+0x168>
 800cb12:	2301      	movs	r3, #1
 800cb14:	4632      	mov	r2, r6
 800cb16:	4649      	mov	r1, r9
 800cb18:	4640      	mov	r0, r8
 800cb1a:	47d0      	blx	sl
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d09b      	beq.n	800ca58 <_printf_i+0x164>
 800cb20:	3501      	adds	r5, #1
 800cb22:	68e3      	ldr	r3, [r4, #12]
 800cb24:	9903      	ldr	r1, [sp, #12]
 800cb26:	1a5b      	subs	r3, r3, r1
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	dcf2      	bgt.n	800cb12 <_printf_i+0x21e>
 800cb2c:	e7eb      	b.n	800cb06 <_printf_i+0x212>
 800cb2e:	2500      	movs	r5, #0
 800cb30:	f104 0619 	add.w	r6, r4, #25
 800cb34:	e7f5      	b.n	800cb22 <_printf_i+0x22e>
 800cb36:	bf00      	nop
 800cb38:	080124e9 	.word	0x080124e9
 800cb3c:	080124fa 	.word	0x080124fa

0800cb40 <_scanf_float>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	b087      	sub	sp, #28
 800cb46:	4617      	mov	r7, r2
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	688b      	ldr	r3, [r1, #8]
 800cb4c:	1e5a      	subs	r2, r3, #1
 800cb4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb52:	bf83      	ittte	hi
 800cb54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cb58:	195b      	addhi	r3, r3, r5
 800cb5a:	9302      	strhi	r3, [sp, #8]
 800cb5c:	2300      	movls	r3, #0
 800cb5e:	bf86      	itte	hi
 800cb60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cb64:	608b      	strhi	r3, [r1, #8]
 800cb66:	9302      	strls	r3, [sp, #8]
 800cb68:	680b      	ldr	r3, [r1, #0]
 800cb6a:	468b      	mov	fp, r1
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cb72:	f84b 3b1c 	str.w	r3, [fp], #28
 800cb76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb7a:	4680      	mov	r8, r0
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	465e      	mov	r6, fp
 800cb80:	46aa      	mov	sl, r5
 800cb82:	46a9      	mov	r9, r5
 800cb84:	9501      	str	r5, [sp, #4]
 800cb86:	68a2      	ldr	r2, [r4, #8]
 800cb88:	b152      	cbz	r2, 800cba0 <_scanf_float+0x60>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b4e      	cmp	r3, #78	; 0x4e
 800cb90:	d864      	bhi.n	800cc5c <_scanf_float+0x11c>
 800cb92:	2b40      	cmp	r3, #64	; 0x40
 800cb94:	d83c      	bhi.n	800cc10 <_scanf_float+0xd0>
 800cb96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cb9a:	b2c8      	uxtb	r0, r1
 800cb9c:	280e      	cmp	r0, #14
 800cb9e:	d93a      	bls.n	800cc16 <_scanf_float+0xd6>
 800cba0:	f1b9 0f00 	cmp.w	r9, #0
 800cba4:	d003      	beq.n	800cbae <_scanf_float+0x6e>
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbb2:	f1ba 0f01 	cmp.w	sl, #1
 800cbb6:	f200 8113 	bhi.w	800cde0 <_scanf_float+0x2a0>
 800cbba:	455e      	cmp	r6, fp
 800cbbc:	f200 8105 	bhi.w	800cdca <_scanf_float+0x28a>
 800cbc0:	2501      	movs	r5, #1
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	b007      	add	sp, #28
 800cbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cbce:	2a0d      	cmp	r2, #13
 800cbd0:	d8e6      	bhi.n	800cba0 <_scanf_float+0x60>
 800cbd2:	a101      	add	r1, pc, #4	; (adr r1, 800cbd8 <_scanf_float+0x98>)
 800cbd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cbd8:	0800cd17 	.word	0x0800cd17
 800cbdc:	0800cba1 	.word	0x0800cba1
 800cbe0:	0800cba1 	.word	0x0800cba1
 800cbe4:	0800cba1 	.word	0x0800cba1
 800cbe8:	0800cd77 	.word	0x0800cd77
 800cbec:	0800cd4f 	.word	0x0800cd4f
 800cbf0:	0800cba1 	.word	0x0800cba1
 800cbf4:	0800cba1 	.word	0x0800cba1
 800cbf8:	0800cd25 	.word	0x0800cd25
 800cbfc:	0800cba1 	.word	0x0800cba1
 800cc00:	0800cba1 	.word	0x0800cba1
 800cc04:	0800cba1 	.word	0x0800cba1
 800cc08:	0800cba1 	.word	0x0800cba1
 800cc0c:	0800ccdd 	.word	0x0800ccdd
 800cc10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cc14:	e7db      	b.n	800cbce <_scanf_float+0x8e>
 800cc16:	290e      	cmp	r1, #14
 800cc18:	d8c2      	bhi.n	800cba0 <_scanf_float+0x60>
 800cc1a:	a001      	add	r0, pc, #4	; (adr r0, 800cc20 <_scanf_float+0xe0>)
 800cc1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc20:	0800cccf 	.word	0x0800cccf
 800cc24:	0800cba1 	.word	0x0800cba1
 800cc28:	0800cccf 	.word	0x0800cccf
 800cc2c:	0800cd63 	.word	0x0800cd63
 800cc30:	0800cba1 	.word	0x0800cba1
 800cc34:	0800cc7d 	.word	0x0800cc7d
 800cc38:	0800ccb9 	.word	0x0800ccb9
 800cc3c:	0800ccb9 	.word	0x0800ccb9
 800cc40:	0800ccb9 	.word	0x0800ccb9
 800cc44:	0800ccb9 	.word	0x0800ccb9
 800cc48:	0800ccb9 	.word	0x0800ccb9
 800cc4c:	0800ccb9 	.word	0x0800ccb9
 800cc50:	0800ccb9 	.word	0x0800ccb9
 800cc54:	0800ccb9 	.word	0x0800ccb9
 800cc58:	0800ccb9 	.word	0x0800ccb9
 800cc5c:	2b6e      	cmp	r3, #110	; 0x6e
 800cc5e:	d809      	bhi.n	800cc74 <_scanf_float+0x134>
 800cc60:	2b60      	cmp	r3, #96	; 0x60
 800cc62:	d8b2      	bhi.n	800cbca <_scanf_float+0x8a>
 800cc64:	2b54      	cmp	r3, #84	; 0x54
 800cc66:	d077      	beq.n	800cd58 <_scanf_float+0x218>
 800cc68:	2b59      	cmp	r3, #89	; 0x59
 800cc6a:	d199      	bne.n	800cba0 <_scanf_float+0x60>
 800cc6c:	2d07      	cmp	r5, #7
 800cc6e:	d197      	bne.n	800cba0 <_scanf_float+0x60>
 800cc70:	2508      	movs	r5, #8
 800cc72:	e029      	b.n	800ccc8 <_scanf_float+0x188>
 800cc74:	2b74      	cmp	r3, #116	; 0x74
 800cc76:	d06f      	beq.n	800cd58 <_scanf_float+0x218>
 800cc78:	2b79      	cmp	r3, #121	; 0x79
 800cc7a:	e7f6      	b.n	800cc6a <_scanf_float+0x12a>
 800cc7c:	6821      	ldr	r1, [r4, #0]
 800cc7e:	05c8      	lsls	r0, r1, #23
 800cc80:	d51a      	bpl.n	800ccb8 <_scanf_float+0x178>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cc88:	6021      	str	r1, [r4, #0]
 800cc8a:	f109 0901 	add.w	r9, r9, #1
 800cc8e:	b11b      	cbz	r3, 800cc98 <_scanf_float+0x158>
 800cc90:	3b01      	subs	r3, #1
 800cc92:	3201      	adds	r2, #1
 800cc94:	9302      	str	r3, [sp, #8]
 800cc96:	60a2      	str	r2, [r4, #8]
 800cc98:	68a3      	ldr	r3, [r4, #8]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	60a3      	str	r3, [r4, #8]
 800cc9e:	6923      	ldr	r3, [r4, #16]
 800cca0:	3301      	adds	r3, #1
 800cca2:	6123      	str	r3, [r4, #16]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	607b      	str	r3, [r7, #4]
 800ccac:	f340 8084 	ble.w	800cdb8 <_scanf_float+0x278>
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	603b      	str	r3, [r7, #0]
 800ccb6:	e766      	b.n	800cb86 <_scanf_float+0x46>
 800ccb8:	eb1a 0f05 	cmn.w	sl, r5
 800ccbc:	f47f af70 	bne.w	800cba0 <_scanf_float+0x60>
 800ccc0:	6822      	ldr	r2, [r4, #0]
 800ccc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ccc6:	6022      	str	r2, [r4, #0]
 800ccc8:	f806 3b01 	strb.w	r3, [r6], #1
 800cccc:	e7e4      	b.n	800cc98 <_scanf_float+0x158>
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	0610      	lsls	r0, r2, #24
 800ccd2:	f57f af65 	bpl.w	800cba0 <_scanf_float+0x60>
 800ccd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccda:	e7f4      	b.n	800ccc6 <_scanf_float+0x186>
 800ccdc:	f1ba 0f00 	cmp.w	sl, #0
 800cce0:	d10e      	bne.n	800cd00 <_scanf_float+0x1c0>
 800cce2:	f1b9 0f00 	cmp.w	r9, #0
 800cce6:	d10e      	bne.n	800cd06 <_scanf_float+0x1c6>
 800cce8:	6822      	ldr	r2, [r4, #0]
 800ccea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ccee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ccf2:	d108      	bne.n	800cd06 <_scanf_float+0x1c6>
 800ccf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ccf8:	6022      	str	r2, [r4, #0]
 800ccfa:	f04f 0a01 	mov.w	sl, #1
 800ccfe:	e7e3      	b.n	800ccc8 <_scanf_float+0x188>
 800cd00:	f1ba 0f02 	cmp.w	sl, #2
 800cd04:	d055      	beq.n	800cdb2 <_scanf_float+0x272>
 800cd06:	2d01      	cmp	r5, #1
 800cd08:	d002      	beq.n	800cd10 <_scanf_float+0x1d0>
 800cd0a:	2d04      	cmp	r5, #4
 800cd0c:	f47f af48 	bne.w	800cba0 <_scanf_float+0x60>
 800cd10:	3501      	adds	r5, #1
 800cd12:	b2ed      	uxtb	r5, r5
 800cd14:	e7d8      	b.n	800ccc8 <_scanf_float+0x188>
 800cd16:	f1ba 0f01 	cmp.w	sl, #1
 800cd1a:	f47f af41 	bne.w	800cba0 <_scanf_float+0x60>
 800cd1e:	f04f 0a02 	mov.w	sl, #2
 800cd22:	e7d1      	b.n	800ccc8 <_scanf_float+0x188>
 800cd24:	b97d      	cbnz	r5, 800cd46 <_scanf_float+0x206>
 800cd26:	f1b9 0f00 	cmp.w	r9, #0
 800cd2a:	f47f af3c 	bne.w	800cba6 <_scanf_float+0x66>
 800cd2e:	6822      	ldr	r2, [r4, #0]
 800cd30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd38:	f47f af39 	bne.w	800cbae <_scanf_float+0x6e>
 800cd3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd40:	6022      	str	r2, [r4, #0]
 800cd42:	2501      	movs	r5, #1
 800cd44:	e7c0      	b.n	800ccc8 <_scanf_float+0x188>
 800cd46:	2d03      	cmp	r5, #3
 800cd48:	d0e2      	beq.n	800cd10 <_scanf_float+0x1d0>
 800cd4a:	2d05      	cmp	r5, #5
 800cd4c:	e7de      	b.n	800cd0c <_scanf_float+0x1cc>
 800cd4e:	2d02      	cmp	r5, #2
 800cd50:	f47f af26 	bne.w	800cba0 <_scanf_float+0x60>
 800cd54:	2503      	movs	r5, #3
 800cd56:	e7b7      	b.n	800ccc8 <_scanf_float+0x188>
 800cd58:	2d06      	cmp	r5, #6
 800cd5a:	f47f af21 	bne.w	800cba0 <_scanf_float+0x60>
 800cd5e:	2507      	movs	r5, #7
 800cd60:	e7b2      	b.n	800ccc8 <_scanf_float+0x188>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	0591      	lsls	r1, r2, #22
 800cd66:	f57f af1b 	bpl.w	800cba0 <_scanf_float+0x60>
 800cd6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cd6e:	6022      	str	r2, [r4, #0]
 800cd70:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd74:	e7a8      	b.n	800ccc8 <_scanf_float+0x188>
 800cd76:	6822      	ldr	r2, [r4, #0]
 800cd78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cd7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cd80:	d006      	beq.n	800cd90 <_scanf_float+0x250>
 800cd82:	0550      	lsls	r0, r2, #21
 800cd84:	f57f af0c 	bpl.w	800cba0 <_scanf_float+0x60>
 800cd88:	f1b9 0f00 	cmp.w	r9, #0
 800cd8c:	f43f af0f 	beq.w	800cbae <_scanf_float+0x6e>
 800cd90:	0591      	lsls	r1, r2, #22
 800cd92:	bf58      	it	pl
 800cd94:	9901      	ldrpl	r1, [sp, #4]
 800cd96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd9a:	bf58      	it	pl
 800cd9c:	eba9 0101 	subpl.w	r1, r9, r1
 800cda0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cda4:	bf58      	it	pl
 800cda6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cdaa:	6022      	str	r2, [r4, #0]
 800cdac:	f04f 0900 	mov.w	r9, #0
 800cdb0:	e78a      	b.n	800ccc8 <_scanf_float+0x188>
 800cdb2:	f04f 0a03 	mov.w	sl, #3
 800cdb6:	e787      	b.n	800ccc8 <_scanf_float+0x188>
 800cdb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4798      	blx	r3
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	f43f aedf 	beq.w	800cb86 <_scanf_float+0x46>
 800cdc8:	e6ea      	b.n	800cba0 <_scanf_float+0x60>
 800cdca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdd2:	463a      	mov	r2, r7
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	4798      	blx	r3
 800cdd8:	6923      	ldr	r3, [r4, #16]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	6123      	str	r3, [r4, #16]
 800cdde:	e6ec      	b.n	800cbba <_scanf_float+0x7a>
 800cde0:	1e6b      	subs	r3, r5, #1
 800cde2:	2b06      	cmp	r3, #6
 800cde4:	d825      	bhi.n	800ce32 <_scanf_float+0x2f2>
 800cde6:	2d02      	cmp	r5, #2
 800cde8:	d836      	bhi.n	800ce58 <_scanf_float+0x318>
 800cdea:	455e      	cmp	r6, fp
 800cdec:	f67f aee8 	bls.w	800cbc0 <_scanf_float+0x80>
 800cdf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdf4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdf8:	463a      	mov	r2, r7
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4798      	blx	r3
 800cdfe:	6923      	ldr	r3, [r4, #16]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	6123      	str	r3, [r4, #16]
 800ce04:	e7f1      	b.n	800cdea <_scanf_float+0x2aa>
 800ce06:	9802      	ldr	r0, [sp, #8]
 800ce08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ce10:	9002      	str	r0, [sp, #8]
 800ce12:	463a      	mov	r2, r7
 800ce14:	4640      	mov	r0, r8
 800ce16:	4798      	blx	r3
 800ce18:	6923      	ldr	r3, [r4, #16]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	6123      	str	r3, [r4, #16]
 800ce1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce22:	fa5f fa8a 	uxtb.w	sl, sl
 800ce26:	f1ba 0f02 	cmp.w	sl, #2
 800ce2a:	d1ec      	bne.n	800ce06 <_scanf_float+0x2c6>
 800ce2c:	3d03      	subs	r5, #3
 800ce2e:	b2ed      	uxtb	r5, r5
 800ce30:	1b76      	subs	r6, r6, r5
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	05da      	lsls	r2, r3, #23
 800ce36:	d52f      	bpl.n	800ce98 <_scanf_float+0x358>
 800ce38:	055b      	lsls	r3, r3, #21
 800ce3a:	d510      	bpl.n	800ce5e <_scanf_float+0x31e>
 800ce3c:	455e      	cmp	r6, fp
 800ce3e:	f67f aebf 	bls.w	800cbc0 <_scanf_float+0x80>
 800ce42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce4a:	463a      	mov	r2, r7
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4798      	blx	r3
 800ce50:	6923      	ldr	r3, [r4, #16]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	6123      	str	r3, [r4, #16]
 800ce56:	e7f1      	b.n	800ce3c <_scanf_float+0x2fc>
 800ce58:	46aa      	mov	sl, r5
 800ce5a:	9602      	str	r6, [sp, #8]
 800ce5c:	e7df      	b.n	800ce1e <_scanf_float+0x2de>
 800ce5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce62:	6923      	ldr	r3, [r4, #16]
 800ce64:	2965      	cmp	r1, #101	; 0x65
 800ce66:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce6a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ce6e:	6123      	str	r3, [r4, #16]
 800ce70:	d00c      	beq.n	800ce8c <_scanf_float+0x34c>
 800ce72:	2945      	cmp	r1, #69	; 0x45
 800ce74:	d00a      	beq.n	800ce8c <_scanf_float+0x34c>
 800ce76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce7a:	463a      	mov	r2, r7
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	4798      	blx	r3
 800ce80:	6923      	ldr	r3, [r4, #16]
 800ce82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	1eb5      	subs	r5, r6, #2
 800ce8a:	6123      	str	r3, [r4, #16]
 800ce8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce90:	463a      	mov	r2, r7
 800ce92:	4640      	mov	r0, r8
 800ce94:	4798      	blx	r3
 800ce96:	462e      	mov	r6, r5
 800ce98:	6825      	ldr	r5, [r4, #0]
 800ce9a:	f015 0510 	ands.w	r5, r5, #16
 800ce9e:	d159      	bne.n	800cf54 <_scanf_float+0x414>
 800cea0:	7035      	strb	r5, [r6, #0]
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ceac:	d11b      	bne.n	800cee6 <_scanf_float+0x3a6>
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	454b      	cmp	r3, r9
 800ceb2:	eba3 0209 	sub.w	r2, r3, r9
 800ceb6:	d123      	bne.n	800cf00 <_scanf_float+0x3c0>
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4659      	mov	r1, fp
 800cebc:	4640      	mov	r0, r8
 800cebe:	f000 ffa5 	bl	800de0c <_strtod_r>
 800cec2:	6822      	ldr	r2, [r4, #0]
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	f012 0f02 	tst.w	r2, #2
 800ceca:	ec57 6b10 	vmov	r6, r7, d0
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	d021      	beq.n	800cf16 <_scanf_float+0x3d6>
 800ced2:	9903      	ldr	r1, [sp, #12]
 800ced4:	1d1a      	adds	r2, r3, #4
 800ced6:	600a      	str	r2, [r1, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	e9c3 6700 	strd	r6, r7, [r3]
 800cede:	68e3      	ldr	r3, [r4, #12]
 800cee0:	3301      	adds	r3, #1
 800cee2:	60e3      	str	r3, [r4, #12]
 800cee4:	e66d      	b.n	800cbc2 <_scanf_float+0x82>
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d0e5      	beq.n	800ceb8 <_scanf_float+0x378>
 800ceec:	9905      	ldr	r1, [sp, #20]
 800ceee:	230a      	movs	r3, #10
 800cef0:	462a      	mov	r2, r5
 800cef2:	3101      	adds	r1, #1
 800cef4:	4640      	mov	r0, r8
 800cef6:	f001 f81d 	bl	800df34 <_strtol_r>
 800cefa:	9b04      	ldr	r3, [sp, #16]
 800cefc:	9e05      	ldr	r6, [sp, #20]
 800cefe:	1ac2      	subs	r2, r0, r3
 800cf00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cf04:	429e      	cmp	r6, r3
 800cf06:	bf28      	it	cs
 800cf08:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cf0c:	4912      	ldr	r1, [pc, #72]	; (800cf58 <_scanf_float+0x418>)
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f000 f8a6 	bl	800d060 <siprintf>
 800cf14:	e7d0      	b.n	800ceb8 <_scanf_float+0x378>
 800cf16:	9903      	ldr	r1, [sp, #12]
 800cf18:	f012 0f04 	tst.w	r2, #4
 800cf1c:	f103 0204 	add.w	r2, r3, #4
 800cf20:	600a      	str	r2, [r1, #0]
 800cf22:	d1d9      	bne.n	800ced8 <_scanf_float+0x398>
 800cf24:	f8d3 8000 	ldr.w	r8, [r3]
 800cf28:	ee10 2a10 	vmov	r2, s0
 800cf2c:	ee10 0a10 	vmov	r0, s0
 800cf30:	463b      	mov	r3, r7
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 fe0a 	bl	8000b4c <__aeabi_dcmpun>
 800cf38:	b128      	cbz	r0, 800cf46 <_scanf_float+0x406>
 800cf3a:	4808      	ldr	r0, [pc, #32]	; (800cf5c <_scanf_float+0x41c>)
 800cf3c:	f000 f88a 	bl	800d054 <nanf>
 800cf40:	ed88 0a00 	vstr	s0, [r8]
 800cf44:	e7cb      	b.n	800cede <_scanf_float+0x39e>
 800cf46:	4630      	mov	r0, r6
 800cf48:	4639      	mov	r1, r7
 800cf4a:	f7f3 fe5d 	bl	8000c08 <__aeabi_d2f>
 800cf4e:	f8c8 0000 	str.w	r0, [r8]
 800cf52:	e7c4      	b.n	800cede <_scanf_float+0x39e>
 800cf54:	2500      	movs	r5, #0
 800cf56:	e634      	b.n	800cbc2 <_scanf_float+0x82>
 800cf58:	0801250b 	.word	0x0801250b
 800cf5c:	0801235f 	.word	0x0801235f

0800cf60 <cleanup_glue>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	6809      	ldr	r1, [r1, #0]
 800cf66:	4605      	mov	r5, r0
 800cf68:	b109      	cbz	r1, 800cf6e <cleanup_glue+0xe>
 800cf6a:	f7ff fff9 	bl	800cf60 <cleanup_glue>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	4628      	mov	r0, r5
 800cf72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf76:	f003 b913 	b.w	80101a0 <_free_r>
	...

0800cf7c <_reclaim_reent>:
 800cf7c:	4b2c      	ldr	r3, [pc, #176]	; (800d030 <_reclaim_reent+0xb4>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4283      	cmp	r3, r0
 800cf82:	b570      	push	{r4, r5, r6, lr}
 800cf84:	4604      	mov	r4, r0
 800cf86:	d051      	beq.n	800d02c <_reclaim_reent+0xb0>
 800cf88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cf8a:	b143      	cbz	r3, 800cf9e <_reclaim_reent+0x22>
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d14a      	bne.n	800d028 <_reclaim_reent+0xac>
 800cf92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf94:	6819      	ldr	r1, [r3, #0]
 800cf96:	b111      	cbz	r1, 800cf9e <_reclaim_reent+0x22>
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f003 f901 	bl	80101a0 <_free_r>
 800cf9e:	6961      	ldr	r1, [r4, #20]
 800cfa0:	b111      	cbz	r1, 800cfa8 <_reclaim_reent+0x2c>
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f003 f8fc 	bl	80101a0 <_free_r>
 800cfa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cfaa:	b111      	cbz	r1, 800cfb2 <_reclaim_reent+0x36>
 800cfac:	4620      	mov	r0, r4
 800cfae:	f003 f8f7 	bl	80101a0 <_free_r>
 800cfb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cfb4:	b111      	cbz	r1, 800cfbc <_reclaim_reent+0x40>
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f003 f8f2 	bl	80101a0 <_free_r>
 800cfbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cfbe:	b111      	cbz	r1, 800cfc6 <_reclaim_reent+0x4a>
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f003 f8ed 	bl	80101a0 <_free_r>
 800cfc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cfc8:	b111      	cbz	r1, 800cfd0 <_reclaim_reent+0x54>
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f003 f8e8 	bl	80101a0 <_free_r>
 800cfd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cfd2:	b111      	cbz	r1, 800cfda <_reclaim_reent+0x5e>
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f003 f8e3 	bl	80101a0 <_free_r>
 800cfda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cfdc:	b111      	cbz	r1, 800cfe4 <_reclaim_reent+0x68>
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f003 f8de 	bl	80101a0 <_free_r>
 800cfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfe6:	b111      	cbz	r1, 800cfee <_reclaim_reent+0x72>
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f003 f8d9 	bl	80101a0 <_free_r>
 800cfee:	69a3      	ldr	r3, [r4, #24]
 800cff0:	b1e3      	cbz	r3, 800d02c <_reclaim_reent+0xb0>
 800cff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cff4:	4620      	mov	r0, r4
 800cff6:	4798      	blx	r3
 800cff8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cffa:	b1b9      	cbz	r1, 800d02c <_reclaim_reent+0xb0>
 800cffc:	4620      	mov	r0, r4
 800cffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d002:	f7ff bfad 	b.w	800cf60 <cleanup_glue>
 800d006:	5949      	ldr	r1, [r1, r5]
 800d008:	b941      	cbnz	r1, 800d01c <_reclaim_reent+0xa0>
 800d00a:	3504      	adds	r5, #4
 800d00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d00e:	2d80      	cmp	r5, #128	; 0x80
 800d010:	68d9      	ldr	r1, [r3, #12]
 800d012:	d1f8      	bne.n	800d006 <_reclaim_reent+0x8a>
 800d014:	4620      	mov	r0, r4
 800d016:	f003 f8c3 	bl	80101a0 <_free_r>
 800d01a:	e7ba      	b.n	800cf92 <_reclaim_reent+0x16>
 800d01c:	680e      	ldr	r6, [r1, #0]
 800d01e:	4620      	mov	r0, r4
 800d020:	f003 f8be 	bl	80101a0 <_free_r>
 800d024:	4631      	mov	r1, r6
 800d026:	e7ef      	b.n	800d008 <_reclaim_reent+0x8c>
 800d028:	2500      	movs	r5, #0
 800d02a:	e7ef      	b.n	800d00c <_reclaim_reent+0x90>
 800d02c:	bd70      	pop	{r4, r5, r6, pc}
 800d02e:	bf00      	nop
 800d030:	2000023c 	.word	0x2000023c

0800d034 <_sbrk_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d06      	ldr	r5, [pc, #24]	; (800d050 <_sbrk_r+0x1c>)
 800d038:	2300      	movs	r3, #0
 800d03a:	4604      	mov	r4, r0
 800d03c:	4608      	mov	r0, r1
 800d03e:	602b      	str	r3, [r5, #0]
 800d040:	f7f5 ff5a 	bl	8002ef8 <_sbrk>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_sbrk_r+0x1a>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_sbrk_r+0x1a>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	20013300 	.word	0x20013300

0800d054 <nanf>:
 800d054:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d05c <nanf+0x8>
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	7fc00000 	.word	0x7fc00000

0800d060 <siprintf>:
 800d060:	b40e      	push	{r1, r2, r3}
 800d062:	b500      	push	{lr}
 800d064:	b09c      	sub	sp, #112	; 0x70
 800d066:	ab1d      	add	r3, sp, #116	; 0x74
 800d068:	9002      	str	r0, [sp, #8]
 800d06a:	9006      	str	r0, [sp, #24]
 800d06c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d070:	4809      	ldr	r0, [pc, #36]	; (800d098 <siprintf+0x38>)
 800d072:	9107      	str	r1, [sp, #28]
 800d074:	9104      	str	r1, [sp, #16]
 800d076:	4909      	ldr	r1, [pc, #36]	; (800d09c <siprintf+0x3c>)
 800d078:	f853 2b04 	ldr.w	r2, [r3], #4
 800d07c:	9105      	str	r1, [sp, #20]
 800d07e:	6800      	ldr	r0, [r0, #0]
 800d080:	9301      	str	r3, [sp, #4]
 800d082:	a902      	add	r1, sp, #8
 800d084:	f003 f962 	bl	801034c <_svfiprintf_r>
 800d088:	9b02      	ldr	r3, [sp, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	701a      	strb	r2, [r3, #0]
 800d08e:	b01c      	add	sp, #112	; 0x70
 800d090:	f85d eb04 	ldr.w	lr, [sp], #4
 800d094:	b003      	add	sp, #12
 800d096:	4770      	bx	lr
 800d098:	2000023c 	.word	0x2000023c
 800d09c:	ffff0208 	.word	0xffff0208

0800d0a0 <siscanf>:
 800d0a0:	b40e      	push	{r1, r2, r3}
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	b09f      	sub	sp, #124	; 0x7c
 800d0a6:	ac21      	add	r4, sp, #132	; 0x84
 800d0a8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d0ac:	f854 2b04 	ldr.w	r2, [r4], #4
 800d0b0:	9201      	str	r2, [sp, #4]
 800d0b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d0b6:	9004      	str	r0, [sp, #16]
 800d0b8:	9008      	str	r0, [sp, #32]
 800d0ba:	f7f3 f893 	bl	80001e4 <strlen>
 800d0be:	4b0c      	ldr	r3, [pc, #48]	; (800d0f0 <siscanf+0x50>)
 800d0c0:	9005      	str	r0, [sp, #20]
 800d0c2:	9009      	str	r0, [sp, #36]	; 0x24
 800d0c4:	930d      	str	r3, [sp, #52]	; 0x34
 800d0c6:	480b      	ldr	r0, [pc, #44]	; (800d0f4 <siscanf+0x54>)
 800d0c8:	9a01      	ldr	r2, [sp, #4]
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	9403      	str	r4, [sp, #12]
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9311      	str	r3, [sp, #68]	; 0x44
 800d0d2:	9316      	str	r3, [sp, #88]	; 0x58
 800d0d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d0dc:	a904      	add	r1, sp, #16
 800d0de:	4623      	mov	r3, r4
 800d0e0:	f003 fa8e 	bl	8010600 <__ssvfiscanf_r>
 800d0e4:	b01f      	add	sp, #124	; 0x7c
 800d0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ea:	b003      	add	sp, #12
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	0800d11b 	.word	0x0800d11b
 800d0f4:	2000023c 	.word	0x2000023c

0800d0f8 <__sread>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d100:	f003 fd48 	bl	8010b94 <_read_r>
 800d104:	2800      	cmp	r0, #0
 800d106:	bfab      	itete	ge
 800d108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d10a:	89a3      	ldrhlt	r3, [r4, #12]
 800d10c:	181b      	addge	r3, r3, r0
 800d10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d112:	bfac      	ite	ge
 800d114:	6563      	strge	r3, [r4, #84]	; 0x54
 800d116:	81a3      	strhlt	r3, [r4, #12]
 800d118:	bd10      	pop	{r4, pc}

0800d11a <__seofread>:
 800d11a:	2000      	movs	r0, #0
 800d11c:	4770      	bx	lr

0800d11e <__swrite>:
 800d11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	461f      	mov	r7, r3
 800d124:	898b      	ldrh	r3, [r1, #12]
 800d126:	05db      	lsls	r3, r3, #23
 800d128:	4605      	mov	r5, r0
 800d12a:	460c      	mov	r4, r1
 800d12c:	4616      	mov	r6, r2
 800d12e:	d505      	bpl.n	800d13c <__swrite+0x1e>
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	2302      	movs	r3, #2
 800d136:	2200      	movs	r2, #0
 800d138:	f002 faa2 	bl	800f680 <_lseek_r>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	4628      	mov	r0, r5
 800d14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	f000 bf4d 	b.w	800dff0 <_write_r>

0800d156 <__sseek>:
 800d156:	b510      	push	{r4, lr}
 800d158:	460c      	mov	r4, r1
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	f002 fa8f 	bl	800f680 <_lseek_r>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	bf15      	itete	ne
 800d168:	6560      	strne	r0, [r4, #84]	; 0x54
 800d16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d172:	81a3      	strheq	r3, [r4, #12]
 800d174:	bf18      	it	ne
 800d176:	81a3      	strhne	r3, [r4, #12]
 800d178:	bd10      	pop	{r4, pc}

0800d17a <__sclose>:
 800d17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17e:	f000 bfbf 	b.w	800e100 <_close_r>
	...

0800d184 <strcasecmp>:
 800d184:	b530      	push	{r4, r5, lr}
 800d186:	4d0b      	ldr	r5, [pc, #44]	; (800d1b4 <strcasecmp+0x30>)
 800d188:	4604      	mov	r4, r0
 800d18a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d18e:	5d5a      	ldrb	r2, [r3, r5]
 800d190:	f002 0203 	and.w	r2, r2, #3
 800d194:	2a01      	cmp	r2, #1
 800d196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d19a:	5ca8      	ldrb	r0, [r5, r2]
 800d19c:	f000 0003 	and.w	r0, r0, #3
 800d1a0:	bf08      	it	eq
 800d1a2:	3320      	addeq	r3, #32
 800d1a4:	2801      	cmp	r0, #1
 800d1a6:	bf08      	it	eq
 800d1a8:	3220      	addeq	r2, #32
 800d1aa:	1a98      	subs	r0, r3, r2
 800d1ac:	d101      	bne.n	800d1b2 <strcasecmp+0x2e>
 800d1ae:	2a00      	cmp	r2, #0
 800d1b0:	d1eb      	bne.n	800d18a <strcasecmp+0x6>
 800d1b2:	bd30      	pop	{r4, r5, pc}
 800d1b4:	08012361 	.word	0x08012361

0800d1b8 <strcpy>:
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1be:	f803 2b01 	strb.w	r2, [r3], #1
 800d1c2:	2a00      	cmp	r2, #0
 800d1c4:	d1f9      	bne.n	800d1ba <strcpy+0x2>
 800d1c6:	4770      	bx	lr

0800d1c8 <sulp>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	460d      	mov	r5, r1
 800d1ce:	ec45 4b10 	vmov	d0, r4, r5
 800d1d2:	4616      	mov	r6, r2
 800d1d4:	f002 fe7e 	bl	800fed4 <__ulp>
 800d1d8:	ec51 0b10 	vmov	r0, r1, d0
 800d1dc:	b17e      	cbz	r6, 800d1fe <sulp+0x36>
 800d1de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d1e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	dd09      	ble.n	800d1fe <sulp+0x36>
 800d1ea:	051b      	lsls	r3, r3, #20
 800d1ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d1f0:	2400      	movs	r4, #0
 800d1f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	462b      	mov	r3, r5
 800d1fa:	f7f3 fa0d 	bl	8000618 <__aeabi_dmul>
 800d1fe:	bd70      	pop	{r4, r5, r6, pc}

0800d200 <_strtod_l>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	ed2d 8b02 	vpush	{d8}
 800d208:	b09d      	sub	sp, #116	; 0x74
 800d20a:	461f      	mov	r7, r3
 800d20c:	2300      	movs	r3, #0
 800d20e:	9318      	str	r3, [sp, #96]	; 0x60
 800d210:	4ba2      	ldr	r3, [pc, #648]	; (800d49c <_strtod_l+0x29c>)
 800d212:	9213      	str	r2, [sp, #76]	; 0x4c
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	9305      	str	r3, [sp, #20]
 800d218:	4604      	mov	r4, r0
 800d21a:	4618      	mov	r0, r3
 800d21c:	4688      	mov	r8, r1
 800d21e:	f7f2 ffe1 	bl	80001e4 <strlen>
 800d222:	f04f 0a00 	mov.w	sl, #0
 800d226:	4605      	mov	r5, r0
 800d228:	f04f 0b00 	mov.w	fp, #0
 800d22c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d232:	781a      	ldrb	r2, [r3, #0]
 800d234:	2a2b      	cmp	r2, #43	; 0x2b
 800d236:	d04e      	beq.n	800d2d6 <_strtod_l+0xd6>
 800d238:	d83b      	bhi.n	800d2b2 <_strtod_l+0xb2>
 800d23a:	2a0d      	cmp	r2, #13
 800d23c:	d834      	bhi.n	800d2a8 <_strtod_l+0xa8>
 800d23e:	2a08      	cmp	r2, #8
 800d240:	d834      	bhi.n	800d2ac <_strtod_l+0xac>
 800d242:	2a00      	cmp	r2, #0
 800d244:	d03e      	beq.n	800d2c4 <_strtod_l+0xc4>
 800d246:	2300      	movs	r3, #0
 800d248:	930a      	str	r3, [sp, #40]	; 0x28
 800d24a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d24c:	7833      	ldrb	r3, [r6, #0]
 800d24e:	2b30      	cmp	r3, #48	; 0x30
 800d250:	f040 80b0 	bne.w	800d3b4 <_strtod_l+0x1b4>
 800d254:	7873      	ldrb	r3, [r6, #1]
 800d256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d25a:	2b58      	cmp	r3, #88	; 0x58
 800d25c:	d168      	bne.n	800d330 <_strtod_l+0x130>
 800d25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	ab18      	add	r3, sp, #96	; 0x60
 800d264:	9702      	str	r7, [sp, #8]
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	4a8d      	ldr	r2, [pc, #564]	; (800d4a0 <_strtod_l+0x2a0>)
 800d26a:	ab19      	add	r3, sp, #100	; 0x64
 800d26c:	a917      	add	r1, sp, #92	; 0x5c
 800d26e:	4620      	mov	r0, r4
 800d270:	f001 fefa 	bl	800f068 <__gethex>
 800d274:	f010 0707 	ands.w	r7, r0, #7
 800d278:	4605      	mov	r5, r0
 800d27a:	d005      	beq.n	800d288 <_strtod_l+0x88>
 800d27c:	2f06      	cmp	r7, #6
 800d27e:	d12c      	bne.n	800d2da <_strtod_l+0xda>
 800d280:	3601      	adds	r6, #1
 800d282:	2300      	movs	r3, #0
 800d284:	9617      	str	r6, [sp, #92]	; 0x5c
 800d286:	930a      	str	r3, [sp, #40]	; 0x28
 800d288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f040 8590 	bne.w	800ddb0 <_strtod_l+0xbb0>
 800d290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d292:	b1eb      	cbz	r3, 800d2d0 <_strtod_l+0xd0>
 800d294:	4652      	mov	r2, sl
 800d296:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d29a:	ec43 2b10 	vmov	d0, r2, r3
 800d29e:	b01d      	add	sp, #116	; 0x74
 800d2a0:	ecbd 8b02 	vpop	{d8}
 800d2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a8:	2a20      	cmp	r2, #32
 800d2aa:	d1cc      	bne.n	800d246 <_strtod_l+0x46>
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2b0:	e7be      	b.n	800d230 <_strtod_l+0x30>
 800d2b2:	2a2d      	cmp	r2, #45	; 0x2d
 800d2b4:	d1c7      	bne.n	800d246 <_strtod_l+0x46>
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	920a      	str	r2, [sp, #40]	; 0x28
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2be:	785b      	ldrb	r3, [r3, #1]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1c2      	bne.n	800d24a <_strtod_l+0x4a>
 800d2c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f040 856e 	bne.w	800ddac <_strtod_l+0xbac>
 800d2d0:	4652      	mov	r2, sl
 800d2d2:	465b      	mov	r3, fp
 800d2d4:	e7e1      	b.n	800d29a <_strtod_l+0x9a>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	e7ee      	b.n	800d2b8 <_strtod_l+0xb8>
 800d2da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d2dc:	b13a      	cbz	r2, 800d2ee <_strtod_l+0xee>
 800d2de:	2135      	movs	r1, #53	; 0x35
 800d2e0:	a81a      	add	r0, sp, #104	; 0x68
 800d2e2:	f002 ff02 	bl	80100ea <__copybits>
 800d2e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f002 fac1 	bl	800f870 <_Bfree>
 800d2ee:	3f01      	subs	r7, #1
 800d2f0:	2f04      	cmp	r7, #4
 800d2f2:	d806      	bhi.n	800d302 <_strtod_l+0x102>
 800d2f4:	e8df f007 	tbb	[pc, r7]
 800d2f8:	1714030a 	.word	0x1714030a
 800d2fc:	0a          	.byte	0x0a
 800d2fd:	00          	.byte	0x00
 800d2fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d302:	0728      	lsls	r0, r5, #28
 800d304:	d5c0      	bpl.n	800d288 <_strtod_l+0x88>
 800d306:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d30a:	e7bd      	b.n	800d288 <_strtod_l+0x88>
 800d30c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d312:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d316:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d31a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d31e:	e7f0      	b.n	800d302 <_strtod_l+0x102>
 800d320:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d4a4 <_strtod_l+0x2a4>
 800d324:	e7ed      	b.n	800d302 <_strtod_l+0x102>
 800d326:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d32a:	f04f 3aff 	mov.w	sl, #4294967295
 800d32e:	e7e8      	b.n	800d302 <_strtod_l+0x102>
 800d330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	9217      	str	r2, [sp, #92]	; 0x5c
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	2b30      	cmp	r3, #48	; 0x30
 800d33a:	d0f9      	beq.n	800d330 <_strtod_l+0x130>
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d0a3      	beq.n	800d288 <_strtod_l+0x88>
 800d340:	2301      	movs	r3, #1
 800d342:	f04f 0900 	mov.w	r9, #0
 800d346:	9304      	str	r3, [sp, #16]
 800d348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d34a:	9308      	str	r3, [sp, #32]
 800d34c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d350:	464f      	mov	r7, r9
 800d352:	220a      	movs	r2, #10
 800d354:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d356:	7806      	ldrb	r6, [r0, #0]
 800d358:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d35c:	b2d9      	uxtb	r1, r3
 800d35e:	2909      	cmp	r1, #9
 800d360:	d92a      	bls.n	800d3b8 <_strtod_l+0x1b8>
 800d362:	9905      	ldr	r1, [sp, #20]
 800d364:	462a      	mov	r2, r5
 800d366:	f003 fcab 	bl	8010cc0 <strncmp>
 800d36a:	b398      	cbz	r0, 800d3d4 <_strtod_l+0x1d4>
 800d36c:	2000      	movs	r0, #0
 800d36e:	4632      	mov	r2, r6
 800d370:	463d      	mov	r5, r7
 800d372:	9005      	str	r0, [sp, #20]
 800d374:	4603      	mov	r3, r0
 800d376:	2a65      	cmp	r2, #101	; 0x65
 800d378:	d001      	beq.n	800d37e <_strtod_l+0x17e>
 800d37a:	2a45      	cmp	r2, #69	; 0x45
 800d37c:	d118      	bne.n	800d3b0 <_strtod_l+0x1b0>
 800d37e:	b91d      	cbnz	r5, 800d388 <_strtod_l+0x188>
 800d380:	9a04      	ldr	r2, [sp, #16]
 800d382:	4302      	orrs	r2, r0
 800d384:	d09e      	beq.n	800d2c4 <_strtod_l+0xc4>
 800d386:	2500      	movs	r5, #0
 800d388:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d38c:	f108 0201 	add.w	r2, r8, #1
 800d390:	9217      	str	r2, [sp, #92]	; 0x5c
 800d392:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d396:	2a2b      	cmp	r2, #43	; 0x2b
 800d398:	d075      	beq.n	800d486 <_strtod_l+0x286>
 800d39a:	2a2d      	cmp	r2, #45	; 0x2d
 800d39c:	d07b      	beq.n	800d496 <_strtod_l+0x296>
 800d39e:	f04f 0c00 	mov.w	ip, #0
 800d3a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d3a6:	2909      	cmp	r1, #9
 800d3a8:	f240 8082 	bls.w	800d4b0 <_strtod_l+0x2b0>
 800d3ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d3b0:	2600      	movs	r6, #0
 800d3b2:	e09d      	b.n	800d4f0 <_strtod_l+0x2f0>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	e7c4      	b.n	800d342 <_strtod_l+0x142>
 800d3b8:	2f08      	cmp	r7, #8
 800d3ba:	bfd8      	it	le
 800d3bc:	9907      	ldrle	r1, [sp, #28]
 800d3be:	f100 0001 	add.w	r0, r0, #1
 800d3c2:	bfda      	itte	le
 800d3c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d3c8:	9307      	strle	r3, [sp, #28]
 800d3ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d3ce:	3701      	adds	r7, #1
 800d3d0:	9017      	str	r0, [sp, #92]	; 0x5c
 800d3d2:	e7bf      	b.n	800d354 <_strtod_l+0x154>
 800d3d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3d6:	195a      	adds	r2, r3, r5
 800d3d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3da:	5d5a      	ldrb	r2, [r3, r5]
 800d3dc:	2f00      	cmp	r7, #0
 800d3de:	d037      	beq.n	800d450 <_strtod_l+0x250>
 800d3e0:	9005      	str	r0, [sp, #20]
 800d3e2:	463d      	mov	r5, r7
 800d3e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d3e8:	2b09      	cmp	r3, #9
 800d3ea:	d912      	bls.n	800d412 <_strtod_l+0x212>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e7c2      	b.n	800d376 <_strtod_l+0x176>
 800d3f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3f6:	785a      	ldrb	r2, [r3, #1]
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	2a30      	cmp	r2, #48	; 0x30
 800d3fc:	d0f8      	beq.n	800d3f0 <_strtod_l+0x1f0>
 800d3fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d402:	2b08      	cmp	r3, #8
 800d404:	f200 84d9 	bhi.w	800ddba <_strtod_l+0xbba>
 800d408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d40a:	9005      	str	r0, [sp, #20]
 800d40c:	2000      	movs	r0, #0
 800d40e:	9308      	str	r3, [sp, #32]
 800d410:	4605      	mov	r5, r0
 800d412:	3a30      	subs	r2, #48	; 0x30
 800d414:	f100 0301 	add.w	r3, r0, #1
 800d418:	d014      	beq.n	800d444 <_strtod_l+0x244>
 800d41a:	9905      	ldr	r1, [sp, #20]
 800d41c:	4419      	add	r1, r3
 800d41e:	9105      	str	r1, [sp, #20]
 800d420:	462b      	mov	r3, r5
 800d422:	eb00 0e05 	add.w	lr, r0, r5
 800d426:	210a      	movs	r1, #10
 800d428:	4573      	cmp	r3, lr
 800d42a:	d113      	bne.n	800d454 <_strtod_l+0x254>
 800d42c:	182b      	adds	r3, r5, r0
 800d42e:	2b08      	cmp	r3, #8
 800d430:	f105 0501 	add.w	r5, r5, #1
 800d434:	4405      	add	r5, r0
 800d436:	dc1c      	bgt.n	800d472 <_strtod_l+0x272>
 800d438:	9907      	ldr	r1, [sp, #28]
 800d43a:	230a      	movs	r3, #10
 800d43c:	fb03 2301 	mla	r3, r3, r1, r2
 800d440:	9307      	str	r3, [sp, #28]
 800d442:	2300      	movs	r3, #0
 800d444:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d446:	1c51      	adds	r1, r2, #1
 800d448:	9117      	str	r1, [sp, #92]	; 0x5c
 800d44a:	7852      	ldrb	r2, [r2, #1]
 800d44c:	4618      	mov	r0, r3
 800d44e:	e7c9      	b.n	800d3e4 <_strtod_l+0x1e4>
 800d450:	4638      	mov	r0, r7
 800d452:	e7d2      	b.n	800d3fa <_strtod_l+0x1fa>
 800d454:	2b08      	cmp	r3, #8
 800d456:	dc04      	bgt.n	800d462 <_strtod_l+0x262>
 800d458:	9e07      	ldr	r6, [sp, #28]
 800d45a:	434e      	muls	r6, r1
 800d45c:	9607      	str	r6, [sp, #28]
 800d45e:	3301      	adds	r3, #1
 800d460:	e7e2      	b.n	800d428 <_strtod_l+0x228>
 800d462:	f103 0c01 	add.w	ip, r3, #1
 800d466:	f1bc 0f10 	cmp.w	ip, #16
 800d46a:	bfd8      	it	le
 800d46c:	fb01 f909 	mulle.w	r9, r1, r9
 800d470:	e7f5      	b.n	800d45e <_strtod_l+0x25e>
 800d472:	2d10      	cmp	r5, #16
 800d474:	bfdc      	itt	le
 800d476:	230a      	movle	r3, #10
 800d478:	fb03 2909 	mlale	r9, r3, r9, r2
 800d47c:	e7e1      	b.n	800d442 <_strtod_l+0x242>
 800d47e:	2300      	movs	r3, #0
 800d480:	9305      	str	r3, [sp, #20]
 800d482:	2301      	movs	r3, #1
 800d484:	e77c      	b.n	800d380 <_strtod_l+0x180>
 800d486:	f04f 0c00 	mov.w	ip, #0
 800d48a:	f108 0202 	add.w	r2, r8, #2
 800d48e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d490:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d494:	e785      	b.n	800d3a2 <_strtod_l+0x1a2>
 800d496:	f04f 0c01 	mov.w	ip, #1
 800d49a:	e7f6      	b.n	800d48a <_strtod_l+0x28a>
 800d49c:	08012658 	.word	0x08012658
 800d4a0:	08012510 	.word	0x08012510
 800d4a4:	7ff00000 	.word	0x7ff00000
 800d4a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4aa:	1c51      	adds	r1, r2, #1
 800d4ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800d4ae:	7852      	ldrb	r2, [r2, #1]
 800d4b0:	2a30      	cmp	r2, #48	; 0x30
 800d4b2:	d0f9      	beq.n	800d4a8 <_strtod_l+0x2a8>
 800d4b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d4b8:	2908      	cmp	r1, #8
 800d4ba:	f63f af79 	bhi.w	800d3b0 <_strtod_l+0x1b0>
 800d4be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d4c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4c4:	9206      	str	r2, [sp, #24]
 800d4c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d4c8:	1c51      	adds	r1, r2, #1
 800d4ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800d4cc:	7852      	ldrb	r2, [r2, #1]
 800d4ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d4d2:	2e09      	cmp	r6, #9
 800d4d4:	d937      	bls.n	800d546 <_strtod_l+0x346>
 800d4d6:	9e06      	ldr	r6, [sp, #24]
 800d4d8:	1b89      	subs	r1, r1, r6
 800d4da:	2908      	cmp	r1, #8
 800d4dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d4e0:	dc02      	bgt.n	800d4e8 <_strtod_l+0x2e8>
 800d4e2:	4576      	cmp	r6, lr
 800d4e4:	bfa8      	it	ge
 800d4e6:	4676      	movge	r6, lr
 800d4e8:	f1bc 0f00 	cmp.w	ip, #0
 800d4ec:	d000      	beq.n	800d4f0 <_strtod_l+0x2f0>
 800d4ee:	4276      	negs	r6, r6
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	d14d      	bne.n	800d590 <_strtod_l+0x390>
 800d4f4:	9904      	ldr	r1, [sp, #16]
 800d4f6:	4301      	orrs	r1, r0
 800d4f8:	f47f aec6 	bne.w	800d288 <_strtod_l+0x88>
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f47f aee1 	bne.w	800d2c4 <_strtod_l+0xc4>
 800d502:	2a69      	cmp	r2, #105	; 0x69
 800d504:	d027      	beq.n	800d556 <_strtod_l+0x356>
 800d506:	dc24      	bgt.n	800d552 <_strtod_l+0x352>
 800d508:	2a49      	cmp	r2, #73	; 0x49
 800d50a:	d024      	beq.n	800d556 <_strtod_l+0x356>
 800d50c:	2a4e      	cmp	r2, #78	; 0x4e
 800d50e:	f47f aed9 	bne.w	800d2c4 <_strtod_l+0xc4>
 800d512:	499f      	ldr	r1, [pc, #636]	; (800d790 <_strtod_l+0x590>)
 800d514:	a817      	add	r0, sp, #92	; 0x5c
 800d516:	f001 ffff 	bl	800f518 <__match>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f43f aed2 	beq.w	800d2c4 <_strtod_l+0xc4>
 800d520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	2b28      	cmp	r3, #40	; 0x28
 800d526:	d12d      	bne.n	800d584 <_strtod_l+0x384>
 800d528:	499a      	ldr	r1, [pc, #616]	; (800d794 <_strtod_l+0x594>)
 800d52a:	aa1a      	add	r2, sp, #104	; 0x68
 800d52c:	a817      	add	r0, sp, #92	; 0x5c
 800d52e:	f002 f807 	bl	800f540 <__hexnan>
 800d532:	2805      	cmp	r0, #5
 800d534:	d126      	bne.n	800d584 <_strtod_l+0x384>
 800d536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d538:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d53c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d540:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d544:	e6a0      	b.n	800d288 <_strtod_l+0x88>
 800d546:	210a      	movs	r1, #10
 800d548:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d54c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d550:	e7b9      	b.n	800d4c6 <_strtod_l+0x2c6>
 800d552:	2a6e      	cmp	r2, #110	; 0x6e
 800d554:	e7db      	b.n	800d50e <_strtod_l+0x30e>
 800d556:	4990      	ldr	r1, [pc, #576]	; (800d798 <_strtod_l+0x598>)
 800d558:	a817      	add	r0, sp, #92	; 0x5c
 800d55a:	f001 ffdd 	bl	800f518 <__match>
 800d55e:	2800      	cmp	r0, #0
 800d560:	f43f aeb0 	beq.w	800d2c4 <_strtod_l+0xc4>
 800d564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d566:	498d      	ldr	r1, [pc, #564]	; (800d79c <_strtod_l+0x59c>)
 800d568:	3b01      	subs	r3, #1
 800d56a:	a817      	add	r0, sp, #92	; 0x5c
 800d56c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d56e:	f001 ffd3 	bl	800f518 <__match>
 800d572:	b910      	cbnz	r0, 800d57a <_strtod_l+0x37a>
 800d574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d576:	3301      	adds	r3, #1
 800d578:	9317      	str	r3, [sp, #92]	; 0x5c
 800d57a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d7ac <_strtod_l+0x5ac>
 800d57e:	f04f 0a00 	mov.w	sl, #0
 800d582:	e681      	b.n	800d288 <_strtod_l+0x88>
 800d584:	4886      	ldr	r0, [pc, #536]	; (800d7a0 <_strtod_l+0x5a0>)
 800d586:	f003 fb17 	bl	8010bb8 <nan>
 800d58a:	ec5b ab10 	vmov	sl, fp, d0
 800d58e:	e67b      	b.n	800d288 <_strtod_l+0x88>
 800d590:	9b05      	ldr	r3, [sp, #20]
 800d592:	9807      	ldr	r0, [sp, #28]
 800d594:	1af3      	subs	r3, r6, r3
 800d596:	2f00      	cmp	r7, #0
 800d598:	bf08      	it	eq
 800d59a:	462f      	moveq	r7, r5
 800d59c:	2d10      	cmp	r5, #16
 800d59e:	9306      	str	r3, [sp, #24]
 800d5a0:	46a8      	mov	r8, r5
 800d5a2:	bfa8      	it	ge
 800d5a4:	f04f 0810 	movge.w	r8, #16
 800d5a8:	f7f2 ffbc 	bl	8000524 <__aeabi_ui2d>
 800d5ac:	2d09      	cmp	r5, #9
 800d5ae:	4682      	mov	sl, r0
 800d5b0:	468b      	mov	fp, r1
 800d5b2:	dd13      	ble.n	800d5dc <_strtod_l+0x3dc>
 800d5b4:	4b7b      	ldr	r3, [pc, #492]	; (800d7a4 <_strtod_l+0x5a4>)
 800d5b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d5ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d5be:	f7f3 f82b 	bl	8000618 <__aeabi_dmul>
 800d5c2:	4682      	mov	sl, r0
 800d5c4:	4648      	mov	r0, r9
 800d5c6:	468b      	mov	fp, r1
 800d5c8:	f7f2 ffac 	bl	8000524 <__aeabi_ui2d>
 800d5cc:	4602      	mov	r2, r0
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	4650      	mov	r0, sl
 800d5d2:	4659      	mov	r1, fp
 800d5d4:	f7f2 fe6a 	bl	80002ac <__adddf3>
 800d5d8:	4682      	mov	sl, r0
 800d5da:	468b      	mov	fp, r1
 800d5dc:	2d0f      	cmp	r5, #15
 800d5de:	dc38      	bgt.n	800d652 <_strtod_l+0x452>
 800d5e0:	9b06      	ldr	r3, [sp, #24]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f43f ae50 	beq.w	800d288 <_strtod_l+0x88>
 800d5e8:	dd24      	ble.n	800d634 <_strtod_l+0x434>
 800d5ea:	2b16      	cmp	r3, #22
 800d5ec:	dc0b      	bgt.n	800d606 <_strtod_l+0x406>
 800d5ee:	496d      	ldr	r1, [pc, #436]	; (800d7a4 <_strtod_l+0x5a4>)
 800d5f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	465b      	mov	r3, fp
 800d5fc:	f7f3 f80c 	bl	8000618 <__aeabi_dmul>
 800d600:	4682      	mov	sl, r0
 800d602:	468b      	mov	fp, r1
 800d604:	e640      	b.n	800d288 <_strtod_l+0x88>
 800d606:	9a06      	ldr	r2, [sp, #24]
 800d608:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d60c:	4293      	cmp	r3, r2
 800d60e:	db20      	blt.n	800d652 <_strtod_l+0x452>
 800d610:	4c64      	ldr	r4, [pc, #400]	; (800d7a4 <_strtod_l+0x5a4>)
 800d612:	f1c5 050f 	rsb	r5, r5, #15
 800d616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d61a:	4652      	mov	r2, sl
 800d61c:	465b      	mov	r3, fp
 800d61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d622:	f7f2 fff9 	bl	8000618 <__aeabi_dmul>
 800d626:	9b06      	ldr	r3, [sp, #24]
 800d628:	1b5d      	subs	r5, r3, r5
 800d62a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d62e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d632:	e7e3      	b.n	800d5fc <_strtod_l+0x3fc>
 800d634:	9b06      	ldr	r3, [sp, #24]
 800d636:	3316      	adds	r3, #22
 800d638:	db0b      	blt.n	800d652 <_strtod_l+0x452>
 800d63a:	9b05      	ldr	r3, [sp, #20]
 800d63c:	1b9e      	subs	r6, r3, r6
 800d63e:	4b59      	ldr	r3, [pc, #356]	; (800d7a4 <_strtod_l+0x5a4>)
 800d640:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d644:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d648:	4650      	mov	r0, sl
 800d64a:	4659      	mov	r1, fp
 800d64c:	f7f3 f90e 	bl	800086c <__aeabi_ddiv>
 800d650:	e7d6      	b.n	800d600 <_strtod_l+0x400>
 800d652:	9b06      	ldr	r3, [sp, #24]
 800d654:	eba5 0808 	sub.w	r8, r5, r8
 800d658:	4498      	add	r8, r3
 800d65a:	f1b8 0f00 	cmp.w	r8, #0
 800d65e:	dd74      	ble.n	800d74a <_strtod_l+0x54a>
 800d660:	f018 030f 	ands.w	r3, r8, #15
 800d664:	d00a      	beq.n	800d67c <_strtod_l+0x47c>
 800d666:	494f      	ldr	r1, [pc, #316]	; (800d7a4 <_strtod_l+0x5a4>)
 800d668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d66c:	4652      	mov	r2, sl
 800d66e:	465b      	mov	r3, fp
 800d670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d674:	f7f2 ffd0 	bl	8000618 <__aeabi_dmul>
 800d678:	4682      	mov	sl, r0
 800d67a:	468b      	mov	fp, r1
 800d67c:	f038 080f 	bics.w	r8, r8, #15
 800d680:	d04f      	beq.n	800d722 <_strtod_l+0x522>
 800d682:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d686:	dd22      	ble.n	800d6ce <_strtod_l+0x4ce>
 800d688:	2500      	movs	r5, #0
 800d68a:	462e      	mov	r6, r5
 800d68c:	9507      	str	r5, [sp, #28]
 800d68e:	9505      	str	r5, [sp, #20]
 800d690:	2322      	movs	r3, #34	; 0x22
 800d692:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d7ac <_strtod_l+0x5ac>
 800d696:	6023      	str	r3, [r4, #0]
 800d698:	f04f 0a00 	mov.w	sl, #0
 800d69c:	9b07      	ldr	r3, [sp, #28]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f43f adf2 	beq.w	800d288 <_strtod_l+0x88>
 800d6a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f002 f8e2 	bl	800f870 <_Bfree>
 800d6ac:	9905      	ldr	r1, [sp, #20]
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f002 f8de 	bl	800f870 <_Bfree>
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f002 f8da 	bl	800f870 <_Bfree>
 800d6bc:	9907      	ldr	r1, [sp, #28]
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f002 f8d6 	bl	800f870 <_Bfree>
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f002 f8d2 	bl	800f870 <_Bfree>
 800d6cc:	e5dc      	b.n	800d288 <_strtod_l+0x88>
 800d6ce:	4b36      	ldr	r3, [pc, #216]	; (800d7a8 <_strtod_l+0x5a8>)
 800d6d0:	9304      	str	r3, [sp, #16]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d6d8:	4650      	mov	r0, sl
 800d6da:	4659      	mov	r1, fp
 800d6dc:	4699      	mov	r9, r3
 800d6de:	f1b8 0f01 	cmp.w	r8, #1
 800d6e2:	dc21      	bgt.n	800d728 <_strtod_l+0x528>
 800d6e4:	b10b      	cbz	r3, 800d6ea <_strtod_l+0x4ea>
 800d6e6:	4682      	mov	sl, r0
 800d6e8:	468b      	mov	fp, r1
 800d6ea:	4b2f      	ldr	r3, [pc, #188]	; (800d7a8 <_strtod_l+0x5a8>)
 800d6ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d6f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d6f4:	4652      	mov	r2, sl
 800d6f6:	465b      	mov	r3, fp
 800d6f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d6fc:	f7f2 ff8c 	bl	8000618 <__aeabi_dmul>
 800d700:	4b2a      	ldr	r3, [pc, #168]	; (800d7ac <_strtod_l+0x5ac>)
 800d702:	460a      	mov	r2, r1
 800d704:	400b      	ands	r3, r1
 800d706:	492a      	ldr	r1, [pc, #168]	; (800d7b0 <_strtod_l+0x5b0>)
 800d708:	428b      	cmp	r3, r1
 800d70a:	4682      	mov	sl, r0
 800d70c:	d8bc      	bhi.n	800d688 <_strtod_l+0x488>
 800d70e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d712:	428b      	cmp	r3, r1
 800d714:	bf86      	itte	hi
 800d716:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d7b4 <_strtod_l+0x5b4>
 800d71a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d71e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d722:	2300      	movs	r3, #0
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	e084      	b.n	800d832 <_strtod_l+0x632>
 800d728:	f018 0f01 	tst.w	r8, #1
 800d72c:	d005      	beq.n	800d73a <_strtod_l+0x53a>
 800d72e:	9b04      	ldr	r3, [sp, #16]
 800d730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d734:	f7f2 ff70 	bl	8000618 <__aeabi_dmul>
 800d738:	2301      	movs	r3, #1
 800d73a:	9a04      	ldr	r2, [sp, #16]
 800d73c:	3208      	adds	r2, #8
 800d73e:	f109 0901 	add.w	r9, r9, #1
 800d742:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d746:	9204      	str	r2, [sp, #16]
 800d748:	e7c9      	b.n	800d6de <_strtod_l+0x4de>
 800d74a:	d0ea      	beq.n	800d722 <_strtod_l+0x522>
 800d74c:	f1c8 0800 	rsb	r8, r8, #0
 800d750:	f018 020f 	ands.w	r2, r8, #15
 800d754:	d00a      	beq.n	800d76c <_strtod_l+0x56c>
 800d756:	4b13      	ldr	r3, [pc, #76]	; (800d7a4 <_strtod_l+0x5a4>)
 800d758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d75c:	4650      	mov	r0, sl
 800d75e:	4659      	mov	r1, fp
 800d760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d764:	f7f3 f882 	bl	800086c <__aeabi_ddiv>
 800d768:	4682      	mov	sl, r0
 800d76a:	468b      	mov	fp, r1
 800d76c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d770:	d0d7      	beq.n	800d722 <_strtod_l+0x522>
 800d772:	f1b8 0f1f 	cmp.w	r8, #31
 800d776:	dd1f      	ble.n	800d7b8 <_strtod_l+0x5b8>
 800d778:	2500      	movs	r5, #0
 800d77a:	462e      	mov	r6, r5
 800d77c:	9507      	str	r5, [sp, #28]
 800d77e:	9505      	str	r5, [sp, #20]
 800d780:	2322      	movs	r3, #34	; 0x22
 800d782:	f04f 0a00 	mov.w	sl, #0
 800d786:	f04f 0b00 	mov.w	fp, #0
 800d78a:	6023      	str	r3, [r4, #0]
 800d78c:	e786      	b.n	800d69c <_strtod_l+0x49c>
 800d78e:	bf00      	nop
 800d790:	080124e6 	.word	0x080124e6
 800d794:	08012524 	.word	0x08012524
 800d798:	080124de 	.word	0x080124de
 800d79c:	08012563 	.word	0x08012563
 800d7a0:	0801235f 	.word	0x0801235f
 800d7a4:	080126f0 	.word	0x080126f0
 800d7a8:	080126c8 	.word	0x080126c8
 800d7ac:	7ff00000 	.word	0x7ff00000
 800d7b0:	7ca00000 	.word	0x7ca00000
 800d7b4:	7fefffff 	.word	0x7fefffff
 800d7b8:	f018 0310 	ands.w	r3, r8, #16
 800d7bc:	bf18      	it	ne
 800d7be:	236a      	movne	r3, #106	; 0x6a
 800d7c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800db70 <_strtod_l+0x970>
 800d7c4:	9304      	str	r3, [sp, #16]
 800d7c6:	4650      	mov	r0, sl
 800d7c8:	4659      	mov	r1, fp
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f018 0f01 	tst.w	r8, #1
 800d7d0:	d004      	beq.n	800d7dc <_strtod_l+0x5dc>
 800d7d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d7d6:	f7f2 ff1f 	bl	8000618 <__aeabi_dmul>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d7e0:	f109 0908 	add.w	r9, r9, #8
 800d7e4:	d1f2      	bne.n	800d7cc <_strtod_l+0x5cc>
 800d7e6:	b10b      	cbz	r3, 800d7ec <_strtod_l+0x5ec>
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	468b      	mov	fp, r1
 800d7ec:	9b04      	ldr	r3, [sp, #16]
 800d7ee:	b1c3      	cbz	r3, 800d822 <_strtod_l+0x622>
 800d7f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d7f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	4659      	mov	r1, fp
 800d7fc:	dd11      	ble.n	800d822 <_strtod_l+0x622>
 800d7fe:	2b1f      	cmp	r3, #31
 800d800:	f340 8124 	ble.w	800da4c <_strtod_l+0x84c>
 800d804:	2b34      	cmp	r3, #52	; 0x34
 800d806:	bfde      	ittt	le
 800d808:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d80c:	f04f 33ff 	movle.w	r3, #4294967295
 800d810:	fa03 f202 	lslle.w	r2, r3, r2
 800d814:	f04f 0a00 	mov.w	sl, #0
 800d818:	bfcc      	ite	gt
 800d81a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d81e:	ea02 0b01 	andle.w	fp, r2, r1
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4650      	mov	r0, sl
 800d828:	4659      	mov	r1, fp
 800d82a:	f7f3 f95d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d1a2      	bne.n	800d778 <_strtod_l+0x578>
 800d832:	9b07      	ldr	r3, [sp, #28]
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	9908      	ldr	r1, [sp, #32]
 800d838:	462b      	mov	r3, r5
 800d83a:	463a      	mov	r2, r7
 800d83c:	4620      	mov	r0, r4
 800d83e:	f002 f87f 	bl	800f940 <__s2b>
 800d842:	9007      	str	r0, [sp, #28]
 800d844:	2800      	cmp	r0, #0
 800d846:	f43f af1f 	beq.w	800d688 <_strtod_l+0x488>
 800d84a:	9b05      	ldr	r3, [sp, #20]
 800d84c:	1b9e      	subs	r6, r3, r6
 800d84e:	9b06      	ldr	r3, [sp, #24]
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfb4      	ite	lt
 800d854:	4633      	movlt	r3, r6
 800d856:	2300      	movge	r3, #0
 800d858:	930c      	str	r3, [sp, #48]	; 0x30
 800d85a:	9b06      	ldr	r3, [sp, #24]
 800d85c:	2500      	movs	r5, #0
 800d85e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d862:	9312      	str	r3, [sp, #72]	; 0x48
 800d864:	462e      	mov	r6, r5
 800d866:	9b07      	ldr	r3, [sp, #28]
 800d868:	4620      	mov	r0, r4
 800d86a:	6859      	ldr	r1, [r3, #4]
 800d86c:	f001 ffc0 	bl	800f7f0 <_Balloc>
 800d870:	9005      	str	r0, [sp, #20]
 800d872:	2800      	cmp	r0, #0
 800d874:	f43f af0c 	beq.w	800d690 <_strtod_l+0x490>
 800d878:	9b07      	ldr	r3, [sp, #28]
 800d87a:	691a      	ldr	r2, [r3, #16]
 800d87c:	3202      	adds	r2, #2
 800d87e:	f103 010c 	add.w	r1, r3, #12
 800d882:	0092      	lsls	r2, r2, #2
 800d884:	300c      	adds	r0, #12
 800d886:	f7fe faec 	bl	800be62 <memcpy>
 800d88a:	ec4b ab10 	vmov	d0, sl, fp
 800d88e:	aa1a      	add	r2, sp, #104	; 0x68
 800d890:	a919      	add	r1, sp, #100	; 0x64
 800d892:	4620      	mov	r0, r4
 800d894:	f002 fb9a 	bl	800ffcc <__d2b>
 800d898:	ec4b ab18 	vmov	d8, sl, fp
 800d89c:	9018      	str	r0, [sp, #96]	; 0x60
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	f43f aef6 	beq.w	800d690 <_strtod_l+0x490>
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f002 f8e4 	bl	800fa74 <__i2b>
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f43f aeee 	beq.w	800d690 <_strtod_l+0x490>
 800d8b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8b6:	9904      	ldr	r1, [sp, #16]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfab      	itete	ge
 800d8bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d8be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d8c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d8c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d8c6:	bfac      	ite	ge
 800d8c8:	eb03 0902 	addge.w	r9, r3, r2
 800d8cc:	1ad7      	sublt	r7, r2, r3
 800d8ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d8d0:	eba3 0801 	sub.w	r8, r3, r1
 800d8d4:	4490      	add	r8, r2
 800d8d6:	4ba1      	ldr	r3, [pc, #644]	; (800db5c <_strtod_l+0x95c>)
 800d8d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8dc:	4598      	cmp	r8, r3
 800d8de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d8e2:	f280 80c7 	bge.w	800da74 <_strtod_l+0x874>
 800d8e6:	eba3 0308 	sub.w	r3, r3, r8
 800d8ea:	2b1f      	cmp	r3, #31
 800d8ec:	eba2 0203 	sub.w	r2, r2, r3
 800d8f0:	f04f 0101 	mov.w	r1, #1
 800d8f4:	f300 80b1 	bgt.w	800da5a <_strtod_l+0x85a>
 800d8f8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8fc:	930d      	str	r3, [sp, #52]	; 0x34
 800d8fe:	2300      	movs	r3, #0
 800d900:	9308      	str	r3, [sp, #32]
 800d902:	eb09 0802 	add.w	r8, r9, r2
 800d906:	9b04      	ldr	r3, [sp, #16]
 800d908:	45c1      	cmp	r9, r8
 800d90a:	4417      	add	r7, r2
 800d90c:	441f      	add	r7, r3
 800d90e:	464b      	mov	r3, r9
 800d910:	bfa8      	it	ge
 800d912:	4643      	movge	r3, r8
 800d914:	42bb      	cmp	r3, r7
 800d916:	bfa8      	it	ge
 800d918:	463b      	movge	r3, r7
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bfc2      	ittt	gt
 800d91e:	eba8 0803 	subgt.w	r8, r8, r3
 800d922:	1aff      	subgt	r7, r7, r3
 800d924:	eba9 0903 	subgt.w	r9, r9, r3
 800d928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	dd17      	ble.n	800d95e <_strtod_l+0x75e>
 800d92e:	4631      	mov	r1, r6
 800d930:	461a      	mov	r2, r3
 800d932:	4620      	mov	r0, r4
 800d934:	f002 f95e 	bl	800fbf4 <__pow5mult>
 800d938:	4606      	mov	r6, r0
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f43f aea8 	beq.w	800d690 <_strtod_l+0x490>
 800d940:	4601      	mov	r1, r0
 800d942:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d944:	4620      	mov	r0, r4
 800d946:	f002 f8ab 	bl	800faa0 <__multiply>
 800d94a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d94c:	2800      	cmp	r0, #0
 800d94e:	f43f ae9f 	beq.w	800d690 <_strtod_l+0x490>
 800d952:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d954:	4620      	mov	r0, r4
 800d956:	f001 ff8b 	bl	800f870 <_Bfree>
 800d95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d95c:	9318      	str	r3, [sp, #96]	; 0x60
 800d95e:	f1b8 0f00 	cmp.w	r8, #0
 800d962:	f300 808c 	bgt.w	800da7e <_strtod_l+0x87e>
 800d966:	9b06      	ldr	r3, [sp, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dd08      	ble.n	800d97e <_strtod_l+0x77e>
 800d96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d96e:	9905      	ldr	r1, [sp, #20]
 800d970:	4620      	mov	r0, r4
 800d972:	f002 f93f 	bl	800fbf4 <__pow5mult>
 800d976:	9005      	str	r0, [sp, #20]
 800d978:	2800      	cmp	r0, #0
 800d97a:	f43f ae89 	beq.w	800d690 <_strtod_l+0x490>
 800d97e:	2f00      	cmp	r7, #0
 800d980:	dd08      	ble.n	800d994 <_strtod_l+0x794>
 800d982:	9905      	ldr	r1, [sp, #20]
 800d984:	463a      	mov	r2, r7
 800d986:	4620      	mov	r0, r4
 800d988:	f002 f98e 	bl	800fca8 <__lshift>
 800d98c:	9005      	str	r0, [sp, #20]
 800d98e:	2800      	cmp	r0, #0
 800d990:	f43f ae7e 	beq.w	800d690 <_strtod_l+0x490>
 800d994:	f1b9 0f00 	cmp.w	r9, #0
 800d998:	dd08      	ble.n	800d9ac <_strtod_l+0x7ac>
 800d99a:	4631      	mov	r1, r6
 800d99c:	464a      	mov	r2, r9
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f002 f982 	bl	800fca8 <__lshift>
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f43f ae72 	beq.w	800d690 <_strtod_l+0x490>
 800d9ac:	9a05      	ldr	r2, [sp, #20]
 800d9ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f002 fa05 	bl	800fdc0 <__mdiff>
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	f43f ae69 	beq.w	800d690 <_strtod_l+0x490>
 800d9be:	68c3      	ldr	r3, [r0, #12]
 800d9c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60c3      	str	r3, [r0, #12]
 800d9c6:	4631      	mov	r1, r6
 800d9c8:	f002 f9de 	bl	800fd88 <__mcmp>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	da60      	bge.n	800da92 <_strtod_l+0x892>
 800d9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9d2:	ea53 030a 	orrs.w	r3, r3, sl
 800d9d6:	f040 8082 	bne.w	800dade <_strtod_l+0x8de>
 800d9da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d17d      	bne.n	800dade <_strtod_l+0x8de>
 800d9e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d9e6:	0d1b      	lsrs	r3, r3, #20
 800d9e8:	051b      	lsls	r3, r3, #20
 800d9ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d9ee:	d976      	bls.n	800dade <_strtod_l+0x8de>
 800d9f0:	696b      	ldr	r3, [r5, #20]
 800d9f2:	b913      	cbnz	r3, 800d9fa <_strtod_l+0x7fa>
 800d9f4:	692b      	ldr	r3, [r5, #16]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	dd71      	ble.n	800dade <_strtod_l+0x8de>
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	4620      	mov	r0, r4
 800da00:	f002 f952 	bl	800fca8 <__lshift>
 800da04:	4631      	mov	r1, r6
 800da06:	4605      	mov	r5, r0
 800da08:	f002 f9be 	bl	800fd88 <__mcmp>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	dd66      	ble.n	800dade <_strtod_l+0x8de>
 800da10:	9904      	ldr	r1, [sp, #16]
 800da12:	4a53      	ldr	r2, [pc, #332]	; (800db60 <_strtod_l+0x960>)
 800da14:	465b      	mov	r3, fp
 800da16:	2900      	cmp	r1, #0
 800da18:	f000 8081 	beq.w	800db1e <_strtod_l+0x91e>
 800da1c:	ea02 010b 	and.w	r1, r2, fp
 800da20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800da24:	dc7b      	bgt.n	800db1e <_strtod_l+0x91e>
 800da26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800da2a:	f77f aea9 	ble.w	800d780 <_strtod_l+0x580>
 800da2e:	4b4d      	ldr	r3, [pc, #308]	; (800db64 <_strtod_l+0x964>)
 800da30:	4650      	mov	r0, sl
 800da32:	4659      	mov	r1, fp
 800da34:	2200      	movs	r2, #0
 800da36:	f7f2 fdef 	bl	8000618 <__aeabi_dmul>
 800da3a:	460b      	mov	r3, r1
 800da3c:	4303      	orrs	r3, r0
 800da3e:	bf08      	it	eq
 800da40:	2322      	moveq	r3, #34	; 0x22
 800da42:	4682      	mov	sl, r0
 800da44:	468b      	mov	fp, r1
 800da46:	bf08      	it	eq
 800da48:	6023      	streq	r3, [r4, #0]
 800da4a:	e62b      	b.n	800d6a4 <_strtod_l+0x4a4>
 800da4c:	f04f 32ff 	mov.w	r2, #4294967295
 800da50:	fa02 f303 	lsl.w	r3, r2, r3
 800da54:	ea03 0a0a 	and.w	sl, r3, sl
 800da58:	e6e3      	b.n	800d822 <_strtod_l+0x622>
 800da5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800da5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800da62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800da66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800da6a:	fa01 f308 	lsl.w	r3, r1, r8
 800da6e:	9308      	str	r3, [sp, #32]
 800da70:	910d      	str	r1, [sp, #52]	; 0x34
 800da72:	e746      	b.n	800d902 <_strtod_l+0x702>
 800da74:	2300      	movs	r3, #0
 800da76:	9308      	str	r3, [sp, #32]
 800da78:	2301      	movs	r3, #1
 800da7a:	930d      	str	r3, [sp, #52]	; 0x34
 800da7c:	e741      	b.n	800d902 <_strtod_l+0x702>
 800da7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da80:	4642      	mov	r2, r8
 800da82:	4620      	mov	r0, r4
 800da84:	f002 f910 	bl	800fca8 <__lshift>
 800da88:	9018      	str	r0, [sp, #96]	; 0x60
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f47f af6b 	bne.w	800d966 <_strtod_l+0x766>
 800da90:	e5fe      	b.n	800d690 <_strtod_l+0x490>
 800da92:	465f      	mov	r7, fp
 800da94:	d16e      	bne.n	800db74 <_strtod_l+0x974>
 800da96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da9c:	b342      	cbz	r2, 800daf0 <_strtod_l+0x8f0>
 800da9e:	4a32      	ldr	r2, [pc, #200]	; (800db68 <_strtod_l+0x968>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d128      	bne.n	800daf6 <_strtod_l+0x8f6>
 800daa4:	9b04      	ldr	r3, [sp, #16]
 800daa6:	4651      	mov	r1, sl
 800daa8:	b1eb      	cbz	r3, 800dae6 <_strtod_l+0x8e6>
 800daaa:	4b2d      	ldr	r3, [pc, #180]	; (800db60 <_strtod_l+0x960>)
 800daac:	403b      	ands	r3, r7
 800daae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dab2:	f04f 32ff 	mov.w	r2, #4294967295
 800dab6:	d819      	bhi.n	800daec <_strtod_l+0x8ec>
 800dab8:	0d1b      	lsrs	r3, r3, #20
 800daba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dabe:	fa02 f303 	lsl.w	r3, r2, r3
 800dac2:	4299      	cmp	r1, r3
 800dac4:	d117      	bne.n	800daf6 <_strtod_l+0x8f6>
 800dac6:	4b29      	ldr	r3, [pc, #164]	; (800db6c <_strtod_l+0x96c>)
 800dac8:	429f      	cmp	r7, r3
 800daca:	d102      	bne.n	800dad2 <_strtod_l+0x8d2>
 800dacc:	3101      	adds	r1, #1
 800dace:	f43f addf 	beq.w	800d690 <_strtod_l+0x490>
 800dad2:	4b23      	ldr	r3, [pc, #140]	; (800db60 <_strtod_l+0x960>)
 800dad4:	403b      	ands	r3, r7
 800dad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dada:	f04f 0a00 	mov.w	sl, #0
 800dade:	9b04      	ldr	r3, [sp, #16]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1a4      	bne.n	800da2e <_strtod_l+0x82e>
 800dae4:	e5de      	b.n	800d6a4 <_strtod_l+0x4a4>
 800dae6:	f04f 33ff 	mov.w	r3, #4294967295
 800daea:	e7ea      	b.n	800dac2 <_strtod_l+0x8c2>
 800daec:	4613      	mov	r3, r2
 800daee:	e7e8      	b.n	800dac2 <_strtod_l+0x8c2>
 800daf0:	ea53 030a 	orrs.w	r3, r3, sl
 800daf4:	d08c      	beq.n	800da10 <_strtod_l+0x810>
 800daf6:	9b08      	ldr	r3, [sp, #32]
 800daf8:	b1db      	cbz	r3, 800db32 <_strtod_l+0x932>
 800dafa:	423b      	tst	r3, r7
 800dafc:	d0ef      	beq.n	800dade <_strtod_l+0x8de>
 800dafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db00:	9a04      	ldr	r2, [sp, #16]
 800db02:	4650      	mov	r0, sl
 800db04:	4659      	mov	r1, fp
 800db06:	b1c3      	cbz	r3, 800db3a <_strtod_l+0x93a>
 800db08:	f7ff fb5e 	bl	800d1c8 <sulp>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	ec51 0b18 	vmov	r0, r1, d8
 800db14:	f7f2 fbca 	bl	80002ac <__adddf3>
 800db18:	4682      	mov	sl, r0
 800db1a:	468b      	mov	fp, r1
 800db1c:	e7df      	b.n	800dade <_strtod_l+0x8de>
 800db1e:	4013      	ands	r3, r2
 800db20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800db24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db2c:	f04f 3aff 	mov.w	sl, #4294967295
 800db30:	e7d5      	b.n	800dade <_strtod_l+0x8de>
 800db32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db34:	ea13 0f0a 	tst.w	r3, sl
 800db38:	e7e0      	b.n	800dafc <_strtod_l+0x8fc>
 800db3a:	f7ff fb45 	bl	800d1c8 <sulp>
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	ec51 0b18 	vmov	r0, r1, d8
 800db46:	f7f2 fbaf 	bl	80002a8 <__aeabi_dsub>
 800db4a:	2200      	movs	r2, #0
 800db4c:	2300      	movs	r3, #0
 800db4e:	4682      	mov	sl, r0
 800db50:	468b      	mov	fp, r1
 800db52:	f7f2 ffc9 	bl	8000ae8 <__aeabi_dcmpeq>
 800db56:	2800      	cmp	r0, #0
 800db58:	d0c1      	beq.n	800dade <_strtod_l+0x8de>
 800db5a:	e611      	b.n	800d780 <_strtod_l+0x580>
 800db5c:	fffffc02 	.word	0xfffffc02
 800db60:	7ff00000 	.word	0x7ff00000
 800db64:	39500000 	.word	0x39500000
 800db68:	000fffff 	.word	0x000fffff
 800db6c:	7fefffff 	.word	0x7fefffff
 800db70:	08012538 	.word	0x08012538
 800db74:	4631      	mov	r1, r6
 800db76:	4628      	mov	r0, r5
 800db78:	f002 fa84 	bl	8010084 <__ratio>
 800db7c:	ec59 8b10 	vmov	r8, r9, d0
 800db80:	ee10 0a10 	vmov	r0, s0
 800db84:	2200      	movs	r2, #0
 800db86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db8a:	4649      	mov	r1, r9
 800db8c:	f7f2 ffc0 	bl	8000b10 <__aeabi_dcmple>
 800db90:	2800      	cmp	r0, #0
 800db92:	d07a      	beq.n	800dc8a <_strtod_l+0xa8a>
 800db94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db96:	2b00      	cmp	r3, #0
 800db98:	d04a      	beq.n	800dc30 <_strtod_l+0xa30>
 800db9a:	4b95      	ldr	r3, [pc, #596]	; (800ddf0 <_strtod_l+0xbf0>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dba2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ddf0 <_strtod_l+0xbf0>
 800dba6:	f04f 0800 	mov.w	r8, #0
 800dbaa:	4b92      	ldr	r3, [pc, #584]	; (800ddf4 <_strtod_l+0xbf4>)
 800dbac:	403b      	ands	r3, r7
 800dbae:	930d      	str	r3, [sp, #52]	; 0x34
 800dbb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbb2:	4b91      	ldr	r3, [pc, #580]	; (800ddf8 <_strtod_l+0xbf8>)
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f040 80b0 	bne.w	800dd1a <_strtod_l+0xb1a>
 800dbba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dbc2:	ec4b ab10 	vmov	d0, sl, fp
 800dbc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dbca:	f002 f983 	bl	800fed4 <__ulp>
 800dbce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbd2:	ec53 2b10 	vmov	r2, r3, d0
 800dbd6:	f7f2 fd1f 	bl	8000618 <__aeabi_dmul>
 800dbda:	4652      	mov	r2, sl
 800dbdc:	465b      	mov	r3, fp
 800dbde:	f7f2 fb65 	bl	80002ac <__adddf3>
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4983      	ldr	r1, [pc, #524]	; (800ddf4 <_strtod_l+0xbf4>)
 800dbe6:	4a85      	ldr	r2, [pc, #532]	; (800ddfc <_strtod_l+0xbfc>)
 800dbe8:	4019      	ands	r1, r3
 800dbea:	4291      	cmp	r1, r2
 800dbec:	4682      	mov	sl, r0
 800dbee:	d960      	bls.n	800dcb2 <_strtod_l+0xab2>
 800dbf0:	ee18 3a90 	vmov	r3, s17
 800dbf4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d104      	bne.n	800dc06 <_strtod_l+0xa06>
 800dbfc:	ee18 3a10 	vmov	r3, s16
 800dc00:	3301      	adds	r3, #1
 800dc02:	f43f ad45 	beq.w	800d690 <_strtod_l+0x490>
 800dc06:	f8df b200 	ldr.w	fp, [pc, #512]	; 800de08 <_strtod_l+0xc08>
 800dc0a:	f04f 3aff 	mov.w	sl, #4294967295
 800dc0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc10:	4620      	mov	r0, r4
 800dc12:	f001 fe2d 	bl	800f870 <_Bfree>
 800dc16:	9905      	ldr	r1, [sp, #20]
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f001 fe29 	bl	800f870 <_Bfree>
 800dc1e:	4631      	mov	r1, r6
 800dc20:	4620      	mov	r0, r4
 800dc22:	f001 fe25 	bl	800f870 <_Bfree>
 800dc26:	4629      	mov	r1, r5
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f001 fe21 	bl	800f870 <_Bfree>
 800dc2e:	e61a      	b.n	800d866 <_strtod_l+0x666>
 800dc30:	f1ba 0f00 	cmp.w	sl, #0
 800dc34:	d11b      	bne.n	800dc6e <_strtod_l+0xa6e>
 800dc36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc3a:	b9f3      	cbnz	r3, 800dc7a <_strtod_l+0xa7a>
 800dc3c:	4b6c      	ldr	r3, [pc, #432]	; (800ddf0 <_strtod_l+0xbf0>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	4640      	mov	r0, r8
 800dc42:	4649      	mov	r1, r9
 800dc44:	f7f2 ff5a 	bl	8000afc <__aeabi_dcmplt>
 800dc48:	b9d0      	cbnz	r0, 800dc80 <_strtod_l+0xa80>
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	4b6c      	ldr	r3, [pc, #432]	; (800de00 <_strtod_l+0xc00>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	f7f2 fce1 	bl	8000618 <__aeabi_dmul>
 800dc56:	4680      	mov	r8, r0
 800dc58:	4689      	mov	r9, r1
 800dc5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dc5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dc62:	9315      	str	r3, [sp, #84]	; 0x54
 800dc64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dc68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc6c:	e79d      	b.n	800dbaa <_strtod_l+0x9aa>
 800dc6e:	f1ba 0f01 	cmp.w	sl, #1
 800dc72:	d102      	bne.n	800dc7a <_strtod_l+0xa7a>
 800dc74:	2f00      	cmp	r7, #0
 800dc76:	f43f ad83 	beq.w	800d780 <_strtod_l+0x580>
 800dc7a:	4b62      	ldr	r3, [pc, #392]	; (800de04 <_strtod_l+0xc04>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	e78e      	b.n	800db9e <_strtod_l+0x99e>
 800dc80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800de00 <_strtod_l+0xc00>
 800dc84:	f04f 0800 	mov.w	r8, #0
 800dc88:	e7e7      	b.n	800dc5a <_strtod_l+0xa5a>
 800dc8a:	4b5d      	ldr	r3, [pc, #372]	; (800de00 <_strtod_l+0xc00>)
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	4649      	mov	r1, r9
 800dc90:	2200      	movs	r2, #0
 800dc92:	f7f2 fcc1 	bl	8000618 <__aeabi_dmul>
 800dc96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc98:	4680      	mov	r8, r0
 800dc9a:	4689      	mov	r9, r1
 800dc9c:	b933      	cbnz	r3, 800dcac <_strtod_l+0xaac>
 800dc9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dca2:	900e      	str	r0, [sp, #56]	; 0x38
 800dca4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dca6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dcaa:	e7dd      	b.n	800dc68 <_strtod_l+0xa68>
 800dcac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dcb0:	e7f9      	b.n	800dca6 <_strtod_l+0xaa6>
 800dcb2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dcb6:	9b04      	ldr	r3, [sp, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1a8      	bne.n	800dc0e <_strtod_l+0xa0e>
 800dcbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dcc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcc2:	0d1b      	lsrs	r3, r3, #20
 800dcc4:	051b      	lsls	r3, r3, #20
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d1a1      	bne.n	800dc0e <_strtod_l+0xa0e>
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	f7f3 f803 	bl	8000cd8 <__aeabi_d2lz>
 800dcd2:	f7f2 fc73 	bl	80005bc <__aeabi_l2d>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	4640      	mov	r0, r8
 800dcdc:	4649      	mov	r1, r9
 800dcde:	f7f2 fae3 	bl	80002a8 <__aeabi_dsub>
 800dce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dce8:	ea43 030a 	orr.w	r3, r3, sl
 800dcec:	4313      	orrs	r3, r2
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	d055      	beq.n	800dda0 <_strtod_l+0xba0>
 800dcf4:	a336      	add	r3, pc, #216	; (adr r3, 800ddd0 <_strtod_l+0xbd0>)
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	f7f2 feff 	bl	8000afc <__aeabi_dcmplt>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	f47f acd0 	bne.w	800d6a4 <_strtod_l+0x4a4>
 800dd04:	a334      	add	r3, pc, #208	; (adr r3, 800ddd8 <_strtod_l+0xbd8>)
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	4649      	mov	r1, r9
 800dd0e:	f7f2 ff13 	bl	8000b38 <__aeabi_dcmpgt>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	f43f af7b 	beq.w	800dc0e <_strtod_l+0xa0e>
 800dd18:	e4c4      	b.n	800d6a4 <_strtod_l+0x4a4>
 800dd1a:	9b04      	ldr	r3, [sp, #16]
 800dd1c:	b333      	cbz	r3, 800dd6c <_strtod_l+0xb6c>
 800dd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dd24:	d822      	bhi.n	800dd6c <_strtod_l+0xb6c>
 800dd26:	a32e      	add	r3, pc, #184	; (adr r3, 800dde0 <_strtod_l+0xbe0>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	4649      	mov	r1, r9
 800dd30:	f7f2 feee 	bl	8000b10 <__aeabi_dcmple>
 800dd34:	b1a0      	cbz	r0, 800dd60 <_strtod_l+0xb60>
 800dd36:	4649      	mov	r1, r9
 800dd38:	4640      	mov	r0, r8
 800dd3a:	f7f2 ff45 	bl	8000bc8 <__aeabi_d2uiz>
 800dd3e:	2801      	cmp	r0, #1
 800dd40:	bf38      	it	cc
 800dd42:	2001      	movcc	r0, #1
 800dd44:	f7f2 fbee 	bl	8000524 <__aeabi_ui2d>
 800dd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd4a:	4680      	mov	r8, r0
 800dd4c:	4689      	mov	r9, r1
 800dd4e:	bb23      	cbnz	r3, 800dd9a <_strtod_l+0xb9a>
 800dd50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd54:	9010      	str	r0, [sp, #64]	; 0x40
 800dd56:	9311      	str	r3, [sp, #68]	; 0x44
 800dd58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dd5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dd68:	1a9b      	subs	r3, r3, r2
 800dd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd70:	eeb0 0a48 	vmov.f32	s0, s16
 800dd74:	eef0 0a68 	vmov.f32	s1, s17
 800dd78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd7c:	f002 f8aa 	bl	800fed4 <__ulp>
 800dd80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd84:	ec53 2b10 	vmov	r2, r3, d0
 800dd88:	f7f2 fc46 	bl	8000618 <__aeabi_dmul>
 800dd8c:	ec53 2b18 	vmov	r2, r3, d8
 800dd90:	f7f2 fa8c 	bl	80002ac <__adddf3>
 800dd94:	4682      	mov	sl, r0
 800dd96:	468b      	mov	fp, r1
 800dd98:	e78d      	b.n	800dcb6 <_strtod_l+0xab6>
 800dd9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dd9e:	e7db      	b.n	800dd58 <_strtod_l+0xb58>
 800dda0:	a311      	add	r3, pc, #68	; (adr r3, 800dde8 <_strtod_l+0xbe8>)
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	f7f2 fea9 	bl	8000afc <__aeabi_dcmplt>
 800ddaa:	e7b2      	b.n	800dd12 <_strtod_l+0xb12>
 800ddac:	2300      	movs	r3, #0
 800ddae:	930a      	str	r3, [sp, #40]	; 0x28
 800ddb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ddb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	f7ff ba6b 	b.w	800d290 <_strtod_l+0x90>
 800ddba:	2a65      	cmp	r2, #101	; 0x65
 800ddbc:	f43f ab5f 	beq.w	800d47e <_strtod_l+0x27e>
 800ddc0:	2a45      	cmp	r2, #69	; 0x45
 800ddc2:	f43f ab5c 	beq.w	800d47e <_strtod_l+0x27e>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	f7ff bb94 	b.w	800d4f4 <_strtod_l+0x2f4>
 800ddcc:	f3af 8000 	nop.w
 800ddd0:	94a03595 	.word	0x94a03595
 800ddd4:	3fdfffff 	.word	0x3fdfffff
 800ddd8:	35afe535 	.word	0x35afe535
 800dddc:	3fe00000 	.word	0x3fe00000
 800dde0:	ffc00000 	.word	0xffc00000
 800dde4:	41dfffff 	.word	0x41dfffff
 800dde8:	94a03595 	.word	0x94a03595
 800ddec:	3fcfffff 	.word	0x3fcfffff
 800ddf0:	3ff00000 	.word	0x3ff00000
 800ddf4:	7ff00000 	.word	0x7ff00000
 800ddf8:	7fe00000 	.word	0x7fe00000
 800ddfc:	7c9fffff 	.word	0x7c9fffff
 800de00:	3fe00000 	.word	0x3fe00000
 800de04:	bff00000 	.word	0xbff00000
 800de08:	7fefffff 	.word	0x7fefffff

0800de0c <_strtod_r>:
 800de0c:	4b01      	ldr	r3, [pc, #4]	; (800de14 <_strtod_r+0x8>)
 800de0e:	f7ff b9f7 	b.w	800d200 <_strtod_l>
 800de12:	bf00      	nop
 800de14:	200002a4 	.word	0x200002a4

0800de18 <strtod>:
 800de18:	460a      	mov	r2, r1
 800de1a:	4601      	mov	r1, r0
 800de1c:	4802      	ldr	r0, [pc, #8]	; (800de28 <strtod+0x10>)
 800de1e:	4b03      	ldr	r3, [pc, #12]	; (800de2c <strtod+0x14>)
 800de20:	6800      	ldr	r0, [r0, #0]
 800de22:	f7ff b9ed 	b.w	800d200 <_strtod_l>
 800de26:	bf00      	nop
 800de28:	2000023c 	.word	0x2000023c
 800de2c:	200002a4 	.word	0x200002a4

0800de30 <_strtol_l.constprop.0>:
 800de30:	2b01      	cmp	r3, #1
 800de32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de36:	d001      	beq.n	800de3c <_strtol_l.constprop.0+0xc>
 800de38:	2b24      	cmp	r3, #36	; 0x24
 800de3a:	d906      	bls.n	800de4a <_strtol_l.constprop.0+0x1a>
 800de3c:	f7fd fedc 	bl	800bbf8 <__errno>
 800de40:	2316      	movs	r3, #22
 800de42:	6003      	str	r3, [r0, #0]
 800de44:	2000      	movs	r0, #0
 800de46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800df30 <_strtol_l.constprop.0+0x100>
 800de4e:	460d      	mov	r5, r1
 800de50:	462e      	mov	r6, r5
 800de52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de56:	f814 700c 	ldrb.w	r7, [r4, ip]
 800de5a:	f017 0708 	ands.w	r7, r7, #8
 800de5e:	d1f7      	bne.n	800de50 <_strtol_l.constprop.0+0x20>
 800de60:	2c2d      	cmp	r4, #45	; 0x2d
 800de62:	d132      	bne.n	800deca <_strtol_l.constprop.0+0x9a>
 800de64:	782c      	ldrb	r4, [r5, #0]
 800de66:	2701      	movs	r7, #1
 800de68:	1cb5      	adds	r5, r6, #2
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d05b      	beq.n	800df26 <_strtol_l.constprop.0+0xf6>
 800de6e:	2b10      	cmp	r3, #16
 800de70:	d109      	bne.n	800de86 <_strtol_l.constprop.0+0x56>
 800de72:	2c30      	cmp	r4, #48	; 0x30
 800de74:	d107      	bne.n	800de86 <_strtol_l.constprop.0+0x56>
 800de76:	782c      	ldrb	r4, [r5, #0]
 800de78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800de7c:	2c58      	cmp	r4, #88	; 0x58
 800de7e:	d14d      	bne.n	800df1c <_strtol_l.constprop.0+0xec>
 800de80:	786c      	ldrb	r4, [r5, #1]
 800de82:	2310      	movs	r3, #16
 800de84:	3502      	adds	r5, #2
 800de86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800de8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800de8e:	f04f 0c00 	mov.w	ip, #0
 800de92:	fbb8 f9f3 	udiv	r9, r8, r3
 800de96:	4666      	mov	r6, ip
 800de98:	fb03 8a19 	mls	sl, r3, r9, r8
 800de9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dea0:	f1be 0f09 	cmp.w	lr, #9
 800dea4:	d816      	bhi.n	800ded4 <_strtol_l.constprop.0+0xa4>
 800dea6:	4674      	mov	r4, lr
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	dd24      	ble.n	800def6 <_strtol_l.constprop.0+0xc6>
 800deac:	f1bc 0f00 	cmp.w	ip, #0
 800deb0:	db1e      	blt.n	800def0 <_strtol_l.constprop.0+0xc0>
 800deb2:	45b1      	cmp	r9, r6
 800deb4:	d31c      	bcc.n	800def0 <_strtol_l.constprop.0+0xc0>
 800deb6:	d101      	bne.n	800debc <_strtol_l.constprop.0+0x8c>
 800deb8:	45a2      	cmp	sl, r4
 800deba:	db19      	blt.n	800def0 <_strtol_l.constprop.0+0xc0>
 800debc:	fb06 4603 	mla	r6, r6, r3, r4
 800dec0:	f04f 0c01 	mov.w	ip, #1
 800dec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dec8:	e7e8      	b.n	800de9c <_strtol_l.constprop.0+0x6c>
 800deca:	2c2b      	cmp	r4, #43	; 0x2b
 800decc:	bf04      	itt	eq
 800dece:	782c      	ldrbeq	r4, [r5, #0]
 800ded0:	1cb5      	addeq	r5, r6, #2
 800ded2:	e7ca      	b.n	800de6a <_strtol_l.constprop.0+0x3a>
 800ded4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ded8:	f1be 0f19 	cmp.w	lr, #25
 800dedc:	d801      	bhi.n	800dee2 <_strtol_l.constprop.0+0xb2>
 800dede:	3c37      	subs	r4, #55	; 0x37
 800dee0:	e7e2      	b.n	800dea8 <_strtol_l.constprop.0+0x78>
 800dee2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dee6:	f1be 0f19 	cmp.w	lr, #25
 800deea:	d804      	bhi.n	800def6 <_strtol_l.constprop.0+0xc6>
 800deec:	3c57      	subs	r4, #87	; 0x57
 800deee:	e7db      	b.n	800dea8 <_strtol_l.constprop.0+0x78>
 800def0:	f04f 3cff 	mov.w	ip, #4294967295
 800def4:	e7e6      	b.n	800dec4 <_strtol_l.constprop.0+0x94>
 800def6:	f1bc 0f00 	cmp.w	ip, #0
 800defa:	da05      	bge.n	800df08 <_strtol_l.constprop.0+0xd8>
 800defc:	2322      	movs	r3, #34	; 0x22
 800defe:	6003      	str	r3, [r0, #0]
 800df00:	4646      	mov	r6, r8
 800df02:	b942      	cbnz	r2, 800df16 <_strtol_l.constprop.0+0xe6>
 800df04:	4630      	mov	r0, r6
 800df06:	e79e      	b.n	800de46 <_strtol_l.constprop.0+0x16>
 800df08:	b107      	cbz	r7, 800df0c <_strtol_l.constprop.0+0xdc>
 800df0a:	4276      	negs	r6, r6
 800df0c:	2a00      	cmp	r2, #0
 800df0e:	d0f9      	beq.n	800df04 <_strtol_l.constprop.0+0xd4>
 800df10:	f1bc 0f00 	cmp.w	ip, #0
 800df14:	d000      	beq.n	800df18 <_strtol_l.constprop.0+0xe8>
 800df16:	1e69      	subs	r1, r5, #1
 800df18:	6011      	str	r1, [r2, #0]
 800df1a:	e7f3      	b.n	800df04 <_strtol_l.constprop.0+0xd4>
 800df1c:	2430      	movs	r4, #48	; 0x30
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1b1      	bne.n	800de86 <_strtol_l.constprop.0+0x56>
 800df22:	2308      	movs	r3, #8
 800df24:	e7af      	b.n	800de86 <_strtol_l.constprop.0+0x56>
 800df26:	2c30      	cmp	r4, #48	; 0x30
 800df28:	d0a5      	beq.n	800de76 <_strtol_l.constprop.0+0x46>
 800df2a:	230a      	movs	r3, #10
 800df2c:	e7ab      	b.n	800de86 <_strtol_l.constprop.0+0x56>
 800df2e:	bf00      	nop
 800df30:	08012361 	.word	0x08012361

0800df34 <_strtol_r>:
 800df34:	f7ff bf7c 	b.w	800de30 <_strtol_l.constprop.0>

0800df38 <strtol>:
 800df38:	4613      	mov	r3, r2
 800df3a:	460a      	mov	r2, r1
 800df3c:	4601      	mov	r1, r0
 800df3e:	4802      	ldr	r0, [pc, #8]	; (800df48 <strtol+0x10>)
 800df40:	6800      	ldr	r0, [r0, #0]
 800df42:	f7ff bf75 	b.w	800de30 <_strtol_l.constprop.0>
 800df46:	bf00      	nop
 800df48:	2000023c 	.word	0x2000023c

0800df4c <__swbuf_r>:
 800df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4e:	460e      	mov	r6, r1
 800df50:	4614      	mov	r4, r2
 800df52:	4605      	mov	r5, r0
 800df54:	b118      	cbz	r0, 800df5e <__swbuf_r+0x12>
 800df56:	6983      	ldr	r3, [r0, #24]
 800df58:	b90b      	cbnz	r3, 800df5e <__swbuf_r+0x12>
 800df5a:	f7fd feab 	bl	800bcb4 <__sinit>
 800df5e:	4b21      	ldr	r3, [pc, #132]	; (800dfe4 <__swbuf_r+0x98>)
 800df60:	429c      	cmp	r4, r3
 800df62:	d12b      	bne.n	800dfbc <__swbuf_r+0x70>
 800df64:	686c      	ldr	r4, [r5, #4]
 800df66:	69a3      	ldr	r3, [r4, #24]
 800df68:	60a3      	str	r3, [r4, #8]
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	071a      	lsls	r2, r3, #28
 800df6e:	d52f      	bpl.n	800dfd0 <__swbuf_r+0x84>
 800df70:	6923      	ldr	r3, [r4, #16]
 800df72:	b36b      	cbz	r3, 800dfd0 <__swbuf_r+0x84>
 800df74:	6923      	ldr	r3, [r4, #16]
 800df76:	6820      	ldr	r0, [r4, #0]
 800df78:	1ac0      	subs	r0, r0, r3
 800df7a:	6963      	ldr	r3, [r4, #20]
 800df7c:	b2f6      	uxtb	r6, r6
 800df7e:	4283      	cmp	r3, r0
 800df80:	4637      	mov	r7, r6
 800df82:	dc04      	bgt.n	800df8e <__swbuf_r+0x42>
 800df84:	4621      	mov	r1, r4
 800df86:	4628      	mov	r0, r5
 800df88:	f000 ffca 	bl	800ef20 <_fflush_r>
 800df8c:	bb30      	cbnz	r0, 800dfdc <__swbuf_r+0x90>
 800df8e:	68a3      	ldr	r3, [r4, #8]
 800df90:	3b01      	subs	r3, #1
 800df92:	60a3      	str	r3, [r4, #8]
 800df94:	6823      	ldr	r3, [r4, #0]
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	6022      	str	r2, [r4, #0]
 800df9a:	701e      	strb	r6, [r3, #0]
 800df9c:	6963      	ldr	r3, [r4, #20]
 800df9e:	3001      	adds	r0, #1
 800dfa0:	4283      	cmp	r3, r0
 800dfa2:	d004      	beq.n	800dfae <__swbuf_r+0x62>
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	07db      	lsls	r3, r3, #31
 800dfa8:	d506      	bpl.n	800dfb8 <__swbuf_r+0x6c>
 800dfaa:	2e0a      	cmp	r6, #10
 800dfac:	d104      	bne.n	800dfb8 <__swbuf_r+0x6c>
 800dfae:	4621      	mov	r1, r4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f000 ffb5 	bl	800ef20 <_fflush_r>
 800dfb6:	b988      	cbnz	r0, 800dfdc <__swbuf_r+0x90>
 800dfb8:	4638      	mov	r0, r7
 800dfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfbc:	4b0a      	ldr	r3, [pc, #40]	; (800dfe8 <__swbuf_r+0x9c>)
 800dfbe:	429c      	cmp	r4, r3
 800dfc0:	d101      	bne.n	800dfc6 <__swbuf_r+0x7a>
 800dfc2:	68ac      	ldr	r4, [r5, #8]
 800dfc4:	e7cf      	b.n	800df66 <__swbuf_r+0x1a>
 800dfc6:	4b09      	ldr	r3, [pc, #36]	; (800dfec <__swbuf_r+0xa0>)
 800dfc8:	429c      	cmp	r4, r3
 800dfca:	bf08      	it	eq
 800dfcc:	68ec      	ldreq	r4, [r5, #12]
 800dfce:	e7ca      	b.n	800df66 <__swbuf_r+0x1a>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f000 f81e 	bl	800e014 <__swsetup_r>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d0cb      	beq.n	800df74 <__swbuf_r+0x28>
 800dfdc:	f04f 37ff 	mov.w	r7, #4294967295
 800dfe0:	e7ea      	b.n	800dfb8 <__swbuf_r+0x6c>
 800dfe2:	bf00      	nop
 800dfe4:	08012484 	.word	0x08012484
 800dfe8:	080124a4 	.word	0x080124a4
 800dfec:	08012464 	.word	0x08012464

0800dff0 <_write_r>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4d07      	ldr	r5, [pc, #28]	; (800e010 <_write_r+0x20>)
 800dff4:	4604      	mov	r4, r0
 800dff6:	4608      	mov	r0, r1
 800dff8:	4611      	mov	r1, r2
 800dffa:	2200      	movs	r2, #0
 800dffc:	602a      	str	r2, [r5, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	f7f4 ff29 	bl	8002e56 <_write>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d102      	bne.n	800e00e <_write_r+0x1e>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	b103      	cbz	r3, 800e00e <_write_r+0x1e>
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	bd38      	pop	{r3, r4, r5, pc}
 800e010:	20013300 	.word	0x20013300

0800e014 <__swsetup_r>:
 800e014:	4b32      	ldr	r3, [pc, #200]	; (800e0e0 <__swsetup_r+0xcc>)
 800e016:	b570      	push	{r4, r5, r6, lr}
 800e018:	681d      	ldr	r5, [r3, #0]
 800e01a:	4606      	mov	r6, r0
 800e01c:	460c      	mov	r4, r1
 800e01e:	b125      	cbz	r5, 800e02a <__swsetup_r+0x16>
 800e020:	69ab      	ldr	r3, [r5, #24]
 800e022:	b913      	cbnz	r3, 800e02a <__swsetup_r+0x16>
 800e024:	4628      	mov	r0, r5
 800e026:	f7fd fe45 	bl	800bcb4 <__sinit>
 800e02a:	4b2e      	ldr	r3, [pc, #184]	; (800e0e4 <__swsetup_r+0xd0>)
 800e02c:	429c      	cmp	r4, r3
 800e02e:	d10f      	bne.n	800e050 <__swsetup_r+0x3c>
 800e030:	686c      	ldr	r4, [r5, #4]
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e038:	0719      	lsls	r1, r3, #28
 800e03a:	d42c      	bmi.n	800e096 <__swsetup_r+0x82>
 800e03c:	06dd      	lsls	r5, r3, #27
 800e03e:	d411      	bmi.n	800e064 <__swsetup_r+0x50>
 800e040:	2309      	movs	r3, #9
 800e042:	6033      	str	r3, [r6, #0]
 800e044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e048:	81a3      	strh	r3, [r4, #12]
 800e04a:	f04f 30ff 	mov.w	r0, #4294967295
 800e04e:	e03e      	b.n	800e0ce <__swsetup_r+0xba>
 800e050:	4b25      	ldr	r3, [pc, #148]	; (800e0e8 <__swsetup_r+0xd4>)
 800e052:	429c      	cmp	r4, r3
 800e054:	d101      	bne.n	800e05a <__swsetup_r+0x46>
 800e056:	68ac      	ldr	r4, [r5, #8]
 800e058:	e7eb      	b.n	800e032 <__swsetup_r+0x1e>
 800e05a:	4b24      	ldr	r3, [pc, #144]	; (800e0ec <__swsetup_r+0xd8>)
 800e05c:	429c      	cmp	r4, r3
 800e05e:	bf08      	it	eq
 800e060:	68ec      	ldreq	r4, [r5, #12]
 800e062:	e7e6      	b.n	800e032 <__swsetup_r+0x1e>
 800e064:	0758      	lsls	r0, r3, #29
 800e066:	d512      	bpl.n	800e08e <__swsetup_r+0x7a>
 800e068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e06a:	b141      	cbz	r1, 800e07e <__swsetup_r+0x6a>
 800e06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e070:	4299      	cmp	r1, r3
 800e072:	d002      	beq.n	800e07a <__swsetup_r+0x66>
 800e074:	4630      	mov	r0, r6
 800e076:	f002 f893 	bl	80101a0 <_free_r>
 800e07a:	2300      	movs	r3, #0
 800e07c:	6363      	str	r3, [r4, #52]	; 0x34
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e084:	81a3      	strh	r3, [r4, #12]
 800e086:	2300      	movs	r3, #0
 800e088:	6063      	str	r3, [r4, #4]
 800e08a:	6923      	ldr	r3, [r4, #16]
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	89a3      	ldrh	r3, [r4, #12]
 800e090:	f043 0308 	orr.w	r3, r3, #8
 800e094:	81a3      	strh	r3, [r4, #12]
 800e096:	6923      	ldr	r3, [r4, #16]
 800e098:	b94b      	cbnz	r3, 800e0ae <__swsetup_r+0x9a>
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0a4:	d003      	beq.n	800e0ae <__swsetup_r+0x9a>
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f001 fb21 	bl	800f6f0 <__smakebuf_r>
 800e0ae:	89a0      	ldrh	r0, [r4, #12]
 800e0b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0b4:	f010 0301 	ands.w	r3, r0, #1
 800e0b8:	d00a      	beq.n	800e0d0 <__swsetup_r+0xbc>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60a3      	str	r3, [r4, #8]
 800e0be:	6963      	ldr	r3, [r4, #20]
 800e0c0:	425b      	negs	r3, r3
 800e0c2:	61a3      	str	r3, [r4, #24]
 800e0c4:	6923      	ldr	r3, [r4, #16]
 800e0c6:	b943      	cbnz	r3, 800e0da <__swsetup_r+0xc6>
 800e0c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0cc:	d1ba      	bne.n	800e044 <__swsetup_r+0x30>
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	0781      	lsls	r1, r0, #30
 800e0d2:	bf58      	it	pl
 800e0d4:	6963      	ldrpl	r3, [r4, #20]
 800e0d6:	60a3      	str	r3, [r4, #8]
 800e0d8:	e7f4      	b.n	800e0c4 <__swsetup_r+0xb0>
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e7f7      	b.n	800e0ce <__swsetup_r+0xba>
 800e0de:	bf00      	nop
 800e0e0:	2000023c 	.word	0x2000023c
 800e0e4:	08012484 	.word	0x08012484
 800e0e8:	080124a4 	.word	0x080124a4
 800e0ec:	08012464 	.word	0x08012464

0800e0f0 <abort>:
 800e0f0:	b508      	push	{r3, lr}
 800e0f2:	2006      	movs	r0, #6
 800e0f4:	f002 fdc8 	bl	8010c88 <raise>
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	f7f4 fe85 	bl	8002e08 <_exit>
	...

0800e100 <_close_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d06      	ldr	r5, [pc, #24]	; (800e11c <_close_r+0x1c>)
 800e104:	2300      	movs	r3, #0
 800e106:	4604      	mov	r4, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	602b      	str	r3, [r5, #0]
 800e10c:	f7f4 febf 	bl	8002e8e <_close>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_close_r+0x1a>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_close_r+0x1a>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	20013300 	.word	0x20013300

0800e120 <quorem>:
 800e120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	6903      	ldr	r3, [r0, #16]
 800e126:	690c      	ldr	r4, [r1, #16]
 800e128:	42a3      	cmp	r3, r4
 800e12a:	4607      	mov	r7, r0
 800e12c:	f2c0 8081 	blt.w	800e232 <quorem+0x112>
 800e130:	3c01      	subs	r4, #1
 800e132:	f101 0814 	add.w	r8, r1, #20
 800e136:	f100 0514 	add.w	r5, r0, #20
 800e13a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e148:	3301      	adds	r3, #1
 800e14a:	429a      	cmp	r2, r3
 800e14c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e154:	fbb2 f6f3 	udiv	r6, r2, r3
 800e158:	d331      	bcc.n	800e1be <quorem+0x9e>
 800e15a:	f04f 0e00 	mov.w	lr, #0
 800e15e:	4640      	mov	r0, r8
 800e160:	46ac      	mov	ip, r5
 800e162:	46f2      	mov	sl, lr
 800e164:	f850 2b04 	ldr.w	r2, [r0], #4
 800e168:	b293      	uxth	r3, r2
 800e16a:	fb06 e303 	mla	r3, r6, r3, lr
 800e16e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e172:	b29b      	uxth	r3, r3
 800e174:	ebaa 0303 	sub.w	r3, sl, r3
 800e178:	f8dc a000 	ldr.w	sl, [ip]
 800e17c:	0c12      	lsrs	r2, r2, #16
 800e17e:	fa13 f38a 	uxtah	r3, r3, sl
 800e182:	fb06 e202 	mla	r2, r6, r2, lr
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	9b00      	ldr	r3, [sp, #0]
 800e18a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e18e:	b292      	uxth	r2, r2
 800e190:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e198:	f8bd 3000 	ldrh.w	r3, [sp]
 800e19c:	4581      	cmp	r9, r0
 800e19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1a2:	f84c 3b04 	str.w	r3, [ip], #4
 800e1a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e1aa:	d2db      	bcs.n	800e164 <quorem+0x44>
 800e1ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800e1b0:	b92b      	cbnz	r3, 800e1be <quorem+0x9e>
 800e1b2:	9b01      	ldr	r3, [sp, #4]
 800e1b4:	3b04      	subs	r3, #4
 800e1b6:	429d      	cmp	r5, r3
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	d32e      	bcc.n	800e21a <quorem+0xfa>
 800e1bc:	613c      	str	r4, [r7, #16]
 800e1be:	4638      	mov	r0, r7
 800e1c0:	f001 fde2 	bl	800fd88 <__mcmp>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	db24      	blt.n	800e212 <quorem+0xf2>
 800e1c8:	3601      	adds	r6, #1
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f04f 0c00 	mov.w	ip, #0
 800e1d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1d4:	f8d0 e000 	ldr.w	lr, [r0]
 800e1d8:	b293      	uxth	r3, r2
 800e1da:	ebac 0303 	sub.w	r3, ip, r3
 800e1de:	0c12      	lsrs	r2, r2, #16
 800e1e0:	fa13 f38e 	uxtah	r3, r3, lr
 800e1e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e1e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1f2:	45c1      	cmp	r9, r8
 800e1f4:	f840 3b04 	str.w	r3, [r0], #4
 800e1f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e1fc:	d2e8      	bcs.n	800e1d0 <quorem+0xb0>
 800e1fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e206:	b922      	cbnz	r2, 800e212 <quorem+0xf2>
 800e208:	3b04      	subs	r3, #4
 800e20a:	429d      	cmp	r5, r3
 800e20c:	461a      	mov	r2, r3
 800e20e:	d30a      	bcc.n	800e226 <quorem+0x106>
 800e210:	613c      	str	r4, [r7, #16]
 800e212:	4630      	mov	r0, r6
 800e214:	b003      	add	sp, #12
 800e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21a:	6812      	ldr	r2, [r2, #0]
 800e21c:	3b04      	subs	r3, #4
 800e21e:	2a00      	cmp	r2, #0
 800e220:	d1cc      	bne.n	800e1bc <quorem+0x9c>
 800e222:	3c01      	subs	r4, #1
 800e224:	e7c7      	b.n	800e1b6 <quorem+0x96>
 800e226:	6812      	ldr	r2, [r2, #0]
 800e228:	3b04      	subs	r3, #4
 800e22a:	2a00      	cmp	r2, #0
 800e22c:	d1f0      	bne.n	800e210 <quorem+0xf0>
 800e22e:	3c01      	subs	r4, #1
 800e230:	e7eb      	b.n	800e20a <quorem+0xea>
 800e232:	2000      	movs	r0, #0
 800e234:	e7ee      	b.n	800e214 <quorem+0xf4>
	...

0800e238 <_dtoa_r>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	ed2d 8b04 	vpush	{d8-d9}
 800e240:	ec57 6b10 	vmov	r6, r7, d0
 800e244:	b093      	sub	sp, #76	; 0x4c
 800e246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e248:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e24c:	9106      	str	r1, [sp, #24]
 800e24e:	ee10 aa10 	vmov	sl, s0
 800e252:	4604      	mov	r4, r0
 800e254:	9209      	str	r2, [sp, #36]	; 0x24
 800e256:	930c      	str	r3, [sp, #48]	; 0x30
 800e258:	46bb      	mov	fp, r7
 800e25a:	b975      	cbnz	r5, 800e27a <_dtoa_r+0x42>
 800e25c:	2010      	movs	r0, #16
 800e25e:	f001 fa87 	bl	800f770 <malloc>
 800e262:	4602      	mov	r2, r0
 800e264:	6260      	str	r0, [r4, #36]	; 0x24
 800e266:	b920      	cbnz	r0, 800e272 <_dtoa_r+0x3a>
 800e268:	4ba7      	ldr	r3, [pc, #668]	; (800e508 <_dtoa_r+0x2d0>)
 800e26a:	21ea      	movs	r1, #234	; 0xea
 800e26c:	48a7      	ldr	r0, [pc, #668]	; (800e50c <_dtoa_r+0x2d4>)
 800e26e:	f7fd fc9d 	bl	800bbac <__assert_func>
 800e272:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e276:	6005      	str	r5, [r0, #0]
 800e278:	60c5      	str	r5, [r0, #12]
 800e27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e27c:	6819      	ldr	r1, [r3, #0]
 800e27e:	b151      	cbz	r1, 800e296 <_dtoa_r+0x5e>
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	604a      	str	r2, [r1, #4]
 800e284:	2301      	movs	r3, #1
 800e286:	4093      	lsls	r3, r2
 800e288:	608b      	str	r3, [r1, #8]
 800e28a:	4620      	mov	r0, r4
 800e28c:	f001 faf0 	bl	800f870 <_Bfree>
 800e290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	1e3b      	subs	r3, r7, #0
 800e298:	bfaa      	itet	ge
 800e29a:	2300      	movge	r3, #0
 800e29c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e2a0:	f8c8 3000 	strge.w	r3, [r8]
 800e2a4:	4b9a      	ldr	r3, [pc, #616]	; (800e510 <_dtoa_r+0x2d8>)
 800e2a6:	bfbc      	itt	lt
 800e2a8:	2201      	movlt	r2, #1
 800e2aa:	f8c8 2000 	strlt.w	r2, [r8]
 800e2ae:	ea33 030b 	bics.w	r3, r3, fp
 800e2b2:	d11b      	bne.n	800e2ec <_dtoa_r+0xb4>
 800e2b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2c0:	4333      	orrs	r3, r6
 800e2c2:	f000 8592 	beq.w	800edea <_dtoa_r+0xbb2>
 800e2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2c8:	b963      	cbnz	r3, 800e2e4 <_dtoa_r+0xac>
 800e2ca:	4b92      	ldr	r3, [pc, #584]	; (800e514 <_dtoa_r+0x2dc>)
 800e2cc:	e022      	b.n	800e314 <_dtoa_r+0xdc>
 800e2ce:	4b92      	ldr	r3, [pc, #584]	; (800e518 <_dtoa_r+0x2e0>)
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	3308      	adds	r3, #8
 800e2d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	9801      	ldr	r0, [sp, #4]
 800e2da:	b013      	add	sp, #76	; 0x4c
 800e2dc:	ecbd 8b04 	vpop	{d8-d9}
 800e2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e4:	4b8b      	ldr	r3, [pc, #556]	; (800e514 <_dtoa_r+0x2dc>)
 800e2e6:	9301      	str	r3, [sp, #4]
 800e2e8:	3303      	adds	r3, #3
 800e2ea:	e7f3      	b.n	800e2d4 <_dtoa_r+0x9c>
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	4650      	mov	r0, sl
 800e2f2:	4659      	mov	r1, fp
 800e2f4:	f7f2 fbf8 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2f8:	ec4b ab19 	vmov	d9, sl, fp
 800e2fc:	4680      	mov	r8, r0
 800e2fe:	b158      	cbz	r0, 800e318 <_dtoa_r+0xe0>
 800e300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e302:	2301      	movs	r3, #1
 800e304:	6013      	str	r3, [r2, #0]
 800e306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 856b 	beq.w	800ede4 <_dtoa_r+0xbac>
 800e30e:	4883      	ldr	r0, [pc, #524]	; (800e51c <_dtoa_r+0x2e4>)
 800e310:	6018      	str	r0, [r3, #0]
 800e312:	1e43      	subs	r3, r0, #1
 800e314:	9301      	str	r3, [sp, #4]
 800e316:	e7df      	b.n	800e2d8 <_dtoa_r+0xa0>
 800e318:	ec4b ab10 	vmov	d0, sl, fp
 800e31c:	aa10      	add	r2, sp, #64	; 0x40
 800e31e:	a911      	add	r1, sp, #68	; 0x44
 800e320:	4620      	mov	r0, r4
 800e322:	f001 fe53 	bl	800ffcc <__d2b>
 800e326:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e32a:	ee08 0a10 	vmov	s16, r0
 800e32e:	2d00      	cmp	r5, #0
 800e330:	f000 8084 	beq.w	800e43c <_dtoa_r+0x204>
 800e334:	ee19 3a90 	vmov	r3, s19
 800e338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e33c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e340:	4656      	mov	r6, sl
 800e342:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e34a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e34e:	4b74      	ldr	r3, [pc, #464]	; (800e520 <_dtoa_r+0x2e8>)
 800e350:	2200      	movs	r2, #0
 800e352:	4630      	mov	r0, r6
 800e354:	4639      	mov	r1, r7
 800e356:	f7f1 ffa7 	bl	80002a8 <__aeabi_dsub>
 800e35a:	a365      	add	r3, pc, #404	; (adr r3, 800e4f0 <_dtoa_r+0x2b8>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f2 f95a 	bl	8000618 <__aeabi_dmul>
 800e364:	a364      	add	r3, pc, #400	; (adr r3, 800e4f8 <_dtoa_r+0x2c0>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	f7f1 ff9f 	bl	80002ac <__adddf3>
 800e36e:	4606      	mov	r6, r0
 800e370:	4628      	mov	r0, r5
 800e372:	460f      	mov	r7, r1
 800e374:	f7f2 f8e6 	bl	8000544 <__aeabi_i2d>
 800e378:	a361      	add	r3, pc, #388	; (adr r3, 800e500 <_dtoa_r+0x2c8>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f2 f94b 	bl	8000618 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4630      	mov	r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	f7f1 ff8f 	bl	80002ac <__adddf3>
 800e38e:	4606      	mov	r6, r0
 800e390:	460f      	mov	r7, r1
 800e392:	f7f2 fbf1 	bl	8000b78 <__aeabi_d2iz>
 800e396:	2200      	movs	r2, #0
 800e398:	9000      	str	r0, [sp, #0]
 800e39a:	2300      	movs	r3, #0
 800e39c:	4630      	mov	r0, r6
 800e39e:	4639      	mov	r1, r7
 800e3a0:	f7f2 fbac 	bl	8000afc <__aeabi_dcmplt>
 800e3a4:	b150      	cbz	r0, 800e3bc <_dtoa_r+0x184>
 800e3a6:	9800      	ldr	r0, [sp, #0]
 800e3a8:	f7f2 f8cc 	bl	8000544 <__aeabi_i2d>
 800e3ac:	4632      	mov	r2, r6
 800e3ae:	463b      	mov	r3, r7
 800e3b0:	f7f2 fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3b4:	b910      	cbnz	r0, 800e3bc <_dtoa_r+0x184>
 800e3b6:	9b00      	ldr	r3, [sp, #0]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	9b00      	ldr	r3, [sp, #0]
 800e3be:	2b16      	cmp	r3, #22
 800e3c0:	d85a      	bhi.n	800e478 <_dtoa_r+0x240>
 800e3c2:	9a00      	ldr	r2, [sp, #0]
 800e3c4:	4b57      	ldr	r3, [pc, #348]	; (800e524 <_dtoa_r+0x2ec>)
 800e3c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ce:	ec51 0b19 	vmov	r0, r1, d9
 800e3d2:	f7f2 fb93 	bl	8000afc <__aeabi_dcmplt>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d050      	beq.n	800e47c <_dtoa_r+0x244>
 800e3da:	9b00      	ldr	r3, [sp, #0]
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3e6:	1b5d      	subs	r5, r3, r5
 800e3e8:	1e6b      	subs	r3, r5, #1
 800e3ea:	9305      	str	r3, [sp, #20]
 800e3ec:	bf45      	ittet	mi
 800e3ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800e3f2:	9304      	strmi	r3, [sp, #16]
 800e3f4:	2300      	movpl	r3, #0
 800e3f6:	2300      	movmi	r3, #0
 800e3f8:	bf4c      	ite	mi
 800e3fa:	9305      	strmi	r3, [sp, #20]
 800e3fc:	9304      	strpl	r3, [sp, #16]
 800e3fe:	9b00      	ldr	r3, [sp, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	db3d      	blt.n	800e480 <_dtoa_r+0x248>
 800e404:	9b05      	ldr	r3, [sp, #20]
 800e406:	9a00      	ldr	r2, [sp, #0]
 800e408:	920a      	str	r2, [sp, #40]	; 0x28
 800e40a:	4413      	add	r3, r2
 800e40c:	9305      	str	r3, [sp, #20]
 800e40e:	2300      	movs	r3, #0
 800e410:	9307      	str	r3, [sp, #28]
 800e412:	9b06      	ldr	r3, [sp, #24]
 800e414:	2b09      	cmp	r3, #9
 800e416:	f200 8089 	bhi.w	800e52c <_dtoa_r+0x2f4>
 800e41a:	2b05      	cmp	r3, #5
 800e41c:	bfc4      	itt	gt
 800e41e:	3b04      	subgt	r3, #4
 800e420:	9306      	strgt	r3, [sp, #24]
 800e422:	9b06      	ldr	r3, [sp, #24]
 800e424:	f1a3 0302 	sub.w	r3, r3, #2
 800e428:	bfcc      	ite	gt
 800e42a:	2500      	movgt	r5, #0
 800e42c:	2501      	movle	r5, #1
 800e42e:	2b03      	cmp	r3, #3
 800e430:	f200 8087 	bhi.w	800e542 <_dtoa_r+0x30a>
 800e434:	e8df f003 	tbb	[pc, r3]
 800e438:	59383a2d 	.word	0x59383a2d
 800e43c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e440:	441d      	add	r5, r3
 800e442:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e446:	2b20      	cmp	r3, #32
 800e448:	bfc1      	itttt	gt
 800e44a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e44e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e452:	fa0b f303 	lslgt.w	r3, fp, r3
 800e456:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e45a:	bfda      	itte	le
 800e45c:	f1c3 0320 	rsble	r3, r3, #32
 800e460:	fa06 f003 	lslle.w	r0, r6, r3
 800e464:	4318      	orrgt	r0, r3
 800e466:	f7f2 f85d 	bl	8000524 <__aeabi_ui2d>
 800e46a:	2301      	movs	r3, #1
 800e46c:	4606      	mov	r6, r0
 800e46e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e472:	3d01      	subs	r5, #1
 800e474:	930e      	str	r3, [sp, #56]	; 0x38
 800e476:	e76a      	b.n	800e34e <_dtoa_r+0x116>
 800e478:	2301      	movs	r3, #1
 800e47a:	e7b2      	b.n	800e3e2 <_dtoa_r+0x1aa>
 800e47c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e47e:	e7b1      	b.n	800e3e4 <_dtoa_r+0x1ac>
 800e480:	9b04      	ldr	r3, [sp, #16]
 800e482:	9a00      	ldr	r2, [sp, #0]
 800e484:	1a9b      	subs	r3, r3, r2
 800e486:	9304      	str	r3, [sp, #16]
 800e488:	4253      	negs	r3, r2
 800e48a:	9307      	str	r3, [sp, #28]
 800e48c:	2300      	movs	r3, #0
 800e48e:	930a      	str	r3, [sp, #40]	; 0x28
 800e490:	e7bf      	b.n	800e412 <_dtoa_r+0x1da>
 800e492:	2300      	movs	r3, #0
 800e494:	9308      	str	r3, [sp, #32]
 800e496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e498:	2b00      	cmp	r3, #0
 800e49a:	dc55      	bgt.n	800e548 <_dtoa_r+0x310>
 800e49c:	2301      	movs	r3, #1
 800e49e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	9209      	str	r2, [sp, #36]	; 0x24
 800e4a6:	e00c      	b.n	800e4c2 <_dtoa_r+0x28a>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e7f3      	b.n	800e494 <_dtoa_r+0x25c>
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4b0:	9308      	str	r3, [sp, #32]
 800e4b2:	9b00      	ldr	r3, [sp, #0]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	9302      	str	r3, [sp, #8]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	9303      	str	r3, [sp, #12]
 800e4be:	bfb8      	it	lt
 800e4c0:	2301      	movlt	r3, #1
 800e4c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	6042      	str	r2, [r0, #4]
 800e4c8:	2204      	movs	r2, #4
 800e4ca:	f102 0614 	add.w	r6, r2, #20
 800e4ce:	429e      	cmp	r6, r3
 800e4d0:	6841      	ldr	r1, [r0, #4]
 800e4d2:	d93d      	bls.n	800e550 <_dtoa_r+0x318>
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f001 f98b 	bl	800f7f0 <_Balloc>
 800e4da:	9001      	str	r0, [sp, #4]
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d13b      	bne.n	800e558 <_dtoa_r+0x320>
 800e4e0:	4b11      	ldr	r3, [pc, #68]	; (800e528 <_dtoa_r+0x2f0>)
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4e8:	e6c0      	b.n	800e26c <_dtoa_r+0x34>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e7df      	b.n	800e4ae <_dtoa_r+0x276>
 800e4ee:	bf00      	nop
 800e4f0:	636f4361 	.word	0x636f4361
 800e4f4:	3fd287a7 	.word	0x3fd287a7
 800e4f8:	8b60c8b3 	.word	0x8b60c8b3
 800e4fc:	3fc68a28 	.word	0x3fc68a28
 800e500:	509f79fb 	.word	0x509f79fb
 800e504:	3fd34413 	.word	0x3fd34413
 800e508:	0801256d 	.word	0x0801256d
 800e50c:	08012584 	.word	0x08012584
 800e510:	7ff00000 	.word	0x7ff00000
 800e514:	08012569 	.word	0x08012569
 800e518:	08012560 	.word	0x08012560
 800e51c:	080127c9 	.word	0x080127c9
 800e520:	3ff80000 	.word	0x3ff80000
 800e524:	080126f0 	.word	0x080126f0
 800e528:	080125df 	.word	0x080125df
 800e52c:	2501      	movs	r5, #1
 800e52e:	2300      	movs	r3, #0
 800e530:	9306      	str	r3, [sp, #24]
 800e532:	9508      	str	r5, [sp, #32]
 800e534:	f04f 33ff 	mov.w	r3, #4294967295
 800e538:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e53c:	2200      	movs	r2, #0
 800e53e:	2312      	movs	r3, #18
 800e540:	e7b0      	b.n	800e4a4 <_dtoa_r+0x26c>
 800e542:	2301      	movs	r3, #1
 800e544:	9308      	str	r3, [sp, #32]
 800e546:	e7f5      	b.n	800e534 <_dtoa_r+0x2fc>
 800e548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e54a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e54e:	e7b8      	b.n	800e4c2 <_dtoa_r+0x28a>
 800e550:	3101      	adds	r1, #1
 800e552:	6041      	str	r1, [r0, #4]
 800e554:	0052      	lsls	r2, r2, #1
 800e556:	e7b8      	b.n	800e4ca <_dtoa_r+0x292>
 800e558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e55a:	9a01      	ldr	r2, [sp, #4]
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	9b03      	ldr	r3, [sp, #12]
 800e560:	2b0e      	cmp	r3, #14
 800e562:	f200 809d 	bhi.w	800e6a0 <_dtoa_r+0x468>
 800e566:	2d00      	cmp	r5, #0
 800e568:	f000 809a 	beq.w	800e6a0 <_dtoa_r+0x468>
 800e56c:	9b00      	ldr	r3, [sp, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dd32      	ble.n	800e5d8 <_dtoa_r+0x3a0>
 800e572:	4ab7      	ldr	r2, [pc, #732]	; (800e850 <_dtoa_r+0x618>)
 800e574:	f003 030f 	and.w	r3, r3, #15
 800e578:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e580:	9b00      	ldr	r3, [sp, #0]
 800e582:	05d8      	lsls	r0, r3, #23
 800e584:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e588:	d516      	bpl.n	800e5b8 <_dtoa_r+0x380>
 800e58a:	4bb2      	ldr	r3, [pc, #712]	; (800e854 <_dtoa_r+0x61c>)
 800e58c:	ec51 0b19 	vmov	r0, r1, d9
 800e590:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e594:	f7f2 f96a 	bl	800086c <__aeabi_ddiv>
 800e598:	f007 070f 	and.w	r7, r7, #15
 800e59c:	4682      	mov	sl, r0
 800e59e:	468b      	mov	fp, r1
 800e5a0:	2503      	movs	r5, #3
 800e5a2:	4eac      	ldr	r6, [pc, #688]	; (800e854 <_dtoa_r+0x61c>)
 800e5a4:	b957      	cbnz	r7, 800e5bc <_dtoa_r+0x384>
 800e5a6:	4642      	mov	r2, r8
 800e5a8:	464b      	mov	r3, r9
 800e5aa:	4650      	mov	r0, sl
 800e5ac:	4659      	mov	r1, fp
 800e5ae:	f7f2 f95d 	bl	800086c <__aeabi_ddiv>
 800e5b2:	4682      	mov	sl, r0
 800e5b4:	468b      	mov	fp, r1
 800e5b6:	e028      	b.n	800e60a <_dtoa_r+0x3d2>
 800e5b8:	2502      	movs	r5, #2
 800e5ba:	e7f2      	b.n	800e5a2 <_dtoa_r+0x36a>
 800e5bc:	07f9      	lsls	r1, r7, #31
 800e5be:	d508      	bpl.n	800e5d2 <_dtoa_r+0x39a>
 800e5c0:	4640      	mov	r0, r8
 800e5c2:	4649      	mov	r1, r9
 800e5c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e5c8:	f7f2 f826 	bl	8000618 <__aeabi_dmul>
 800e5cc:	3501      	adds	r5, #1
 800e5ce:	4680      	mov	r8, r0
 800e5d0:	4689      	mov	r9, r1
 800e5d2:	107f      	asrs	r7, r7, #1
 800e5d4:	3608      	adds	r6, #8
 800e5d6:	e7e5      	b.n	800e5a4 <_dtoa_r+0x36c>
 800e5d8:	f000 809b 	beq.w	800e712 <_dtoa_r+0x4da>
 800e5dc:	9b00      	ldr	r3, [sp, #0]
 800e5de:	4f9d      	ldr	r7, [pc, #628]	; (800e854 <_dtoa_r+0x61c>)
 800e5e0:	425e      	negs	r6, r3
 800e5e2:	4b9b      	ldr	r3, [pc, #620]	; (800e850 <_dtoa_r+0x618>)
 800e5e4:	f006 020f 	and.w	r2, r6, #15
 800e5e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f0:	ec51 0b19 	vmov	r0, r1, d9
 800e5f4:	f7f2 f810 	bl	8000618 <__aeabi_dmul>
 800e5f8:	1136      	asrs	r6, r6, #4
 800e5fa:	4682      	mov	sl, r0
 800e5fc:	468b      	mov	fp, r1
 800e5fe:	2300      	movs	r3, #0
 800e600:	2502      	movs	r5, #2
 800e602:	2e00      	cmp	r6, #0
 800e604:	d17a      	bne.n	800e6fc <_dtoa_r+0x4c4>
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1d3      	bne.n	800e5b2 <_dtoa_r+0x37a>
 800e60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f000 8082 	beq.w	800e716 <_dtoa_r+0x4de>
 800e612:	4b91      	ldr	r3, [pc, #580]	; (800e858 <_dtoa_r+0x620>)
 800e614:	2200      	movs	r2, #0
 800e616:	4650      	mov	r0, sl
 800e618:	4659      	mov	r1, fp
 800e61a:	f7f2 fa6f 	bl	8000afc <__aeabi_dcmplt>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d079      	beq.n	800e716 <_dtoa_r+0x4de>
 800e622:	9b03      	ldr	r3, [sp, #12]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d076      	beq.n	800e716 <_dtoa_r+0x4de>
 800e628:	9b02      	ldr	r3, [sp, #8]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	dd36      	ble.n	800e69c <_dtoa_r+0x464>
 800e62e:	9b00      	ldr	r3, [sp, #0]
 800e630:	4650      	mov	r0, sl
 800e632:	4659      	mov	r1, fp
 800e634:	1e5f      	subs	r7, r3, #1
 800e636:	2200      	movs	r2, #0
 800e638:	4b88      	ldr	r3, [pc, #544]	; (800e85c <_dtoa_r+0x624>)
 800e63a:	f7f1 ffed 	bl	8000618 <__aeabi_dmul>
 800e63e:	9e02      	ldr	r6, [sp, #8]
 800e640:	4682      	mov	sl, r0
 800e642:	468b      	mov	fp, r1
 800e644:	3501      	adds	r5, #1
 800e646:	4628      	mov	r0, r5
 800e648:	f7f1 ff7c 	bl	8000544 <__aeabi_i2d>
 800e64c:	4652      	mov	r2, sl
 800e64e:	465b      	mov	r3, fp
 800e650:	f7f1 ffe2 	bl	8000618 <__aeabi_dmul>
 800e654:	4b82      	ldr	r3, [pc, #520]	; (800e860 <_dtoa_r+0x628>)
 800e656:	2200      	movs	r2, #0
 800e658:	f7f1 fe28 	bl	80002ac <__adddf3>
 800e65c:	46d0      	mov	r8, sl
 800e65e:	46d9      	mov	r9, fp
 800e660:	4682      	mov	sl, r0
 800e662:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e666:	2e00      	cmp	r6, #0
 800e668:	d158      	bne.n	800e71c <_dtoa_r+0x4e4>
 800e66a:	4b7e      	ldr	r3, [pc, #504]	; (800e864 <_dtoa_r+0x62c>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	4640      	mov	r0, r8
 800e670:	4649      	mov	r1, r9
 800e672:	f7f1 fe19 	bl	80002a8 <__aeabi_dsub>
 800e676:	4652      	mov	r2, sl
 800e678:	465b      	mov	r3, fp
 800e67a:	4680      	mov	r8, r0
 800e67c:	4689      	mov	r9, r1
 800e67e:	f7f2 fa5b 	bl	8000b38 <__aeabi_dcmpgt>
 800e682:	2800      	cmp	r0, #0
 800e684:	f040 8295 	bne.w	800ebb2 <_dtoa_r+0x97a>
 800e688:	4652      	mov	r2, sl
 800e68a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e68e:	4640      	mov	r0, r8
 800e690:	4649      	mov	r1, r9
 800e692:	f7f2 fa33 	bl	8000afc <__aeabi_dcmplt>
 800e696:	2800      	cmp	r0, #0
 800e698:	f040 8289 	bne.w	800ebae <_dtoa_r+0x976>
 800e69c:	ec5b ab19 	vmov	sl, fp, d9
 800e6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f2c0 8148 	blt.w	800e938 <_dtoa_r+0x700>
 800e6a8:	9a00      	ldr	r2, [sp, #0]
 800e6aa:	2a0e      	cmp	r2, #14
 800e6ac:	f300 8144 	bgt.w	800e938 <_dtoa_r+0x700>
 800e6b0:	4b67      	ldr	r3, [pc, #412]	; (800e850 <_dtoa_r+0x618>)
 800e6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f280 80d5 	bge.w	800e86c <_dtoa_r+0x634>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	f300 80d1 	bgt.w	800e86c <_dtoa_r+0x634>
 800e6ca:	f040 826f 	bne.w	800ebac <_dtoa_r+0x974>
 800e6ce:	4b65      	ldr	r3, [pc, #404]	; (800e864 <_dtoa_r+0x62c>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	4649      	mov	r1, r9
 800e6d6:	f7f1 ff9f 	bl	8000618 <__aeabi_dmul>
 800e6da:	4652      	mov	r2, sl
 800e6dc:	465b      	mov	r3, fp
 800e6de:	f7f2 fa21 	bl	8000b24 <__aeabi_dcmpge>
 800e6e2:	9e03      	ldr	r6, [sp, #12]
 800e6e4:	4637      	mov	r7, r6
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	f040 8245 	bne.w	800eb76 <_dtoa_r+0x93e>
 800e6ec:	9d01      	ldr	r5, [sp, #4]
 800e6ee:	2331      	movs	r3, #49	; 0x31
 800e6f0:	f805 3b01 	strb.w	r3, [r5], #1
 800e6f4:	9b00      	ldr	r3, [sp, #0]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	e240      	b.n	800eb7e <_dtoa_r+0x946>
 800e6fc:	07f2      	lsls	r2, r6, #31
 800e6fe:	d505      	bpl.n	800e70c <_dtoa_r+0x4d4>
 800e700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e704:	f7f1 ff88 	bl	8000618 <__aeabi_dmul>
 800e708:	3501      	adds	r5, #1
 800e70a:	2301      	movs	r3, #1
 800e70c:	1076      	asrs	r6, r6, #1
 800e70e:	3708      	adds	r7, #8
 800e710:	e777      	b.n	800e602 <_dtoa_r+0x3ca>
 800e712:	2502      	movs	r5, #2
 800e714:	e779      	b.n	800e60a <_dtoa_r+0x3d2>
 800e716:	9f00      	ldr	r7, [sp, #0]
 800e718:	9e03      	ldr	r6, [sp, #12]
 800e71a:	e794      	b.n	800e646 <_dtoa_r+0x40e>
 800e71c:	9901      	ldr	r1, [sp, #4]
 800e71e:	4b4c      	ldr	r3, [pc, #304]	; (800e850 <_dtoa_r+0x618>)
 800e720:	4431      	add	r1, r6
 800e722:	910d      	str	r1, [sp, #52]	; 0x34
 800e724:	9908      	ldr	r1, [sp, #32]
 800e726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e72a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e72e:	2900      	cmp	r1, #0
 800e730:	d043      	beq.n	800e7ba <_dtoa_r+0x582>
 800e732:	494d      	ldr	r1, [pc, #308]	; (800e868 <_dtoa_r+0x630>)
 800e734:	2000      	movs	r0, #0
 800e736:	f7f2 f899 	bl	800086c <__aeabi_ddiv>
 800e73a:	4652      	mov	r2, sl
 800e73c:	465b      	mov	r3, fp
 800e73e:	f7f1 fdb3 	bl	80002a8 <__aeabi_dsub>
 800e742:	9d01      	ldr	r5, [sp, #4]
 800e744:	4682      	mov	sl, r0
 800e746:	468b      	mov	fp, r1
 800e748:	4649      	mov	r1, r9
 800e74a:	4640      	mov	r0, r8
 800e74c:	f7f2 fa14 	bl	8000b78 <__aeabi_d2iz>
 800e750:	4606      	mov	r6, r0
 800e752:	f7f1 fef7 	bl	8000544 <__aeabi_i2d>
 800e756:	4602      	mov	r2, r0
 800e758:	460b      	mov	r3, r1
 800e75a:	4640      	mov	r0, r8
 800e75c:	4649      	mov	r1, r9
 800e75e:	f7f1 fda3 	bl	80002a8 <__aeabi_dsub>
 800e762:	3630      	adds	r6, #48	; 0x30
 800e764:	f805 6b01 	strb.w	r6, [r5], #1
 800e768:	4652      	mov	r2, sl
 800e76a:	465b      	mov	r3, fp
 800e76c:	4680      	mov	r8, r0
 800e76e:	4689      	mov	r9, r1
 800e770:	f7f2 f9c4 	bl	8000afc <__aeabi_dcmplt>
 800e774:	2800      	cmp	r0, #0
 800e776:	d163      	bne.n	800e840 <_dtoa_r+0x608>
 800e778:	4642      	mov	r2, r8
 800e77a:	464b      	mov	r3, r9
 800e77c:	4936      	ldr	r1, [pc, #216]	; (800e858 <_dtoa_r+0x620>)
 800e77e:	2000      	movs	r0, #0
 800e780:	f7f1 fd92 	bl	80002a8 <__aeabi_dsub>
 800e784:	4652      	mov	r2, sl
 800e786:	465b      	mov	r3, fp
 800e788:	f7f2 f9b8 	bl	8000afc <__aeabi_dcmplt>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f040 80b5 	bne.w	800e8fc <_dtoa_r+0x6c4>
 800e792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e794:	429d      	cmp	r5, r3
 800e796:	d081      	beq.n	800e69c <_dtoa_r+0x464>
 800e798:	4b30      	ldr	r3, [pc, #192]	; (800e85c <_dtoa_r+0x624>)
 800e79a:	2200      	movs	r2, #0
 800e79c:	4650      	mov	r0, sl
 800e79e:	4659      	mov	r1, fp
 800e7a0:	f7f1 ff3a 	bl	8000618 <__aeabi_dmul>
 800e7a4:	4b2d      	ldr	r3, [pc, #180]	; (800e85c <_dtoa_r+0x624>)
 800e7a6:	4682      	mov	sl, r0
 800e7a8:	468b      	mov	fp, r1
 800e7aa:	4640      	mov	r0, r8
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f7f1 ff32 	bl	8000618 <__aeabi_dmul>
 800e7b4:	4680      	mov	r8, r0
 800e7b6:	4689      	mov	r9, r1
 800e7b8:	e7c6      	b.n	800e748 <_dtoa_r+0x510>
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	4659      	mov	r1, fp
 800e7be:	f7f1 ff2b 	bl	8000618 <__aeabi_dmul>
 800e7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7c4:	9d01      	ldr	r5, [sp, #4]
 800e7c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7c8:	4682      	mov	sl, r0
 800e7ca:	468b      	mov	fp, r1
 800e7cc:	4649      	mov	r1, r9
 800e7ce:	4640      	mov	r0, r8
 800e7d0:	f7f2 f9d2 	bl	8000b78 <__aeabi_d2iz>
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	f7f1 feb5 	bl	8000544 <__aeabi_i2d>
 800e7da:	3630      	adds	r6, #48	; 0x30
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	4640      	mov	r0, r8
 800e7e2:	4649      	mov	r1, r9
 800e7e4:	f7f1 fd60 	bl	80002a8 <__aeabi_dsub>
 800e7e8:	f805 6b01 	strb.w	r6, [r5], #1
 800e7ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7ee:	429d      	cmp	r5, r3
 800e7f0:	4680      	mov	r8, r0
 800e7f2:	4689      	mov	r9, r1
 800e7f4:	f04f 0200 	mov.w	r2, #0
 800e7f8:	d124      	bne.n	800e844 <_dtoa_r+0x60c>
 800e7fa:	4b1b      	ldr	r3, [pc, #108]	; (800e868 <_dtoa_r+0x630>)
 800e7fc:	4650      	mov	r0, sl
 800e7fe:	4659      	mov	r1, fp
 800e800:	f7f1 fd54 	bl	80002ac <__adddf3>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4640      	mov	r0, r8
 800e80a:	4649      	mov	r1, r9
 800e80c:	f7f2 f994 	bl	8000b38 <__aeabi_dcmpgt>
 800e810:	2800      	cmp	r0, #0
 800e812:	d173      	bne.n	800e8fc <_dtoa_r+0x6c4>
 800e814:	4652      	mov	r2, sl
 800e816:	465b      	mov	r3, fp
 800e818:	4913      	ldr	r1, [pc, #76]	; (800e868 <_dtoa_r+0x630>)
 800e81a:	2000      	movs	r0, #0
 800e81c:	f7f1 fd44 	bl	80002a8 <__aeabi_dsub>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4640      	mov	r0, r8
 800e826:	4649      	mov	r1, r9
 800e828:	f7f2 f968 	bl	8000afc <__aeabi_dcmplt>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	f43f af35 	beq.w	800e69c <_dtoa_r+0x464>
 800e832:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e834:	1e6b      	subs	r3, r5, #1
 800e836:	930f      	str	r3, [sp, #60]	; 0x3c
 800e838:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e83c:	2b30      	cmp	r3, #48	; 0x30
 800e83e:	d0f8      	beq.n	800e832 <_dtoa_r+0x5fa>
 800e840:	9700      	str	r7, [sp, #0]
 800e842:	e049      	b.n	800e8d8 <_dtoa_r+0x6a0>
 800e844:	4b05      	ldr	r3, [pc, #20]	; (800e85c <_dtoa_r+0x624>)
 800e846:	f7f1 fee7 	bl	8000618 <__aeabi_dmul>
 800e84a:	4680      	mov	r8, r0
 800e84c:	4689      	mov	r9, r1
 800e84e:	e7bd      	b.n	800e7cc <_dtoa_r+0x594>
 800e850:	080126f0 	.word	0x080126f0
 800e854:	080126c8 	.word	0x080126c8
 800e858:	3ff00000 	.word	0x3ff00000
 800e85c:	40240000 	.word	0x40240000
 800e860:	401c0000 	.word	0x401c0000
 800e864:	40140000 	.word	0x40140000
 800e868:	3fe00000 	.word	0x3fe00000
 800e86c:	9d01      	ldr	r5, [sp, #4]
 800e86e:	4656      	mov	r6, sl
 800e870:	465f      	mov	r7, fp
 800e872:	4642      	mov	r2, r8
 800e874:	464b      	mov	r3, r9
 800e876:	4630      	mov	r0, r6
 800e878:	4639      	mov	r1, r7
 800e87a:	f7f1 fff7 	bl	800086c <__aeabi_ddiv>
 800e87e:	f7f2 f97b 	bl	8000b78 <__aeabi_d2iz>
 800e882:	4682      	mov	sl, r0
 800e884:	f7f1 fe5e 	bl	8000544 <__aeabi_i2d>
 800e888:	4642      	mov	r2, r8
 800e88a:	464b      	mov	r3, r9
 800e88c:	f7f1 fec4 	bl	8000618 <__aeabi_dmul>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	4630      	mov	r0, r6
 800e896:	4639      	mov	r1, r7
 800e898:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e89c:	f7f1 fd04 	bl	80002a8 <__aeabi_dsub>
 800e8a0:	f805 6b01 	strb.w	r6, [r5], #1
 800e8a4:	9e01      	ldr	r6, [sp, #4]
 800e8a6:	9f03      	ldr	r7, [sp, #12]
 800e8a8:	1bae      	subs	r6, r5, r6
 800e8aa:	42b7      	cmp	r7, r6
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	d135      	bne.n	800e91e <_dtoa_r+0x6e6>
 800e8b2:	f7f1 fcfb 	bl	80002ac <__adddf3>
 800e8b6:	4642      	mov	r2, r8
 800e8b8:	464b      	mov	r3, r9
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	460f      	mov	r7, r1
 800e8be:	f7f2 f93b 	bl	8000b38 <__aeabi_dcmpgt>
 800e8c2:	b9d0      	cbnz	r0, 800e8fa <_dtoa_r+0x6c2>
 800e8c4:	4642      	mov	r2, r8
 800e8c6:	464b      	mov	r3, r9
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	4639      	mov	r1, r7
 800e8cc:	f7f2 f90c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e8d0:	b110      	cbz	r0, 800e8d8 <_dtoa_r+0x6a0>
 800e8d2:	f01a 0f01 	tst.w	sl, #1
 800e8d6:	d110      	bne.n	800e8fa <_dtoa_r+0x6c2>
 800e8d8:	4620      	mov	r0, r4
 800e8da:	ee18 1a10 	vmov	r1, s16
 800e8de:	f000 ffc7 	bl	800f870 <_Bfree>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	9800      	ldr	r0, [sp, #0]
 800e8e6:	702b      	strb	r3, [r5, #0]
 800e8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	6018      	str	r0, [r3, #0]
 800e8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f43f acf1 	beq.w	800e2d8 <_dtoa_r+0xa0>
 800e8f6:	601d      	str	r5, [r3, #0]
 800e8f8:	e4ee      	b.n	800e2d8 <_dtoa_r+0xa0>
 800e8fa:	9f00      	ldr	r7, [sp, #0]
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	461d      	mov	r5, r3
 800e900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e904:	2a39      	cmp	r2, #57	; 0x39
 800e906:	d106      	bne.n	800e916 <_dtoa_r+0x6de>
 800e908:	9a01      	ldr	r2, [sp, #4]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d1f7      	bne.n	800e8fe <_dtoa_r+0x6c6>
 800e90e:	9901      	ldr	r1, [sp, #4]
 800e910:	2230      	movs	r2, #48	; 0x30
 800e912:	3701      	adds	r7, #1
 800e914:	700a      	strb	r2, [r1, #0]
 800e916:	781a      	ldrb	r2, [r3, #0]
 800e918:	3201      	adds	r2, #1
 800e91a:	701a      	strb	r2, [r3, #0]
 800e91c:	e790      	b.n	800e840 <_dtoa_r+0x608>
 800e91e:	4ba6      	ldr	r3, [pc, #664]	; (800ebb8 <_dtoa_r+0x980>)
 800e920:	2200      	movs	r2, #0
 800e922:	f7f1 fe79 	bl	8000618 <__aeabi_dmul>
 800e926:	2200      	movs	r2, #0
 800e928:	2300      	movs	r3, #0
 800e92a:	4606      	mov	r6, r0
 800e92c:	460f      	mov	r7, r1
 800e92e:	f7f2 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 800e932:	2800      	cmp	r0, #0
 800e934:	d09d      	beq.n	800e872 <_dtoa_r+0x63a>
 800e936:	e7cf      	b.n	800e8d8 <_dtoa_r+0x6a0>
 800e938:	9a08      	ldr	r2, [sp, #32]
 800e93a:	2a00      	cmp	r2, #0
 800e93c:	f000 80d7 	beq.w	800eaee <_dtoa_r+0x8b6>
 800e940:	9a06      	ldr	r2, [sp, #24]
 800e942:	2a01      	cmp	r2, #1
 800e944:	f300 80ba 	bgt.w	800eabc <_dtoa_r+0x884>
 800e948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e94a:	2a00      	cmp	r2, #0
 800e94c:	f000 80b2 	beq.w	800eab4 <_dtoa_r+0x87c>
 800e950:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e954:	9e07      	ldr	r6, [sp, #28]
 800e956:	9d04      	ldr	r5, [sp, #16]
 800e958:	9a04      	ldr	r2, [sp, #16]
 800e95a:	441a      	add	r2, r3
 800e95c:	9204      	str	r2, [sp, #16]
 800e95e:	9a05      	ldr	r2, [sp, #20]
 800e960:	2101      	movs	r1, #1
 800e962:	441a      	add	r2, r3
 800e964:	4620      	mov	r0, r4
 800e966:	9205      	str	r2, [sp, #20]
 800e968:	f001 f884 	bl	800fa74 <__i2b>
 800e96c:	4607      	mov	r7, r0
 800e96e:	2d00      	cmp	r5, #0
 800e970:	dd0c      	ble.n	800e98c <_dtoa_r+0x754>
 800e972:	9b05      	ldr	r3, [sp, #20]
 800e974:	2b00      	cmp	r3, #0
 800e976:	dd09      	ble.n	800e98c <_dtoa_r+0x754>
 800e978:	42ab      	cmp	r3, r5
 800e97a:	9a04      	ldr	r2, [sp, #16]
 800e97c:	bfa8      	it	ge
 800e97e:	462b      	movge	r3, r5
 800e980:	1ad2      	subs	r2, r2, r3
 800e982:	9204      	str	r2, [sp, #16]
 800e984:	9a05      	ldr	r2, [sp, #20]
 800e986:	1aed      	subs	r5, r5, r3
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	9305      	str	r3, [sp, #20]
 800e98c:	9b07      	ldr	r3, [sp, #28]
 800e98e:	b31b      	cbz	r3, 800e9d8 <_dtoa_r+0x7a0>
 800e990:	9b08      	ldr	r3, [sp, #32]
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 80af 	beq.w	800eaf6 <_dtoa_r+0x8be>
 800e998:	2e00      	cmp	r6, #0
 800e99a:	dd13      	ble.n	800e9c4 <_dtoa_r+0x78c>
 800e99c:	4639      	mov	r1, r7
 800e99e:	4632      	mov	r2, r6
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f001 f927 	bl	800fbf4 <__pow5mult>
 800e9a6:	ee18 2a10 	vmov	r2, s16
 800e9aa:	4601      	mov	r1, r0
 800e9ac:	4607      	mov	r7, r0
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f001 f876 	bl	800faa0 <__multiply>
 800e9b4:	ee18 1a10 	vmov	r1, s16
 800e9b8:	4680      	mov	r8, r0
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f000 ff58 	bl	800f870 <_Bfree>
 800e9c0:	ee08 8a10 	vmov	s16, r8
 800e9c4:	9b07      	ldr	r3, [sp, #28]
 800e9c6:	1b9a      	subs	r2, r3, r6
 800e9c8:	d006      	beq.n	800e9d8 <_dtoa_r+0x7a0>
 800e9ca:	ee18 1a10 	vmov	r1, s16
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f001 f910 	bl	800fbf4 <__pow5mult>
 800e9d4:	ee08 0a10 	vmov	s16, r0
 800e9d8:	2101      	movs	r1, #1
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f001 f84a 	bl	800fa74 <__i2b>
 800e9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	f340 8088 	ble.w	800eafa <_dtoa_r+0x8c2>
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	4601      	mov	r1, r0
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f001 f900 	bl	800fbf4 <__pow5mult>
 800e9f4:	9b06      	ldr	r3, [sp, #24]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	f340 8081 	ble.w	800eb00 <_dtoa_r+0x8c8>
 800e9fe:	f04f 0800 	mov.w	r8, #0
 800ea02:	6933      	ldr	r3, [r6, #16]
 800ea04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ea08:	6918      	ldr	r0, [r3, #16]
 800ea0a:	f000 ffe3 	bl	800f9d4 <__hi0bits>
 800ea0e:	f1c0 0020 	rsb	r0, r0, #32
 800ea12:	9b05      	ldr	r3, [sp, #20]
 800ea14:	4418      	add	r0, r3
 800ea16:	f010 001f 	ands.w	r0, r0, #31
 800ea1a:	f000 8092 	beq.w	800eb42 <_dtoa_r+0x90a>
 800ea1e:	f1c0 0320 	rsb	r3, r0, #32
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	f340 808a 	ble.w	800eb3c <_dtoa_r+0x904>
 800ea28:	f1c0 001c 	rsb	r0, r0, #28
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	4403      	add	r3, r0
 800ea30:	9304      	str	r3, [sp, #16]
 800ea32:	9b05      	ldr	r3, [sp, #20]
 800ea34:	4403      	add	r3, r0
 800ea36:	4405      	add	r5, r0
 800ea38:	9305      	str	r3, [sp, #20]
 800ea3a:	9b04      	ldr	r3, [sp, #16]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	dd07      	ble.n	800ea50 <_dtoa_r+0x818>
 800ea40:	ee18 1a10 	vmov	r1, s16
 800ea44:	461a      	mov	r2, r3
 800ea46:	4620      	mov	r0, r4
 800ea48:	f001 f92e 	bl	800fca8 <__lshift>
 800ea4c:	ee08 0a10 	vmov	s16, r0
 800ea50:	9b05      	ldr	r3, [sp, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	dd05      	ble.n	800ea62 <_dtoa_r+0x82a>
 800ea56:	4631      	mov	r1, r6
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f001 f924 	bl	800fca8 <__lshift>
 800ea60:	4606      	mov	r6, r0
 800ea62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d06e      	beq.n	800eb46 <_dtoa_r+0x90e>
 800ea68:	ee18 0a10 	vmov	r0, s16
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	f001 f98b 	bl	800fd88 <__mcmp>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	da67      	bge.n	800eb46 <_dtoa_r+0x90e>
 800ea76:	9b00      	ldr	r3, [sp, #0]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	ee18 1a10 	vmov	r1, s16
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	220a      	movs	r2, #10
 800ea82:	2300      	movs	r3, #0
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 ff15 	bl	800f8b4 <__multadd>
 800ea8a:	9b08      	ldr	r3, [sp, #32]
 800ea8c:	ee08 0a10 	vmov	s16, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f000 81b1 	beq.w	800edf8 <_dtoa_r+0xbc0>
 800ea96:	2300      	movs	r3, #0
 800ea98:	4639      	mov	r1, r7
 800ea9a:	220a      	movs	r2, #10
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f000 ff09 	bl	800f8b4 <__multadd>
 800eaa2:	9b02      	ldr	r3, [sp, #8]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	4607      	mov	r7, r0
 800eaa8:	f300 808e 	bgt.w	800ebc8 <_dtoa_r+0x990>
 800eaac:	9b06      	ldr	r3, [sp, #24]
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	dc51      	bgt.n	800eb56 <_dtoa_r+0x91e>
 800eab2:	e089      	b.n	800ebc8 <_dtoa_r+0x990>
 800eab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eaba:	e74b      	b.n	800e954 <_dtoa_r+0x71c>
 800eabc:	9b03      	ldr	r3, [sp, #12]
 800eabe:	1e5e      	subs	r6, r3, #1
 800eac0:	9b07      	ldr	r3, [sp, #28]
 800eac2:	42b3      	cmp	r3, r6
 800eac4:	bfbf      	itttt	lt
 800eac6:	9b07      	ldrlt	r3, [sp, #28]
 800eac8:	9607      	strlt	r6, [sp, #28]
 800eaca:	1af2      	sublt	r2, r6, r3
 800eacc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eace:	bfb6      	itet	lt
 800ead0:	189b      	addlt	r3, r3, r2
 800ead2:	1b9e      	subge	r6, r3, r6
 800ead4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ead6:	9b03      	ldr	r3, [sp, #12]
 800ead8:	bfb8      	it	lt
 800eada:	2600      	movlt	r6, #0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	bfb7      	itett	lt
 800eae0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eae4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eae8:	1a9d      	sublt	r5, r3, r2
 800eaea:	2300      	movlt	r3, #0
 800eaec:	e734      	b.n	800e958 <_dtoa_r+0x720>
 800eaee:	9e07      	ldr	r6, [sp, #28]
 800eaf0:	9d04      	ldr	r5, [sp, #16]
 800eaf2:	9f08      	ldr	r7, [sp, #32]
 800eaf4:	e73b      	b.n	800e96e <_dtoa_r+0x736>
 800eaf6:	9a07      	ldr	r2, [sp, #28]
 800eaf8:	e767      	b.n	800e9ca <_dtoa_r+0x792>
 800eafa:	9b06      	ldr	r3, [sp, #24]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	dc18      	bgt.n	800eb32 <_dtoa_r+0x8fa>
 800eb00:	f1ba 0f00 	cmp.w	sl, #0
 800eb04:	d115      	bne.n	800eb32 <_dtoa_r+0x8fa>
 800eb06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb0a:	b993      	cbnz	r3, 800eb32 <_dtoa_r+0x8fa>
 800eb0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb10:	0d1b      	lsrs	r3, r3, #20
 800eb12:	051b      	lsls	r3, r3, #20
 800eb14:	b183      	cbz	r3, 800eb38 <_dtoa_r+0x900>
 800eb16:	9b04      	ldr	r3, [sp, #16]
 800eb18:	3301      	adds	r3, #1
 800eb1a:	9304      	str	r3, [sp, #16]
 800eb1c:	9b05      	ldr	r3, [sp, #20]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	9305      	str	r3, [sp, #20]
 800eb22:	f04f 0801 	mov.w	r8, #1
 800eb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f47f af6a 	bne.w	800ea02 <_dtoa_r+0x7ca>
 800eb2e:	2001      	movs	r0, #1
 800eb30:	e76f      	b.n	800ea12 <_dtoa_r+0x7da>
 800eb32:	f04f 0800 	mov.w	r8, #0
 800eb36:	e7f6      	b.n	800eb26 <_dtoa_r+0x8ee>
 800eb38:	4698      	mov	r8, r3
 800eb3a:	e7f4      	b.n	800eb26 <_dtoa_r+0x8ee>
 800eb3c:	f43f af7d 	beq.w	800ea3a <_dtoa_r+0x802>
 800eb40:	4618      	mov	r0, r3
 800eb42:	301c      	adds	r0, #28
 800eb44:	e772      	b.n	800ea2c <_dtoa_r+0x7f4>
 800eb46:	9b03      	ldr	r3, [sp, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	dc37      	bgt.n	800ebbc <_dtoa_r+0x984>
 800eb4c:	9b06      	ldr	r3, [sp, #24]
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	dd34      	ble.n	800ebbc <_dtoa_r+0x984>
 800eb52:	9b03      	ldr	r3, [sp, #12]
 800eb54:	9302      	str	r3, [sp, #8]
 800eb56:	9b02      	ldr	r3, [sp, #8]
 800eb58:	b96b      	cbnz	r3, 800eb76 <_dtoa_r+0x93e>
 800eb5a:	4631      	mov	r1, r6
 800eb5c:	2205      	movs	r2, #5
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f000 fea8 	bl	800f8b4 <__multadd>
 800eb64:	4601      	mov	r1, r0
 800eb66:	4606      	mov	r6, r0
 800eb68:	ee18 0a10 	vmov	r0, s16
 800eb6c:	f001 f90c 	bl	800fd88 <__mcmp>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	f73f adbb 	bgt.w	800e6ec <_dtoa_r+0x4b4>
 800eb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb78:	9d01      	ldr	r5, [sp, #4]
 800eb7a:	43db      	mvns	r3, r3
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	f04f 0800 	mov.w	r8, #0
 800eb82:	4631      	mov	r1, r6
 800eb84:	4620      	mov	r0, r4
 800eb86:	f000 fe73 	bl	800f870 <_Bfree>
 800eb8a:	2f00      	cmp	r7, #0
 800eb8c:	f43f aea4 	beq.w	800e8d8 <_dtoa_r+0x6a0>
 800eb90:	f1b8 0f00 	cmp.w	r8, #0
 800eb94:	d005      	beq.n	800eba2 <_dtoa_r+0x96a>
 800eb96:	45b8      	cmp	r8, r7
 800eb98:	d003      	beq.n	800eba2 <_dtoa_r+0x96a>
 800eb9a:	4641      	mov	r1, r8
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f000 fe67 	bl	800f870 <_Bfree>
 800eba2:	4639      	mov	r1, r7
 800eba4:	4620      	mov	r0, r4
 800eba6:	f000 fe63 	bl	800f870 <_Bfree>
 800ebaa:	e695      	b.n	800e8d8 <_dtoa_r+0x6a0>
 800ebac:	2600      	movs	r6, #0
 800ebae:	4637      	mov	r7, r6
 800ebb0:	e7e1      	b.n	800eb76 <_dtoa_r+0x93e>
 800ebb2:	9700      	str	r7, [sp, #0]
 800ebb4:	4637      	mov	r7, r6
 800ebb6:	e599      	b.n	800e6ec <_dtoa_r+0x4b4>
 800ebb8:	40240000 	.word	0x40240000
 800ebbc:	9b08      	ldr	r3, [sp, #32]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f000 80ca 	beq.w	800ed58 <_dtoa_r+0xb20>
 800ebc4:	9b03      	ldr	r3, [sp, #12]
 800ebc6:	9302      	str	r3, [sp, #8]
 800ebc8:	2d00      	cmp	r5, #0
 800ebca:	dd05      	ble.n	800ebd8 <_dtoa_r+0x9a0>
 800ebcc:	4639      	mov	r1, r7
 800ebce:	462a      	mov	r2, r5
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f001 f869 	bl	800fca8 <__lshift>
 800ebd6:	4607      	mov	r7, r0
 800ebd8:	f1b8 0f00 	cmp.w	r8, #0
 800ebdc:	d05b      	beq.n	800ec96 <_dtoa_r+0xa5e>
 800ebde:	6879      	ldr	r1, [r7, #4]
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f000 fe05 	bl	800f7f0 <_Balloc>
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	b928      	cbnz	r0, 800ebf6 <_dtoa_r+0x9be>
 800ebea:	4b87      	ldr	r3, [pc, #540]	; (800ee08 <_dtoa_r+0xbd0>)
 800ebec:	4602      	mov	r2, r0
 800ebee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ebf2:	f7ff bb3b 	b.w	800e26c <_dtoa_r+0x34>
 800ebf6:	693a      	ldr	r2, [r7, #16]
 800ebf8:	3202      	adds	r2, #2
 800ebfa:	0092      	lsls	r2, r2, #2
 800ebfc:	f107 010c 	add.w	r1, r7, #12
 800ec00:	300c      	adds	r0, #12
 800ec02:	f7fd f92e 	bl	800be62 <memcpy>
 800ec06:	2201      	movs	r2, #1
 800ec08:	4629      	mov	r1, r5
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f001 f84c 	bl	800fca8 <__lshift>
 800ec10:	9b01      	ldr	r3, [sp, #4]
 800ec12:	f103 0901 	add.w	r9, r3, #1
 800ec16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	9305      	str	r3, [sp, #20]
 800ec1e:	f00a 0301 	and.w	r3, sl, #1
 800ec22:	46b8      	mov	r8, r7
 800ec24:	9304      	str	r3, [sp, #16]
 800ec26:	4607      	mov	r7, r0
 800ec28:	4631      	mov	r1, r6
 800ec2a:	ee18 0a10 	vmov	r0, s16
 800ec2e:	f7ff fa77 	bl	800e120 <quorem>
 800ec32:	4641      	mov	r1, r8
 800ec34:	9002      	str	r0, [sp, #8]
 800ec36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ec3a:	ee18 0a10 	vmov	r0, s16
 800ec3e:	f001 f8a3 	bl	800fd88 <__mcmp>
 800ec42:	463a      	mov	r2, r7
 800ec44:	9003      	str	r0, [sp, #12]
 800ec46:	4631      	mov	r1, r6
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f001 f8b9 	bl	800fdc0 <__mdiff>
 800ec4e:	68c2      	ldr	r2, [r0, #12]
 800ec50:	f109 3bff 	add.w	fp, r9, #4294967295
 800ec54:	4605      	mov	r5, r0
 800ec56:	bb02      	cbnz	r2, 800ec9a <_dtoa_r+0xa62>
 800ec58:	4601      	mov	r1, r0
 800ec5a:	ee18 0a10 	vmov	r0, s16
 800ec5e:	f001 f893 	bl	800fd88 <__mcmp>
 800ec62:	4602      	mov	r2, r0
 800ec64:	4629      	mov	r1, r5
 800ec66:	4620      	mov	r0, r4
 800ec68:	9207      	str	r2, [sp, #28]
 800ec6a:	f000 fe01 	bl	800f870 <_Bfree>
 800ec6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ec72:	ea43 0102 	orr.w	r1, r3, r2
 800ec76:	9b04      	ldr	r3, [sp, #16]
 800ec78:	430b      	orrs	r3, r1
 800ec7a:	464d      	mov	r5, r9
 800ec7c:	d10f      	bne.n	800ec9e <_dtoa_r+0xa66>
 800ec7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec82:	d02a      	beq.n	800ecda <_dtoa_r+0xaa2>
 800ec84:	9b03      	ldr	r3, [sp, #12]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	dd02      	ble.n	800ec90 <_dtoa_r+0xa58>
 800ec8a:	9b02      	ldr	r3, [sp, #8]
 800ec8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec90:	f88b a000 	strb.w	sl, [fp]
 800ec94:	e775      	b.n	800eb82 <_dtoa_r+0x94a>
 800ec96:	4638      	mov	r0, r7
 800ec98:	e7ba      	b.n	800ec10 <_dtoa_r+0x9d8>
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	e7e2      	b.n	800ec64 <_dtoa_r+0xa2c>
 800ec9e:	9b03      	ldr	r3, [sp, #12]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	db04      	blt.n	800ecae <_dtoa_r+0xa76>
 800eca4:	9906      	ldr	r1, [sp, #24]
 800eca6:	430b      	orrs	r3, r1
 800eca8:	9904      	ldr	r1, [sp, #16]
 800ecaa:	430b      	orrs	r3, r1
 800ecac:	d122      	bne.n	800ecf4 <_dtoa_r+0xabc>
 800ecae:	2a00      	cmp	r2, #0
 800ecb0:	ddee      	ble.n	800ec90 <_dtoa_r+0xa58>
 800ecb2:	ee18 1a10 	vmov	r1, s16
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f000 fff5 	bl	800fca8 <__lshift>
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	ee08 0a10 	vmov	s16, r0
 800ecc4:	f001 f860 	bl	800fd88 <__mcmp>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	dc03      	bgt.n	800ecd4 <_dtoa_r+0xa9c>
 800eccc:	d1e0      	bne.n	800ec90 <_dtoa_r+0xa58>
 800ecce:	f01a 0f01 	tst.w	sl, #1
 800ecd2:	d0dd      	beq.n	800ec90 <_dtoa_r+0xa58>
 800ecd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ecd8:	d1d7      	bne.n	800ec8a <_dtoa_r+0xa52>
 800ecda:	2339      	movs	r3, #57	; 0x39
 800ecdc:	f88b 3000 	strb.w	r3, [fp]
 800ece0:	462b      	mov	r3, r5
 800ece2:	461d      	mov	r5, r3
 800ece4:	3b01      	subs	r3, #1
 800ece6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ecea:	2a39      	cmp	r2, #57	; 0x39
 800ecec:	d071      	beq.n	800edd2 <_dtoa_r+0xb9a>
 800ecee:	3201      	adds	r2, #1
 800ecf0:	701a      	strb	r2, [r3, #0]
 800ecf2:	e746      	b.n	800eb82 <_dtoa_r+0x94a>
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	dd07      	ble.n	800ed08 <_dtoa_r+0xad0>
 800ecf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ecfc:	d0ed      	beq.n	800ecda <_dtoa_r+0xaa2>
 800ecfe:	f10a 0301 	add.w	r3, sl, #1
 800ed02:	f88b 3000 	strb.w	r3, [fp]
 800ed06:	e73c      	b.n	800eb82 <_dtoa_r+0x94a>
 800ed08:	9b05      	ldr	r3, [sp, #20]
 800ed0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ed0e:	4599      	cmp	r9, r3
 800ed10:	d047      	beq.n	800eda2 <_dtoa_r+0xb6a>
 800ed12:	ee18 1a10 	vmov	r1, s16
 800ed16:	2300      	movs	r3, #0
 800ed18:	220a      	movs	r2, #10
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f000 fdca 	bl	800f8b4 <__multadd>
 800ed20:	45b8      	cmp	r8, r7
 800ed22:	ee08 0a10 	vmov	s16, r0
 800ed26:	f04f 0300 	mov.w	r3, #0
 800ed2a:	f04f 020a 	mov.w	r2, #10
 800ed2e:	4641      	mov	r1, r8
 800ed30:	4620      	mov	r0, r4
 800ed32:	d106      	bne.n	800ed42 <_dtoa_r+0xb0a>
 800ed34:	f000 fdbe 	bl	800f8b4 <__multadd>
 800ed38:	4680      	mov	r8, r0
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	f109 0901 	add.w	r9, r9, #1
 800ed40:	e772      	b.n	800ec28 <_dtoa_r+0x9f0>
 800ed42:	f000 fdb7 	bl	800f8b4 <__multadd>
 800ed46:	4639      	mov	r1, r7
 800ed48:	4680      	mov	r8, r0
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	220a      	movs	r2, #10
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 fdb0 	bl	800f8b4 <__multadd>
 800ed54:	4607      	mov	r7, r0
 800ed56:	e7f1      	b.n	800ed3c <_dtoa_r+0xb04>
 800ed58:	9b03      	ldr	r3, [sp, #12]
 800ed5a:	9302      	str	r3, [sp, #8]
 800ed5c:	9d01      	ldr	r5, [sp, #4]
 800ed5e:	ee18 0a10 	vmov	r0, s16
 800ed62:	4631      	mov	r1, r6
 800ed64:	f7ff f9dc 	bl	800e120 <quorem>
 800ed68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed6c:	9b01      	ldr	r3, [sp, #4]
 800ed6e:	f805 ab01 	strb.w	sl, [r5], #1
 800ed72:	1aea      	subs	r2, r5, r3
 800ed74:	9b02      	ldr	r3, [sp, #8]
 800ed76:	4293      	cmp	r3, r2
 800ed78:	dd09      	ble.n	800ed8e <_dtoa_r+0xb56>
 800ed7a:	ee18 1a10 	vmov	r1, s16
 800ed7e:	2300      	movs	r3, #0
 800ed80:	220a      	movs	r2, #10
 800ed82:	4620      	mov	r0, r4
 800ed84:	f000 fd96 	bl	800f8b4 <__multadd>
 800ed88:	ee08 0a10 	vmov	s16, r0
 800ed8c:	e7e7      	b.n	800ed5e <_dtoa_r+0xb26>
 800ed8e:	9b02      	ldr	r3, [sp, #8]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bfc8      	it	gt
 800ed94:	461d      	movgt	r5, r3
 800ed96:	9b01      	ldr	r3, [sp, #4]
 800ed98:	bfd8      	it	le
 800ed9a:	2501      	movle	r5, #1
 800ed9c:	441d      	add	r5, r3
 800ed9e:	f04f 0800 	mov.w	r8, #0
 800eda2:	ee18 1a10 	vmov	r1, s16
 800eda6:	2201      	movs	r2, #1
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 ff7d 	bl	800fca8 <__lshift>
 800edae:	4631      	mov	r1, r6
 800edb0:	ee08 0a10 	vmov	s16, r0
 800edb4:	f000 ffe8 	bl	800fd88 <__mcmp>
 800edb8:	2800      	cmp	r0, #0
 800edba:	dc91      	bgt.n	800ece0 <_dtoa_r+0xaa8>
 800edbc:	d102      	bne.n	800edc4 <_dtoa_r+0xb8c>
 800edbe:	f01a 0f01 	tst.w	sl, #1
 800edc2:	d18d      	bne.n	800ece0 <_dtoa_r+0xaa8>
 800edc4:	462b      	mov	r3, r5
 800edc6:	461d      	mov	r5, r3
 800edc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edcc:	2a30      	cmp	r2, #48	; 0x30
 800edce:	d0fa      	beq.n	800edc6 <_dtoa_r+0xb8e>
 800edd0:	e6d7      	b.n	800eb82 <_dtoa_r+0x94a>
 800edd2:	9a01      	ldr	r2, [sp, #4]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d184      	bne.n	800ece2 <_dtoa_r+0xaaa>
 800edd8:	9b00      	ldr	r3, [sp, #0]
 800edda:	3301      	adds	r3, #1
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	2331      	movs	r3, #49	; 0x31
 800ede0:	7013      	strb	r3, [r2, #0]
 800ede2:	e6ce      	b.n	800eb82 <_dtoa_r+0x94a>
 800ede4:	4b09      	ldr	r3, [pc, #36]	; (800ee0c <_dtoa_r+0xbd4>)
 800ede6:	f7ff ba95 	b.w	800e314 <_dtoa_r+0xdc>
 800edea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edec:	2b00      	cmp	r3, #0
 800edee:	f47f aa6e 	bne.w	800e2ce <_dtoa_r+0x96>
 800edf2:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <_dtoa_r+0xbd8>)
 800edf4:	f7ff ba8e 	b.w	800e314 <_dtoa_r+0xdc>
 800edf8:	9b02      	ldr	r3, [sp, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	dcae      	bgt.n	800ed5c <_dtoa_r+0xb24>
 800edfe:	9b06      	ldr	r3, [sp, #24]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	f73f aea8 	bgt.w	800eb56 <_dtoa_r+0x91e>
 800ee06:	e7a9      	b.n	800ed5c <_dtoa_r+0xb24>
 800ee08:	080125df 	.word	0x080125df
 800ee0c:	080127c8 	.word	0x080127c8
 800ee10:	08012560 	.word	0x08012560

0800ee14 <__sflush_r>:
 800ee14:	898a      	ldrh	r2, [r1, #12]
 800ee16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	0710      	lsls	r0, r2, #28
 800ee1e:	460c      	mov	r4, r1
 800ee20:	d458      	bmi.n	800eed4 <__sflush_r+0xc0>
 800ee22:	684b      	ldr	r3, [r1, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	dc05      	bgt.n	800ee34 <__sflush_r+0x20>
 800ee28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	dc02      	bgt.n	800ee34 <__sflush_r+0x20>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee36:	2e00      	cmp	r6, #0
 800ee38:	d0f9      	beq.n	800ee2e <__sflush_r+0x1a>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee40:	682f      	ldr	r7, [r5, #0]
 800ee42:	602b      	str	r3, [r5, #0]
 800ee44:	d032      	beq.n	800eeac <__sflush_r+0x98>
 800ee46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee48:	89a3      	ldrh	r3, [r4, #12]
 800ee4a:	075a      	lsls	r2, r3, #29
 800ee4c:	d505      	bpl.n	800ee5a <__sflush_r+0x46>
 800ee4e:	6863      	ldr	r3, [r4, #4]
 800ee50:	1ac0      	subs	r0, r0, r3
 800ee52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee54:	b10b      	cbz	r3, 800ee5a <__sflush_r+0x46>
 800ee56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee58:	1ac0      	subs	r0, r0, r3
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee60:	6a21      	ldr	r1, [r4, #32]
 800ee62:	4628      	mov	r0, r5
 800ee64:	47b0      	blx	r6
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	d106      	bne.n	800ee7a <__sflush_r+0x66>
 800ee6c:	6829      	ldr	r1, [r5, #0]
 800ee6e:	291d      	cmp	r1, #29
 800ee70:	d82c      	bhi.n	800eecc <__sflush_r+0xb8>
 800ee72:	4a2a      	ldr	r2, [pc, #168]	; (800ef1c <__sflush_r+0x108>)
 800ee74:	40ca      	lsrs	r2, r1
 800ee76:	07d6      	lsls	r6, r2, #31
 800ee78:	d528      	bpl.n	800eecc <__sflush_r+0xb8>
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	6062      	str	r2, [r4, #4]
 800ee7e:	04d9      	lsls	r1, r3, #19
 800ee80:	6922      	ldr	r2, [r4, #16]
 800ee82:	6022      	str	r2, [r4, #0]
 800ee84:	d504      	bpl.n	800ee90 <__sflush_r+0x7c>
 800ee86:	1c42      	adds	r2, r0, #1
 800ee88:	d101      	bne.n	800ee8e <__sflush_r+0x7a>
 800ee8a:	682b      	ldr	r3, [r5, #0]
 800ee8c:	b903      	cbnz	r3, 800ee90 <__sflush_r+0x7c>
 800ee8e:	6560      	str	r0, [r4, #84]	; 0x54
 800ee90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee92:	602f      	str	r7, [r5, #0]
 800ee94:	2900      	cmp	r1, #0
 800ee96:	d0ca      	beq.n	800ee2e <__sflush_r+0x1a>
 800ee98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee9c:	4299      	cmp	r1, r3
 800ee9e:	d002      	beq.n	800eea6 <__sflush_r+0x92>
 800eea0:	4628      	mov	r0, r5
 800eea2:	f001 f97d 	bl	80101a0 <_free_r>
 800eea6:	2000      	movs	r0, #0
 800eea8:	6360      	str	r0, [r4, #52]	; 0x34
 800eeaa:	e7c1      	b.n	800ee30 <__sflush_r+0x1c>
 800eeac:	6a21      	ldr	r1, [r4, #32]
 800eeae:	2301      	movs	r3, #1
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	47b0      	blx	r6
 800eeb4:	1c41      	adds	r1, r0, #1
 800eeb6:	d1c7      	bne.n	800ee48 <__sflush_r+0x34>
 800eeb8:	682b      	ldr	r3, [r5, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d0c4      	beq.n	800ee48 <__sflush_r+0x34>
 800eebe:	2b1d      	cmp	r3, #29
 800eec0:	d001      	beq.n	800eec6 <__sflush_r+0xb2>
 800eec2:	2b16      	cmp	r3, #22
 800eec4:	d101      	bne.n	800eeca <__sflush_r+0xb6>
 800eec6:	602f      	str	r7, [r5, #0]
 800eec8:	e7b1      	b.n	800ee2e <__sflush_r+0x1a>
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eed0:	81a3      	strh	r3, [r4, #12]
 800eed2:	e7ad      	b.n	800ee30 <__sflush_r+0x1c>
 800eed4:	690f      	ldr	r7, [r1, #16]
 800eed6:	2f00      	cmp	r7, #0
 800eed8:	d0a9      	beq.n	800ee2e <__sflush_r+0x1a>
 800eeda:	0793      	lsls	r3, r2, #30
 800eedc:	680e      	ldr	r6, [r1, #0]
 800eede:	bf08      	it	eq
 800eee0:	694b      	ldreq	r3, [r1, #20]
 800eee2:	600f      	str	r7, [r1, #0]
 800eee4:	bf18      	it	ne
 800eee6:	2300      	movne	r3, #0
 800eee8:	eba6 0807 	sub.w	r8, r6, r7
 800eeec:	608b      	str	r3, [r1, #8]
 800eeee:	f1b8 0f00 	cmp.w	r8, #0
 800eef2:	dd9c      	ble.n	800ee2e <__sflush_r+0x1a>
 800eef4:	6a21      	ldr	r1, [r4, #32]
 800eef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eef8:	4643      	mov	r3, r8
 800eefa:	463a      	mov	r2, r7
 800eefc:	4628      	mov	r0, r5
 800eefe:	47b0      	blx	r6
 800ef00:	2800      	cmp	r0, #0
 800ef02:	dc06      	bgt.n	800ef12 <__sflush_r+0xfe>
 800ef04:	89a3      	ldrh	r3, [r4, #12]
 800ef06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef0a:	81a3      	strh	r3, [r4, #12]
 800ef0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef10:	e78e      	b.n	800ee30 <__sflush_r+0x1c>
 800ef12:	4407      	add	r7, r0
 800ef14:	eba8 0800 	sub.w	r8, r8, r0
 800ef18:	e7e9      	b.n	800eeee <__sflush_r+0xda>
 800ef1a:	bf00      	nop
 800ef1c:	20400001 	.word	0x20400001

0800ef20 <_fflush_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	690b      	ldr	r3, [r1, #16]
 800ef24:	4605      	mov	r5, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	b913      	cbnz	r3, 800ef30 <_fflush_r+0x10>
 800ef2a:	2500      	movs	r5, #0
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	bd38      	pop	{r3, r4, r5, pc}
 800ef30:	b118      	cbz	r0, 800ef3a <_fflush_r+0x1a>
 800ef32:	6983      	ldr	r3, [r0, #24]
 800ef34:	b90b      	cbnz	r3, 800ef3a <_fflush_r+0x1a>
 800ef36:	f7fc febd 	bl	800bcb4 <__sinit>
 800ef3a:	4b14      	ldr	r3, [pc, #80]	; (800ef8c <_fflush_r+0x6c>)
 800ef3c:	429c      	cmp	r4, r3
 800ef3e:	d11b      	bne.n	800ef78 <_fflush_r+0x58>
 800ef40:	686c      	ldr	r4, [r5, #4]
 800ef42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d0ef      	beq.n	800ef2a <_fflush_r+0xa>
 800ef4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef4c:	07d0      	lsls	r0, r2, #31
 800ef4e:	d404      	bmi.n	800ef5a <_fflush_r+0x3a>
 800ef50:	0599      	lsls	r1, r3, #22
 800ef52:	d402      	bmi.n	800ef5a <_fflush_r+0x3a>
 800ef54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef56:	f7fc ff82 	bl	800be5e <__retarget_lock_acquire_recursive>
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	f7ff ff59 	bl	800ee14 <__sflush_r>
 800ef62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef64:	07da      	lsls	r2, r3, #31
 800ef66:	4605      	mov	r5, r0
 800ef68:	d4e0      	bmi.n	800ef2c <_fflush_r+0xc>
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	059b      	lsls	r3, r3, #22
 800ef6e:	d4dd      	bmi.n	800ef2c <_fflush_r+0xc>
 800ef70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef72:	f7fc ff75 	bl	800be60 <__retarget_lock_release_recursive>
 800ef76:	e7d9      	b.n	800ef2c <_fflush_r+0xc>
 800ef78:	4b05      	ldr	r3, [pc, #20]	; (800ef90 <_fflush_r+0x70>)
 800ef7a:	429c      	cmp	r4, r3
 800ef7c:	d101      	bne.n	800ef82 <_fflush_r+0x62>
 800ef7e:	68ac      	ldr	r4, [r5, #8]
 800ef80:	e7df      	b.n	800ef42 <_fflush_r+0x22>
 800ef82:	4b04      	ldr	r3, [pc, #16]	; (800ef94 <_fflush_r+0x74>)
 800ef84:	429c      	cmp	r4, r3
 800ef86:	bf08      	it	eq
 800ef88:	68ec      	ldreq	r4, [r5, #12]
 800ef8a:	e7da      	b.n	800ef42 <_fflush_r+0x22>
 800ef8c:	08012484 	.word	0x08012484
 800ef90:	080124a4 	.word	0x080124a4
 800ef94:	08012464 	.word	0x08012464

0800ef98 <rshift>:
 800ef98:	6903      	ldr	r3, [r0, #16]
 800ef9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efa6:	f100 0414 	add.w	r4, r0, #20
 800efaa:	dd45      	ble.n	800f038 <rshift+0xa0>
 800efac:	f011 011f 	ands.w	r1, r1, #31
 800efb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800efb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800efb8:	d10c      	bne.n	800efd4 <rshift+0x3c>
 800efba:	f100 0710 	add.w	r7, r0, #16
 800efbe:	4629      	mov	r1, r5
 800efc0:	42b1      	cmp	r1, r6
 800efc2:	d334      	bcc.n	800f02e <rshift+0x96>
 800efc4:	1a9b      	subs	r3, r3, r2
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	1eea      	subs	r2, r5, #3
 800efca:	4296      	cmp	r6, r2
 800efcc:	bf38      	it	cc
 800efce:	2300      	movcc	r3, #0
 800efd0:	4423      	add	r3, r4
 800efd2:	e015      	b.n	800f000 <rshift+0x68>
 800efd4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800efd8:	f1c1 0820 	rsb	r8, r1, #32
 800efdc:	40cf      	lsrs	r7, r1
 800efde:	f105 0e04 	add.w	lr, r5, #4
 800efe2:	46a1      	mov	r9, r4
 800efe4:	4576      	cmp	r6, lr
 800efe6:	46f4      	mov	ip, lr
 800efe8:	d815      	bhi.n	800f016 <rshift+0x7e>
 800efea:	1a9a      	subs	r2, r3, r2
 800efec:	0092      	lsls	r2, r2, #2
 800efee:	3a04      	subs	r2, #4
 800eff0:	3501      	adds	r5, #1
 800eff2:	42ae      	cmp	r6, r5
 800eff4:	bf38      	it	cc
 800eff6:	2200      	movcc	r2, #0
 800eff8:	18a3      	adds	r3, r4, r2
 800effa:	50a7      	str	r7, [r4, r2]
 800effc:	b107      	cbz	r7, 800f000 <rshift+0x68>
 800effe:	3304      	adds	r3, #4
 800f000:	1b1a      	subs	r2, r3, r4
 800f002:	42a3      	cmp	r3, r4
 800f004:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f008:	bf08      	it	eq
 800f00a:	2300      	moveq	r3, #0
 800f00c:	6102      	str	r2, [r0, #16]
 800f00e:	bf08      	it	eq
 800f010:	6143      	streq	r3, [r0, #20]
 800f012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f016:	f8dc c000 	ldr.w	ip, [ip]
 800f01a:	fa0c fc08 	lsl.w	ip, ip, r8
 800f01e:	ea4c 0707 	orr.w	r7, ip, r7
 800f022:	f849 7b04 	str.w	r7, [r9], #4
 800f026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f02a:	40cf      	lsrs	r7, r1
 800f02c:	e7da      	b.n	800efe4 <rshift+0x4c>
 800f02e:	f851 cb04 	ldr.w	ip, [r1], #4
 800f032:	f847 cf04 	str.w	ip, [r7, #4]!
 800f036:	e7c3      	b.n	800efc0 <rshift+0x28>
 800f038:	4623      	mov	r3, r4
 800f03a:	e7e1      	b.n	800f000 <rshift+0x68>

0800f03c <__hexdig_fun>:
 800f03c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f040:	2b09      	cmp	r3, #9
 800f042:	d802      	bhi.n	800f04a <__hexdig_fun+0xe>
 800f044:	3820      	subs	r0, #32
 800f046:	b2c0      	uxtb	r0, r0
 800f048:	4770      	bx	lr
 800f04a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f04e:	2b05      	cmp	r3, #5
 800f050:	d801      	bhi.n	800f056 <__hexdig_fun+0x1a>
 800f052:	3847      	subs	r0, #71	; 0x47
 800f054:	e7f7      	b.n	800f046 <__hexdig_fun+0xa>
 800f056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f05a:	2b05      	cmp	r3, #5
 800f05c:	d801      	bhi.n	800f062 <__hexdig_fun+0x26>
 800f05e:	3827      	subs	r0, #39	; 0x27
 800f060:	e7f1      	b.n	800f046 <__hexdig_fun+0xa>
 800f062:	2000      	movs	r0, #0
 800f064:	4770      	bx	lr
	...

0800f068 <__gethex>:
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	ed2d 8b02 	vpush	{d8}
 800f070:	b089      	sub	sp, #36	; 0x24
 800f072:	ee08 0a10 	vmov	s16, r0
 800f076:	9304      	str	r3, [sp, #16]
 800f078:	4bb4      	ldr	r3, [pc, #720]	; (800f34c <__gethex+0x2e4>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	9301      	str	r3, [sp, #4]
 800f07e:	4618      	mov	r0, r3
 800f080:	468b      	mov	fp, r1
 800f082:	4690      	mov	r8, r2
 800f084:	f7f1 f8ae 	bl	80001e4 <strlen>
 800f088:	9b01      	ldr	r3, [sp, #4]
 800f08a:	f8db 2000 	ldr.w	r2, [fp]
 800f08e:	4403      	add	r3, r0
 800f090:	4682      	mov	sl, r0
 800f092:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f096:	9305      	str	r3, [sp, #20]
 800f098:	1c93      	adds	r3, r2, #2
 800f09a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f09e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f0a2:	32fe      	adds	r2, #254	; 0xfe
 800f0a4:	18d1      	adds	r1, r2, r3
 800f0a6:	461f      	mov	r7, r3
 800f0a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0ac:	9100      	str	r1, [sp, #0]
 800f0ae:	2830      	cmp	r0, #48	; 0x30
 800f0b0:	d0f8      	beq.n	800f0a4 <__gethex+0x3c>
 800f0b2:	f7ff ffc3 	bl	800f03c <__hexdig_fun>
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d13a      	bne.n	800f132 <__gethex+0xca>
 800f0bc:	9901      	ldr	r1, [sp, #4]
 800f0be:	4652      	mov	r2, sl
 800f0c0:	4638      	mov	r0, r7
 800f0c2:	f001 fdfd 	bl	8010cc0 <strncmp>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d168      	bne.n	800f19e <__gethex+0x136>
 800f0cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f0d0:	eb07 060a 	add.w	r6, r7, sl
 800f0d4:	f7ff ffb2 	bl	800f03c <__hexdig_fun>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d062      	beq.n	800f1a2 <__gethex+0x13a>
 800f0dc:	4633      	mov	r3, r6
 800f0de:	7818      	ldrb	r0, [r3, #0]
 800f0e0:	2830      	cmp	r0, #48	; 0x30
 800f0e2:	461f      	mov	r7, r3
 800f0e4:	f103 0301 	add.w	r3, r3, #1
 800f0e8:	d0f9      	beq.n	800f0de <__gethex+0x76>
 800f0ea:	f7ff ffa7 	bl	800f03c <__hexdig_fun>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	fab0 f480 	clz	r4, r0
 800f0f4:	0964      	lsrs	r4, r4, #5
 800f0f6:	4635      	mov	r5, r6
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	463a      	mov	r2, r7
 800f0fc:	4616      	mov	r6, r2
 800f0fe:	3201      	adds	r2, #1
 800f100:	7830      	ldrb	r0, [r6, #0]
 800f102:	f7ff ff9b 	bl	800f03c <__hexdig_fun>
 800f106:	2800      	cmp	r0, #0
 800f108:	d1f8      	bne.n	800f0fc <__gethex+0x94>
 800f10a:	9901      	ldr	r1, [sp, #4]
 800f10c:	4652      	mov	r2, sl
 800f10e:	4630      	mov	r0, r6
 800f110:	f001 fdd6 	bl	8010cc0 <strncmp>
 800f114:	b980      	cbnz	r0, 800f138 <__gethex+0xd0>
 800f116:	b94d      	cbnz	r5, 800f12c <__gethex+0xc4>
 800f118:	eb06 050a 	add.w	r5, r6, sl
 800f11c:	462a      	mov	r2, r5
 800f11e:	4616      	mov	r6, r2
 800f120:	3201      	adds	r2, #1
 800f122:	7830      	ldrb	r0, [r6, #0]
 800f124:	f7ff ff8a 	bl	800f03c <__hexdig_fun>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1f8      	bne.n	800f11e <__gethex+0xb6>
 800f12c:	1bad      	subs	r5, r5, r6
 800f12e:	00ad      	lsls	r5, r5, #2
 800f130:	e004      	b.n	800f13c <__gethex+0xd4>
 800f132:	2400      	movs	r4, #0
 800f134:	4625      	mov	r5, r4
 800f136:	e7e0      	b.n	800f0fa <__gethex+0x92>
 800f138:	2d00      	cmp	r5, #0
 800f13a:	d1f7      	bne.n	800f12c <__gethex+0xc4>
 800f13c:	7833      	ldrb	r3, [r6, #0]
 800f13e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f142:	2b50      	cmp	r3, #80	; 0x50
 800f144:	d13b      	bne.n	800f1be <__gethex+0x156>
 800f146:	7873      	ldrb	r3, [r6, #1]
 800f148:	2b2b      	cmp	r3, #43	; 0x2b
 800f14a:	d02c      	beq.n	800f1a6 <__gethex+0x13e>
 800f14c:	2b2d      	cmp	r3, #45	; 0x2d
 800f14e:	d02e      	beq.n	800f1ae <__gethex+0x146>
 800f150:	1c71      	adds	r1, r6, #1
 800f152:	f04f 0900 	mov.w	r9, #0
 800f156:	7808      	ldrb	r0, [r1, #0]
 800f158:	f7ff ff70 	bl	800f03c <__hexdig_fun>
 800f15c:	1e43      	subs	r3, r0, #1
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b18      	cmp	r3, #24
 800f162:	d82c      	bhi.n	800f1be <__gethex+0x156>
 800f164:	f1a0 0210 	sub.w	r2, r0, #16
 800f168:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f16c:	f7ff ff66 	bl	800f03c <__hexdig_fun>
 800f170:	1e43      	subs	r3, r0, #1
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b18      	cmp	r3, #24
 800f176:	d91d      	bls.n	800f1b4 <__gethex+0x14c>
 800f178:	f1b9 0f00 	cmp.w	r9, #0
 800f17c:	d000      	beq.n	800f180 <__gethex+0x118>
 800f17e:	4252      	negs	r2, r2
 800f180:	4415      	add	r5, r2
 800f182:	f8cb 1000 	str.w	r1, [fp]
 800f186:	b1e4      	cbz	r4, 800f1c2 <__gethex+0x15a>
 800f188:	9b00      	ldr	r3, [sp, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	bf14      	ite	ne
 800f18e:	2700      	movne	r7, #0
 800f190:	2706      	moveq	r7, #6
 800f192:	4638      	mov	r0, r7
 800f194:	b009      	add	sp, #36	; 0x24
 800f196:	ecbd 8b02 	vpop	{d8}
 800f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19e:	463e      	mov	r6, r7
 800f1a0:	4625      	mov	r5, r4
 800f1a2:	2401      	movs	r4, #1
 800f1a4:	e7ca      	b.n	800f13c <__gethex+0xd4>
 800f1a6:	f04f 0900 	mov.w	r9, #0
 800f1aa:	1cb1      	adds	r1, r6, #2
 800f1ac:	e7d3      	b.n	800f156 <__gethex+0xee>
 800f1ae:	f04f 0901 	mov.w	r9, #1
 800f1b2:	e7fa      	b.n	800f1aa <__gethex+0x142>
 800f1b4:	230a      	movs	r3, #10
 800f1b6:	fb03 0202 	mla	r2, r3, r2, r0
 800f1ba:	3a10      	subs	r2, #16
 800f1bc:	e7d4      	b.n	800f168 <__gethex+0x100>
 800f1be:	4631      	mov	r1, r6
 800f1c0:	e7df      	b.n	800f182 <__gethex+0x11a>
 800f1c2:	1bf3      	subs	r3, r6, r7
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	2b07      	cmp	r3, #7
 800f1ca:	dc0b      	bgt.n	800f1e4 <__gethex+0x17c>
 800f1cc:	ee18 0a10 	vmov	r0, s16
 800f1d0:	f000 fb0e 	bl	800f7f0 <_Balloc>
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	b940      	cbnz	r0, 800f1ea <__gethex+0x182>
 800f1d8:	4b5d      	ldr	r3, [pc, #372]	; (800f350 <__gethex+0x2e8>)
 800f1da:	4602      	mov	r2, r0
 800f1dc:	21de      	movs	r1, #222	; 0xde
 800f1de:	485d      	ldr	r0, [pc, #372]	; (800f354 <__gethex+0x2ec>)
 800f1e0:	f7fc fce4 	bl	800bbac <__assert_func>
 800f1e4:	3101      	adds	r1, #1
 800f1e6:	105b      	asrs	r3, r3, #1
 800f1e8:	e7ee      	b.n	800f1c8 <__gethex+0x160>
 800f1ea:	f100 0914 	add.w	r9, r0, #20
 800f1ee:	f04f 0b00 	mov.w	fp, #0
 800f1f2:	f1ca 0301 	rsb	r3, sl, #1
 800f1f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800f1fa:	f8cd b000 	str.w	fp, [sp]
 800f1fe:	9306      	str	r3, [sp, #24]
 800f200:	42b7      	cmp	r7, r6
 800f202:	d340      	bcc.n	800f286 <__gethex+0x21e>
 800f204:	9802      	ldr	r0, [sp, #8]
 800f206:	9b00      	ldr	r3, [sp, #0]
 800f208:	f840 3b04 	str.w	r3, [r0], #4
 800f20c:	eba0 0009 	sub.w	r0, r0, r9
 800f210:	1080      	asrs	r0, r0, #2
 800f212:	0146      	lsls	r6, r0, #5
 800f214:	6120      	str	r0, [r4, #16]
 800f216:	4618      	mov	r0, r3
 800f218:	f000 fbdc 	bl	800f9d4 <__hi0bits>
 800f21c:	1a30      	subs	r0, r6, r0
 800f21e:	f8d8 6000 	ldr.w	r6, [r8]
 800f222:	42b0      	cmp	r0, r6
 800f224:	dd63      	ble.n	800f2ee <__gethex+0x286>
 800f226:	1b87      	subs	r7, r0, r6
 800f228:	4639      	mov	r1, r7
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 ff80 	bl	8010130 <__any_on>
 800f230:	4682      	mov	sl, r0
 800f232:	b1a8      	cbz	r0, 800f260 <__gethex+0x1f8>
 800f234:	1e7b      	subs	r3, r7, #1
 800f236:	1159      	asrs	r1, r3, #5
 800f238:	f003 021f 	and.w	r2, r3, #31
 800f23c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f240:	f04f 0a01 	mov.w	sl, #1
 800f244:	fa0a f202 	lsl.w	r2, sl, r2
 800f248:	420a      	tst	r2, r1
 800f24a:	d009      	beq.n	800f260 <__gethex+0x1f8>
 800f24c:	4553      	cmp	r3, sl
 800f24e:	dd05      	ble.n	800f25c <__gethex+0x1f4>
 800f250:	1eb9      	subs	r1, r7, #2
 800f252:	4620      	mov	r0, r4
 800f254:	f000 ff6c 	bl	8010130 <__any_on>
 800f258:	2800      	cmp	r0, #0
 800f25a:	d145      	bne.n	800f2e8 <__gethex+0x280>
 800f25c:	f04f 0a02 	mov.w	sl, #2
 800f260:	4639      	mov	r1, r7
 800f262:	4620      	mov	r0, r4
 800f264:	f7ff fe98 	bl	800ef98 <rshift>
 800f268:	443d      	add	r5, r7
 800f26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f26e:	42ab      	cmp	r3, r5
 800f270:	da4c      	bge.n	800f30c <__gethex+0x2a4>
 800f272:	ee18 0a10 	vmov	r0, s16
 800f276:	4621      	mov	r1, r4
 800f278:	f000 fafa 	bl	800f870 <_Bfree>
 800f27c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f27e:	2300      	movs	r3, #0
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	27a3      	movs	r7, #163	; 0xa3
 800f284:	e785      	b.n	800f192 <__gethex+0x12a>
 800f286:	1e73      	subs	r3, r6, #1
 800f288:	9a05      	ldr	r2, [sp, #20]
 800f28a:	9303      	str	r3, [sp, #12]
 800f28c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f290:	4293      	cmp	r3, r2
 800f292:	d019      	beq.n	800f2c8 <__gethex+0x260>
 800f294:	f1bb 0f20 	cmp.w	fp, #32
 800f298:	d107      	bne.n	800f2aa <__gethex+0x242>
 800f29a:	9b02      	ldr	r3, [sp, #8]
 800f29c:	9a00      	ldr	r2, [sp, #0]
 800f29e:	f843 2b04 	str.w	r2, [r3], #4
 800f2a2:	9302      	str	r3, [sp, #8]
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	469b      	mov	fp, r3
 800f2aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f2ae:	f7ff fec5 	bl	800f03c <__hexdig_fun>
 800f2b2:	9b00      	ldr	r3, [sp, #0]
 800f2b4:	f000 000f 	and.w	r0, r0, #15
 800f2b8:	fa00 f00b 	lsl.w	r0, r0, fp
 800f2bc:	4303      	orrs	r3, r0
 800f2be:	9300      	str	r3, [sp, #0]
 800f2c0:	f10b 0b04 	add.w	fp, fp, #4
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	e00d      	b.n	800f2e4 <__gethex+0x27c>
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	9a06      	ldr	r2, [sp, #24]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	42bb      	cmp	r3, r7
 800f2d0:	d3e0      	bcc.n	800f294 <__gethex+0x22c>
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	9901      	ldr	r1, [sp, #4]
 800f2d6:	9307      	str	r3, [sp, #28]
 800f2d8:	4652      	mov	r2, sl
 800f2da:	f001 fcf1 	bl	8010cc0 <strncmp>
 800f2de:	9b07      	ldr	r3, [sp, #28]
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1d7      	bne.n	800f294 <__gethex+0x22c>
 800f2e4:	461e      	mov	r6, r3
 800f2e6:	e78b      	b.n	800f200 <__gethex+0x198>
 800f2e8:	f04f 0a03 	mov.w	sl, #3
 800f2ec:	e7b8      	b.n	800f260 <__gethex+0x1f8>
 800f2ee:	da0a      	bge.n	800f306 <__gethex+0x29e>
 800f2f0:	1a37      	subs	r7, r6, r0
 800f2f2:	4621      	mov	r1, r4
 800f2f4:	ee18 0a10 	vmov	r0, s16
 800f2f8:	463a      	mov	r2, r7
 800f2fa:	f000 fcd5 	bl	800fca8 <__lshift>
 800f2fe:	1bed      	subs	r5, r5, r7
 800f300:	4604      	mov	r4, r0
 800f302:	f100 0914 	add.w	r9, r0, #20
 800f306:	f04f 0a00 	mov.w	sl, #0
 800f30a:	e7ae      	b.n	800f26a <__gethex+0x202>
 800f30c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f310:	42a8      	cmp	r0, r5
 800f312:	dd72      	ble.n	800f3fa <__gethex+0x392>
 800f314:	1b45      	subs	r5, r0, r5
 800f316:	42ae      	cmp	r6, r5
 800f318:	dc36      	bgt.n	800f388 <__gethex+0x320>
 800f31a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d02a      	beq.n	800f378 <__gethex+0x310>
 800f322:	2b03      	cmp	r3, #3
 800f324:	d02c      	beq.n	800f380 <__gethex+0x318>
 800f326:	2b01      	cmp	r3, #1
 800f328:	d11c      	bne.n	800f364 <__gethex+0x2fc>
 800f32a:	42ae      	cmp	r6, r5
 800f32c:	d11a      	bne.n	800f364 <__gethex+0x2fc>
 800f32e:	2e01      	cmp	r6, #1
 800f330:	d112      	bne.n	800f358 <__gethex+0x2f0>
 800f332:	9a04      	ldr	r2, [sp, #16]
 800f334:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	2301      	movs	r3, #1
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	f8c9 3000 	str.w	r3, [r9]
 800f342:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f344:	2762      	movs	r7, #98	; 0x62
 800f346:	601c      	str	r4, [r3, #0]
 800f348:	e723      	b.n	800f192 <__gethex+0x12a>
 800f34a:	bf00      	nop
 800f34c:	08012658 	.word	0x08012658
 800f350:	080125df 	.word	0x080125df
 800f354:	080125f0 	.word	0x080125f0
 800f358:	1e71      	subs	r1, r6, #1
 800f35a:	4620      	mov	r0, r4
 800f35c:	f000 fee8 	bl	8010130 <__any_on>
 800f360:	2800      	cmp	r0, #0
 800f362:	d1e6      	bne.n	800f332 <__gethex+0x2ca>
 800f364:	ee18 0a10 	vmov	r0, s16
 800f368:	4621      	mov	r1, r4
 800f36a:	f000 fa81 	bl	800f870 <_Bfree>
 800f36e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f370:	2300      	movs	r3, #0
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	2750      	movs	r7, #80	; 0x50
 800f376:	e70c      	b.n	800f192 <__gethex+0x12a>
 800f378:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1f2      	bne.n	800f364 <__gethex+0x2fc>
 800f37e:	e7d8      	b.n	800f332 <__gethex+0x2ca>
 800f380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1d5      	bne.n	800f332 <__gethex+0x2ca>
 800f386:	e7ed      	b.n	800f364 <__gethex+0x2fc>
 800f388:	1e6f      	subs	r7, r5, #1
 800f38a:	f1ba 0f00 	cmp.w	sl, #0
 800f38e:	d131      	bne.n	800f3f4 <__gethex+0x38c>
 800f390:	b127      	cbz	r7, 800f39c <__gethex+0x334>
 800f392:	4639      	mov	r1, r7
 800f394:	4620      	mov	r0, r4
 800f396:	f000 fecb 	bl	8010130 <__any_on>
 800f39a:	4682      	mov	sl, r0
 800f39c:	117b      	asrs	r3, r7, #5
 800f39e:	2101      	movs	r1, #1
 800f3a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f3a4:	f007 071f 	and.w	r7, r7, #31
 800f3a8:	fa01 f707 	lsl.w	r7, r1, r7
 800f3ac:	421f      	tst	r7, r3
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	bf18      	it	ne
 800f3b4:	f04a 0a02 	orrne.w	sl, sl, #2
 800f3b8:	1b76      	subs	r6, r6, r5
 800f3ba:	f7ff fded 	bl	800ef98 <rshift>
 800f3be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3c2:	2702      	movs	r7, #2
 800f3c4:	f1ba 0f00 	cmp.w	sl, #0
 800f3c8:	d048      	beq.n	800f45c <__gethex+0x3f4>
 800f3ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3ce:	2b02      	cmp	r3, #2
 800f3d0:	d015      	beq.n	800f3fe <__gethex+0x396>
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d017      	beq.n	800f406 <__gethex+0x39e>
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d109      	bne.n	800f3ee <__gethex+0x386>
 800f3da:	f01a 0f02 	tst.w	sl, #2
 800f3de:	d006      	beq.n	800f3ee <__gethex+0x386>
 800f3e0:	f8d9 0000 	ldr.w	r0, [r9]
 800f3e4:	ea4a 0a00 	orr.w	sl, sl, r0
 800f3e8:	f01a 0f01 	tst.w	sl, #1
 800f3ec:	d10e      	bne.n	800f40c <__gethex+0x3a4>
 800f3ee:	f047 0710 	orr.w	r7, r7, #16
 800f3f2:	e033      	b.n	800f45c <__gethex+0x3f4>
 800f3f4:	f04f 0a01 	mov.w	sl, #1
 800f3f8:	e7d0      	b.n	800f39c <__gethex+0x334>
 800f3fa:	2701      	movs	r7, #1
 800f3fc:	e7e2      	b.n	800f3c4 <__gethex+0x35c>
 800f3fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f400:	f1c3 0301 	rsb	r3, r3, #1
 800f404:	9315      	str	r3, [sp, #84]	; 0x54
 800f406:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d0f0      	beq.n	800f3ee <__gethex+0x386>
 800f40c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f410:	f104 0314 	add.w	r3, r4, #20
 800f414:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f418:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f41c:	f04f 0c00 	mov.w	ip, #0
 800f420:	4618      	mov	r0, r3
 800f422:	f853 2b04 	ldr.w	r2, [r3], #4
 800f426:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f42a:	d01c      	beq.n	800f466 <__gethex+0x3fe>
 800f42c:	3201      	adds	r2, #1
 800f42e:	6002      	str	r2, [r0, #0]
 800f430:	2f02      	cmp	r7, #2
 800f432:	f104 0314 	add.w	r3, r4, #20
 800f436:	d13f      	bne.n	800f4b8 <__gethex+0x450>
 800f438:	f8d8 2000 	ldr.w	r2, [r8]
 800f43c:	3a01      	subs	r2, #1
 800f43e:	42b2      	cmp	r2, r6
 800f440:	d10a      	bne.n	800f458 <__gethex+0x3f0>
 800f442:	1171      	asrs	r1, r6, #5
 800f444:	2201      	movs	r2, #1
 800f446:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f44a:	f006 061f 	and.w	r6, r6, #31
 800f44e:	fa02 f606 	lsl.w	r6, r2, r6
 800f452:	421e      	tst	r6, r3
 800f454:	bf18      	it	ne
 800f456:	4617      	movne	r7, r2
 800f458:	f047 0720 	orr.w	r7, r7, #32
 800f45c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f45e:	601c      	str	r4, [r3, #0]
 800f460:	9b04      	ldr	r3, [sp, #16]
 800f462:	601d      	str	r5, [r3, #0]
 800f464:	e695      	b.n	800f192 <__gethex+0x12a>
 800f466:	4299      	cmp	r1, r3
 800f468:	f843 cc04 	str.w	ip, [r3, #-4]
 800f46c:	d8d8      	bhi.n	800f420 <__gethex+0x3b8>
 800f46e:	68a3      	ldr	r3, [r4, #8]
 800f470:	459b      	cmp	fp, r3
 800f472:	db19      	blt.n	800f4a8 <__gethex+0x440>
 800f474:	6861      	ldr	r1, [r4, #4]
 800f476:	ee18 0a10 	vmov	r0, s16
 800f47a:	3101      	adds	r1, #1
 800f47c:	f000 f9b8 	bl	800f7f0 <_Balloc>
 800f480:	4681      	mov	r9, r0
 800f482:	b918      	cbnz	r0, 800f48c <__gethex+0x424>
 800f484:	4b1a      	ldr	r3, [pc, #104]	; (800f4f0 <__gethex+0x488>)
 800f486:	4602      	mov	r2, r0
 800f488:	2184      	movs	r1, #132	; 0x84
 800f48a:	e6a8      	b.n	800f1de <__gethex+0x176>
 800f48c:	6922      	ldr	r2, [r4, #16]
 800f48e:	3202      	adds	r2, #2
 800f490:	f104 010c 	add.w	r1, r4, #12
 800f494:	0092      	lsls	r2, r2, #2
 800f496:	300c      	adds	r0, #12
 800f498:	f7fc fce3 	bl	800be62 <memcpy>
 800f49c:	4621      	mov	r1, r4
 800f49e:	ee18 0a10 	vmov	r0, s16
 800f4a2:	f000 f9e5 	bl	800f870 <_Bfree>
 800f4a6:	464c      	mov	r4, r9
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	1c5a      	adds	r2, r3, #1
 800f4ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4b0:	6122      	str	r2, [r4, #16]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	615a      	str	r2, [r3, #20]
 800f4b6:	e7bb      	b.n	800f430 <__gethex+0x3c8>
 800f4b8:	6922      	ldr	r2, [r4, #16]
 800f4ba:	455a      	cmp	r2, fp
 800f4bc:	dd0b      	ble.n	800f4d6 <__gethex+0x46e>
 800f4be:	2101      	movs	r1, #1
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f7ff fd69 	bl	800ef98 <rshift>
 800f4c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4ca:	3501      	adds	r5, #1
 800f4cc:	42ab      	cmp	r3, r5
 800f4ce:	f6ff aed0 	blt.w	800f272 <__gethex+0x20a>
 800f4d2:	2701      	movs	r7, #1
 800f4d4:	e7c0      	b.n	800f458 <__gethex+0x3f0>
 800f4d6:	f016 061f 	ands.w	r6, r6, #31
 800f4da:	d0fa      	beq.n	800f4d2 <__gethex+0x46a>
 800f4dc:	4453      	add	r3, sl
 800f4de:	f1c6 0620 	rsb	r6, r6, #32
 800f4e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4e6:	f000 fa75 	bl	800f9d4 <__hi0bits>
 800f4ea:	42b0      	cmp	r0, r6
 800f4ec:	dbe7      	blt.n	800f4be <__gethex+0x456>
 800f4ee:	e7f0      	b.n	800f4d2 <__gethex+0x46a>
 800f4f0:	080125df 	.word	0x080125df

0800f4f4 <L_shift>:
 800f4f4:	f1c2 0208 	rsb	r2, r2, #8
 800f4f8:	0092      	lsls	r2, r2, #2
 800f4fa:	b570      	push	{r4, r5, r6, lr}
 800f4fc:	f1c2 0620 	rsb	r6, r2, #32
 800f500:	6843      	ldr	r3, [r0, #4]
 800f502:	6804      	ldr	r4, [r0, #0]
 800f504:	fa03 f506 	lsl.w	r5, r3, r6
 800f508:	432c      	orrs	r4, r5
 800f50a:	40d3      	lsrs	r3, r2
 800f50c:	6004      	str	r4, [r0, #0]
 800f50e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f512:	4288      	cmp	r0, r1
 800f514:	d3f4      	bcc.n	800f500 <L_shift+0xc>
 800f516:	bd70      	pop	{r4, r5, r6, pc}

0800f518 <__match>:
 800f518:	b530      	push	{r4, r5, lr}
 800f51a:	6803      	ldr	r3, [r0, #0]
 800f51c:	3301      	adds	r3, #1
 800f51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f522:	b914      	cbnz	r4, 800f52a <__match+0x12>
 800f524:	6003      	str	r3, [r0, #0]
 800f526:	2001      	movs	r0, #1
 800f528:	bd30      	pop	{r4, r5, pc}
 800f52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f52e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f532:	2d19      	cmp	r5, #25
 800f534:	bf98      	it	ls
 800f536:	3220      	addls	r2, #32
 800f538:	42a2      	cmp	r2, r4
 800f53a:	d0f0      	beq.n	800f51e <__match+0x6>
 800f53c:	2000      	movs	r0, #0
 800f53e:	e7f3      	b.n	800f528 <__match+0x10>

0800f540 <__hexnan>:
 800f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	680b      	ldr	r3, [r1, #0]
 800f546:	115e      	asrs	r6, r3, #5
 800f548:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f54c:	f013 031f 	ands.w	r3, r3, #31
 800f550:	b087      	sub	sp, #28
 800f552:	bf18      	it	ne
 800f554:	3604      	addne	r6, #4
 800f556:	2500      	movs	r5, #0
 800f558:	1f37      	subs	r7, r6, #4
 800f55a:	4690      	mov	r8, r2
 800f55c:	6802      	ldr	r2, [r0, #0]
 800f55e:	9301      	str	r3, [sp, #4]
 800f560:	4682      	mov	sl, r0
 800f562:	f846 5c04 	str.w	r5, [r6, #-4]
 800f566:	46b9      	mov	r9, r7
 800f568:	463c      	mov	r4, r7
 800f56a:	9502      	str	r5, [sp, #8]
 800f56c:	46ab      	mov	fp, r5
 800f56e:	7851      	ldrb	r1, [r2, #1]
 800f570:	1c53      	adds	r3, r2, #1
 800f572:	9303      	str	r3, [sp, #12]
 800f574:	b341      	cbz	r1, 800f5c8 <__hexnan+0x88>
 800f576:	4608      	mov	r0, r1
 800f578:	9205      	str	r2, [sp, #20]
 800f57a:	9104      	str	r1, [sp, #16]
 800f57c:	f7ff fd5e 	bl	800f03c <__hexdig_fun>
 800f580:	2800      	cmp	r0, #0
 800f582:	d14f      	bne.n	800f624 <__hexnan+0xe4>
 800f584:	9904      	ldr	r1, [sp, #16]
 800f586:	9a05      	ldr	r2, [sp, #20]
 800f588:	2920      	cmp	r1, #32
 800f58a:	d818      	bhi.n	800f5be <__hexnan+0x7e>
 800f58c:	9b02      	ldr	r3, [sp, #8]
 800f58e:	459b      	cmp	fp, r3
 800f590:	dd13      	ble.n	800f5ba <__hexnan+0x7a>
 800f592:	454c      	cmp	r4, r9
 800f594:	d206      	bcs.n	800f5a4 <__hexnan+0x64>
 800f596:	2d07      	cmp	r5, #7
 800f598:	dc04      	bgt.n	800f5a4 <__hexnan+0x64>
 800f59a:	462a      	mov	r2, r5
 800f59c:	4649      	mov	r1, r9
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f7ff ffa8 	bl	800f4f4 <L_shift>
 800f5a4:	4544      	cmp	r4, r8
 800f5a6:	d950      	bls.n	800f64a <__hexnan+0x10a>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	f1a4 0904 	sub.w	r9, r4, #4
 800f5ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5b2:	f8cd b008 	str.w	fp, [sp, #8]
 800f5b6:	464c      	mov	r4, r9
 800f5b8:	461d      	mov	r5, r3
 800f5ba:	9a03      	ldr	r2, [sp, #12]
 800f5bc:	e7d7      	b.n	800f56e <__hexnan+0x2e>
 800f5be:	2929      	cmp	r1, #41	; 0x29
 800f5c0:	d156      	bne.n	800f670 <__hexnan+0x130>
 800f5c2:	3202      	adds	r2, #2
 800f5c4:	f8ca 2000 	str.w	r2, [sl]
 800f5c8:	f1bb 0f00 	cmp.w	fp, #0
 800f5cc:	d050      	beq.n	800f670 <__hexnan+0x130>
 800f5ce:	454c      	cmp	r4, r9
 800f5d0:	d206      	bcs.n	800f5e0 <__hexnan+0xa0>
 800f5d2:	2d07      	cmp	r5, #7
 800f5d4:	dc04      	bgt.n	800f5e0 <__hexnan+0xa0>
 800f5d6:	462a      	mov	r2, r5
 800f5d8:	4649      	mov	r1, r9
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7ff ff8a 	bl	800f4f4 <L_shift>
 800f5e0:	4544      	cmp	r4, r8
 800f5e2:	d934      	bls.n	800f64e <__hexnan+0x10e>
 800f5e4:	f1a8 0204 	sub.w	r2, r8, #4
 800f5e8:	4623      	mov	r3, r4
 800f5ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800f5ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800f5f2:	429f      	cmp	r7, r3
 800f5f4:	d2f9      	bcs.n	800f5ea <__hexnan+0xaa>
 800f5f6:	1b3b      	subs	r3, r7, r4
 800f5f8:	f023 0303 	bic.w	r3, r3, #3
 800f5fc:	3304      	adds	r3, #4
 800f5fe:	3401      	adds	r4, #1
 800f600:	3e03      	subs	r6, #3
 800f602:	42b4      	cmp	r4, r6
 800f604:	bf88      	it	hi
 800f606:	2304      	movhi	r3, #4
 800f608:	4443      	add	r3, r8
 800f60a:	2200      	movs	r2, #0
 800f60c:	f843 2b04 	str.w	r2, [r3], #4
 800f610:	429f      	cmp	r7, r3
 800f612:	d2fb      	bcs.n	800f60c <__hexnan+0xcc>
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	b91b      	cbnz	r3, 800f620 <__hexnan+0xe0>
 800f618:	4547      	cmp	r7, r8
 800f61a:	d127      	bne.n	800f66c <__hexnan+0x12c>
 800f61c:	2301      	movs	r3, #1
 800f61e:	603b      	str	r3, [r7, #0]
 800f620:	2005      	movs	r0, #5
 800f622:	e026      	b.n	800f672 <__hexnan+0x132>
 800f624:	3501      	adds	r5, #1
 800f626:	2d08      	cmp	r5, #8
 800f628:	f10b 0b01 	add.w	fp, fp, #1
 800f62c:	dd06      	ble.n	800f63c <__hexnan+0xfc>
 800f62e:	4544      	cmp	r4, r8
 800f630:	d9c3      	bls.n	800f5ba <__hexnan+0x7a>
 800f632:	2300      	movs	r3, #0
 800f634:	f844 3c04 	str.w	r3, [r4, #-4]
 800f638:	2501      	movs	r5, #1
 800f63a:	3c04      	subs	r4, #4
 800f63c:	6822      	ldr	r2, [r4, #0]
 800f63e:	f000 000f 	and.w	r0, r0, #15
 800f642:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f646:	6022      	str	r2, [r4, #0]
 800f648:	e7b7      	b.n	800f5ba <__hexnan+0x7a>
 800f64a:	2508      	movs	r5, #8
 800f64c:	e7b5      	b.n	800f5ba <__hexnan+0x7a>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d0df      	beq.n	800f614 <__hexnan+0xd4>
 800f654:	f04f 32ff 	mov.w	r2, #4294967295
 800f658:	f1c3 0320 	rsb	r3, r3, #32
 800f65c:	fa22 f303 	lsr.w	r3, r2, r3
 800f660:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f664:	401a      	ands	r2, r3
 800f666:	f846 2c04 	str.w	r2, [r6, #-4]
 800f66a:	e7d3      	b.n	800f614 <__hexnan+0xd4>
 800f66c:	3f04      	subs	r7, #4
 800f66e:	e7d1      	b.n	800f614 <__hexnan+0xd4>
 800f670:	2004      	movs	r0, #4
 800f672:	b007      	add	sp, #28
 800f674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f678 <_localeconv_r>:
 800f678:	4800      	ldr	r0, [pc, #0]	; (800f67c <_localeconv_r+0x4>)
 800f67a:	4770      	bx	lr
 800f67c:	20000394 	.word	0x20000394

0800f680 <_lseek_r>:
 800f680:	b538      	push	{r3, r4, r5, lr}
 800f682:	4d07      	ldr	r5, [pc, #28]	; (800f6a0 <_lseek_r+0x20>)
 800f684:	4604      	mov	r4, r0
 800f686:	4608      	mov	r0, r1
 800f688:	4611      	mov	r1, r2
 800f68a:	2200      	movs	r2, #0
 800f68c:	602a      	str	r2, [r5, #0]
 800f68e:	461a      	mov	r2, r3
 800f690:	f7f3 fc24 	bl	8002edc <_lseek>
 800f694:	1c43      	adds	r3, r0, #1
 800f696:	d102      	bne.n	800f69e <_lseek_r+0x1e>
 800f698:	682b      	ldr	r3, [r5, #0]
 800f69a:	b103      	cbz	r3, 800f69e <_lseek_r+0x1e>
 800f69c:	6023      	str	r3, [r4, #0]
 800f69e:	bd38      	pop	{r3, r4, r5, pc}
 800f6a0:	20013300 	.word	0x20013300

0800f6a4 <__swhatbuf_r>:
 800f6a4:	b570      	push	{r4, r5, r6, lr}
 800f6a6:	460e      	mov	r6, r1
 800f6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ac:	2900      	cmp	r1, #0
 800f6ae:	b096      	sub	sp, #88	; 0x58
 800f6b0:	4614      	mov	r4, r2
 800f6b2:	461d      	mov	r5, r3
 800f6b4:	da08      	bge.n	800f6c8 <__swhatbuf_r+0x24>
 800f6b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	602a      	str	r2, [r5, #0]
 800f6be:	061a      	lsls	r2, r3, #24
 800f6c0:	d410      	bmi.n	800f6e4 <__swhatbuf_r+0x40>
 800f6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6c6:	e00e      	b.n	800f6e6 <__swhatbuf_r+0x42>
 800f6c8:	466a      	mov	r2, sp
 800f6ca:	f001 fbc9 	bl	8010e60 <_fstat_r>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	dbf1      	blt.n	800f6b6 <__swhatbuf_r+0x12>
 800f6d2:	9a01      	ldr	r2, [sp, #4]
 800f6d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6dc:	425a      	negs	r2, r3
 800f6de:	415a      	adcs	r2, r3
 800f6e0:	602a      	str	r2, [r5, #0]
 800f6e2:	e7ee      	b.n	800f6c2 <__swhatbuf_r+0x1e>
 800f6e4:	2340      	movs	r3, #64	; 0x40
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	6023      	str	r3, [r4, #0]
 800f6ea:	b016      	add	sp, #88	; 0x58
 800f6ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6f0 <__smakebuf_r>:
 800f6f0:	898b      	ldrh	r3, [r1, #12]
 800f6f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6f4:	079d      	lsls	r5, r3, #30
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	460c      	mov	r4, r1
 800f6fa:	d507      	bpl.n	800f70c <__smakebuf_r+0x1c>
 800f6fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	6123      	str	r3, [r4, #16]
 800f704:	2301      	movs	r3, #1
 800f706:	6163      	str	r3, [r4, #20]
 800f708:	b002      	add	sp, #8
 800f70a:	bd70      	pop	{r4, r5, r6, pc}
 800f70c:	ab01      	add	r3, sp, #4
 800f70e:	466a      	mov	r2, sp
 800f710:	f7ff ffc8 	bl	800f6a4 <__swhatbuf_r>
 800f714:	9900      	ldr	r1, [sp, #0]
 800f716:	4605      	mov	r5, r0
 800f718:	4630      	mov	r0, r6
 800f71a:	f7fc fbd9 	bl	800bed0 <_malloc_r>
 800f71e:	b948      	cbnz	r0, 800f734 <__smakebuf_r+0x44>
 800f720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f724:	059a      	lsls	r2, r3, #22
 800f726:	d4ef      	bmi.n	800f708 <__smakebuf_r+0x18>
 800f728:	f023 0303 	bic.w	r3, r3, #3
 800f72c:	f043 0302 	orr.w	r3, r3, #2
 800f730:	81a3      	strh	r3, [r4, #12]
 800f732:	e7e3      	b.n	800f6fc <__smakebuf_r+0xc>
 800f734:	4b0d      	ldr	r3, [pc, #52]	; (800f76c <__smakebuf_r+0x7c>)
 800f736:	62b3      	str	r3, [r6, #40]	; 0x28
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	6020      	str	r0, [r4, #0]
 800f73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f740:	81a3      	strh	r3, [r4, #12]
 800f742:	9b00      	ldr	r3, [sp, #0]
 800f744:	6163      	str	r3, [r4, #20]
 800f746:	9b01      	ldr	r3, [sp, #4]
 800f748:	6120      	str	r0, [r4, #16]
 800f74a:	b15b      	cbz	r3, 800f764 <__smakebuf_r+0x74>
 800f74c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f750:	4630      	mov	r0, r6
 800f752:	f001 fb97 	bl	8010e84 <_isatty_r>
 800f756:	b128      	cbz	r0, 800f764 <__smakebuf_r+0x74>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f023 0303 	bic.w	r3, r3, #3
 800f75e:	f043 0301 	orr.w	r3, r3, #1
 800f762:	81a3      	strh	r3, [r4, #12]
 800f764:	89a0      	ldrh	r0, [r4, #12]
 800f766:	4305      	orrs	r5, r0
 800f768:	81a5      	strh	r5, [r4, #12]
 800f76a:	e7cd      	b.n	800f708 <__smakebuf_r+0x18>
 800f76c:	0800bc4d 	.word	0x0800bc4d

0800f770 <malloc>:
 800f770:	4b02      	ldr	r3, [pc, #8]	; (800f77c <malloc+0xc>)
 800f772:	4601      	mov	r1, r0
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	f7fc bbab 	b.w	800bed0 <_malloc_r>
 800f77a:	bf00      	nop
 800f77c:	2000023c 	.word	0x2000023c

0800f780 <__ascii_mbtowc>:
 800f780:	b082      	sub	sp, #8
 800f782:	b901      	cbnz	r1, 800f786 <__ascii_mbtowc+0x6>
 800f784:	a901      	add	r1, sp, #4
 800f786:	b142      	cbz	r2, 800f79a <__ascii_mbtowc+0x1a>
 800f788:	b14b      	cbz	r3, 800f79e <__ascii_mbtowc+0x1e>
 800f78a:	7813      	ldrb	r3, [r2, #0]
 800f78c:	600b      	str	r3, [r1, #0]
 800f78e:	7812      	ldrb	r2, [r2, #0]
 800f790:	1e10      	subs	r0, r2, #0
 800f792:	bf18      	it	ne
 800f794:	2001      	movne	r0, #1
 800f796:	b002      	add	sp, #8
 800f798:	4770      	bx	lr
 800f79a:	4610      	mov	r0, r2
 800f79c:	e7fb      	b.n	800f796 <__ascii_mbtowc+0x16>
 800f79e:	f06f 0001 	mvn.w	r0, #1
 800f7a2:	e7f8      	b.n	800f796 <__ascii_mbtowc+0x16>

0800f7a4 <memmove>:
 800f7a4:	4288      	cmp	r0, r1
 800f7a6:	b510      	push	{r4, lr}
 800f7a8:	eb01 0402 	add.w	r4, r1, r2
 800f7ac:	d902      	bls.n	800f7b4 <memmove+0x10>
 800f7ae:	4284      	cmp	r4, r0
 800f7b0:	4623      	mov	r3, r4
 800f7b2:	d807      	bhi.n	800f7c4 <memmove+0x20>
 800f7b4:	1e43      	subs	r3, r0, #1
 800f7b6:	42a1      	cmp	r1, r4
 800f7b8:	d008      	beq.n	800f7cc <memmove+0x28>
 800f7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7c2:	e7f8      	b.n	800f7b6 <memmove+0x12>
 800f7c4:	4402      	add	r2, r0
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	428a      	cmp	r2, r1
 800f7ca:	d100      	bne.n	800f7ce <memmove+0x2a>
 800f7cc:	bd10      	pop	{r4, pc}
 800f7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7d6:	e7f7      	b.n	800f7c8 <memmove+0x24>

0800f7d8 <__malloc_lock>:
 800f7d8:	4801      	ldr	r0, [pc, #4]	; (800f7e0 <__malloc_lock+0x8>)
 800f7da:	f7fc bb40 	b.w	800be5e <__retarget_lock_acquire_recursive>
 800f7de:	bf00      	nop
 800f7e0:	200132f4 	.word	0x200132f4

0800f7e4 <__malloc_unlock>:
 800f7e4:	4801      	ldr	r0, [pc, #4]	; (800f7ec <__malloc_unlock+0x8>)
 800f7e6:	f7fc bb3b 	b.w	800be60 <__retarget_lock_release_recursive>
 800f7ea:	bf00      	nop
 800f7ec:	200132f4 	.word	0x200132f4

0800f7f0 <_Balloc>:
 800f7f0:	b570      	push	{r4, r5, r6, lr}
 800f7f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	460d      	mov	r5, r1
 800f7f8:	b976      	cbnz	r6, 800f818 <_Balloc+0x28>
 800f7fa:	2010      	movs	r0, #16
 800f7fc:	f7ff ffb8 	bl	800f770 <malloc>
 800f800:	4602      	mov	r2, r0
 800f802:	6260      	str	r0, [r4, #36]	; 0x24
 800f804:	b920      	cbnz	r0, 800f810 <_Balloc+0x20>
 800f806:	4b18      	ldr	r3, [pc, #96]	; (800f868 <_Balloc+0x78>)
 800f808:	4818      	ldr	r0, [pc, #96]	; (800f86c <_Balloc+0x7c>)
 800f80a:	2166      	movs	r1, #102	; 0x66
 800f80c:	f7fc f9ce 	bl	800bbac <__assert_func>
 800f810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f814:	6006      	str	r6, [r0, #0]
 800f816:	60c6      	str	r6, [r0, #12]
 800f818:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f81a:	68f3      	ldr	r3, [r6, #12]
 800f81c:	b183      	cbz	r3, 800f840 <_Balloc+0x50>
 800f81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f826:	b9b8      	cbnz	r0, 800f858 <_Balloc+0x68>
 800f828:	2101      	movs	r1, #1
 800f82a:	fa01 f605 	lsl.w	r6, r1, r5
 800f82e:	1d72      	adds	r2, r6, #5
 800f830:	0092      	lsls	r2, r2, #2
 800f832:	4620      	mov	r0, r4
 800f834:	f000 fc9d 	bl	8010172 <_calloc_r>
 800f838:	b160      	cbz	r0, 800f854 <_Balloc+0x64>
 800f83a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f83e:	e00e      	b.n	800f85e <_Balloc+0x6e>
 800f840:	2221      	movs	r2, #33	; 0x21
 800f842:	2104      	movs	r1, #4
 800f844:	4620      	mov	r0, r4
 800f846:	f000 fc94 	bl	8010172 <_calloc_r>
 800f84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f84c:	60f0      	str	r0, [r6, #12]
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1e4      	bne.n	800f81e <_Balloc+0x2e>
 800f854:	2000      	movs	r0, #0
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	6802      	ldr	r2, [r0, #0]
 800f85a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f85e:	2300      	movs	r3, #0
 800f860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f864:	e7f7      	b.n	800f856 <_Balloc+0x66>
 800f866:	bf00      	nop
 800f868:	0801256d 	.word	0x0801256d
 800f86c:	0801266c 	.word	0x0801266c

0800f870 <_Bfree>:
 800f870:	b570      	push	{r4, r5, r6, lr}
 800f872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f874:	4605      	mov	r5, r0
 800f876:	460c      	mov	r4, r1
 800f878:	b976      	cbnz	r6, 800f898 <_Bfree+0x28>
 800f87a:	2010      	movs	r0, #16
 800f87c:	f7ff ff78 	bl	800f770 <malloc>
 800f880:	4602      	mov	r2, r0
 800f882:	6268      	str	r0, [r5, #36]	; 0x24
 800f884:	b920      	cbnz	r0, 800f890 <_Bfree+0x20>
 800f886:	4b09      	ldr	r3, [pc, #36]	; (800f8ac <_Bfree+0x3c>)
 800f888:	4809      	ldr	r0, [pc, #36]	; (800f8b0 <_Bfree+0x40>)
 800f88a:	218a      	movs	r1, #138	; 0x8a
 800f88c:	f7fc f98e 	bl	800bbac <__assert_func>
 800f890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f894:	6006      	str	r6, [r0, #0]
 800f896:	60c6      	str	r6, [r0, #12]
 800f898:	b13c      	cbz	r4, 800f8aa <_Bfree+0x3a>
 800f89a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f89c:	6862      	ldr	r2, [r4, #4]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8a4:	6021      	str	r1, [r4, #0]
 800f8a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
 800f8ac:	0801256d 	.word	0x0801256d
 800f8b0:	0801266c 	.word	0x0801266c

0800f8b4 <__multadd>:
 800f8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b8:	690d      	ldr	r5, [r1, #16]
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	460c      	mov	r4, r1
 800f8be:	461e      	mov	r6, r3
 800f8c0:	f101 0c14 	add.w	ip, r1, #20
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	f8dc 3000 	ldr.w	r3, [ip]
 800f8ca:	b299      	uxth	r1, r3
 800f8cc:	fb02 6101 	mla	r1, r2, r1, r6
 800f8d0:	0c1e      	lsrs	r6, r3, #16
 800f8d2:	0c0b      	lsrs	r3, r1, #16
 800f8d4:	fb02 3306 	mla	r3, r2, r6, r3
 800f8d8:	b289      	uxth	r1, r1
 800f8da:	3001      	adds	r0, #1
 800f8dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8e0:	4285      	cmp	r5, r0
 800f8e2:	f84c 1b04 	str.w	r1, [ip], #4
 800f8e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8ea:	dcec      	bgt.n	800f8c6 <__multadd+0x12>
 800f8ec:	b30e      	cbz	r6, 800f932 <__multadd+0x7e>
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	42ab      	cmp	r3, r5
 800f8f2:	dc19      	bgt.n	800f928 <__multadd+0x74>
 800f8f4:	6861      	ldr	r1, [r4, #4]
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	3101      	adds	r1, #1
 800f8fa:	f7ff ff79 	bl	800f7f0 <_Balloc>
 800f8fe:	4680      	mov	r8, r0
 800f900:	b928      	cbnz	r0, 800f90e <__multadd+0x5a>
 800f902:	4602      	mov	r2, r0
 800f904:	4b0c      	ldr	r3, [pc, #48]	; (800f938 <__multadd+0x84>)
 800f906:	480d      	ldr	r0, [pc, #52]	; (800f93c <__multadd+0x88>)
 800f908:	21b5      	movs	r1, #181	; 0xb5
 800f90a:	f7fc f94f 	bl	800bbac <__assert_func>
 800f90e:	6922      	ldr	r2, [r4, #16]
 800f910:	3202      	adds	r2, #2
 800f912:	f104 010c 	add.w	r1, r4, #12
 800f916:	0092      	lsls	r2, r2, #2
 800f918:	300c      	adds	r0, #12
 800f91a:	f7fc faa2 	bl	800be62 <memcpy>
 800f91e:	4621      	mov	r1, r4
 800f920:	4638      	mov	r0, r7
 800f922:	f7ff ffa5 	bl	800f870 <_Bfree>
 800f926:	4644      	mov	r4, r8
 800f928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f92c:	3501      	adds	r5, #1
 800f92e:	615e      	str	r6, [r3, #20]
 800f930:	6125      	str	r5, [r4, #16]
 800f932:	4620      	mov	r0, r4
 800f934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f938:	080125df 	.word	0x080125df
 800f93c:	0801266c 	.word	0x0801266c

0800f940 <__s2b>:
 800f940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f944:	460c      	mov	r4, r1
 800f946:	4615      	mov	r5, r2
 800f948:	461f      	mov	r7, r3
 800f94a:	2209      	movs	r2, #9
 800f94c:	3308      	adds	r3, #8
 800f94e:	4606      	mov	r6, r0
 800f950:	fb93 f3f2 	sdiv	r3, r3, r2
 800f954:	2100      	movs	r1, #0
 800f956:	2201      	movs	r2, #1
 800f958:	429a      	cmp	r2, r3
 800f95a:	db09      	blt.n	800f970 <__s2b+0x30>
 800f95c:	4630      	mov	r0, r6
 800f95e:	f7ff ff47 	bl	800f7f0 <_Balloc>
 800f962:	b940      	cbnz	r0, 800f976 <__s2b+0x36>
 800f964:	4602      	mov	r2, r0
 800f966:	4b19      	ldr	r3, [pc, #100]	; (800f9cc <__s2b+0x8c>)
 800f968:	4819      	ldr	r0, [pc, #100]	; (800f9d0 <__s2b+0x90>)
 800f96a:	21ce      	movs	r1, #206	; 0xce
 800f96c:	f7fc f91e 	bl	800bbac <__assert_func>
 800f970:	0052      	lsls	r2, r2, #1
 800f972:	3101      	adds	r1, #1
 800f974:	e7f0      	b.n	800f958 <__s2b+0x18>
 800f976:	9b08      	ldr	r3, [sp, #32]
 800f978:	6143      	str	r3, [r0, #20]
 800f97a:	2d09      	cmp	r5, #9
 800f97c:	f04f 0301 	mov.w	r3, #1
 800f980:	6103      	str	r3, [r0, #16]
 800f982:	dd16      	ble.n	800f9b2 <__s2b+0x72>
 800f984:	f104 0909 	add.w	r9, r4, #9
 800f988:	46c8      	mov	r8, r9
 800f98a:	442c      	add	r4, r5
 800f98c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f990:	4601      	mov	r1, r0
 800f992:	3b30      	subs	r3, #48	; 0x30
 800f994:	220a      	movs	r2, #10
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ff8c 	bl	800f8b4 <__multadd>
 800f99c:	45a0      	cmp	r8, r4
 800f99e:	d1f5      	bne.n	800f98c <__s2b+0x4c>
 800f9a0:	f1a5 0408 	sub.w	r4, r5, #8
 800f9a4:	444c      	add	r4, r9
 800f9a6:	1b2d      	subs	r5, r5, r4
 800f9a8:	1963      	adds	r3, r4, r5
 800f9aa:	42bb      	cmp	r3, r7
 800f9ac:	db04      	blt.n	800f9b8 <__s2b+0x78>
 800f9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b2:	340a      	adds	r4, #10
 800f9b4:	2509      	movs	r5, #9
 800f9b6:	e7f6      	b.n	800f9a6 <__s2b+0x66>
 800f9b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f9bc:	4601      	mov	r1, r0
 800f9be:	3b30      	subs	r3, #48	; 0x30
 800f9c0:	220a      	movs	r2, #10
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f7ff ff76 	bl	800f8b4 <__multadd>
 800f9c8:	e7ee      	b.n	800f9a8 <__s2b+0x68>
 800f9ca:	bf00      	nop
 800f9cc:	080125df 	.word	0x080125df
 800f9d0:	0801266c 	.word	0x0801266c

0800f9d4 <__hi0bits>:
 800f9d4:	0c03      	lsrs	r3, r0, #16
 800f9d6:	041b      	lsls	r3, r3, #16
 800f9d8:	b9d3      	cbnz	r3, 800fa10 <__hi0bits+0x3c>
 800f9da:	0400      	lsls	r0, r0, #16
 800f9dc:	2310      	movs	r3, #16
 800f9de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f9e2:	bf04      	itt	eq
 800f9e4:	0200      	lsleq	r0, r0, #8
 800f9e6:	3308      	addeq	r3, #8
 800f9e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f9ec:	bf04      	itt	eq
 800f9ee:	0100      	lsleq	r0, r0, #4
 800f9f0:	3304      	addeq	r3, #4
 800f9f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f9f6:	bf04      	itt	eq
 800f9f8:	0080      	lsleq	r0, r0, #2
 800f9fa:	3302      	addeq	r3, #2
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	db05      	blt.n	800fa0c <__hi0bits+0x38>
 800fa00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa04:	f103 0301 	add.w	r3, r3, #1
 800fa08:	bf08      	it	eq
 800fa0a:	2320      	moveq	r3, #32
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	4770      	bx	lr
 800fa10:	2300      	movs	r3, #0
 800fa12:	e7e4      	b.n	800f9de <__hi0bits+0xa>

0800fa14 <__lo0bits>:
 800fa14:	6803      	ldr	r3, [r0, #0]
 800fa16:	f013 0207 	ands.w	r2, r3, #7
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	d00b      	beq.n	800fa36 <__lo0bits+0x22>
 800fa1e:	07da      	lsls	r2, r3, #31
 800fa20:	d423      	bmi.n	800fa6a <__lo0bits+0x56>
 800fa22:	0798      	lsls	r0, r3, #30
 800fa24:	bf49      	itett	mi
 800fa26:	085b      	lsrmi	r3, r3, #1
 800fa28:	089b      	lsrpl	r3, r3, #2
 800fa2a:	2001      	movmi	r0, #1
 800fa2c:	600b      	strmi	r3, [r1, #0]
 800fa2e:	bf5c      	itt	pl
 800fa30:	600b      	strpl	r3, [r1, #0]
 800fa32:	2002      	movpl	r0, #2
 800fa34:	4770      	bx	lr
 800fa36:	b298      	uxth	r0, r3
 800fa38:	b9a8      	cbnz	r0, 800fa66 <__lo0bits+0x52>
 800fa3a:	0c1b      	lsrs	r3, r3, #16
 800fa3c:	2010      	movs	r0, #16
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	b90a      	cbnz	r2, 800fa46 <__lo0bits+0x32>
 800fa42:	3008      	adds	r0, #8
 800fa44:	0a1b      	lsrs	r3, r3, #8
 800fa46:	071a      	lsls	r2, r3, #28
 800fa48:	bf04      	itt	eq
 800fa4a:	091b      	lsreq	r3, r3, #4
 800fa4c:	3004      	addeq	r0, #4
 800fa4e:	079a      	lsls	r2, r3, #30
 800fa50:	bf04      	itt	eq
 800fa52:	089b      	lsreq	r3, r3, #2
 800fa54:	3002      	addeq	r0, #2
 800fa56:	07da      	lsls	r2, r3, #31
 800fa58:	d403      	bmi.n	800fa62 <__lo0bits+0x4e>
 800fa5a:	085b      	lsrs	r3, r3, #1
 800fa5c:	f100 0001 	add.w	r0, r0, #1
 800fa60:	d005      	beq.n	800fa6e <__lo0bits+0x5a>
 800fa62:	600b      	str	r3, [r1, #0]
 800fa64:	4770      	bx	lr
 800fa66:	4610      	mov	r0, r2
 800fa68:	e7e9      	b.n	800fa3e <__lo0bits+0x2a>
 800fa6a:	2000      	movs	r0, #0
 800fa6c:	4770      	bx	lr
 800fa6e:	2020      	movs	r0, #32
 800fa70:	4770      	bx	lr
	...

0800fa74 <__i2b>:
 800fa74:	b510      	push	{r4, lr}
 800fa76:	460c      	mov	r4, r1
 800fa78:	2101      	movs	r1, #1
 800fa7a:	f7ff feb9 	bl	800f7f0 <_Balloc>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	b928      	cbnz	r0, 800fa8e <__i2b+0x1a>
 800fa82:	4b05      	ldr	r3, [pc, #20]	; (800fa98 <__i2b+0x24>)
 800fa84:	4805      	ldr	r0, [pc, #20]	; (800fa9c <__i2b+0x28>)
 800fa86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fa8a:	f7fc f88f 	bl	800bbac <__assert_func>
 800fa8e:	2301      	movs	r3, #1
 800fa90:	6144      	str	r4, [r0, #20]
 800fa92:	6103      	str	r3, [r0, #16]
 800fa94:	bd10      	pop	{r4, pc}
 800fa96:	bf00      	nop
 800fa98:	080125df 	.word	0x080125df
 800fa9c:	0801266c 	.word	0x0801266c

0800faa0 <__multiply>:
 800faa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa4:	4691      	mov	r9, r2
 800faa6:	690a      	ldr	r2, [r1, #16]
 800faa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800faac:	429a      	cmp	r2, r3
 800faae:	bfb8      	it	lt
 800fab0:	460b      	movlt	r3, r1
 800fab2:	460c      	mov	r4, r1
 800fab4:	bfbc      	itt	lt
 800fab6:	464c      	movlt	r4, r9
 800fab8:	4699      	movlt	r9, r3
 800faba:	6927      	ldr	r7, [r4, #16]
 800fabc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fac0:	68a3      	ldr	r3, [r4, #8]
 800fac2:	6861      	ldr	r1, [r4, #4]
 800fac4:	eb07 060a 	add.w	r6, r7, sl
 800fac8:	42b3      	cmp	r3, r6
 800faca:	b085      	sub	sp, #20
 800facc:	bfb8      	it	lt
 800face:	3101      	addlt	r1, #1
 800fad0:	f7ff fe8e 	bl	800f7f0 <_Balloc>
 800fad4:	b930      	cbnz	r0, 800fae4 <__multiply+0x44>
 800fad6:	4602      	mov	r2, r0
 800fad8:	4b44      	ldr	r3, [pc, #272]	; (800fbec <__multiply+0x14c>)
 800fada:	4845      	ldr	r0, [pc, #276]	; (800fbf0 <__multiply+0x150>)
 800fadc:	f240 115d 	movw	r1, #349	; 0x15d
 800fae0:	f7fc f864 	bl	800bbac <__assert_func>
 800fae4:	f100 0514 	add.w	r5, r0, #20
 800fae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800faec:	462b      	mov	r3, r5
 800faee:	2200      	movs	r2, #0
 800faf0:	4543      	cmp	r3, r8
 800faf2:	d321      	bcc.n	800fb38 <__multiply+0x98>
 800faf4:	f104 0314 	add.w	r3, r4, #20
 800faf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fafc:	f109 0314 	add.w	r3, r9, #20
 800fb00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fb04:	9202      	str	r2, [sp, #8]
 800fb06:	1b3a      	subs	r2, r7, r4
 800fb08:	3a15      	subs	r2, #21
 800fb0a:	f022 0203 	bic.w	r2, r2, #3
 800fb0e:	3204      	adds	r2, #4
 800fb10:	f104 0115 	add.w	r1, r4, #21
 800fb14:	428f      	cmp	r7, r1
 800fb16:	bf38      	it	cc
 800fb18:	2204      	movcc	r2, #4
 800fb1a:	9201      	str	r2, [sp, #4]
 800fb1c:	9a02      	ldr	r2, [sp, #8]
 800fb1e:	9303      	str	r3, [sp, #12]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d80c      	bhi.n	800fb3e <__multiply+0x9e>
 800fb24:	2e00      	cmp	r6, #0
 800fb26:	dd03      	ble.n	800fb30 <__multiply+0x90>
 800fb28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d05a      	beq.n	800fbe6 <__multiply+0x146>
 800fb30:	6106      	str	r6, [r0, #16]
 800fb32:	b005      	add	sp, #20
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	f843 2b04 	str.w	r2, [r3], #4
 800fb3c:	e7d8      	b.n	800faf0 <__multiply+0x50>
 800fb3e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb42:	f1ba 0f00 	cmp.w	sl, #0
 800fb46:	d024      	beq.n	800fb92 <__multiply+0xf2>
 800fb48:	f104 0e14 	add.w	lr, r4, #20
 800fb4c:	46a9      	mov	r9, r5
 800fb4e:	f04f 0c00 	mov.w	ip, #0
 800fb52:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fb56:	f8d9 1000 	ldr.w	r1, [r9]
 800fb5a:	fa1f fb82 	uxth.w	fp, r2
 800fb5e:	b289      	uxth	r1, r1
 800fb60:	fb0a 110b 	mla	r1, sl, fp, r1
 800fb64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fb68:	f8d9 2000 	ldr.w	r2, [r9]
 800fb6c:	4461      	add	r1, ip
 800fb6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb72:	fb0a c20b 	mla	r2, sl, fp, ip
 800fb76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb7a:	b289      	uxth	r1, r1
 800fb7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb80:	4577      	cmp	r7, lr
 800fb82:	f849 1b04 	str.w	r1, [r9], #4
 800fb86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fb8a:	d8e2      	bhi.n	800fb52 <__multiply+0xb2>
 800fb8c:	9a01      	ldr	r2, [sp, #4]
 800fb8e:	f845 c002 	str.w	ip, [r5, r2]
 800fb92:	9a03      	ldr	r2, [sp, #12]
 800fb94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb98:	3304      	adds	r3, #4
 800fb9a:	f1b9 0f00 	cmp.w	r9, #0
 800fb9e:	d020      	beq.n	800fbe2 <__multiply+0x142>
 800fba0:	6829      	ldr	r1, [r5, #0]
 800fba2:	f104 0c14 	add.w	ip, r4, #20
 800fba6:	46ae      	mov	lr, r5
 800fba8:	f04f 0a00 	mov.w	sl, #0
 800fbac:	f8bc b000 	ldrh.w	fp, [ip]
 800fbb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fbb4:	fb09 220b 	mla	r2, r9, fp, r2
 800fbb8:	4492      	add	sl, r2
 800fbba:	b289      	uxth	r1, r1
 800fbbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fbc0:	f84e 1b04 	str.w	r1, [lr], #4
 800fbc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fbc8:	f8be 1000 	ldrh.w	r1, [lr]
 800fbcc:	0c12      	lsrs	r2, r2, #16
 800fbce:	fb09 1102 	mla	r1, r9, r2, r1
 800fbd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fbd6:	4567      	cmp	r7, ip
 800fbd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fbdc:	d8e6      	bhi.n	800fbac <__multiply+0x10c>
 800fbde:	9a01      	ldr	r2, [sp, #4]
 800fbe0:	50a9      	str	r1, [r5, r2]
 800fbe2:	3504      	adds	r5, #4
 800fbe4:	e79a      	b.n	800fb1c <__multiply+0x7c>
 800fbe6:	3e01      	subs	r6, #1
 800fbe8:	e79c      	b.n	800fb24 <__multiply+0x84>
 800fbea:	bf00      	nop
 800fbec:	080125df 	.word	0x080125df
 800fbf0:	0801266c 	.word	0x0801266c

0800fbf4 <__pow5mult>:
 800fbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbf8:	4615      	mov	r5, r2
 800fbfa:	f012 0203 	ands.w	r2, r2, #3
 800fbfe:	4606      	mov	r6, r0
 800fc00:	460f      	mov	r7, r1
 800fc02:	d007      	beq.n	800fc14 <__pow5mult+0x20>
 800fc04:	4c25      	ldr	r4, [pc, #148]	; (800fc9c <__pow5mult+0xa8>)
 800fc06:	3a01      	subs	r2, #1
 800fc08:	2300      	movs	r3, #0
 800fc0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc0e:	f7ff fe51 	bl	800f8b4 <__multadd>
 800fc12:	4607      	mov	r7, r0
 800fc14:	10ad      	asrs	r5, r5, #2
 800fc16:	d03d      	beq.n	800fc94 <__pow5mult+0xa0>
 800fc18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc1a:	b97c      	cbnz	r4, 800fc3c <__pow5mult+0x48>
 800fc1c:	2010      	movs	r0, #16
 800fc1e:	f7ff fda7 	bl	800f770 <malloc>
 800fc22:	4602      	mov	r2, r0
 800fc24:	6270      	str	r0, [r6, #36]	; 0x24
 800fc26:	b928      	cbnz	r0, 800fc34 <__pow5mult+0x40>
 800fc28:	4b1d      	ldr	r3, [pc, #116]	; (800fca0 <__pow5mult+0xac>)
 800fc2a:	481e      	ldr	r0, [pc, #120]	; (800fca4 <__pow5mult+0xb0>)
 800fc2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc30:	f7fb ffbc 	bl	800bbac <__assert_func>
 800fc34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc38:	6004      	str	r4, [r0, #0]
 800fc3a:	60c4      	str	r4, [r0, #12]
 800fc3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc44:	b94c      	cbnz	r4, 800fc5a <__pow5mult+0x66>
 800fc46:	f240 2171 	movw	r1, #625	; 0x271
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7ff ff12 	bl	800fa74 <__i2b>
 800fc50:	2300      	movs	r3, #0
 800fc52:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc56:	4604      	mov	r4, r0
 800fc58:	6003      	str	r3, [r0, #0]
 800fc5a:	f04f 0900 	mov.w	r9, #0
 800fc5e:	07eb      	lsls	r3, r5, #31
 800fc60:	d50a      	bpl.n	800fc78 <__pow5mult+0x84>
 800fc62:	4639      	mov	r1, r7
 800fc64:	4622      	mov	r2, r4
 800fc66:	4630      	mov	r0, r6
 800fc68:	f7ff ff1a 	bl	800faa0 <__multiply>
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4680      	mov	r8, r0
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7ff fdfd 	bl	800f870 <_Bfree>
 800fc76:	4647      	mov	r7, r8
 800fc78:	106d      	asrs	r5, r5, #1
 800fc7a:	d00b      	beq.n	800fc94 <__pow5mult+0xa0>
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	b938      	cbnz	r0, 800fc90 <__pow5mult+0x9c>
 800fc80:	4622      	mov	r2, r4
 800fc82:	4621      	mov	r1, r4
 800fc84:	4630      	mov	r0, r6
 800fc86:	f7ff ff0b 	bl	800faa0 <__multiply>
 800fc8a:	6020      	str	r0, [r4, #0]
 800fc8c:	f8c0 9000 	str.w	r9, [r0]
 800fc90:	4604      	mov	r4, r0
 800fc92:	e7e4      	b.n	800fc5e <__pow5mult+0x6a>
 800fc94:	4638      	mov	r0, r7
 800fc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc9a:	bf00      	nop
 800fc9c:	080127b8 	.word	0x080127b8
 800fca0:	0801256d 	.word	0x0801256d
 800fca4:	0801266c 	.word	0x0801266c

0800fca8 <__lshift>:
 800fca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcac:	460c      	mov	r4, r1
 800fcae:	6849      	ldr	r1, [r1, #4]
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcb6:	68a3      	ldr	r3, [r4, #8]
 800fcb8:	4607      	mov	r7, r0
 800fcba:	4691      	mov	r9, r2
 800fcbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcc0:	f108 0601 	add.w	r6, r8, #1
 800fcc4:	42b3      	cmp	r3, r6
 800fcc6:	db0b      	blt.n	800fce0 <__lshift+0x38>
 800fcc8:	4638      	mov	r0, r7
 800fcca:	f7ff fd91 	bl	800f7f0 <_Balloc>
 800fcce:	4605      	mov	r5, r0
 800fcd0:	b948      	cbnz	r0, 800fce6 <__lshift+0x3e>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4b2a      	ldr	r3, [pc, #168]	; (800fd80 <__lshift+0xd8>)
 800fcd6:	482b      	ldr	r0, [pc, #172]	; (800fd84 <__lshift+0xdc>)
 800fcd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fcdc:	f7fb ff66 	bl	800bbac <__assert_func>
 800fce0:	3101      	adds	r1, #1
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	e7ee      	b.n	800fcc4 <__lshift+0x1c>
 800fce6:	2300      	movs	r3, #0
 800fce8:	f100 0114 	add.w	r1, r0, #20
 800fcec:	f100 0210 	add.w	r2, r0, #16
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	4553      	cmp	r3, sl
 800fcf4:	db37      	blt.n	800fd66 <__lshift+0xbe>
 800fcf6:	6920      	ldr	r0, [r4, #16]
 800fcf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fcfc:	f104 0314 	add.w	r3, r4, #20
 800fd00:	f019 091f 	ands.w	r9, r9, #31
 800fd04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fd0c:	d02f      	beq.n	800fd6e <__lshift+0xc6>
 800fd0e:	f1c9 0e20 	rsb	lr, r9, #32
 800fd12:	468a      	mov	sl, r1
 800fd14:	f04f 0c00 	mov.w	ip, #0
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	fa02 f209 	lsl.w	r2, r2, r9
 800fd1e:	ea42 020c 	orr.w	r2, r2, ip
 800fd22:	f84a 2b04 	str.w	r2, [sl], #4
 800fd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd2a:	4298      	cmp	r0, r3
 800fd2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fd30:	d8f2      	bhi.n	800fd18 <__lshift+0x70>
 800fd32:	1b03      	subs	r3, r0, r4
 800fd34:	3b15      	subs	r3, #21
 800fd36:	f023 0303 	bic.w	r3, r3, #3
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	f104 0215 	add.w	r2, r4, #21
 800fd40:	4290      	cmp	r0, r2
 800fd42:	bf38      	it	cc
 800fd44:	2304      	movcc	r3, #4
 800fd46:	f841 c003 	str.w	ip, [r1, r3]
 800fd4a:	f1bc 0f00 	cmp.w	ip, #0
 800fd4e:	d001      	beq.n	800fd54 <__lshift+0xac>
 800fd50:	f108 0602 	add.w	r6, r8, #2
 800fd54:	3e01      	subs	r6, #1
 800fd56:	4638      	mov	r0, r7
 800fd58:	612e      	str	r6, [r5, #16]
 800fd5a:	4621      	mov	r1, r4
 800fd5c:	f7ff fd88 	bl	800f870 <_Bfree>
 800fd60:	4628      	mov	r0, r5
 800fd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd66:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	e7c1      	b.n	800fcf2 <__lshift+0x4a>
 800fd6e:	3904      	subs	r1, #4
 800fd70:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd74:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd78:	4298      	cmp	r0, r3
 800fd7a:	d8f9      	bhi.n	800fd70 <__lshift+0xc8>
 800fd7c:	e7ea      	b.n	800fd54 <__lshift+0xac>
 800fd7e:	bf00      	nop
 800fd80:	080125df 	.word	0x080125df
 800fd84:	0801266c 	.word	0x0801266c

0800fd88 <__mcmp>:
 800fd88:	b530      	push	{r4, r5, lr}
 800fd8a:	6902      	ldr	r2, [r0, #16]
 800fd8c:	690c      	ldr	r4, [r1, #16]
 800fd8e:	1b12      	subs	r2, r2, r4
 800fd90:	d10e      	bne.n	800fdb0 <__mcmp+0x28>
 800fd92:	f100 0314 	add.w	r3, r0, #20
 800fd96:	3114      	adds	r1, #20
 800fd98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fda0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fda4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fda8:	42a5      	cmp	r5, r4
 800fdaa:	d003      	beq.n	800fdb4 <__mcmp+0x2c>
 800fdac:	d305      	bcc.n	800fdba <__mcmp+0x32>
 800fdae:	2201      	movs	r2, #1
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	bd30      	pop	{r4, r5, pc}
 800fdb4:	4283      	cmp	r3, r0
 800fdb6:	d3f3      	bcc.n	800fda0 <__mcmp+0x18>
 800fdb8:	e7fa      	b.n	800fdb0 <__mcmp+0x28>
 800fdba:	f04f 32ff 	mov.w	r2, #4294967295
 800fdbe:	e7f7      	b.n	800fdb0 <__mcmp+0x28>

0800fdc0 <__mdiff>:
 800fdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4620      	mov	r0, r4
 800fdcc:	4690      	mov	r8, r2
 800fdce:	f7ff ffdb 	bl	800fd88 <__mcmp>
 800fdd2:	1e05      	subs	r5, r0, #0
 800fdd4:	d110      	bne.n	800fdf8 <__mdiff+0x38>
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f7ff fd09 	bl	800f7f0 <_Balloc>
 800fdde:	b930      	cbnz	r0, 800fdee <__mdiff+0x2e>
 800fde0:	4b3a      	ldr	r3, [pc, #232]	; (800fecc <__mdiff+0x10c>)
 800fde2:	4602      	mov	r2, r0
 800fde4:	f240 2132 	movw	r1, #562	; 0x232
 800fde8:	4839      	ldr	r0, [pc, #228]	; (800fed0 <__mdiff+0x110>)
 800fdea:	f7fb fedf 	bl	800bbac <__assert_func>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fdf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf8:	bfa4      	itt	ge
 800fdfa:	4643      	movge	r3, r8
 800fdfc:	46a0      	movge	r8, r4
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe04:	bfa6      	itte	ge
 800fe06:	461c      	movge	r4, r3
 800fe08:	2500      	movge	r5, #0
 800fe0a:	2501      	movlt	r5, #1
 800fe0c:	f7ff fcf0 	bl	800f7f0 <_Balloc>
 800fe10:	b920      	cbnz	r0, 800fe1c <__mdiff+0x5c>
 800fe12:	4b2e      	ldr	r3, [pc, #184]	; (800fecc <__mdiff+0x10c>)
 800fe14:	4602      	mov	r2, r0
 800fe16:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe1a:	e7e5      	b.n	800fde8 <__mdiff+0x28>
 800fe1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe20:	6926      	ldr	r6, [r4, #16]
 800fe22:	60c5      	str	r5, [r0, #12]
 800fe24:	f104 0914 	add.w	r9, r4, #20
 800fe28:	f108 0514 	add.w	r5, r8, #20
 800fe2c:	f100 0e14 	add.w	lr, r0, #20
 800fe30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fe34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fe38:	f108 0210 	add.w	r2, r8, #16
 800fe3c:	46f2      	mov	sl, lr
 800fe3e:	2100      	movs	r1, #0
 800fe40:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe48:	fa1f f883 	uxth.w	r8, r3
 800fe4c:	fa11 f18b 	uxtah	r1, r1, fp
 800fe50:	0c1b      	lsrs	r3, r3, #16
 800fe52:	eba1 0808 	sub.w	r8, r1, r8
 800fe56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe5e:	fa1f f888 	uxth.w	r8, r8
 800fe62:	1419      	asrs	r1, r3, #16
 800fe64:	454e      	cmp	r6, r9
 800fe66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe6a:	f84a 3b04 	str.w	r3, [sl], #4
 800fe6e:	d8e7      	bhi.n	800fe40 <__mdiff+0x80>
 800fe70:	1b33      	subs	r3, r6, r4
 800fe72:	3b15      	subs	r3, #21
 800fe74:	f023 0303 	bic.w	r3, r3, #3
 800fe78:	3304      	adds	r3, #4
 800fe7a:	3415      	adds	r4, #21
 800fe7c:	42a6      	cmp	r6, r4
 800fe7e:	bf38      	it	cc
 800fe80:	2304      	movcc	r3, #4
 800fe82:	441d      	add	r5, r3
 800fe84:	4473      	add	r3, lr
 800fe86:	469e      	mov	lr, r3
 800fe88:	462e      	mov	r6, r5
 800fe8a:	4566      	cmp	r6, ip
 800fe8c:	d30e      	bcc.n	800feac <__mdiff+0xec>
 800fe8e:	f10c 0203 	add.w	r2, ip, #3
 800fe92:	1b52      	subs	r2, r2, r5
 800fe94:	f022 0203 	bic.w	r2, r2, #3
 800fe98:	3d03      	subs	r5, #3
 800fe9a:	45ac      	cmp	ip, r5
 800fe9c:	bf38      	it	cc
 800fe9e:	2200      	movcc	r2, #0
 800fea0:	441a      	add	r2, r3
 800fea2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fea6:	b17b      	cbz	r3, 800fec8 <__mdiff+0x108>
 800fea8:	6107      	str	r7, [r0, #16]
 800feaa:	e7a3      	b.n	800fdf4 <__mdiff+0x34>
 800feac:	f856 8b04 	ldr.w	r8, [r6], #4
 800feb0:	fa11 f288 	uxtah	r2, r1, r8
 800feb4:	1414      	asrs	r4, r2, #16
 800feb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800feba:	b292      	uxth	r2, r2
 800febc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fec0:	f84e 2b04 	str.w	r2, [lr], #4
 800fec4:	1421      	asrs	r1, r4, #16
 800fec6:	e7e0      	b.n	800fe8a <__mdiff+0xca>
 800fec8:	3f01      	subs	r7, #1
 800feca:	e7ea      	b.n	800fea2 <__mdiff+0xe2>
 800fecc:	080125df 	.word	0x080125df
 800fed0:	0801266c 	.word	0x0801266c

0800fed4 <__ulp>:
 800fed4:	b082      	sub	sp, #8
 800fed6:	ed8d 0b00 	vstr	d0, [sp]
 800feda:	9b01      	ldr	r3, [sp, #4]
 800fedc:	4912      	ldr	r1, [pc, #72]	; (800ff28 <__ulp+0x54>)
 800fede:	4019      	ands	r1, r3
 800fee0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fee4:	2900      	cmp	r1, #0
 800fee6:	dd05      	ble.n	800fef4 <__ulp+0x20>
 800fee8:	2200      	movs	r2, #0
 800feea:	460b      	mov	r3, r1
 800feec:	ec43 2b10 	vmov	d0, r2, r3
 800fef0:	b002      	add	sp, #8
 800fef2:	4770      	bx	lr
 800fef4:	4249      	negs	r1, r1
 800fef6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fefa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fefe:	f04f 0200 	mov.w	r2, #0
 800ff02:	f04f 0300 	mov.w	r3, #0
 800ff06:	da04      	bge.n	800ff12 <__ulp+0x3e>
 800ff08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ff0c:	fa41 f300 	asr.w	r3, r1, r0
 800ff10:	e7ec      	b.n	800feec <__ulp+0x18>
 800ff12:	f1a0 0114 	sub.w	r1, r0, #20
 800ff16:	291e      	cmp	r1, #30
 800ff18:	bfda      	itte	le
 800ff1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ff1e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ff22:	2101      	movgt	r1, #1
 800ff24:	460a      	mov	r2, r1
 800ff26:	e7e1      	b.n	800feec <__ulp+0x18>
 800ff28:	7ff00000 	.word	0x7ff00000

0800ff2c <__b2d>:
 800ff2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff2e:	6905      	ldr	r5, [r0, #16]
 800ff30:	f100 0714 	add.w	r7, r0, #20
 800ff34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ff38:	1f2e      	subs	r6, r5, #4
 800ff3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f7ff fd48 	bl	800f9d4 <__hi0bits>
 800ff44:	f1c0 0320 	rsb	r3, r0, #32
 800ff48:	280a      	cmp	r0, #10
 800ff4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ffc8 <__b2d+0x9c>
 800ff4e:	600b      	str	r3, [r1, #0]
 800ff50:	dc14      	bgt.n	800ff7c <__b2d+0x50>
 800ff52:	f1c0 0e0b 	rsb	lr, r0, #11
 800ff56:	fa24 f10e 	lsr.w	r1, r4, lr
 800ff5a:	42b7      	cmp	r7, r6
 800ff5c:	ea41 030c 	orr.w	r3, r1, ip
 800ff60:	bf34      	ite	cc
 800ff62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff66:	2100      	movcs	r1, #0
 800ff68:	3015      	adds	r0, #21
 800ff6a:	fa04 f000 	lsl.w	r0, r4, r0
 800ff6e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ff72:	ea40 0201 	orr.w	r2, r0, r1
 800ff76:	ec43 2b10 	vmov	d0, r2, r3
 800ff7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7c:	42b7      	cmp	r7, r6
 800ff7e:	bf3a      	itte	cc
 800ff80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ff84:	f1a5 0608 	subcc.w	r6, r5, #8
 800ff88:	2100      	movcs	r1, #0
 800ff8a:	380b      	subs	r0, #11
 800ff8c:	d017      	beq.n	800ffbe <__b2d+0x92>
 800ff8e:	f1c0 0c20 	rsb	ip, r0, #32
 800ff92:	fa04 f500 	lsl.w	r5, r4, r0
 800ff96:	42be      	cmp	r6, r7
 800ff98:	fa21 f40c 	lsr.w	r4, r1, ip
 800ff9c:	ea45 0504 	orr.w	r5, r5, r4
 800ffa0:	bf8c      	ite	hi
 800ffa2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ffa6:	2400      	movls	r4, #0
 800ffa8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ffac:	fa01 f000 	lsl.w	r0, r1, r0
 800ffb0:	fa24 f40c 	lsr.w	r4, r4, ip
 800ffb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ffb8:	ea40 0204 	orr.w	r2, r0, r4
 800ffbc:	e7db      	b.n	800ff76 <__b2d+0x4a>
 800ffbe:	ea44 030c 	orr.w	r3, r4, ip
 800ffc2:	460a      	mov	r2, r1
 800ffc4:	e7d7      	b.n	800ff76 <__b2d+0x4a>
 800ffc6:	bf00      	nop
 800ffc8:	3ff00000 	.word	0x3ff00000

0800ffcc <__d2b>:
 800ffcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffd0:	4689      	mov	r9, r1
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	ec57 6b10 	vmov	r6, r7, d0
 800ffd8:	4690      	mov	r8, r2
 800ffda:	f7ff fc09 	bl	800f7f0 <_Balloc>
 800ffde:	4604      	mov	r4, r0
 800ffe0:	b930      	cbnz	r0, 800fff0 <__d2b+0x24>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	4b25      	ldr	r3, [pc, #148]	; (801007c <__d2b+0xb0>)
 800ffe6:	4826      	ldr	r0, [pc, #152]	; (8010080 <__d2b+0xb4>)
 800ffe8:	f240 310a 	movw	r1, #778	; 0x30a
 800ffec:	f7fb fdde 	bl	800bbac <__assert_func>
 800fff0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fff4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fff8:	bb35      	cbnz	r5, 8010048 <__d2b+0x7c>
 800fffa:	2e00      	cmp	r6, #0
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	d028      	beq.n	8010052 <__d2b+0x86>
 8010000:	4668      	mov	r0, sp
 8010002:	9600      	str	r6, [sp, #0]
 8010004:	f7ff fd06 	bl	800fa14 <__lo0bits>
 8010008:	9900      	ldr	r1, [sp, #0]
 801000a:	b300      	cbz	r0, 801004e <__d2b+0x82>
 801000c:	9a01      	ldr	r2, [sp, #4]
 801000e:	f1c0 0320 	rsb	r3, r0, #32
 8010012:	fa02 f303 	lsl.w	r3, r2, r3
 8010016:	430b      	orrs	r3, r1
 8010018:	40c2      	lsrs	r2, r0
 801001a:	6163      	str	r3, [r4, #20]
 801001c:	9201      	str	r2, [sp, #4]
 801001e:	9b01      	ldr	r3, [sp, #4]
 8010020:	61a3      	str	r3, [r4, #24]
 8010022:	2b00      	cmp	r3, #0
 8010024:	bf14      	ite	ne
 8010026:	2202      	movne	r2, #2
 8010028:	2201      	moveq	r2, #1
 801002a:	6122      	str	r2, [r4, #16]
 801002c:	b1d5      	cbz	r5, 8010064 <__d2b+0x98>
 801002e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010032:	4405      	add	r5, r0
 8010034:	f8c9 5000 	str.w	r5, [r9]
 8010038:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801003c:	f8c8 0000 	str.w	r0, [r8]
 8010040:	4620      	mov	r0, r4
 8010042:	b003      	add	sp, #12
 8010044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801004c:	e7d5      	b.n	800fffa <__d2b+0x2e>
 801004e:	6161      	str	r1, [r4, #20]
 8010050:	e7e5      	b.n	801001e <__d2b+0x52>
 8010052:	a801      	add	r0, sp, #4
 8010054:	f7ff fcde 	bl	800fa14 <__lo0bits>
 8010058:	9b01      	ldr	r3, [sp, #4]
 801005a:	6163      	str	r3, [r4, #20]
 801005c:	2201      	movs	r2, #1
 801005e:	6122      	str	r2, [r4, #16]
 8010060:	3020      	adds	r0, #32
 8010062:	e7e3      	b.n	801002c <__d2b+0x60>
 8010064:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010068:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801006c:	f8c9 0000 	str.w	r0, [r9]
 8010070:	6918      	ldr	r0, [r3, #16]
 8010072:	f7ff fcaf 	bl	800f9d4 <__hi0bits>
 8010076:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801007a:	e7df      	b.n	801003c <__d2b+0x70>
 801007c:	080125df 	.word	0x080125df
 8010080:	0801266c 	.word	0x0801266c

08010084 <__ratio>:
 8010084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	4688      	mov	r8, r1
 801008a:	4669      	mov	r1, sp
 801008c:	4681      	mov	r9, r0
 801008e:	f7ff ff4d 	bl	800ff2c <__b2d>
 8010092:	a901      	add	r1, sp, #4
 8010094:	4640      	mov	r0, r8
 8010096:	ec55 4b10 	vmov	r4, r5, d0
 801009a:	f7ff ff47 	bl	800ff2c <__b2d>
 801009e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80100a6:	eba3 0c02 	sub.w	ip, r3, r2
 80100aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80100ae:	1a9b      	subs	r3, r3, r2
 80100b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80100b4:	ec51 0b10 	vmov	r0, r1, d0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	bfd6      	itet	le
 80100bc:	460a      	movle	r2, r1
 80100be:	462a      	movgt	r2, r5
 80100c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80100c4:	468b      	mov	fp, r1
 80100c6:	462f      	mov	r7, r5
 80100c8:	bfd4      	ite	le
 80100ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80100ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80100d2:	4620      	mov	r0, r4
 80100d4:	ee10 2a10 	vmov	r2, s0
 80100d8:	465b      	mov	r3, fp
 80100da:	4639      	mov	r1, r7
 80100dc:	f7f0 fbc6 	bl	800086c <__aeabi_ddiv>
 80100e0:	ec41 0b10 	vmov	d0, r0, r1
 80100e4:	b003      	add	sp, #12
 80100e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100ea <__copybits>:
 80100ea:	3901      	subs	r1, #1
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	1149      	asrs	r1, r1, #5
 80100f0:	6914      	ldr	r4, [r2, #16]
 80100f2:	3101      	adds	r1, #1
 80100f4:	f102 0314 	add.w	r3, r2, #20
 80100f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80100fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010100:	1f05      	subs	r5, r0, #4
 8010102:	42a3      	cmp	r3, r4
 8010104:	d30c      	bcc.n	8010120 <__copybits+0x36>
 8010106:	1aa3      	subs	r3, r4, r2
 8010108:	3b11      	subs	r3, #17
 801010a:	f023 0303 	bic.w	r3, r3, #3
 801010e:	3211      	adds	r2, #17
 8010110:	42a2      	cmp	r2, r4
 8010112:	bf88      	it	hi
 8010114:	2300      	movhi	r3, #0
 8010116:	4418      	add	r0, r3
 8010118:	2300      	movs	r3, #0
 801011a:	4288      	cmp	r0, r1
 801011c:	d305      	bcc.n	801012a <__copybits+0x40>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	f853 6b04 	ldr.w	r6, [r3], #4
 8010124:	f845 6f04 	str.w	r6, [r5, #4]!
 8010128:	e7eb      	b.n	8010102 <__copybits+0x18>
 801012a:	f840 3b04 	str.w	r3, [r0], #4
 801012e:	e7f4      	b.n	801011a <__copybits+0x30>

08010130 <__any_on>:
 8010130:	f100 0214 	add.w	r2, r0, #20
 8010134:	6900      	ldr	r0, [r0, #16]
 8010136:	114b      	asrs	r3, r1, #5
 8010138:	4298      	cmp	r0, r3
 801013a:	b510      	push	{r4, lr}
 801013c:	db11      	blt.n	8010162 <__any_on+0x32>
 801013e:	dd0a      	ble.n	8010156 <__any_on+0x26>
 8010140:	f011 011f 	ands.w	r1, r1, #31
 8010144:	d007      	beq.n	8010156 <__any_on+0x26>
 8010146:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801014a:	fa24 f001 	lsr.w	r0, r4, r1
 801014e:	fa00 f101 	lsl.w	r1, r0, r1
 8010152:	428c      	cmp	r4, r1
 8010154:	d10b      	bne.n	801016e <__any_on+0x3e>
 8010156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801015a:	4293      	cmp	r3, r2
 801015c:	d803      	bhi.n	8010166 <__any_on+0x36>
 801015e:	2000      	movs	r0, #0
 8010160:	bd10      	pop	{r4, pc}
 8010162:	4603      	mov	r3, r0
 8010164:	e7f7      	b.n	8010156 <__any_on+0x26>
 8010166:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801016a:	2900      	cmp	r1, #0
 801016c:	d0f5      	beq.n	801015a <__any_on+0x2a>
 801016e:	2001      	movs	r0, #1
 8010170:	e7f6      	b.n	8010160 <__any_on+0x30>

08010172 <_calloc_r>:
 8010172:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010174:	fba1 2402 	umull	r2, r4, r1, r2
 8010178:	b94c      	cbnz	r4, 801018e <_calloc_r+0x1c>
 801017a:	4611      	mov	r1, r2
 801017c:	9201      	str	r2, [sp, #4]
 801017e:	f7fb fea7 	bl	800bed0 <_malloc_r>
 8010182:	9a01      	ldr	r2, [sp, #4]
 8010184:	4605      	mov	r5, r0
 8010186:	b930      	cbnz	r0, 8010196 <_calloc_r+0x24>
 8010188:	4628      	mov	r0, r5
 801018a:	b003      	add	sp, #12
 801018c:	bd30      	pop	{r4, r5, pc}
 801018e:	220c      	movs	r2, #12
 8010190:	6002      	str	r2, [r0, #0]
 8010192:	2500      	movs	r5, #0
 8010194:	e7f8      	b.n	8010188 <_calloc_r+0x16>
 8010196:	4621      	mov	r1, r4
 8010198:	f7fb fe71 	bl	800be7e <memset>
 801019c:	e7f4      	b.n	8010188 <_calloc_r+0x16>
	...

080101a0 <_free_r>:
 80101a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101a2:	2900      	cmp	r1, #0
 80101a4:	d044      	beq.n	8010230 <_free_r+0x90>
 80101a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101aa:	9001      	str	r0, [sp, #4]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f1a1 0404 	sub.w	r4, r1, #4
 80101b2:	bfb8      	it	lt
 80101b4:	18e4      	addlt	r4, r4, r3
 80101b6:	f7ff fb0f 	bl	800f7d8 <__malloc_lock>
 80101ba:	4a1e      	ldr	r2, [pc, #120]	; (8010234 <_free_r+0x94>)
 80101bc:	9801      	ldr	r0, [sp, #4]
 80101be:	6813      	ldr	r3, [r2, #0]
 80101c0:	b933      	cbnz	r3, 80101d0 <_free_r+0x30>
 80101c2:	6063      	str	r3, [r4, #4]
 80101c4:	6014      	str	r4, [r2, #0]
 80101c6:	b003      	add	sp, #12
 80101c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101cc:	f7ff bb0a 	b.w	800f7e4 <__malloc_unlock>
 80101d0:	42a3      	cmp	r3, r4
 80101d2:	d908      	bls.n	80101e6 <_free_r+0x46>
 80101d4:	6825      	ldr	r5, [r4, #0]
 80101d6:	1961      	adds	r1, r4, r5
 80101d8:	428b      	cmp	r3, r1
 80101da:	bf01      	itttt	eq
 80101dc:	6819      	ldreq	r1, [r3, #0]
 80101de:	685b      	ldreq	r3, [r3, #4]
 80101e0:	1949      	addeq	r1, r1, r5
 80101e2:	6021      	streq	r1, [r4, #0]
 80101e4:	e7ed      	b.n	80101c2 <_free_r+0x22>
 80101e6:	461a      	mov	r2, r3
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	b10b      	cbz	r3, 80101f0 <_free_r+0x50>
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	d9fa      	bls.n	80101e6 <_free_r+0x46>
 80101f0:	6811      	ldr	r1, [r2, #0]
 80101f2:	1855      	adds	r5, r2, r1
 80101f4:	42a5      	cmp	r5, r4
 80101f6:	d10b      	bne.n	8010210 <_free_r+0x70>
 80101f8:	6824      	ldr	r4, [r4, #0]
 80101fa:	4421      	add	r1, r4
 80101fc:	1854      	adds	r4, r2, r1
 80101fe:	42a3      	cmp	r3, r4
 8010200:	6011      	str	r1, [r2, #0]
 8010202:	d1e0      	bne.n	80101c6 <_free_r+0x26>
 8010204:	681c      	ldr	r4, [r3, #0]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	6053      	str	r3, [r2, #4]
 801020a:	4421      	add	r1, r4
 801020c:	6011      	str	r1, [r2, #0]
 801020e:	e7da      	b.n	80101c6 <_free_r+0x26>
 8010210:	d902      	bls.n	8010218 <_free_r+0x78>
 8010212:	230c      	movs	r3, #12
 8010214:	6003      	str	r3, [r0, #0]
 8010216:	e7d6      	b.n	80101c6 <_free_r+0x26>
 8010218:	6825      	ldr	r5, [r4, #0]
 801021a:	1961      	adds	r1, r4, r5
 801021c:	428b      	cmp	r3, r1
 801021e:	bf04      	itt	eq
 8010220:	6819      	ldreq	r1, [r3, #0]
 8010222:	685b      	ldreq	r3, [r3, #4]
 8010224:	6063      	str	r3, [r4, #4]
 8010226:	bf04      	itt	eq
 8010228:	1949      	addeq	r1, r1, r5
 801022a:	6021      	streq	r1, [r4, #0]
 801022c:	6054      	str	r4, [r2, #4]
 801022e:	e7ca      	b.n	80101c6 <_free_r+0x26>
 8010230:	b003      	add	sp, #12
 8010232:	bd30      	pop	{r4, r5, pc}
 8010234:	200132f8 	.word	0x200132f8

08010238 <_realloc_r>:
 8010238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801023c:	4680      	mov	r8, r0
 801023e:	4614      	mov	r4, r2
 8010240:	460e      	mov	r6, r1
 8010242:	b921      	cbnz	r1, 801024e <_realloc_r+0x16>
 8010244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010248:	4611      	mov	r1, r2
 801024a:	f7fb be41 	b.w	800bed0 <_malloc_r>
 801024e:	b92a      	cbnz	r2, 801025c <_realloc_r+0x24>
 8010250:	f7ff ffa6 	bl	80101a0 <_free_r>
 8010254:	4625      	mov	r5, r4
 8010256:	4628      	mov	r0, r5
 8010258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025c:	f000 fe22 	bl	8010ea4 <_malloc_usable_size_r>
 8010260:	4284      	cmp	r4, r0
 8010262:	4607      	mov	r7, r0
 8010264:	d802      	bhi.n	801026c <_realloc_r+0x34>
 8010266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801026a:	d812      	bhi.n	8010292 <_realloc_r+0x5a>
 801026c:	4621      	mov	r1, r4
 801026e:	4640      	mov	r0, r8
 8010270:	f7fb fe2e 	bl	800bed0 <_malloc_r>
 8010274:	4605      	mov	r5, r0
 8010276:	2800      	cmp	r0, #0
 8010278:	d0ed      	beq.n	8010256 <_realloc_r+0x1e>
 801027a:	42bc      	cmp	r4, r7
 801027c:	4622      	mov	r2, r4
 801027e:	4631      	mov	r1, r6
 8010280:	bf28      	it	cs
 8010282:	463a      	movcs	r2, r7
 8010284:	f7fb fded 	bl	800be62 <memcpy>
 8010288:	4631      	mov	r1, r6
 801028a:	4640      	mov	r0, r8
 801028c:	f7ff ff88 	bl	80101a0 <_free_r>
 8010290:	e7e1      	b.n	8010256 <_realloc_r+0x1e>
 8010292:	4635      	mov	r5, r6
 8010294:	e7df      	b.n	8010256 <_realloc_r+0x1e>

08010296 <__ssputs_r>:
 8010296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801029a:	688e      	ldr	r6, [r1, #8]
 801029c:	429e      	cmp	r6, r3
 801029e:	4682      	mov	sl, r0
 80102a0:	460c      	mov	r4, r1
 80102a2:	4690      	mov	r8, r2
 80102a4:	461f      	mov	r7, r3
 80102a6:	d838      	bhi.n	801031a <__ssputs_r+0x84>
 80102a8:	898a      	ldrh	r2, [r1, #12]
 80102aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80102ae:	d032      	beq.n	8010316 <__ssputs_r+0x80>
 80102b0:	6825      	ldr	r5, [r4, #0]
 80102b2:	6909      	ldr	r1, [r1, #16]
 80102b4:	eba5 0901 	sub.w	r9, r5, r1
 80102b8:	6965      	ldr	r5, [r4, #20]
 80102ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102c2:	3301      	adds	r3, #1
 80102c4:	444b      	add	r3, r9
 80102c6:	106d      	asrs	r5, r5, #1
 80102c8:	429d      	cmp	r5, r3
 80102ca:	bf38      	it	cc
 80102cc:	461d      	movcc	r5, r3
 80102ce:	0553      	lsls	r3, r2, #21
 80102d0:	d531      	bpl.n	8010336 <__ssputs_r+0xa0>
 80102d2:	4629      	mov	r1, r5
 80102d4:	f7fb fdfc 	bl	800bed0 <_malloc_r>
 80102d8:	4606      	mov	r6, r0
 80102da:	b950      	cbnz	r0, 80102f2 <__ssputs_r+0x5c>
 80102dc:	230c      	movs	r3, #12
 80102de:	f8ca 3000 	str.w	r3, [sl]
 80102e2:	89a3      	ldrh	r3, [r4, #12]
 80102e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102e8:	81a3      	strh	r3, [r4, #12]
 80102ea:	f04f 30ff 	mov.w	r0, #4294967295
 80102ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f2:	6921      	ldr	r1, [r4, #16]
 80102f4:	464a      	mov	r2, r9
 80102f6:	f7fb fdb4 	bl	800be62 <memcpy>
 80102fa:	89a3      	ldrh	r3, [r4, #12]
 80102fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010304:	81a3      	strh	r3, [r4, #12]
 8010306:	6126      	str	r6, [r4, #16]
 8010308:	6165      	str	r5, [r4, #20]
 801030a:	444e      	add	r6, r9
 801030c:	eba5 0509 	sub.w	r5, r5, r9
 8010310:	6026      	str	r6, [r4, #0]
 8010312:	60a5      	str	r5, [r4, #8]
 8010314:	463e      	mov	r6, r7
 8010316:	42be      	cmp	r6, r7
 8010318:	d900      	bls.n	801031c <__ssputs_r+0x86>
 801031a:	463e      	mov	r6, r7
 801031c:	6820      	ldr	r0, [r4, #0]
 801031e:	4632      	mov	r2, r6
 8010320:	4641      	mov	r1, r8
 8010322:	f7ff fa3f 	bl	800f7a4 <memmove>
 8010326:	68a3      	ldr	r3, [r4, #8]
 8010328:	1b9b      	subs	r3, r3, r6
 801032a:	60a3      	str	r3, [r4, #8]
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	4433      	add	r3, r6
 8010330:	6023      	str	r3, [r4, #0]
 8010332:	2000      	movs	r0, #0
 8010334:	e7db      	b.n	80102ee <__ssputs_r+0x58>
 8010336:	462a      	mov	r2, r5
 8010338:	f7ff ff7e 	bl	8010238 <_realloc_r>
 801033c:	4606      	mov	r6, r0
 801033e:	2800      	cmp	r0, #0
 8010340:	d1e1      	bne.n	8010306 <__ssputs_r+0x70>
 8010342:	6921      	ldr	r1, [r4, #16]
 8010344:	4650      	mov	r0, sl
 8010346:	f7ff ff2b 	bl	80101a0 <_free_r>
 801034a:	e7c7      	b.n	80102dc <__ssputs_r+0x46>

0801034c <_svfiprintf_r>:
 801034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	4698      	mov	r8, r3
 8010352:	898b      	ldrh	r3, [r1, #12]
 8010354:	061b      	lsls	r3, r3, #24
 8010356:	b09d      	sub	sp, #116	; 0x74
 8010358:	4607      	mov	r7, r0
 801035a:	460d      	mov	r5, r1
 801035c:	4614      	mov	r4, r2
 801035e:	d50e      	bpl.n	801037e <_svfiprintf_r+0x32>
 8010360:	690b      	ldr	r3, [r1, #16]
 8010362:	b963      	cbnz	r3, 801037e <_svfiprintf_r+0x32>
 8010364:	2140      	movs	r1, #64	; 0x40
 8010366:	f7fb fdb3 	bl	800bed0 <_malloc_r>
 801036a:	6028      	str	r0, [r5, #0]
 801036c:	6128      	str	r0, [r5, #16]
 801036e:	b920      	cbnz	r0, 801037a <_svfiprintf_r+0x2e>
 8010370:	230c      	movs	r3, #12
 8010372:	603b      	str	r3, [r7, #0]
 8010374:	f04f 30ff 	mov.w	r0, #4294967295
 8010378:	e0d1      	b.n	801051e <_svfiprintf_r+0x1d2>
 801037a:	2340      	movs	r3, #64	; 0x40
 801037c:	616b      	str	r3, [r5, #20]
 801037e:	2300      	movs	r3, #0
 8010380:	9309      	str	r3, [sp, #36]	; 0x24
 8010382:	2320      	movs	r3, #32
 8010384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010388:	f8cd 800c 	str.w	r8, [sp, #12]
 801038c:	2330      	movs	r3, #48	; 0x30
 801038e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010538 <_svfiprintf_r+0x1ec>
 8010392:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010396:	f04f 0901 	mov.w	r9, #1
 801039a:	4623      	mov	r3, r4
 801039c:	469a      	mov	sl, r3
 801039e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103a2:	b10a      	cbz	r2, 80103a8 <_svfiprintf_r+0x5c>
 80103a4:	2a25      	cmp	r2, #37	; 0x25
 80103a6:	d1f9      	bne.n	801039c <_svfiprintf_r+0x50>
 80103a8:	ebba 0b04 	subs.w	fp, sl, r4
 80103ac:	d00b      	beq.n	80103c6 <_svfiprintf_r+0x7a>
 80103ae:	465b      	mov	r3, fp
 80103b0:	4622      	mov	r2, r4
 80103b2:	4629      	mov	r1, r5
 80103b4:	4638      	mov	r0, r7
 80103b6:	f7ff ff6e 	bl	8010296 <__ssputs_r>
 80103ba:	3001      	adds	r0, #1
 80103bc:	f000 80aa 	beq.w	8010514 <_svfiprintf_r+0x1c8>
 80103c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103c2:	445a      	add	r2, fp
 80103c4:	9209      	str	r2, [sp, #36]	; 0x24
 80103c6:	f89a 3000 	ldrb.w	r3, [sl]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f000 80a2 	beq.w	8010514 <_svfiprintf_r+0x1c8>
 80103d0:	2300      	movs	r3, #0
 80103d2:	f04f 32ff 	mov.w	r2, #4294967295
 80103d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103da:	f10a 0a01 	add.w	sl, sl, #1
 80103de:	9304      	str	r3, [sp, #16]
 80103e0:	9307      	str	r3, [sp, #28]
 80103e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103e6:	931a      	str	r3, [sp, #104]	; 0x68
 80103e8:	4654      	mov	r4, sl
 80103ea:	2205      	movs	r2, #5
 80103ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f0:	4851      	ldr	r0, [pc, #324]	; (8010538 <_svfiprintf_r+0x1ec>)
 80103f2:	f7ef ff05 	bl	8000200 <memchr>
 80103f6:	9a04      	ldr	r2, [sp, #16]
 80103f8:	b9d8      	cbnz	r0, 8010432 <_svfiprintf_r+0xe6>
 80103fa:	06d0      	lsls	r0, r2, #27
 80103fc:	bf44      	itt	mi
 80103fe:	2320      	movmi	r3, #32
 8010400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010404:	0711      	lsls	r1, r2, #28
 8010406:	bf44      	itt	mi
 8010408:	232b      	movmi	r3, #43	; 0x2b
 801040a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801040e:	f89a 3000 	ldrb.w	r3, [sl]
 8010412:	2b2a      	cmp	r3, #42	; 0x2a
 8010414:	d015      	beq.n	8010442 <_svfiprintf_r+0xf6>
 8010416:	9a07      	ldr	r2, [sp, #28]
 8010418:	4654      	mov	r4, sl
 801041a:	2000      	movs	r0, #0
 801041c:	f04f 0c0a 	mov.w	ip, #10
 8010420:	4621      	mov	r1, r4
 8010422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010426:	3b30      	subs	r3, #48	; 0x30
 8010428:	2b09      	cmp	r3, #9
 801042a:	d94e      	bls.n	80104ca <_svfiprintf_r+0x17e>
 801042c:	b1b0      	cbz	r0, 801045c <_svfiprintf_r+0x110>
 801042e:	9207      	str	r2, [sp, #28]
 8010430:	e014      	b.n	801045c <_svfiprintf_r+0x110>
 8010432:	eba0 0308 	sub.w	r3, r0, r8
 8010436:	fa09 f303 	lsl.w	r3, r9, r3
 801043a:	4313      	orrs	r3, r2
 801043c:	9304      	str	r3, [sp, #16]
 801043e:	46a2      	mov	sl, r4
 8010440:	e7d2      	b.n	80103e8 <_svfiprintf_r+0x9c>
 8010442:	9b03      	ldr	r3, [sp, #12]
 8010444:	1d19      	adds	r1, r3, #4
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	9103      	str	r1, [sp, #12]
 801044a:	2b00      	cmp	r3, #0
 801044c:	bfbb      	ittet	lt
 801044e:	425b      	neglt	r3, r3
 8010450:	f042 0202 	orrlt.w	r2, r2, #2
 8010454:	9307      	strge	r3, [sp, #28]
 8010456:	9307      	strlt	r3, [sp, #28]
 8010458:	bfb8      	it	lt
 801045a:	9204      	strlt	r2, [sp, #16]
 801045c:	7823      	ldrb	r3, [r4, #0]
 801045e:	2b2e      	cmp	r3, #46	; 0x2e
 8010460:	d10c      	bne.n	801047c <_svfiprintf_r+0x130>
 8010462:	7863      	ldrb	r3, [r4, #1]
 8010464:	2b2a      	cmp	r3, #42	; 0x2a
 8010466:	d135      	bne.n	80104d4 <_svfiprintf_r+0x188>
 8010468:	9b03      	ldr	r3, [sp, #12]
 801046a:	1d1a      	adds	r2, r3, #4
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	9203      	str	r2, [sp, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	bfb8      	it	lt
 8010474:	f04f 33ff 	movlt.w	r3, #4294967295
 8010478:	3402      	adds	r4, #2
 801047a:	9305      	str	r3, [sp, #20]
 801047c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010548 <_svfiprintf_r+0x1fc>
 8010480:	7821      	ldrb	r1, [r4, #0]
 8010482:	2203      	movs	r2, #3
 8010484:	4650      	mov	r0, sl
 8010486:	f7ef febb 	bl	8000200 <memchr>
 801048a:	b140      	cbz	r0, 801049e <_svfiprintf_r+0x152>
 801048c:	2340      	movs	r3, #64	; 0x40
 801048e:	eba0 000a 	sub.w	r0, r0, sl
 8010492:	fa03 f000 	lsl.w	r0, r3, r0
 8010496:	9b04      	ldr	r3, [sp, #16]
 8010498:	4303      	orrs	r3, r0
 801049a:	3401      	adds	r4, #1
 801049c:	9304      	str	r3, [sp, #16]
 801049e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104a2:	4826      	ldr	r0, [pc, #152]	; (801053c <_svfiprintf_r+0x1f0>)
 80104a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104a8:	2206      	movs	r2, #6
 80104aa:	f7ef fea9 	bl	8000200 <memchr>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d038      	beq.n	8010524 <_svfiprintf_r+0x1d8>
 80104b2:	4b23      	ldr	r3, [pc, #140]	; (8010540 <_svfiprintf_r+0x1f4>)
 80104b4:	bb1b      	cbnz	r3, 80104fe <_svfiprintf_r+0x1b2>
 80104b6:	9b03      	ldr	r3, [sp, #12]
 80104b8:	3307      	adds	r3, #7
 80104ba:	f023 0307 	bic.w	r3, r3, #7
 80104be:	3308      	adds	r3, #8
 80104c0:	9303      	str	r3, [sp, #12]
 80104c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c4:	4433      	add	r3, r6
 80104c6:	9309      	str	r3, [sp, #36]	; 0x24
 80104c8:	e767      	b.n	801039a <_svfiprintf_r+0x4e>
 80104ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ce:	460c      	mov	r4, r1
 80104d0:	2001      	movs	r0, #1
 80104d2:	e7a5      	b.n	8010420 <_svfiprintf_r+0xd4>
 80104d4:	2300      	movs	r3, #0
 80104d6:	3401      	adds	r4, #1
 80104d8:	9305      	str	r3, [sp, #20]
 80104da:	4619      	mov	r1, r3
 80104dc:	f04f 0c0a 	mov.w	ip, #10
 80104e0:	4620      	mov	r0, r4
 80104e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104e6:	3a30      	subs	r2, #48	; 0x30
 80104e8:	2a09      	cmp	r2, #9
 80104ea:	d903      	bls.n	80104f4 <_svfiprintf_r+0x1a8>
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d0c5      	beq.n	801047c <_svfiprintf_r+0x130>
 80104f0:	9105      	str	r1, [sp, #20]
 80104f2:	e7c3      	b.n	801047c <_svfiprintf_r+0x130>
 80104f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80104f8:	4604      	mov	r4, r0
 80104fa:	2301      	movs	r3, #1
 80104fc:	e7f0      	b.n	80104e0 <_svfiprintf_r+0x194>
 80104fe:	ab03      	add	r3, sp, #12
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	462a      	mov	r2, r5
 8010504:	4b0f      	ldr	r3, [pc, #60]	; (8010544 <_svfiprintf_r+0x1f8>)
 8010506:	a904      	add	r1, sp, #16
 8010508:	4638      	mov	r0, r7
 801050a:	f7fb ff4f 	bl	800c3ac <_printf_float>
 801050e:	1c42      	adds	r2, r0, #1
 8010510:	4606      	mov	r6, r0
 8010512:	d1d6      	bne.n	80104c2 <_svfiprintf_r+0x176>
 8010514:	89ab      	ldrh	r3, [r5, #12]
 8010516:	065b      	lsls	r3, r3, #25
 8010518:	f53f af2c 	bmi.w	8010374 <_svfiprintf_r+0x28>
 801051c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801051e:	b01d      	add	sp, #116	; 0x74
 8010520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010524:	ab03      	add	r3, sp, #12
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	462a      	mov	r2, r5
 801052a:	4b06      	ldr	r3, [pc, #24]	; (8010544 <_svfiprintf_r+0x1f8>)
 801052c:	a904      	add	r1, sp, #16
 801052e:	4638      	mov	r0, r7
 8010530:	f7fc f9e0 	bl	800c8f4 <_printf_i>
 8010534:	e7eb      	b.n	801050e <_svfiprintf_r+0x1c2>
 8010536:	bf00      	nop
 8010538:	080124c8 	.word	0x080124c8
 801053c:	080124d2 	.word	0x080124d2
 8010540:	0800c3ad 	.word	0x0800c3ad
 8010544:	08010297 	.word	0x08010297
 8010548:	080124ce 	.word	0x080124ce

0801054c <_sungetc_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	1c4b      	adds	r3, r1, #1
 8010550:	4614      	mov	r4, r2
 8010552:	d103      	bne.n	801055c <_sungetc_r+0x10>
 8010554:	f04f 35ff 	mov.w	r5, #4294967295
 8010558:	4628      	mov	r0, r5
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	8993      	ldrh	r3, [r2, #12]
 801055e:	f023 0320 	bic.w	r3, r3, #32
 8010562:	8193      	strh	r3, [r2, #12]
 8010564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010566:	6852      	ldr	r2, [r2, #4]
 8010568:	b2cd      	uxtb	r5, r1
 801056a:	b18b      	cbz	r3, 8010590 <_sungetc_r+0x44>
 801056c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801056e:	4293      	cmp	r3, r2
 8010570:	dd08      	ble.n	8010584 <_sungetc_r+0x38>
 8010572:	6823      	ldr	r3, [r4, #0]
 8010574:	1e5a      	subs	r2, r3, #1
 8010576:	6022      	str	r2, [r4, #0]
 8010578:	f803 5c01 	strb.w	r5, [r3, #-1]
 801057c:	6863      	ldr	r3, [r4, #4]
 801057e:	3301      	adds	r3, #1
 8010580:	6063      	str	r3, [r4, #4]
 8010582:	e7e9      	b.n	8010558 <_sungetc_r+0xc>
 8010584:	4621      	mov	r1, r4
 8010586:	f000 fc23 	bl	8010dd0 <__submore>
 801058a:	2800      	cmp	r0, #0
 801058c:	d0f1      	beq.n	8010572 <_sungetc_r+0x26>
 801058e:	e7e1      	b.n	8010554 <_sungetc_r+0x8>
 8010590:	6921      	ldr	r1, [r4, #16]
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	b151      	cbz	r1, 80105ac <_sungetc_r+0x60>
 8010596:	4299      	cmp	r1, r3
 8010598:	d208      	bcs.n	80105ac <_sungetc_r+0x60>
 801059a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801059e:	42a9      	cmp	r1, r5
 80105a0:	d104      	bne.n	80105ac <_sungetc_r+0x60>
 80105a2:	3b01      	subs	r3, #1
 80105a4:	3201      	adds	r2, #1
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	6062      	str	r2, [r4, #4]
 80105aa:	e7d5      	b.n	8010558 <_sungetc_r+0xc>
 80105ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80105b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105b4:	6363      	str	r3, [r4, #52]	; 0x34
 80105b6:	2303      	movs	r3, #3
 80105b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80105ba:	4623      	mov	r3, r4
 80105bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	2301      	movs	r3, #1
 80105c4:	e7dc      	b.n	8010580 <_sungetc_r+0x34>

080105c6 <__ssrefill_r>:
 80105c6:	b510      	push	{r4, lr}
 80105c8:	460c      	mov	r4, r1
 80105ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80105cc:	b169      	cbz	r1, 80105ea <__ssrefill_r+0x24>
 80105ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105d2:	4299      	cmp	r1, r3
 80105d4:	d001      	beq.n	80105da <__ssrefill_r+0x14>
 80105d6:	f7ff fde3 	bl	80101a0 <_free_r>
 80105da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105dc:	6063      	str	r3, [r4, #4]
 80105de:	2000      	movs	r0, #0
 80105e0:	6360      	str	r0, [r4, #52]	; 0x34
 80105e2:	b113      	cbz	r3, 80105ea <__ssrefill_r+0x24>
 80105e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	bd10      	pop	{r4, pc}
 80105ea:	6923      	ldr	r3, [r4, #16]
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	2300      	movs	r3, #0
 80105f0:	6063      	str	r3, [r4, #4]
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	f043 0320 	orr.w	r3, r3, #32
 80105f8:	81a3      	strh	r3, [r4, #12]
 80105fa:	f04f 30ff 	mov.w	r0, #4294967295
 80105fe:	e7f3      	b.n	80105e8 <__ssrefill_r+0x22>

08010600 <__ssvfiscanf_r>:
 8010600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010604:	460c      	mov	r4, r1
 8010606:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801060a:	2100      	movs	r1, #0
 801060c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010610:	49a6      	ldr	r1, [pc, #664]	; (80108ac <__ssvfiscanf_r+0x2ac>)
 8010612:	91a0      	str	r1, [sp, #640]	; 0x280
 8010614:	f10d 0804 	add.w	r8, sp, #4
 8010618:	49a5      	ldr	r1, [pc, #660]	; (80108b0 <__ssvfiscanf_r+0x2b0>)
 801061a:	4fa6      	ldr	r7, [pc, #664]	; (80108b4 <__ssvfiscanf_r+0x2b4>)
 801061c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80108b8 <__ssvfiscanf_r+0x2b8>
 8010620:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010624:	4606      	mov	r6, r0
 8010626:	91a1      	str	r1, [sp, #644]	; 0x284
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	7813      	ldrb	r3, [r2, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 815a 	beq.w	80108e6 <__ssvfiscanf_r+0x2e6>
 8010632:	5dd9      	ldrb	r1, [r3, r7]
 8010634:	f011 0108 	ands.w	r1, r1, #8
 8010638:	f102 0501 	add.w	r5, r2, #1
 801063c:	d019      	beq.n	8010672 <__ssvfiscanf_r+0x72>
 801063e:	6863      	ldr	r3, [r4, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	dd0f      	ble.n	8010664 <__ssvfiscanf_r+0x64>
 8010644:	6823      	ldr	r3, [r4, #0]
 8010646:	781a      	ldrb	r2, [r3, #0]
 8010648:	5cba      	ldrb	r2, [r7, r2]
 801064a:	0712      	lsls	r2, r2, #28
 801064c:	d401      	bmi.n	8010652 <__ssvfiscanf_r+0x52>
 801064e:	462a      	mov	r2, r5
 8010650:	e7eb      	b.n	801062a <__ssvfiscanf_r+0x2a>
 8010652:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010654:	3201      	adds	r2, #1
 8010656:	9245      	str	r2, [sp, #276]	; 0x114
 8010658:	6862      	ldr	r2, [r4, #4]
 801065a:	3301      	adds	r3, #1
 801065c:	3a01      	subs	r2, #1
 801065e:	6062      	str	r2, [r4, #4]
 8010660:	6023      	str	r3, [r4, #0]
 8010662:	e7ec      	b.n	801063e <__ssvfiscanf_r+0x3e>
 8010664:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010666:	4621      	mov	r1, r4
 8010668:	4630      	mov	r0, r6
 801066a:	4798      	blx	r3
 801066c:	2800      	cmp	r0, #0
 801066e:	d0e9      	beq.n	8010644 <__ssvfiscanf_r+0x44>
 8010670:	e7ed      	b.n	801064e <__ssvfiscanf_r+0x4e>
 8010672:	2b25      	cmp	r3, #37	; 0x25
 8010674:	d012      	beq.n	801069c <__ssvfiscanf_r+0x9c>
 8010676:	469a      	mov	sl, r3
 8010678:	6863      	ldr	r3, [r4, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	f340 8091 	ble.w	80107a2 <__ssvfiscanf_r+0x1a2>
 8010680:	6822      	ldr	r2, [r4, #0]
 8010682:	7813      	ldrb	r3, [r2, #0]
 8010684:	4553      	cmp	r3, sl
 8010686:	f040 812e 	bne.w	80108e6 <__ssvfiscanf_r+0x2e6>
 801068a:	6863      	ldr	r3, [r4, #4]
 801068c:	3b01      	subs	r3, #1
 801068e:	6063      	str	r3, [r4, #4]
 8010690:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010692:	3201      	adds	r2, #1
 8010694:	3301      	adds	r3, #1
 8010696:	6022      	str	r2, [r4, #0]
 8010698:	9345      	str	r3, [sp, #276]	; 0x114
 801069a:	e7d8      	b.n	801064e <__ssvfiscanf_r+0x4e>
 801069c:	9141      	str	r1, [sp, #260]	; 0x104
 801069e:	9143      	str	r1, [sp, #268]	; 0x10c
 80106a0:	7853      	ldrb	r3, [r2, #1]
 80106a2:	2b2a      	cmp	r3, #42	; 0x2a
 80106a4:	bf02      	ittt	eq
 80106a6:	2310      	moveq	r3, #16
 80106a8:	1c95      	addeq	r5, r2, #2
 80106aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80106ac:	220a      	movs	r2, #10
 80106ae:	46aa      	mov	sl, r5
 80106b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80106b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80106b8:	2b09      	cmp	r3, #9
 80106ba:	d91d      	bls.n	80106f8 <__ssvfiscanf_r+0xf8>
 80106bc:	487e      	ldr	r0, [pc, #504]	; (80108b8 <__ssvfiscanf_r+0x2b8>)
 80106be:	2203      	movs	r2, #3
 80106c0:	f7ef fd9e 	bl	8000200 <memchr>
 80106c4:	b140      	cbz	r0, 80106d8 <__ssvfiscanf_r+0xd8>
 80106c6:	2301      	movs	r3, #1
 80106c8:	eba0 0009 	sub.w	r0, r0, r9
 80106cc:	fa03 f000 	lsl.w	r0, r3, r0
 80106d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80106d2:	4318      	orrs	r0, r3
 80106d4:	9041      	str	r0, [sp, #260]	; 0x104
 80106d6:	4655      	mov	r5, sl
 80106d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80106dc:	2b78      	cmp	r3, #120	; 0x78
 80106de:	d806      	bhi.n	80106ee <__ssvfiscanf_r+0xee>
 80106e0:	2b57      	cmp	r3, #87	; 0x57
 80106e2:	d810      	bhi.n	8010706 <__ssvfiscanf_r+0x106>
 80106e4:	2b25      	cmp	r3, #37	; 0x25
 80106e6:	d0c6      	beq.n	8010676 <__ssvfiscanf_r+0x76>
 80106e8:	d856      	bhi.n	8010798 <__ssvfiscanf_r+0x198>
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d064      	beq.n	80107b8 <__ssvfiscanf_r+0x1b8>
 80106ee:	2303      	movs	r3, #3
 80106f0:	9347      	str	r3, [sp, #284]	; 0x11c
 80106f2:	230a      	movs	r3, #10
 80106f4:	9342      	str	r3, [sp, #264]	; 0x108
 80106f6:	e071      	b.n	80107dc <__ssvfiscanf_r+0x1dc>
 80106f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80106fa:	fb02 1103 	mla	r1, r2, r3, r1
 80106fe:	3930      	subs	r1, #48	; 0x30
 8010700:	9143      	str	r1, [sp, #268]	; 0x10c
 8010702:	4655      	mov	r5, sl
 8010704:	e7d3      	b.n	80106ae <__ssvfiscanf_r+0xae>
 8010706:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801070a:	2a20      	cmp	r2, #32
 801070c:	d8ef      	bhi.n	80106ee <__ssvfiscanf_r+0xee>
 801070e:	a101      	add	r1, pc, #4	; (adr r1, 8010714 <__ssvfiscanf_r+0x114>)
 8010710:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010714:	080107c7 	.word	0x080107c7
 8010718:	080106ef 	.word	0x080106ef
 801071c:	080106ef 	.word	0x080106ef
 8010720:	08010825 	.word	0x08010825
 8010724:	080106ef 	.word	0x080106ef
 8010728:	080106ef 	.word	0x080106ef
 801072c:	080106ef 	.word	0x080106ef
 8010730:	080106ef 	.word	0x080106ef
 8010734:	080106ef 	.word	0x080106ef
 8010738:	080106ef 	.word	0x080106ef
 801073c:	080106ef 	.word	0x080106ef
 8010740:	0801083b 	.word	0x0801083b
 8010744:	08010811 	.word	0x08010811
 8010748:	0801079f 	.word	0x0801079f
 801074c:	0801079f 	.word	0x0801079f
 8010750:	0801079f 	.word	0x0801079f
 8010754:	080106ef 	.word	0x080106ef
 8010758:	08010815 	.word	0x08010815
 801075c:	080106ef 	.word	0x080106ef
 8010760:	080106ef 	.word	0x080106ef
 8010764:	080106ef 	.word	0x080106ef
 8010768:	080106ef 	.word	0x080106ef
 801076c:	0801084b 	.word	0x0801084b
 8010770:	0801081d 	.word	0x0801081d
 8010774:	080107bf 	.word	0x080107bf
 8010778:	080106ef 	.word	0x080106ef
 801077c:	080106ef 	.word	0x080106ef
 8010780:	08010847 	.word	0x08010847
 8010784:	080106ef 	.word	0x080106ef
 8010788:	08010811 	.word	0x08010811
 801078c:	080106ef 	.word	0x080106ef
 8010790:	080106ef 	.word	0x080106ef
 8010794:	080107c7 	.word	0x080107c7
 8010798:	3b45      	subs	r3, #69	; 0x45
 801079a:	2b02      	cmp	r3, #2
 801079c:	d8a7      	bhi.n	80106ee <__ssvfiscanf_r+0xee>
 801079e:	2305      	movs	r3, #5
 80107a0:	e01b      	b.n	80107da <__ssvfiscanf_r+0x1da>
 80107a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107a4:	4621      	mov	r1, r4
 80107a6:	4630      	mov	r0, r6
 80107a8:	4798      	blx	r3
 80107aa:	2800      	cmp	r0, #0
 80107ac:	f43f af68 	beq.w	8010680 <__ssvfiscanf_r+0x80>
 80107b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80107b2:	2800      	cmp	r0, #0
 80107b4:	f040 808d 	bne.w	80108d2 <__ssvfiscanf_r+0x2d2>
 80107b8:	f04f 30ff 	mov.w	r0, #4294967295
 80107bc:	e08f      	b.n	80108de <__ssvfiscanf_r+0x2de>
 80107be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80107c0:	f042 0220 	orr.w	r2, r2, #32
 80107c4:	9241      	str	r2, [sp, #260]	; 0x104
 80107c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80107c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107cc:	9241      	str	r2, [sp, #260]	; 0x104
 80107ce:	2210      	movs	r2, #16
 80107d0:	2b6f      	cmp	r3, #111	; 0x6f
 80107d2:	9242      	str	r2, [sp, #264]	; 0x108
 80107d4:	bf34      	ite	cc
 80107d6:	2303      	movcc	r3, #3
 80107d8:	2304      	movcs	r3, #4
 80107da:	9347      	str	r3, [sp, #284]	; 0x11c
 80107dc:	6863      	ldr	r3, [r4, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	dd42      	ble.n	8010868 <__ssvfiscanf_r+0x268>
 80107e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80107e4:	0659      	lsls	r1, r3, #25
 80107e6:	d404      	bmi.n	80107f2 <__ssvfiscanf_r+0x1f2>
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	781a      	ldrb	r2, [r3, #0]
 80107ec:	5cba      	ldrb	r2, [r7, r2]
 80107ee:	0712      	lsls	r2, r2, #28
 80107f0:	d441      	bmi.n	8010876 <__ssvfiscanf_r+0x276>
 80107f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	dc50      	bgt.n	801089a <__ssvfiscanf_r+0x29a>
 80107f8:	466b      	mov	r3, sp
 80107fa:	4622      	mov	r2, r4
 80107fc:	a941      	add	r1, sp, #260	; 0x104
 80107fe:	4630      	mov	r0, r6
 8010800:	f000 f876 	bl	80108f0 <_scanf_chars>
 8010804:	2801      	cmp	r0, #1
 8010806:	d06e      	beq.n	80108e6 <__ssvfiscanf_r+0x2e6>
 8010808:	2802      	cmp	r0, #2
 801080a:	f47f af20 	bne.w	801064e <__ssvfiscanf_r+0x4e>
 801080e:	e7cf      	b.n	80107b0 <__ssvfiscanf_r+0x1b0>
 8010810:	220a      	movs	r2, #10
 8010812:	e7dd      	b.n	80107d0 <__ssvfiscanf_r+0x1d0>
 8010814:	2300      	movs	r3, #0
 8010816:	9342      	str	r3, [sp, #264]	; 0x108
 8010818:	2303      	movs	r3, #3
 801081a:	e7de      	b.n	80107da <__ssvfiscanf_r+0x1da>
 801081c:	2308      	movs	r3, #8
 801081e:	9342      	str	r3, [sp, #264]	; 0x108
 8010820:	2304      	movs	r3, #4
 8010822:	e7da      	b.n	80107da <__ssvfiscanf_r+0x1da>
 8010824:	4629      	mov	r1, r5
 8010826:	4640      	mov	r0, r8
 8010828:	f000 f9ce 	bl	8010bc8 <__sccl>
 801082c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801082e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010832:	9341      	str	r3, [sp, #260]	; 0x104
 8010834:	4605      	mov	r5, r0
 8010836:	2301      	movs	r3, #1
 8010838:	e7cf      	b.n	80107da <__ssvfiscanf_r+0x1da>
 801083a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010840:	9341      	str	r3, [sp, #260]	; 0x104
 8010842:	2300      	movs	r3, #0
 8010844:	e7c9      	b.n	80107da <__ssvfiscanf_r+0x1da>
 8010846:	2302      	movs	r3, #2
 8010848:	e7c7      	b.n	80107da <__ssvfiscanf_r+0x1da>
 801084a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801084c:	06c3      	lsls	r3, r0, #27
 801084e:	f53f aefe 	bmi.w	801064e <__ssvfiscanf_r+0x4e>
 8010852:	9b00      	ldr	r3, [sp, #0]
 8010854:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010856:	1d19      	adds	r1, r3, #4
 8010858:	9100      	str	r1, [sp, #0]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f010 0f01 	tst.w	r0, #1
 8010860:	bf14      	ite	ne
 8010862:	801a      	strhne	r2, [r3, #0]
 8010864:	601a      	streq	r2, [r3, #0]
 8010866:	e6f2      	b.n	801064e <__ssvfiscanf_r+0x4e>
 8010868:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801086a:	4621      	mov	r1, r4
 801086c:	4630      	mov	r0, r6
 801086e:	4798      	blx	r3
 8010870:	2800      	cmp	r0, #0
 8010872:	d0b6      	beq.n	80107e2 <__ssvfiscanf_r+0x1e2>
 8010874:	e79c      	b.n	80107b0 <__ssvfiscanf_r+0x1b0>
 8010876:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010878:	3201      	adds	r2, #1
 801087a:	9245      	str	r2, [sp, #276]	; 0x114
 801087c:	6862      	ldr	r2, [r4, #4]
 801087e:	3a01      	subs	r2, #1
 8010880:	2a00      	cmp	r2, #0
 8010882:	6062      	str	r2, [r4, #4]
 8010884:	dd02      	ble.n	801088c <__ssvfiscanf_r+0x28c>
 8010886:	3301      	adds	r3, #1
 8010888:	6023      	str	r3, [r4, #0]
 801088a:	e7ad      	b.n	80107e8 <__ssvfiscanf_r+0x1e8>
 801088c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801088e:	4621      	mov	r1, r4
 8010890:	4630      	mov	r0, r6
 8010892:	4798      	blx	r3
 8010894:	2800      	cmp	r0, #0
 8010896:	d0a7      	beq.n	80107e8 <__ssvfiscanf_r+0x1e8>
 8010898:	e78a      	b.n	80107b0 <__ssvfiscanf_r+0x1b0>
 801089a:	2b04      	cmp	r3, #4
 801089c:	dc0e      	bgt.n	80108bc <__ssvfiscanf_r+0x2bc>
 801089e:	466b      	mov	r3, sp
 80108a0:	4622      	mov	r2, r4
 80108a2:	a941      	add	r1, sp, #260	; 0x104
 80108a4:	4630      	mov	r0, r6
 80108a6:	f000 f87d 	bl	80109a4 <_scanf_i>
 80108aa:	e7ab      	b.n	8010804 <__ssvfiscanf_r+0x204>
 80108ac:	0801054d 	.word	0x0801054d
 80108b0:	080105c7 	.word	0x080105c7
 80108b4:	08012361 	.word	0x08012361
 80108b8:	080124ce 	.word	0x080124ce
 80108bc:	4b0b      	ldr	r3, [pc, #44]	; (80108ec <__ssvfiscanf_r+0x2ec>)
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f43f aec5 	beq.w	801064e <__ssvfiscanf_r+0x4e>
 80108c4:	466b      	mov	r3, sp
 80108c6:	4622      	mov	r2, r4
 80108c8:	a941      	add	r1, sp, #260	; 0x104
 80108ca:	4630      	mov	r0, r6
 80108cc:	f7fc f938 	bl	800cb40 <_scanf_float>
 80108d0:	e798      	b.n	8010804 <__ssvfiscanf_r+0x204>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80108d8:	bf18      	it	ne
 80108da:	f04f 30ff 	movne.w	r0, #4294967295
 80108de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80108e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80108e8:	e7f9      	b.n	80108de <__ssvfiscanf_r+0x2de>
 80108ea:	bf00      	nop
 80108ec:	0800cb41 	.word	0x0800cb41

080108f0 <_scanf_chars>:
 80108f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f4:	4615      	mov	r5, r2
 80108f6:	688a      	ldr	r2, [r1, #8]
 80108f8:	4680      	mov	r8, r0
 80108fa:	460c      	mov	r4, r1
 80108fc:	b932      	cbnz	r2, 801090c <_scanf_chars+0x1c>
 80108fe:	698a      	ldr	r2, [r1, #24]
 8010900:	2a00      	cmp	r2, #0
 8010902:	bf0c      	ite	eq
 8010904:	2201      	moveq	r2, #1
 8010906:	f04f 32ff 	movne.w	r2, #4294967295
 801090a:	608a      	str	r2, [r1, #8]
 801090c:	6822      	ldr	r2, [r4, #0]
 801090e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80109a0 <_scanf_chars+0xb0>
 8010912:	06d1      	lsls	r1, r2, #27
 8010914:	bf5f      	itttt	pl
 8010916:	681a      	ldrpl	r2, [r3, #0]
 8010918:	1d11      	addpl	r1, r2, #4
 801091a:	6019      	strpl	r1, [r3, #0]
 801091c:	6816      	ldrpl	r6, [r2, #0]
 801091e:	2700      	movs	r7, #0
 8010920:	69a0      	ldr	r0, [r4, #24]
 8010922:	b188      	cbz	r0, 8010948 <_scanf_chars+0x58>
 8010924:	2801      	cmp	r0, #1
 8010926:	d107      	bne.n	8010938 <_scanf_chars+0x48>
 8010928:	682a      	ldr	r2, [r5, #0]
 801092a:	7811      	ldrb	r1, [r2, #0]
 801092c:	6962      	ldr	r2, [r4, #20]
 801092e:	5c52      	ldrb	r2, [r2, r1]
 8010930:	b952      	cbnz	r2, 8010948 <_scanf_chars+0x58>
 8010932:	2f00      	cmp	r7, #0
 8010934:	d031      	beq.n	801099a <_scanf_chars+0xaa>
 8010936:	e022      	b.n	801097e <_scanf_chars+0x8e>
 8010938:	2802      	cmp	r0, #2
 801093a:	d120      	bne.n	801097e <_scanf_chars+0x8e>
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010944:	071b      	lsls	r3, r3, #28
 8010946:	d41a      	bmi.n	801097e <_scanf_chars+0x8e>
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	06da      	lsls	r2, r3, #27
 801094c:	bf5e      	ittt	pl
 801094e:	682b      	ldrpl	r3, [r5, #0]
 8010950:	781b      	ldrbpl	r3, [r3, #0]
 8010952:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010956:	682a      	ldr	r2, [r5, #0]
 8010958:	686b      	ldr	r3, [r5, #4]
 801095a:	3201      	adds	r2, #1
 801095c:	602a      	str	r2, [r5, #0]
 801095e:	68a2      	ldr	r2, [r4, #8]
 8010960:	3b01      	subs	r3, #1
 8010962:	3a01      	subs	r2, #1
 8010964:	606b      	str	r3, [r5, #4]
 8010966:	3701      	adds	r7, #1
 8010968:	60a2      	str	r2, [r4, #8]
 801096a:	b142      	cbz	r2, 801097e <_scanf_chars+0x8e>
 801096c:	2b00      	cmp	r3, #0
 801096e:	dcd7      	bgt.n	8010920 <_scanf_chars+0x30>
 8010970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010974:	4629      	mov	r1, r5
 8010976:	4640      	mov	r0, r8
 8010978:	4798      	blx	r3
 801097a:	2800      	cmp	r0, #0
 801097c:	d0d0      	beq.n	8010920 <_scanf_chars+0x30>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	f013 0310 	ands.w	r3, r3, #16
 8010984:	d105      	bne.n	8010992 <_scanf_chars+0xa2>
 8010986:	68e2      	ldr	r2, [r4, #12]
 8010988:	3201      	adds	r2, #1
 801098a:	60e2      	str	r2, [r4, #12]
 801098c:	69a2      	ldr	r2, [r4, #24]
 801098e:	b102      	cbz	r2, 8010992 <_scanf_chars+0xa2>
 8010990:	7033      	strb	r3, [r6, #0]
 8010992:	6923      	ldr	r3, [r4, #16]
 8010994:	443b      	add	r3, r7
 8010996:	6123      	str	r3, [r4, #16]
 8010998:	2000      	movs	r0, #0
 801099a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801099e:	bf00      	nop
 80109a0:	08012361 	.word	0x08012361

080109a4 <_scanf_i>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	4698      	mov	r8, r3
 80109aa:	4b76      	ldr	r3, [pc, #472]	; (8010b84 <_scanf_i+0x1e0>)
 80109ac:	460c      	mov	r4, r1
 80109ae:	4682      	mov	sl, r0
 80109b0:	4616      	mov	r6, r2
 80109b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80109b6:	b087      	sub	sp, #28
 80109b8:	ab03      	add	r3, sp, #12
 80109ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80109be:	4b72      	ldr	r3, [pc, #456]	; (8010b88 <_scanf_i+0x1e4>)
 80109c0:	69a1      	ldr	r1, [r4, #24]
 80109c2:	4a72      	ldr	r2, [pc, #456]	; (8010b8c <_scanf_i+0x1e8>)
 80109c4:	2903      	cmp	r1, #3
 80109c6:	bf18      	it	ne
 80109c8:	461a      	movne	r2, r3
 80109ca:	68a3      	ldr	r3, [r4, #8]
 80109cc:	9201      	str	r2, [sp, #4]
 80109ce:	1e5a      	subs	r2, r3, #1
 80109d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80109d4:	bf88      	it	hi
 80109d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80109da:	4627      	mov	r7, r4
 80109dc:	bf82      	ittt	hi
 80109de:	eb03 0905 	addhi.w	r9, r3, r5
 80109e2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80109e6:	60a3      	strhi	r3, [r4, #8]
 80109e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80109ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80109f0:	bf98      	it	ls
 80109f2:	f04f 0900 	movls.w	r9, #0
 80109f6:	6023      	str	r3, [r4, #0]
 80109f8:	463d      	mov	r5, r7
 80109fa:	f04f 0b00 	mov.w	fp, #0
 80109fe:	6831      	ldr	r1, [r6, #0]
 8010a00:	ab03      	add	r3, sp, #12
 8010a02:	7809      	ldrb	r1, [r1, #0]
 8010a04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010a08:	2202      	movs	r2, #2
 8010a0a:	f7ef fbf9 	bl	8000200 <memchr>
 8010a0e:	b328      	cbz	r0, 8010a5c <_scanf_i+0xb8>
 8010a10:	f1bb 0f01 	cmp.w	fp, #1
 8010a14:	d159      	bne.n	8010aca <_scanf_i+0x126>
 8010a16:	6862      	ldr	r2, [r4, #4]
 8010a18:	b92a      	cbnz	r2, 8010a26 <_scanf_i+0x82>
 8010a1a:	6822      	ldr	r2, [r4, #0]
 8010a1c:	2308      	movs	r3, #8
 8010a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a22:	6063      	str	r3, [r4, #4]
 8010a24:	6022      	str	r2, [r4, #0]
 8010a26:	6822      	ldr	r2, [r4, #0]
 8010a28:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010a2c:	6022      	str	r2, [r4, #0]
 8010a2e:	68a2      	ldr	r2, [r4, #8]
 8010a30:	1e51      	subs	r1, r2, #1
 8010a32:	60a1      	str	r1, [r4, #8]
 8010a34:	b192      	cbz	r2, 8010a5c <_scanf_i+0xb8>
 8010a36:	6832      	ldr	r2, [r6, #0]
 8010a38:	1c51      	adds	r1, r2, #1
 8010a3a:	6031      	str	r1, [r6, #0]
 8010a3c:	7812      	ldrb	r2, [r2, #0]
 8010a3e:	f805 2b01 	strb.w	r2, [r5], #1
 8010a42:	6872      	ldr	r2, [r6, #4]
 8010a44:	3a01      	subs	r2, #1
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	6072      	str	r2, [r6, #4]
 8010a4a:	dc07      	bgt.n	8010a5c <_scanf_i+0xb8>
 8010a4c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010a50:	4631      	mov	r1, r6
 8010a52:	4650      	mov	r0, sl
 8010a54:	4790      	blx	r2
 8010a56:	2800      	cmp	r0, #0
 8010a58:	f040 8085 	bne.w	8010b66 <_scanf_i+0x1c2>
 8010a5c:	f10b 0b01 	add.w	fp, fp, #1
 8010a60:	f1bb 0f03 	cmp.w	fp, #3
 8010a64:	d1cb      	bne.n	80109fe <_scanf_i+0x5a>
 8010a66:	6863      	ldr	r3, [r4, #4]
 8010a68:	b90b      	cbnz	r3, 8010a6e <_scanf_i+0xca>
 8010a6a:	230a      	movs	r3, #10
 8010a6c:	6063      	str	r3, [r4, #4]
 8010a6e:	6863      	ldr	r3, [r4, #4]
 8010a70:	4947      	ldr	r1, [pc, #284]	; (8010b90 <_scanf_i+0x1ec>)
 8010a72:	6960      	ldr	r0, [r4, #20]
 8010a74:	1ac9      	subs	r1, r1, r3
 8010a76:	f000 f8a7 	bl	8010bc8 <__sccl>
 8010a7a:	f04f 0b00 	mov.w	fp, #0
 8010a7e:	68a3      	ldr	r3, [r4, #8]
 8010a80:	6822      	ldr	r2, [r4, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d03d      	beq.n	8010b02 <_scanf_i+0x15e>
 8010a86:	6831      	ldr	r1, [r6, #0]
 8010a88:	6960      	ldr	r0, [r4, #20]
 8010a8a:	f891 c000 	ldrb.w	ip, [r1]
 8010a8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010a92:	2800      	cmp	r0, #0
 8010a94:	d035      	beq.n	8010b02 <_scanf_i+0x15e>
 8010a96:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010a9a:	d124      	bne.n	8010ae6 <_scanf_i+0x142>
 8010a9c:	0510      	lsls	r0, r2, #20
 8010a9e:	d522      	bpl.n	8010ae6 <_scanf_i+0x142>
 8010aa0:	f10b 0b01 	add.w	fp, fp, #1
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	d003      	beq.n	8010ab2 <_scanf_i+0x10e>
 8010aaa:	3301      	adds	r3, #1
 8010aac:	f109 39ff 	add.w	r9, r9, #4294967295
 8010ab0:	60a3      	str	r3, [r4, #8]
 8010ab2:	6873      	ldr	r3, [r6, #4]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	6073      	str	r3, [r6, #4]
 8010aba:	dd1b      	ble.n	8010af4 <_scanf_i+0x150>
 8010abc:	6833      	ldr	r3, [r6, #0]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	6033      	str	r3, [r6, #0]
 8010ac2:	68a3      	ldr	r3, [r4, #8]
 8010ac4:	3b01      	subs	r3, #1
 8010ac6:	60a3      	str	r3, [r4, #8]
 8010ac8:	e7d9      	b.n	8010a7e <_scanf_i+0xda>
 8010aca:	f1bb 0f02 	cmp.w	fp, #2
 8010ace:	d1ae      	bne.n	8010a2e <_scanf_i+0x8a>
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010ad6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010ada:	d1bf      	bne.n	8010a5c <_scanf_i+0xb8>
 8010adc:	2310      	movs	r3, #16
 8010ade:	6063      	str	r3, [r4, #4]
 8010ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ae4:	e7a2      	b.n	8010a2c <_scanf_i+0x88>
 8010ae6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010aea:	6022      	str	r2, [r4, #0]
 8010aec:	780b      	ldrb	r3, [r1, #0]
 8010aee:	f805 3b01 	strb.w	r3, [r5], #1
 8010af2:	e7de      	b.n	8010ab2 <_scanf_i+0x10e>
 8010af4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010af8:	4631      	mov	r1, r6
 8010afa:	4650      	mov	r0, sl
 8010afc:	4798      	blx	r3
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d0df      	beq.n	8010ac2 <_scanf_i+0x11e>
 8010b02:	6823      	ldr	r3, [r4, #0]
 8010b04:	05db      	lsls	r3, r3, #23
 8010b06:	d50d      	bpl.n	8010b24 <_scanf_i+0x180>
 8010b08:	42bd      	cmp	r5, r7
 8010b0a:	d909      	bls.n	8010b20 <_scanf_i+0x17c>
 8010b0c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010b14:	4632      	mov	r2, r6
 8010b16:	4650      	mov	r0, sl
 8010b18:	4798      	blx	r3
 8010b1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8010b1e:	464d      	mov	r5, r9
 8010b20:	42bd      	cmp	r5, r7
 8010b22:	d02d      	beq.n	8010b80 <_scanf_i+0x1dc>
 8010b24:	6822      	ldr	r2, [r4, #0]
 8010b26:	f012 0210 	ands.w	r2, r2, #16
 8010b2a:	d113      	bne.n	8010b54 <_scanf_i+0x1b0>
 8010b2c:	702a      	strb	r2, [r5, #0]
 8010b2e:	6863      	ldr	r3, [r4, #4]
 8010b30:	9e01      	ldr	r6, [sp, #4]
 8010b32:	4639      	mov	r1, r7
 8010b34:	4650      	mov	r0, sl
 8010b36:	47b0      	blx	r6
 8010b38:	6821      	ldr	r1, [r4, #0]
 8010b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8010b3e:	f011 0f20 	tst.w	r1, #32
 8010b42:	d013      	beq.n	8010b6c <_scanf_i+0x1c8>
 8010b44:	1d1a      	adds	r2, r3, #4
 8010b46:	f8c8 2000 	str.w	r2, [r8]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	6018      	str	r0, [r3, #0]
 8010b4e:	68e3      	ldr	r3, [r4, #12]
 8010b50:	3301      	adds	r3, #1
 8010b52:	60e3      	str	r3, [r4, #12]
 8010b54:	1bed      	subs	r5, r5, r7
 8010b56:	44ab      	add	fp, r5
 8010b58:	6925      	ldr	r5, [r4, #16]
 8010b5a:	445d      	add	r5, fp
 8010b5c:	6125      	str	r5, [r4, #16]
 8010b5e:	2000      	movs	r0, #0
 8010b60:	b007      	add	sp, #28
 8010b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b66:	f04f 0b00 	mov.w	fp, #0
 8010b6a:	e7ca      	b.n	8010b02 <_scanf_i+0x15e>
 8010b6c:	1d1a      	adds	r2, r3, #4
 8010b6e:	f8c8 2000 	str.w	r2, [r8]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f011 0f01 	tst.w	r1, #1
 8010b78:	bf14      	ite	ne
 8010b7a:	8018      	strhne	r0, [r3, #0]
 8010b7c:	6018      	streq	r0, [r3, #0]
 8010b7e:	e7e6      	b.n	8010b4e <_scanf_i+0x1aa>
 8010b80:	2001      	movs	r0, #1
 8010b82:	e7ed      	b.n	8010b60 <_scanf_i+0x1bc>
 8010b84:	08012274 	.word	0x08012274
 8010b88:	08010dcd 	.word	0x08010dcd
 8010b8c:	0800df35 	.word	0x0800df35
 8010b90:	080127dd 	.word	0x080127dd

08010b94 <_read_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4d07      	ldr	r5, [pc, #28]	; (8010bb4 <_read_r+0x20>)
 8010b98:	4604      	mov	r4, r0
 8010b9a:	4608      	mov	r0, r1
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	602a      	str	r2, [r5, #0]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f7f2 f93a 	bl	8002e1c <_read>
 8010ba8:	1c43      	adds	r3, r0, #1
 8010baa:	d102      	bne.n	8010bb2 <_read_r+0x1e>
 8010bac:	682b      	ldr	r3, [r5, #0]
 8010bae:	b103      	cbz	r3, 8010bb2 <_read_r+0x1e>
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	bd38      	pop	{r3, r4, r5, pc}
 8010bb4:	20013300 	.word	0x20013300

08010bb8 <nan>:
 8010bb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010bc0 <nan+0x8>
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	00000000 	.word	0x00000000
 8010bc4:	7ff80000 	.word	0x7ff80000

08010bc8 <__sccl>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	780b      	ldrb	r3, [r1, #0]
 8010bcc:	4604      	mov	r4, r0
 8010bce:	2b5e      	cmp	r3, #94	; 0x5e
 8010bd0:	bf0b      	itete	eq
 8010bd2:	784b      	ldrbeq	r3, [r1, #1]
 8010bd4:	1c48      	addne	r0, r1, #1
 8010bd6:	1c88      	addeq	r0, r1, #2
 8010bd8:	2200      	movne	r2, #0
 8010bda:	bf08      	it	eq
 8010bdc:	2201      	moveq	r2, #1
 8010bde:	1e61      	subs	r1, r4, #1
 8010be0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010be4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010be8:	42a9      	cmp	r1, r5
 8010bea:	d1fb      	bne.n	8010be4 <__sccl+0x1c>
 8010bec:	b90b      	cbnz	r3, 8010bf2 <__sccl+0x2a>
 8010bee:	3801      	subs	r0, #1
 8010bf0:	bd70      	pop	{r4, r5, r6, pc}
 8010bf2:	f082 0201 	eor.w	r2, r2, #1
 8010bf6:	54e2      	strb	r2, [r4, r3]
 8010bf8:	4605      	mov	r5, r0
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010c00:	292d      	cmp	r1, #45	; 0x2d
 8010c02:	d006      	beq.n	8010c12 <__sccl+0x4a>
 8010c04:	295d      	cmp	r1, #93	; 0x5d
 8010c06:	d0f3      	beq.n	8010bf0 <__sccl+0x28>
 8010c08:	b909      	cbnz	r1, 8010c0e <__sccl+0x46>
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	e7f0      	b.n	8010bf0 <__sccl+0x28>
 8010c0e:	460b      	mov	r3, r1
 8010c10:	e7f1      	b.n	8010bf6 <__sccl+0x2e>
 8010c12:	786e      	ldrb	r6, [r5, #1]
 8010c14:	2e5d      	cmp	r6, #93	; 0x5d
 8010c16:	d0fa      	beq.n	8010c0e <__sccl+0x46>
 8010c18:	42b3      	cmp	r3, r6
 8010c1a:	dcf8      	bgt.n	8010c0e <__sccl+0x46>
 8010c1c:	3502      	adds	r5, #2
 8010c1e:	4619      	mov	r1, r3
 8010c20:	3101      	adds	r1, #1
 8010c22:	428e      	cmp	r6, r1
 8010c24:	5462      	strb	r2, [r4, r1]
 8010c26:	dcfb      	bgt.n	8010c20 <__sccl+0x58>
 8010c28:	1af1      	subs	r1, r6, r3
 8010c2a:	3901      	subs	r1, #1
 8010c2c:	1c58      	adds	r0, r3, #1
 8010c2e:	42b3      	cmp	r3, r6
 8010c30:	bfa8      	it	ge
 8010c32:	2100      	movge	r1, #0
 8010c34:	1843      	adds	r3, r0, r1
 8010c36:	e7e0      	b.n	8010bfa <__sccl+0x32>

08010c38 <_raise_r>:
 8010c38:	291f      	cmp	r1, #31
 8010c3a:	b538      	push	{r3, r4, r5, lr}
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	460d      	mov	r5, r1
 8010c40:	d904      	bls.n	8010c4c <_raise_r+0x14>
 8010c42:	2316      	movs	r3, #22
 8010c44:	6003      	str	r3, [r0, #0]
 8010c46:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
 8010c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c4e:	b112      	cbz	r2, 8010c56 <_raise_r+0x1e>
 8010c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c54:	b94b      	cbnz	r3, 8010c6a <_raise_r+0x32>
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 f830 	bl	8010cbc <_getpid_r>
 8010c5c:	462a      	mov	r2, r5
 8010c5e:	4601      	mov	r1, r0
 8010c60:	4620      	mov	r0, r4
 8010c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c66:	f000 b817 	b.w	8010c98 <_kill_r>
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d00a      	beq.n	8010c84 <_raise_r+0x4c>
 8010c6e:	1c59      	adds	r1, r3, #1
 8010c70:	d103      	bne.n	8010c7a <_raise_r+0x42>
 8010c72:	2316      	movs	r3, #22
 8010c74:	6003      	str	r3, [r0, #0]
 8010c76:	2001      	movs	r0, #1
 8010c78:	e7e7      	b.n	8010c4a <_raise_r+0x12>
 8010c7a:	2400      	movs	r4, #0
 8010c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c80:	4628      	mov	r0, r5
 8010c82:	4798      	blx	r3
 8010c84:	2000      	movs	r0, #0
 8010c86:	e7e0      	b.n	8010c4a <_raise_r+0x12>

08010c88 <raise>:
 8010c88:	4b02      	ldr	r3, [pc, #8]	; (8010c94 <raise+0xc>)
 8010c8a:	4601      	mov	r1, r0
 8010c8c:	6818      	ldr	r0, [r3, #0]
 8010c8e:	f7ff bfd3 	b.w	8010c38 <_raise_r>
 8010c92:	bf00      	nop
 8010c94:	2000023c 	.word	0x2000023c

08010c98 <_kill_r>:
 8010c98:	b538      	push	{r3, r4, r5, lr}
 8010c9a:	4d07      	ldr	r5, [pc, #28]	; (8010cb8 <_kill_r+0x20>)
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	4608      	mov	r0, r1
 8010ca2:	4611      	mov	r1, r2
 8010ca4:	602b      	str	r3, [r5, #0]
 8010ca6:	f7f2 f89f 	bl	8002de8 <_kill>
 8010caa:	1c43      	adds	r3, r0, #1
 8010cac:	d102      	bne.n	8010cb4 <_kill_r+0x1c>
 8010cae:	682b      	ldr	r3, [r5, #0]
 8010cb0:	b103      	cbz	r3, 8010cb4 <_kill_r+0x1c>
 8010cb2:	6023      	str	r3, [r4, #0]
 8010cb4:	bd38      	pop	{r3, r4, r5, pc}
 8010cb6:	bf00      	nop
 8010cb8:	20013300 	.word	0x20013300

08010cbc <_getpid_r>:
 8010cbc:	f7f2 b88c 	b.w	8002dd8 <_getpid>

08010cc0 <strncmp>:
 8010cc0:	b510      	push	{r4, lr}
 8010cc2:	b17a      	cbz	r2, 8010ce4 <strncmp+0x24>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	3901      	subs	r1, #1
 8010cc8:	1884      	adds	r4, r0, r2
 8010cca:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010cce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010cd2:	4290      	cmp	r0, r2
 8010cd4:	d101      	bne.n	8010cda <strncmp+0x1a>
 8010cd6:	42a3      	cmp	r3, r4
 8010cd8:	d101      	bne.n	8010cde <strncmp+0x1e>
 8010cda:	1a80      	subs	r0, r0, r2
 8010cdc:	bd10      	pop	{r4, pc}
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d1f3      	bne.n	8010cca <strncmp+0xa>
 8010ce2:	e7fa      	b.n	8010cda <strncmp+0x1a>
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	e7f9      	b.n	8010cdc <strncmp+0x1c>

08010ce8 <_strtoul_l.constprop.0>:
 8010ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cec:	4f36      	ldr	r7, [pc, #216]	; (8010dc8 <_strtoul_l.constprop.0+0xe0>)
 8010cee:	4686      	mov	lr, r0
 8010cf0:	460d      	mov	r5, r1
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010cf8:	5de6      	ldrb	r6, [r4, r7]
 8010cfa:	f016 0608 	ands.w	r6, r6, #8
 8010cfe:	d1f8      	bne.n	8010cf2 <_strtoul_l.constprop.0+0xa>
 8010d00:	2c2d      	cmp	r4, #45	; 0x2d
 8010d02:	d12f      	bne.n	8010d64 <_strtoul_l.constprop.0+0x7c>
 8010d04:	782c      	ldrb	r4, [r5, #0]
 8010d06:	2601      	movs	r6, #1
 8010d08:	1c85      	adds	r5, r0, #2
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d057      	beq.n	8010dbe <_strtoul_l.constprop.0+0xd6>
 8010d0e:	2b10      	cmp	r3, #16
 8010d10:	d109      	bne.n	8010d26 <_strtoul_l.constprop.0+0x3e>
 8010d12:	2c30      	cmp	r4, #48	; 0x30
 8010d14:	d107      	bne.n	8010d26 <_strtoul_l.constprop.0+0x3e>
 8010d16:	7828      	ldrb	r0, [r5, #0]
 8010d18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010d1c:	2858      	cmp	r0, #88	; 0x58
 8010d1e:	d149      	bne.n	8010db4 <_strtoul_l.constprop.0+0xcc>
 8010d20:	786c      	ldrb	r4, [r5, #1]
 8010d22:	2310      	movs	r3, #16
 8010d24:	3502      	adds	r5, #2
 8010d26:	f04f 38ff 	mov.w	r8, #4294967295
 8010d2a:	2700      	movs	r7, #0
 8010d2c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010d30:	fb03 f908 	mul.w	r9, r3, r8
 8010d34:	ea6f 0909 	mvn.w	r9, r9
 8010d38:	4638      	mov	r0, r7
 8010d3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010d3e:	f1bc 0f09 	cmp.w	ip, #9
 8010d42:	d814      	bhi.n	8010d6e <_strtoul_l.constprop.0+0x86>
 8010d44:	4664      	mov	r4, ip
 8010d46:	42a3      	cmp	r3, r4
 8010d48:	dd22      	ble.n	8010d90 <_strtoul_l.constprop.0+0xa8>
 8010d4a:	2f00      	cmp	r7, #0
 8010d4c:	db1d      	blt.n	8010d8a <_strtoul_l.constprop.0+0xa2>
 8010d4e:	4580      	cmp	r8, r0
 8010d50:	d31b      	bcc.n	8010d8a <_strtoul_l.constprop.0+0xa2>
 8010d52:	d101      	bne.n	8010d58 <_strtoul_l.constprop.0+0x70>
 8010d54:	45a1      	cmp	r9, r4
 8010d56:	db18      	blt.n	8010d8a <_strtoul_l.constprop.0+0xa2>
 8010d58:	fb00 4003 	mla	r0, r0, r3, r4
 8010d5c:	2701      	movs	r7, #1
 8010d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d62:	e7ea      	b.n	8010d3a <_strtoul_l.constprop.0+0x52>
 8010d64:	2c2b      	cmp	r4, #43	; 0x2b
 8010d66:	bf04      	itt	eq
 8010d68:	782c      	ldrbeq	r4, [r5, #0]
 8010d6a:	1c85      	addeq	r5, r0, #2
 8010d6c:	e7cd      	b.n	8010d0a <_strtoul_l.constprop.0+0x22>
 8010d6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010d72:	f1bc 0f19 	cmp.w	ip, #25
 8010d76:	d801      	bhi.n	8010d7c <_strtoul_l.constprop.0+0x94>
 8010d78:	3c37      	subs	r4, #55	; 0x37
 8010d7a:	e7e4      	b.n	8010d46 <_strtoul_l.constprop.0+0x5e>
 8010d7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010d80:	f1bc 0f19 	cmp.w	ip, #25
 8010d84:	d804      	bhi.n	8010d90 <_strtoul_l.constprop.0+0xa8>
 8010d86:	3c57      	subs	r4, #87	; 0x57
 8010d88:	e7dd      	b.n	8010d46 <_strtoul_l.constprop.0+0x5e>
 8010d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8010d8e:	e7e6      	b.n	8010d5e <_strtoul_l.constprop.0+0x76>
 8010d90:	2f00      	cmp	r7, #0
 8010d92:	da07      	bge.n	8010da4 <_strtoul_l.constprop.0+0xbc>
 8010d94:	2322      	movs	r3, #34	; 0x22
 8010d96:	f8ce 3000 	str.w	r3, [lr]
 8010d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d9e:	b932      	cbnz	r2, 8010dae <_strtoul_l.constprop.0+0xc6>
 8010da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010da4:	b106      	cbz	r6, 8010da8 <_strtoul_l.constprop.0+0xc0>
 8010da6:	4240      	negs	r0, r0
 8010da8:	2a00      	cmp	r2, #0
 8010daa:	d0f9      	beq.n	8010da0 <_strtoul_l.constprop.0+0xb8>
 8010dac:	b107      	cbz	r7, 8010db0 <_strtoul_l.constprop.0+0xc8>
 8010dae:	1e69      	subs	r1, r5, #1
 8010db0:	6011      	str	r1, [r2, #0]
 8010db2:	e7f5      	b.n	8010da0 <_strtoul_l.constprop.0+0xb8>
 8010db4:	2430      	movs	r4, #48	; 0x30
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1b5      	bne.n	8010d26 <_strtoul_l.constprop.0+0x3e>
 8010dba:	2308      	movs	r3, #8
 8010dbc:	e7b3      	b.n	8010d26 <_strtoul_l.constprop.0+0x3e>
 8010dbe:	2c30      	cmp	r4, #48	; 0x30
 8010dc0:	d0a9      	beq.n	8010d16 <_strtoul_l.constprop.0+0x2e>
 8010dc2:	230a      	movs	r3, #10
 8010dc4:	e7af      	b.n	8010d26 <_strtoul_l.constprop.0+0x3e>
 8010dc6:	bf00      	nop
 8010dc8:	08012361 	.word	0x08012361

08010dcc <_strtoul_r>:
 8010dcc:	f7ff bf8c 	b.w	8010ce8 <_strtoul_l.constprop.0>

08010dd0 <__submore>:
 8010dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd4:	460c      	mov	r4, r1
 8010dd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ddc:	4299      	cmp	r1, r3
 8010dde:	d11d      	bne.n	8010e1c <__submore+0x4c>
 8010de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010de4:	f7fb f874 	bl	800bed0 <_malloc_r>
 8010de8:	b918      	cbnz	r0, 8010df2 <__submore+0x22>
 8010dea:	f04f 30ff 	mov.w	r0, #4294967295
 8010dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010df6:	63a3      	str	r3, [r4, #56]	; 0x38
 8010df8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010dfc:	6360      	str	r0, [r4, #52]	; 0x34
 8010dfe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010e02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010e06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010e0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010e0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010e12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010e16:	6020      	str	r0, [r4, #0]
 8010e18:	2000      	movs	r0, #0
 8010e1a:	e7e8      	b.n	8010dee <__submore+0x1e>
 8010e1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010e1e:	0077      	lsls	r7, r6, #1
 8010e20:	463a      	mov	r2, r7
 8010e22:	f7ff fa09 	bl	8010238 <_realloc_r>
 8010e26:	4605      	mov	r5, r0
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d0de      	beq.n	8010dea <__submore+0x1a>
 8010e2c:	eb00 0806 	add.w	r8, r0, r6
 8010e30:	4601      	mov	r1, r0
 8010e32:	4632      	mov	r2, r6
 8010e34:	4640      	mov	r0, r8
 8010e36:	f7fb f814 	bl	800be62 <memcpy>
 8010e3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010e3e:	f8c4 8000 	str.w	r8, [r4]
 8010e42:	e7e9      	b.n	8010e18 <__submore+0x48>

08010e44 <__ascii_wctomb>:
 8010e44:	b149      	cbz	r1, 8010e5a <__ascii_wctomb+0x16>
 8010e46:	2aff      	cmp	r2, #255	; 0xff
 8010e48:	bf85      	ittet	hi
 8010e4a:	238a      	movhi	r3, #138	; 0x8a
 8010e4c:	6003      	strhi	r3, [r0, #0]
 8010e4e:	700a      	strbls	r2, [r1, #0]
 8010e50:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e54:	bf98      	it	ls
 8010e56:	2001      	movls	r0, #1
 8010e58:	4770      	bx	lr
 8010e5a:	4608      	mov	r0, r1
 8010e5c:	4770      	bx	lr
	...

08010e60 <_fstat_r>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	4d07      	ldr	r5, [pc, #28]	; (8010e80 <_fstat_r+0x20>)
 8010e64:	2300      	movs	r3, #0
 8010e66:	4604      	mov	r4, r0
 8010e68:	4608      	mov	r0, r1
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	602b      	str	r3, [r5, #0]
 8010e6e:	f7f2 f81a 	bl	8002ea6 <_fstat>
 8010e72:	1c43      	adds	r3, r0, #1
 8010e74:	d102      	bne.n	8010e7c <_fstat_r+0x1c>
 8010e76:	682b      	ldr	r3, [r5, #0]
 8010e78:	b103      	cbz	r3, 8010e7c <_fstat_r+0x1c>
 8010e7a:	6023      	str	r3, [r4, #0]
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	bf00      	nop
 8010e80:	20013300 	.word	0x20013300

08010e84 <_isatty_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4d06      	ldr	r5, [pc, #24]	; (8010ea0 <_isatty_r+0x1c>)
 8010e88:	2300      	movs	r3, #0
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	4608      	mov	r0, r1
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	f7f2 f819 	bl	8002ec6 <_isatty>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	d102      	bne.n	8010e9e <_isatty_r+0x1a>
 8010e98:	682b      	ldr	r3, [r5, #0]
 8010e9a:	b103      	cbz	r3, 8010e9e <_isatty_r+0x1a>
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ea0:	20013300 	.word	0x20013300

08010ea4 <_malloc_usable_size_r>:
 8010ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ea8:	1f18      	subs	r0, r3, #4
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bfbc      	itt	lt
 8010eae:	580b      	ldrlt	r3, [r1, r0]
 8010eb0:	18c0      	addlt	r0, r0, r3
 8010eb2:	4770      	bx	lr
 8010eb4:	0000      	movs	r0, r0
	...

08010eb8 <sin>:
 8010eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eba:	ec53 2b10 	vmov	r2, r3, d0
 8010ebe:	4828      	ldr	r0, [pc, #160]	; (8010f60 <sin+0xa8>)
 8010ec0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010ec4:	4281      	cmp	r1, r0
 8010ec6:	dc07      	bgt.n	8010ed8 <sin+0x20>
 8010ec8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010f58 <sin+0xa0>
 8010ecc:	2000      	movs	r0, #0
 8010ece:	b005      	add	sp, #20
 8010ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ed4:	f000 be6c 	b.w	8011bb0 <__kernel_sin>
 8010ed8:	4822      	ldr	r0, [pc, #136]	; (8010f64 <sin+0xac>)
 8010eda:	4281      	cmp	r1, r0
 8010edc:	dd09      	ble.n	8010ef2 <sin+0x3a>
 8010ede:	ee10 0a10 	vmov	r0, s0
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	f7ef f9e0 	bl	80002a8 <__aeabi_dsub>
 8010ee8:	ec41 0b10 	vmov	d0, r0, r1
 8010eec:	b005      	add	sp, #20
 8010eee:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ef2:	4668      	mov	r0, sp
 8010ef4:	f000 f838 	bl	8010f68 <__ieee754_rem_pio2>
 8010ef8:	f000 0003 	and.w	r0, r0, #3
 8010efc:	2801      	cmp	r0, #1
 8010efe:	d00c      	beq.n	8010f1a <sin+0x62>
 8010f00:	2802      	cmp	r0, #2
 8010f02:	d011      	beq.n	8010f28 <sin+0x70>
 8010f04:	b9f0      	cbnz	r0, 8010f44 <sin+0x8c>
 8010f06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f0a:	ed9d 0b00 	vldr	d0, [sp]
 8010f0e:	2001      	movs	r0, #1
 8010f10:	f000 fe4e 	bl	8011bb0 <__kernel_sin>
 8010f14:	ec51 0b10 	vmov	r0, r1, d0
 8010f18:	e7e6      	b.n	8010ee8 <sin+0x30>
 8010f1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f1e:	ed9d 0b00 	vldr	d0, [sp]
 8010f22:	f000 fa2d 	bl	8011380 <__kernel_cos>
 8010f26:	e7f5      	b.n	8010f14 <sin+0x5c>
 8010f28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f2c:	ed9d 0b00 	vldr	d0, [sp]
 8010f30:	2001      	movs	r0, #1
 8010f32:	f000 fe3d 	bl	8011bb0 <__kernel_sin>
 8010f36:	ec53 2b10 	vmov	r2, r3, d0
 8010f3a:	ee10 0a10 	vmov	r0, s0
 8010f3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f42:	e7d1      	b.n	8010ee8 <sin+0x30>
 8010f44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f48:	ed9d 0b00 	vldr	d0, [sp]
 8010f4c:	f000 fa18 	bl	8011380 <__kernel_cos>
 8010f50:	e7f1      	b.n	8010f36 <sin+0x7e>
 8010f52:	bf00      	nop
 8010f54:	f3af 8000 	nop.w
	...
 8010f60:	3fe921fb 	.word	0x3fe921fb
 8010f64:	7fefffff 	.word	0x7fefffff

08010f68 <__ieee754_rem_pio2>:
 8010f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6c:	ed2d 8b02 	vpush	{d8}
 8010f70:	ec55 4b10 	vmov	r4, r5, d0
 8010f74:	4bca      	ldr	r3, [pc, #808]	; (80112a0 <__ieee754_rem_pio2+0x338>)
 8010f76:	b08b      	sub	sp, #44	; 0x2c
 8010f78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010f7c:	4598      	cmp	r8, r3
 8010f7e:	4682      	mov	sl, r0
 8010f80:	9502      	str	r5, [sp, #8]
 8010f82:	dc08      	bgt.n	8010f96 <__ieee754_rem_pio2+0x2e>
 8010f84:	2200      	movs	r2, #0
 8010f86:	2300      	movs	r3, #0
 8010f88:	ed80 0b00 	vstr	d0, [r0]
 8010f8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010f90:	f04f 0b00 	mov.w	fp, #0
 8010f94:	e028      	b.n	8010fe8 <__ieee754_rem_pio2+0x80>
 8010f96:	4bc3      	ldr	r3, [pc, #780]	; (80112a4 <__ieee754_rem_pio2+0x33c>)
 8010f98:	4598      	cmp	r8, r3
 8010f9a:	dc78      	bgt.n	801108e <__ieee754_rem_pio2+0x126>
 8010f9c:	9b02      	ldr	r3, [sp, #8]
 8010f9e:	4ec2      	ldr	r6, [pc, #776]	; (80112a8 <__ieee754_rem_pio2+0x340>)
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	ee10 0a10 	vmov	r0, s0
 8010fa6:	a3b0      	add	r3, pc, #704	; (adr r3, 8011268 <__ieee754_rem_pio2+0x300>)
 8010fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fac:	4629      	mov	r1, r5
 8010fae:	dd39      	ble.n	8011024 <__ieee754_rem_pio2+0xbc>
 8010fb0:	f7ef f97a 	bl	80002a8 <__aeabi_dsub>
 8010fb4:	45b0      	cmp	r8, r6
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	460d      	mov	r5, r1
 8010fba:	d01b      	beq.n	8010ff4 <__ieee754_rem_pio2+0x8c>
 8010fbc:	a3ac      	add	r3, pc, #688	; (adr r3, 8011270 <__ieee754_rem_pio2+0x308>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	f7ef f971 	bl	80002a8 <__aeabi_dsub>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	460b      	mov	r3, r1
 8010fca:	e9ca 2300 	strd	r2, r3, [sl]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	f7ef f969 	bl	80002a8 <__aeabi_dsub>
 8010fd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011270 <__ieee754_rem_pio2+0x308>)
 8010fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fdc:	f7ef f964 	bl	80002a8 <__aeabi_dsub>
 8010fe0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010fe4:	f04f 0b01 	mov.w	fp, #1
 8010fe8:	4658      	mov	r0, fp
 8010fea:	b00b      	add	sp, #44	; 0x2c
 8010fec:	ecbd 8b02 	vpop	{d8}
 8010ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff4:	a3a0      	add	r3, pc, #640	; (adr r3, 8011278 <__ieee754_rem_pio2+0x310>)
 8010ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffa:	f7ef f955 	bl	80002a8 <__aeabi_dsub>
 8010ffe:	a3a0      	add	r3, pc, #640	; (adr r3, 8011280 <__ieee754_rem_pio2+0x318>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	4604      	mov	r4, r0
 8011006:	460d      	mov	r5, r1
 8011008:	f7ef f94e 	bl	80002a8 <__aeabi_dsub>
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	e9ca 2300 	strd	r2, r3, [sl]
 8011014:	4620      	mov	r0, r4
 8011016:	4629      	mov	r1, r5
 8011018:	f7ef f946 	bl	80002a8 <__aeabi_dsub>
 801101c:	a398      	add	r3, pc, #608	; (adr r3, 8011280 <__ieee754_rem_pio2+0x318>)
 801101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011022:	e7db      	b.n	8010fdc <__ieee754_rem_pio2+0x74>
 8011024:	f7ef f942 	bl	80002ac <__adddf3>
 8011028:	45b0      	cmp	r8, r6
 801102a:	4604      	mov	r4, r0
 801102c:	460d      	mov	r5, r1
 801102e:	d016      	beq.n	801105e <__ieee754_rem_pio2+0xf6>
 8011030:	a38f      	add	r3, pc, #572	; (adr r3, 8011270 <__ieee754_rem_pio2+0x308>)
 8011032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011036:	f7ef f939 	bl	80002ac <__adddf3>
 801103a:	4602      	mov	r2, r0
 801103c:	460b      	mov	r3, r1
 801103e:	e9ca 2300 	strd	r2, r3, [sl]
 8011042:	4620      	mov	r0, r4
 8011044:	4629      	mov	r1, r5
 8011046:	f7ef f92f 	bl	80002a8 <__aeabi_dsub>
 801104a:	a389      	add	r3, pc, #548	; (adr r3, 8011270 <__ieee754_rem_pio2+0x308>)
 801104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011050:	f7ef f92c 	bl	80002ac <__adddf3>
 8011054:	f04f 3bff 	mov.w	fp, #4294967295
 8011058:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801105c:	e7c4      	b.n	8010fe8 <__ieee754_rem_pio2+0x80>
 801105e:	a386      	add	r3, pc, #536	; (adr r3, 8011278 <__ieee754_rem_pio2+0x310>)
 8011060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011064:	f7ef f922 	bl	80002ac <__adddf3>
 8011068:	a385      	add	r3, pc, #532	; (adr r3, 8011280 <__ieee754_rem_pio2+0x318>)
 801106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106e:	4604      	mov	r4, r0
 8011070:	460d      	mov	r5, r1
 8011072:	f7ef f91b 	bl	80002ac <__adddf3>
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	e9ca 2300 	strd	r2, r3, [sl]
 801107e:	4620      	mov	r0, r4
 8011080:	4629      	mov	r1, r5
 8011082:	f7ef f911 	bl	80002a8 <__aeabi_dsub>
 8011086:	a37e      	add	r3, pc, #504	; (adr r3, 8011280 <__ieee754_rem_pio2+0x318>)
 8011088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108c:	e7e0      	b.n	8011050 <__ieee754_rem_pio2+0xe8>
 801108e:	4b87      	ldr	r3, [pc, #540]	; (80112ac <__ieee754_rem_pio2+0x344>)
 8011090:	4598      	cmp	r8, r3
 8011092:	f300 80d9 	bgt.w	8011248 <__ieee754_rem_pio2+0x2e0>
 8011096:	f000 fe49 	bl	8011d2c <fabs>
 801109a:	ec55 4b10 	vmov	r4, r5, d0
 801109e:	ee10 0a10 	vmov	r0, s0
 80110a2:	a379      	add	r3, pc, #484	; (adr r3, 8011288 <__ieee754_rem_pio2+0x320>)
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	4629      	mov	r1, r5
 80110aa:	f7ef fab5 	bl	8000618 <__aeabi_dmul>
 80110ae:	4b80      	ldr	r3, [pc, #512]	; (80112b0 <__ieee754_rem_pio2+0x348>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	f7ef f8fb 	bl	80002ac <__adddf3>
 80110b6:	f7ef fd5f 	bl	8000b78 <__aeabi_d2iz>
 80110ba:	4683      	mov	fp, r0
 80110bc:	f7ef fa42 	bl	8000544 <__aeabi_i2d>
 80110c0:	4602      	mov	r2, r0
 80110c2:	460b      	mov	r3, r1
 80110c4:	ec43 2b18 	vmov	d8, r2, r3
 80110c8:	a367      	add	r3, pc, #412	; (adr r3, 8011268 <__ieee754_rem_pio2+0x300>)
 80110ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ce:	f7ef faa3 	bl	8000618 <__aeabi_dmul>
 80110d2:	4602      	mov	r2, r0
 80110d4:	460b      	mov	r3, r1
 80110d6:	4620      	mov	r0, r4
 80110d8:	4629      	mov	r1, r5
 80110da:	f7ef f8e5 	bl	80002a8 <__aeabi_dsub>
 80110de:	a364      	add	r3, pc, #400	; (adr r3, 8011270 <__ieee754_rem_pio2+0x308>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	4606      	mov	r6, r0
 80110e6:	460f      	mov	r7, r1
 80110e8:	ec51 0b18 	vmov	r0, r1, d8
 80110ec:	f7ef fa94 	bl	8000618 <__aeabi_dmul>
 80110f0:	f1bb 0f1f 	cmp.w	fp, #31
 80110f4:	4604      	mov	r4, r0
 80110f6:	460d      	mov	r5, r1
 80110f8:	dc0d      	bgt.n	8011116 <__ieee754_rem_pio2+0x1ae>
 80110fa:	4b6e      	ldr	r3, [pc, #440]	; (80112b4 <__ieee754_rem_pio2+0x34c>)
 80110fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011104:	4543      	cmp	r3, r8
 8011106:	d006      	beq.n	8011116 <__ieee754_rem_pio2+0x1ae>
 8011108:	4622      	mov	r2, r4
 801110a:	462b      	mov	r3, r5
 801110c:	4630      	mov	r0, r6
 801110e:	4639      	mov	r1, r7
 8011110:	f7ef f8ca 	bl	80002a8 <__aeabi_dsub>
 8011114:	e00f      	b.n	8011136 <__ieee754_rem_pio2+0x1ce>
 8011116:	462b      	mov	r3, r5
 8011118:	4622      	mov	r2, r4
 801111a:	4630      	mov	r0, r6
 801111c:	4639      	mov	r1, r7
 801111e:	f7ef f8c3 	bl	80002a8 <__aeabi_dsub>
 8011122:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011126:	9303      	str	r3, [sp, #12]
 8011128:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801112c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011130:	f1b8 0f10 	cmp.w	r8, #16
 8011134:	dc02      	bgt.n	801113c <__ieee754_rem_pio2+0x1d4>
 8011136:	e9ca 0100 	strd	r0, r1, [sl]
 801113a:	e039      	b.n	80111b0 <__ieee754_rem_pio2+0x248>
 801113c:	a34e      	add	r3, pc, #312	; (adr r3, 8011278 <__ieee754_rem_pio2+0x310>)
 801113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011142:	ec51 0b18 	vmov	r0, r1, d8
 8011146:	f7ef fa67 	bl	8000618 <__aeabi_dmul>
 801114a:	4604      	mov	r4, r0
 801114c:	460d      	mov	r5, r1
 801114e:	4602      	mov	r2, r0
 8011150:	460b      	mov	r3, r1
 8011152:	4630      	mov	r0, r6
 8011154:	4639      	mov	r1, r7
 8011156:	f7ef f8a7 	bl	80002a8 <__aeabi_dsub>
 801115a:	4602      	mov	r2, r0
 801115c:	460b      	mov	r3, r1
 801115e:	4680      	mov	r8, r0
 8011160:	4689      	mov	r9, r1
 8011162:	4630      	mov	r0, r6
 8011164:	4639      	mov	r1, r7
 8011166:	f7ef f89f 	bl	80002a8 <__aeabi_dsub>
 801116a:	4622      	mov	r2, r4
 801116c:	462b      	mov	r3, r5
 801116e:	f7ef f89b 	bl	80002a8 <__aeabi_dsub>
 8011172:	a343      	add	r3, pc, #268	; (adr r3, 8011280 <__ieee754_rem_pio2+0x318>)
 8011174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011178:	4604      	mov	r4, r0
 801117a:	460d      	mov	r5, r1
 801117c:	ec51 0b18 	vmov	r0, r1, d8
 8011180:	f7ef fa4a 	bl	8000618 <__aeabi_dmul>
 8011184:	4622      	mov	r2, r4
 8011186:	462b      	mov	r3, r5
 8011188:	f7ef f88e 	bl	80002a8 <__aeabi_dsub>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	4604      	mov	r4, r0
 8011192:	460d      	mov	r5, r1
 8011194:	4640      	mov	r0, r8
 8011196:	4649      	mov	r1, r9
 8011198:	f7ef f886 	bl	80002a8 <__aeabi_dsub>
 801119c:	9a03      	ldr	r2, [sp, #12]
 801119e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	2b31      	cmp	r3, #49	; 0x31
 80111a6:	dc24      	bgt.n	80111f2 <__ieee754_rem_pio2+0x28a>
 80111a8:	e9ca 0100 	strd	r0, r1, [sl]
 80111ac:	4646      	mov	r6, r8
 80111ae:	464f      	mov	r7, r9
 80111b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80111b4:	4630      	mov	r0, r6
 80111b6:	4642      	mov	r2, r8
 80111b8:	464b      	mov	r3, r9
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef f874 	bl	80002a8 <__aeabi_dsub>
 80111c0:	462b      	mov	r3, r5
 80111c2:	4622      	mov	r2, r4
 80111c4:	f7ef f870 	bl	80002a8 <__aeabi_dsub>
 80111c8:	9b02      	ldr	r3, [sp, #8]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80111d0:	f6bf af0a 	bge.w	8010fe8 <__ieee754_rem_pio2+0x80>
 80111d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80111d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80111dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111e0:	f8ca 8000 	str.w	r8, [sl]
 80111e4:	f8ca 0008 	str.w	r0, [sl, #8]
 80111e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80111ec:	f1cb 0b00 	rsb	fp, fp, #0
 80111f0:	e6fa      	b.n	8010fe8 <__ieee754_rem_pio2+0x80>
 80111f2:	a327      	add	r3, pc, #156	; (adr r3, 8011290 <__ieee754_rem_pio2+0x328>)
 80111f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f8:	ec51 0b18 	vmov	r0, r1, d8
 80111fc:	f7ef fa0c 	bl	8000618 <__aeabi_dmul>
 8011200:	4604      	mov	r4, r0
 8011202:	460d      	mov	r5, r1
 8011204:	4602      	mov	r2, r0
 8011206:	460b      	mov	r3, r1
 8011208:	4640      	mov	r0, r8
 801120a:	4649      	mov	r1, r9
 801120c:	f7ef f84c 	bl	80002a8 <__aeabi_dsub>
 8011210:	4602      	mov	r2, r0
 8011212:	460b      	mov	r3, r1
 8011214:	4606      	mov	r6, r0
 8011216:	460f      	mov	r7, r1
 8011218:	4640      	mov	r0, r8
 801121a:	4649      	mov	r1, r9
 801121c:	f7ef f844 	bl	80002a8 <__aeabi_dsub>
 8011220:	4622      	mov	r2, r4
 8011222:	462b      	mov	r3, r5
 8011224:	f7ef f840 	bl	80002a8 <__aeabi_dsub>
 8011228:	a31b      	add	r3, pc, #108	; (adr r3, 8011298 <__ieee754_rem_pio2+0x330>)
 801122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122e:	4604      	mov	r4, r0
 8011230:	460d      	mov	r5, r1
 8011232:	ec51 0b18 	vmov	r0, r1, d8
 8011236:	f7ef f9ef 	bl	8000618 <__aeabi_dmul>
 801123a:	4622      	mov	r2, r4
 801123c:	462b      	mov	r3, r5
 801123e:	f7ef f833 	bl	80002a8 <__aeabi_dsub>
 8011242:	4604      	mov	r4, r0
 8011244:	460d      	mov	r5, r1
 8011246:	e75f      	b.n	8011108 <__ieee754_rem_pio2+0x1a0>
 8011248:	4b1b      	ldr	r3, [pc, #108]	; (80112b8 <__ieee754_rem_pio2+0x350>)
 801124a:	4598      	cmp	r8, r3
 801124c:	dd36      	ble.n	80112bc <__ieee754_rem_pio2+0x354>
 801124e:	ee10 2a10 	vmov	r2, s0
 8011252:	462b      	mov	r3, r5
 8011254:	4620      	mov	r0, r4
 8011256:	4629      	mov	r1, r5
 8011258:	f7ef f826 	bl	80002a8 <__aeabi_dsub>
 801125c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011260:	e9ca 0100 	strd	r0, r1, [sl]
 8011264:	e694      	b.n	8010f90 <__ieee754_rem_pio2+0x28>
 8011266:	bf00      	nop
 8011268:	54400000 	.word	0x54400000
 801126c:	3ff921fb 	.word	0x3ff921fb
 8011270:	1a626331 	.word	0x1a626331
 8011274:	3dd0b461 	.word	0x3dd0b461
 8011278:	1a600000 	.word	0x1a600000
 801127c:	3dd0b461 	.word	0x3dd0b461
 8011280:	2e037073 	.word	0x2e037073
 8011284:	3ba3198a 	.word	0x3ba3198a
 8011288:	6dc9c883 	.word	0x6dc9c883
 801128c:	3fe45f30 	.word	0x3fe45f30
 8011290:	2e000000 	.word	0x2e000000
 8011294:	3ba3198a 	.word	0x3ba3198a
 8011298:	252049c1 	.word	0x252049c1
 801129c:	397b839a 	.word	0x397b839a
 80112a0:	3fe921fb 	.word	0x3fe921fb
 80112a4:	4002d97b 	.word	0x4002d97b
 80112a8:	3ff921fb 	.word	0x3ff921fb
 80112ac:	413921fb 	.word	0x413921fb
 80112b0:	3fe00000 	.word	0x3fe00000
 80112b4:	080127e0 	.word	0x080127e0
 80112b8:	7fefffff 	.word	0x7fefffff
 80112bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80112c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80112c4:	ee10 0a10 	vmov	r0, s0
 80112c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80112cc:	ee10 6a10 	vmov	r6, s0
 80112d0:	460f      	mov	r7, r1
 80112d2:	f7ef fc51 	bl	8000b78 <__aeabi_d2iz>
 80112d6:	f7ef f935 	bl	8000544 <__aeabi_i2d>
 80112da:	4602      	mov	r2, r0
 80112dc:	460b      	mov	r3, r1
 80112de:	4630      	mov	r0, r6
 80112e0:	4639      	mov	r1, r7
 80112e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80112e6:	f7ee ffdf 	bl	80002a8 <__aeabi_dsub>
 80112ea:	4b23      	ldr	r3, [pc, #140]	; (8011378 <__ieee754_rem_pio2+0x410>)
 80112ec:	2200      	movs	r2, #0
 80112ee:	f7ef f993 	bl	8000618 <__aeabi_dmul>
 80112f2:	460f      	mov	r7, r1
 80112f4:	4606      	mov	r6, r0
 80112f6:	f7ef fc3f 	bl	8000b78 <__aeabi_d2iz>
 80112fa:	f7ef f923 	bl	8000544 <__aeabi_i2d>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	4630      	mov	r0, r6
 8011304:	4639      	mov	r1, r7
 8011306:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801130a:	f7ee ffcd 	bl	80002a8 <__aeabi_dsub>
 801130e:	4b1a      	ldr	r3, [pc, #104]	; (8011378 <__ieee754_rem_pio2+0x410>)
 8011310:	2200      	movs	r2, #0
 8011312:	f7ef f981 	bl	8000618 <__aeabi_dmul>
 8011316:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801131a:	ad04      	add	r5, sp, #16
 801131c:	f04f 0803 	mov.w	r8, #3
 8011320:	46a9      	mov	r9, r5
 8011322:	2600      	movs	r6, #0
 8011324:	2700      	movs	r7, #0
 8011326:	4632      	mov	r2, r6
 8011328:	463b      	mov	r3, r7
 801132a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801132e:	46c3      	mov	fp, r8
 8011330:	3d08      	subs	r5, #8
 8011332:	f108 38ff 	add.w	r8, r8, #4294967295
 8011336:	f7ef fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 801133a:	2800      	cmp	r0, #0
 801133c:	d1f3      	bne.n	8011326 <__ieee754_rem_pio2+0x3be>
 801133e:	4b0f      	ldr	r3, [pc, #60]	; (801137c <__ieee754_rem_pio2+0x414>)
 8011340:	9301      	str	r3, [sp, #4]
 8011342:	2302      	movs	r3, #2
 8011344:	9300      	str	r3, [sp, #0]
 8011346:	4622      	mov	r2, r4
 8011348:	465b      	mov	r3, fp
 801134a:	4651      	mov	r1, sl
 801134c:	4648      	mov	r0, r9
 801134e:	f000 f8df 	bl	8011510 <__kernel_rem_pio2>
 8011352:	9b02      	ldr	r3, [sp, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	4683      	mov	fp, r0
 8011358:	f6bf ae46 	bge.w	8010fe8 <__ieee754_rem_pio2+0x80>
 801135c:	e9da 2100 	ldrd	r2, r1, [sl]
 8011360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011364:	e9ca 2300 	strd	r2, r3, [sl]
 8011368:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801136c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011370:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011374:	e73a      	b.n	80111ec <__ieee754_rem_pio2+0x284>
 8011376:	bf00      	nop
 8011378:	41700000 	.word	0x41700000
 801137c:	08012860 	.word	0x08012860

08011380 <__kernel_cos>:
 8011380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011384:	ec57 6b10 	vmov	r6, r7, d0
 8011388:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801138c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011390:	ed8d 1b00 	vstr	d1, [sp]
 8011394:	da07      	bge.n	80113a6 <__kernel_cos+0x26>
 8011396:	ee10 0a10 	vmov	r0, s0
 801139a:	4639      	mov	r1, r7
 801139c:	f7ef fbec 	bl	8000b78 <__aeabi_d2iz>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	f000 8088 	beq.w	80114b6 <__kernel_cos+0x136>
 80113a6:	4632      	mov	r2, r6
 80113a8:	463b      	mov	r3, r7
 80113aa:	4630      	mov	r0, r6
 80113ac:	4639      	mov	r1, r7
 80113ae:	f7ef f933 	bl	8000618 <__aeabi_dmul>
 80113b2:	4b51      	ldr	r3, [pc, #324]	; (80114f8 <__kernel_cos+0x178>)
 80113b4:	2200      	movs	r2, #0
 80113b6:	4604      	mov	r4, r0
 80113b8:	460d      	mov	r5, r1
 80113ba:	f7ef f92d 	bl	8000618 <__aeabi_dmul>
 80113be:	a340      	add	r3, pc, #256	; (adr r3, 80114c0 <__kernel_cos+0x140>)
 80113c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c4:	4682      	mov	sl, r0
 80113c6:	468b      	mov	fp, r1
 80113c8:	4620      	mov	r0, r4
 80113ca:	4629      	mov	r1, r5
 80113cc:	f7ef f924 	bl	8000618 <__aeabi_dmul>
 80113d0:	a33d      	add	r3, pc, #244	; (adr r3, 80114c8 <__kernel_cos+0x148>)
 80113d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d6:	f7ee ff69 	bl	80002ac <__adddf3>
 80113da:	4622      	mov	r2, r4
 80113dc:	462b      	mov	r3, r5
 80113de:	f7ef f91b 	bl	8000618 <__aeabi_dmul>
 80113e2:	a33b      	add	r3, pc, #236	; (adr r3, 80114d0 <__kernel_cos+0x150>)
 80113e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e8:	f7ee ff5e 	bl	80002a8 <__aeabi_dsub>
 80113ec:	4622      	mov	r2, r4
 80113ee:	462b      	mov	r3, r5
 80113f0:	f7ef f912 	bl	8000618 <__aeabi_dmul>
 80113f4:	a338      	add	r3, pc, #224	; (adr r3, 80114d8 <__kernel_cos+0x158>)
 80113f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fa:	f7ee ff57 	bl	80002ac <__adddf3>
 80113fe:	4622      	mov	r2, r4
 8011400:	462b      	mov	r3, r5
 8011402:	f7ef f909 	bl	8000618 <__aeabi_dmul>
 8011406:	a336      	add	r3, pc, #216	; (adr r3, 80114e0 <__kernel_cos+0x160>)
 8011408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140c:	f7ee ff4c 	bl	80002a8 <__aeabi_dsub>
 8011410:	4622      	mov	r2, r4
 8011412:	462b      	mov	r3, r5
 8011414:	f7ef f900 	bl	8000618 <__aeabi_dmul>
 8011418:	a333      	add	r3, pc, #204	; (adr r3, 80114e8 <__kernel_cos+0x168>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	f7ee ff45 	bl	80002ac <__adddf3>
 8011422:	4622      	mov	r2, r4
 8011424:	462b      	mov	r3, r5
 8011426:	f7ef f8f7 	bl	8000618 <__aeabi_dmul>
 801142a:	4622      	mov	r2, r4
 801142c:	462b      	mov	r3, r5
 801142e:	f7ef f8f3 	bl	8000618 <__aeabi_dmul>
 8011432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011436:	4604      	mov	r4, r0
 8011438:	460d      	mov	r5, r1
 801143a:	4630      	mov	r0, r6
 801143c:	4639      	mov	r1, r7
 801143e:	f7ef f8eb 	bl	8000618 <__aeabi_dmul>
 8011442:	460b      	mov	r3, r1
 8011444:	4602      	mov	r2, r0
 8011446:	4629      	mov	r1, r5
 8011448:	4620      	mov	r0, r4
 801144a:	f7ee ff2d 	bl	80002a8 <__aeabi_dsub>
 801144e:	4b2b      	ldr	r3, [pc, #172]	; (80114fc <__kernel_cos+0x17c>)
 8011450:	4598      	cmp	r8, r3
 8011452:	4606      	mov	r6, r0
 8011454:	460f      	mov	r7, r1
 8011456:	dc10      	bgt.n	801147a <__kernel_cos+0xfa>
 8011458:	4602      	mov	r2, r0
 801145a:	460b      	mov	r3, r1
 801145c:	4650      	mov	r0, sl
 801145e:	4659      	mov	r1, fp
 8011460:	f7ee ff22 	bl	80002a8 <__aeabi_dsub>
 8011464:	460b      	mov	r3, r1
 8011466:	4926      	ldr	r1, [pc, #152]	; (8011500 <__kernel_cos+0x180>)
 8011468:	4602      	mov	r2, r0
 801146a:	2000      	movs	r0, #0
 801146c:	f7ee ff1c 	bl	80002a8 <__aeabi_dsub>
 8011470:	ec41 0b10 	vmov	d0, r0, r1
 8011474:	b003      	add	sp, #12
 8011476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147a:	4b22      	ldr	r3, [pc, #136]	; (8011504 <__kernel_cos+0x184>)
 801147c:	4920      	ldr	r1, [pc, #128]	; (8011500 <__kernel_cos+0x180>)
 801147e:	4598      	cmp	r8, r3
 8011480:	bfcc      	ite	gt
 8011482:	4d21      	ldrgt	r5, [pc, #132]	; (8011508 <__kernel_cos+0x188>)
 8011484:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011488:	2400      	movs	r4, #0
 801148a:	4622      	mov	r2, r4
 801148c:	462b      	mov	r3, r5
 801148e:	2000      	movs	r0, #0
 8011490:	f7ee ff0a 	bl	80002a8 <__aeabi_dsub>
 8011494:	4622      	mov	r2, r4
 8011496:	4680      	mov	r8, r0
 8011498:	4689      	mov	r9, r1
 801149a:	462b      	mov	r3, r5
 801149c:	4650      	mov	r0, sl
 801149e:	4659      	mov	r1, fp
 80114a0:	f7ee ff02 	bl	80002a8 <__aeabi_dsub>
 80114a4:	4632      	mov	r2, r6
 80114a6:	463b      	mov	r3, r7
 80114a8:	f7ee fefe 	bl	80002a8 <__aeabi_dsub>
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	4640      	mov	r0, r8
 80114b2:	4649      	mov	r1, r9
 80114b4:	e7da      	b.n	801146c <__kernel_cos+0xec>
 80114b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80114f0 <__kernel_cos+0x170>
 80114ba:	e7db      	b.n	8011474 <__kernel_cos+0xf4>
 80114bc:	f3af 8000 	nop.w
 80114c0:	be8838d4 	.word	0xbe8838d4
 80114c4:	bda8fae9 	.word	0xbda8fae9
 80114c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80114cc:	3e21ee9e 	.word	0x3e21ee9e
 80114d0:	809c52ad 	.word	0x809c52ad
 80114d4:	3e927e4f 	.word	0x3e927e4f
 80114d8:	19cb1590 	.word	0x19cb1590
 80114dc:	3efa01a0 	.word	0x3efa01a0
 80114e0:	16c15177 	.word	0x16c15177
 80114e4:	3f56c16c 	.word	0x3f56c16c
 80114e8:	5555554c 	.word	0x5555554c
 80114ec:	3fa55555 	.word	0x3fa55555
 80114f0:	00000000 	.word	0x00000000
 80114f4:	3ff00000 	.word	0x3ff00000
 80114f8:	3fe00000 	.word	0x3fe00000
 80114fc:	3fd33332 	.word	0x3fd33332
 8011500:	3ff00000 	.word	0x3ff00000
 8011504:	3fe90000 	.word	0x3fe90000
 8011508:	3fd20000 	.word	0x3fd20000
 801150c:	00000000 	.word	0x00000000

08011510 <__kernel_rem_pio2>:
 8011510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	ed2d 8b02 	vpush	{d8}
 8011518:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801151c:	f112 0f14 	cmn.w	r2, #20
 8011520:	9308      	str	r3, [sp, #32]
 8011522:	9101      	str	r1, [sp, #4]
 8011524:	4bc4      	ldr	r3, [pc, #784]	; (8011838 <__kernel_rem_pio2+0x328>)
 8011526:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011528:	900b      	str	r0, [sp, #44]	; 0x2c
 801152a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801152e:	9302      	str	r3, [sp, #8]
 8011530:	9b08      	ldr	r3, [sp, #32]
 8011532:	f103 33ff 	add.w	r3, r3, #4294967295
 8011536:	bfa8      	it	ge
 8011538:	1ed4      	subge	r4, r2, #3
 801153a:	9306      	str	r3, [sp, #24]
 801153c:	bfb2      	itee	lt
 801153e:	2400      	movlt	r4, #0
 8011540:	2318      	movge	r3, #24
 8011542:	fb94 f4f3 	sdivge	r4, r4, r3
 8011546:	f06f 0317 	mvn.w	r3, #23
 801154a:	fb04 3303 	mla	r3, r4, r3, r3
 801154e:	eb03 0a02 	add.w	sl, r3, r2
 8011552:	9b02      	ldr	r3, [sp, #8]
 8011554:	9a06      	ldr	r2, [sp, #24]
 8011556:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011828 <__kernel_rem_pio2+0x318>
 801155a:	eb03 0802 	add.w	r8, r3, r2
 801155e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011560:	1aa7      	subs	r7, r4, r2
 8011562:	ae22      	add	r6, sp, #136	; 0x88
 8011564:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011568:	2500      	movs	r5, #0
 801156a:	4545      	cmp	r5, r8
 801156c:	dd13      	ble.n	8011596 <__kernel_rem_pio2+0x86>
 801156e:	9b08      	ldr	r3, [sp, #32]
 8011570:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011828 <__kernel_rem_pio2+0x318>
 8011574:	aa22      	add	r2, sp, #136	; 0x88
 8011576:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801157a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801157e:	f04f 0800 	mov.w	r8, #0
 8011582:	9b02      	ldr	r3, [sp, #8]
 8011584:	4598      	cmp	r8, r3
 8011586:	dc2f      	bgt.n	80115e8 <__kernel_rem_pio2+0xd8>
 8011588:	ed8d 8b04 	vstr	d8, [sp, #16]
 801158c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011590:	462f      	mov	r7, r5
 8011592:	2600      	movs	r6, #0
 8011594:	e01b      	b.n	80115ce <__kernel_rem_pio2+0xbe>
 8011596:	42ef      	cmn	r7, r5
 8011598:	d407      	bmi.n	80115aa <__kernel_rem_pio2+0x9a>
 801159a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801159e:	f7ee ffd1 	bl	8000544 <__aeabi_i2d>
 80115a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80115a6:	3501      	adds	r5, #1
 80115a8:	e7df      	b.n	801156a <__kernel_rem_pio2+0x5a>
 80115aa:	ec51 0b18 	vmov	r0, r1, d8
 80115ae:	e7f8      	b.n	80115a2 <__kernel_rem_pio2+0x92>
 80115b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80115b8:	f7ef f82e 	bl	8000618 <__aeabi_dmul>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115c4:	f7ee fe72 	bl	80002ac <__adddf3>
 80115c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115cc:	3601      	adds	r6, #1
 80115ce:	9b06      	ldr	r3, [sp, #24]
 80115d0:	429e      	cmp	r6, r3
 80115d2:	f1a7 0708 	sub.w	r7, r7, #8
 80115d6:	ddeb      	ble.n	80115b0 <__kernel_rem_pio2+0xa0>
 80115d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80115dc:	f108 0801 	add.w	r8, r8, #1
 80115e0:	ecab 7b02 	vstmia	fp!, {d7}
 80115e4:	3508      	adds	r5, #8
 80115e6:	e7cc      	b.n	8011582 <__kernel_rem_pio2+0x72>
 80115e8:	9b02      	ldr	r3, [sp, #8]
 80115ea:	aa0e      	add	r2, sp, #56	; 0x38
 80115ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115f0:	930d      	str	r3, [sp, #52]	; 0x34
 80115f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80115f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80115f8:	9c02      	ldr	r4, [sp, #8]
 80115fa:	930c      	str	r3, [sp, #48]	; 0x30
 80115fc:	00e3      	lsls	r3, r4, #3
 80115fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011600:	ab9a      	add	r3, sp, #616	; 0x268
 8011602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011606:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801160a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801160e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011610:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011614:	46c3      	mov	fp, r8
 8011616:	46a1      	mov	r9, r4
 8011618:	f1b9 0f00 	cmp.w	r9, #0
 801161c:	f1a5 0508 	sub.w	r5, r5, #8
 8011620:	dc77      	bgt.n	8011712 <__kernel_rem_pio2+0x202>
 8011622:	ec47 6b10 	vmov	d0, r6, r7
 8011626:	4650      	mov	r0, sl
 8011628:	f000 fc0a 	bl	8011e40 <scalbn>
 801162c:	ec57 6b10 	vmov	r6, r7, d0
 8011630:	2200      	movs	r2, #0
 8011632:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011636:	ee10 0a10 	vmov	r0, s0
 801163a:	4639      	mov	r1, r7
 801163c:	f7ee ffec 	bl	8000618 <__aeabi_dmul>
 8011640:	ec41 0b10 	vmov	d0, r0, r1
 8011644:	f000 fb7c 	bl	8011d40 <floor>
 8011648:	4b7c      	ldr	r3, [pc, #496]	; (801183c <__kernel_rem_pio2+0x32c>)
 801164a:	ec51 0b10 	vmov	r0, r1, d0
 801164e:	2200      	movs	r2, #0
 8011650:	f7ee ffe2 	bl	8000618 <__aeabi_dmul>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	4630      	mov	r0, r6
 801165a:	4639      	mov	r1, r7
 801165c:	f7ee fe24 	bl	80002a8 <__aeabi_dsub>
 8011660:	460f      	mov	r7, r1
 8011662:	4606      	mov	r6, r0
 8011664:	f7ef fa88 	bl	8000b78 <__aeabi_d2iz>
 8011668:	9004      	str	r0, [sp, #16]
 801166a:	f7ee ff6b 	bl	8000544 <__aeabi_i2d>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	4630      	mov	r0, r6
 8011674:	4639      	mov	r1, r7
 8011676:	f7ee fe17 	bl	80002a8 <__aeabi_dsub>
 801167a:	f1ba 0f00 	cmp.w	sl, #0
 801167e:	4606      	mov	r6, r0
 8011680:	460f      	mov	r7, r1
 8011682:	dd6d      	ble.n	8011760 <__kernel_rem_pio2+0x250>
 8011684:	1e62      	subs	r2, r4, #1
 8011686:	ab0e      	add	r3, sp, #56	; 0x38
 8011688:	9d04      	ldr	r5, [sp, #16]
 801168a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801168e:	f1ca 0118 	rsb	r1, sl, #24
 8011692:	fa40 f301 	asr.w	r3, r0, r1
 8011696:	441d      	add	r5, r3
 8011698:	408b      	lsls	r3, r1
 801169a:	1ac0      	subs	r0, r0, r3
 801169c:	ab0e      	add	r3, sp, #56	; 0x38
 801169e:	9504      	str	r5, [sp, #16]
 80116a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80116a4:	f1ca 0317 	rsb	r3, sl, #23
 80116a8:	fa40 fb03 	asr.w	fp, r0, r3
 80116ac:	f1bb 0f00 	cmp.w	fp, #0
 80116b0:	dd65      	ble.n	801177e <__kernel_rem_pio2+0x26e>
 80116b2:	9b04      	ldr	r3, [sp, #16]
 80116b4:	2200      	movs	r2, #0
 80116b6:	3301      	adds	r3, #1
 80116b8:	9304      	str	r3, [sp, #16]
 80116ba:	4615      	mov	r5, r2
 80116bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80116c0:	4294      	cmp	r4, r2
 80116c2:	f300 809c 	bgt.w	80117fe <__kernel_rem_pio2+0x2ee>
 80116c6:	f1ba 0f00 	cmp.w	sl, #0
 80116ca:	dd07      	ble.n	80116dc <__kernel_rem_pio2+0x1cc>
 80116cc:	f1ba 0f01 	cmp.w	sl, #1
 80116d0:	f000 80c0 	beq.w	8011854 <__kernel_rem_pio2+0x344>
 80116d4:	f1ba 0f02 	cmp.w	sl, #2
 80116d8:	f000 80c6 	beq.w	8011868 <__kernel_rem_pio2+0x358>
 80116dc:	f1bb 0f02 	cmp.w	fp, #2
 80116e0:	d14d      	bne.n	801177e <__kernel_rem_pio2+0x26e>
 80116e2:	4632      	mov	r2, r6
 80116e4:	463b      	mov	r3, r7
 80116e6:	4956      	ldr	r1, [pc, #344]	; (8011840 <__kernel_rem_pio2+0x330>)
 80116e8:	2000      	movs	r0, #0
 80116ea:	f7ee fddd 	bl	80002a8 <__aeabi_dsub>
 80116ee:	4606      	mov	r6, r0
 80116f0:	460f      	mov	r7, r1
 80116f2:	2d00      	cmp	r5, #0
 80116f4:	d043      	beq.n	801177e <__kernel_rem_pio2+0x26e>
 80116f6:	4650      	mov	r0, sl
 80116f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011830 <__kernel_rem_pio2+0x320>
 80116fc:	f000 fba0 	bl	8011e40 <scalbn>
 8011700:	4630      	mov	r0, r6
 8011702:	4639      	mov	r1, r7
 8011704:	ec53 2b10 	vmov	r2, r3, d0
 8011708:	f7ee fdce 	bl	80002a8 <__aeabi_dsub>
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	e035      	b.n	801177e <__kernel_rem_pio2+0x26e>
 8011712:	4b4c      	ldr	r3, [pc, #304]	; (8011844 <__kernel_rem_pio2+0x334>)
 8011714:	2200      	movs	r2, #0
 8011716:	4630      	mov	r0, r6
 8011718:	4639      	mov	r1, r7
 801171a:	f7ee ff7d 	bl	8000618 <__aeabi_dmul>
 801171e:	f7ef fa2b 	bl	8000b78 <__aeabi_d2iz>
 8011722:	f7ee ff0f 	bl	8000544 <__aeabi_i2d>
 8011726:	4602      	mov	r2, r0
 8011728:	460b      	mov	r3, r1
 801172a:	ec43 2b18 	vmov	d8, r2, r3
 801172e:	4b46      	ldr	r3, [pc, #280]	; (8011848 <__kernel_rem_pio2+0x338>)
 8011730:	2200      	movs	r2, #0
 8011732:	f7ee ff71 	bl	8000618 <__aeabi_dmul>
 8011736:	4602      	mov	r2, r0
 8011738:	460b      	mov	r3, r1
 801173a:	4630      	mov	r0, r6
 801173c:	4639      	mov	r1, r7
 801173e:	f7ee fdb3 	bl	80002a8 <__aeabi_dsub>
 8011742:	f7ef fa19 	bl	8000b78 <__aeabi_d2iz>
 8011746:	e9d5 2300 	ldrd	r2, r3, [r5]
 801174a:	f84b 0b04 	str.w	r0, [fp], #4
 801174e:	ec51 0b18 	vmov	r0, r1, d8
 8011752:	f7ee fdab 	bl	80002ac <__adddf3>
 8011756:	f109 39ff 	add.w	r9, r9, #4294967295
 801175a:	4606      	mov	r6, r0
 801175c:	460f      	mov	r7, r1
 801175e:	e75b      	b.n	8011618 <__kernel_rem_pio2+0x108>
 8011760:	d106      	bne.n	8011770 <__kernel_rem_pio2+0x260>
 8011762:	1e63      	subs	r3, r4, #1
 8011764:	aa0e      	add	r2, sp, #56	; 0x38
 8011766:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801176a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801176e:	e79d      	b.n	80116ac <__kernel_rem_pio2+0x19c>
 8011770:	4b36      	ldr	r3, [pc, #216]	; (801184c <__kernel_rem_pio2+0x33c>)
 8011772:	2200      	movs	r2, #0
 8011774:	f7ef f9d6 	bl	8000b24 <__aeabi_dcmpge>
 8011778:	2800      	cmp	r0, #0
 801177a:	d13d      	bne.n	80117f8 <__kernel_rem_pio2+0x2e8>
 801177c:	4683      	mov	fp, r0
 801177e:	2200      	movs	r2, #0
 8011780:	2300      	movs	r3, #0
 8011782:	4630      	mov	r0, r6
 8011784:	4639      	mov	r1, r7
 8011786:	f7ef f9af 	bl	8000ae8 <__aeabi_dcmpeq>
 801178a:	2800      	cmp	r0, #0
 801178c:	f000 80c0 	beq.w	8011910 <__kernel_rem_pio2+0x400>
 8011790:	1e65      	subs	r5, r4, #1
 8011792:	462b      	mov	r3, r5
 8011794:	2200      	movs	r2, #0
 8011796:	9902      	ldr	r1, [sp, #8]
 8011798:	428b      	cmp	r3, r1
 801179a:	da6c      	bge.n	8011876 <__kernel_rem_pio2+0x366>
 801179c:	2a00      	cmp	r2, #0
 801179e:	f000 8089 	beq.w	80118b4 <__kernel_rem_pio2+0x3a4>
 80117a2:	ab0e      	add	r3, sp, #56	; 0x38
 80117a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80117a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	f000 80ad 	beq.w	801190c <__kernel_rem_pio2+0x3fc>
 80117b2:	4650      	mov	r0, sl
 80117b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011830 <__kernel_rem_pio2+0x320>
 80117b8:	f000 fb42 	bl	8011e40 <scalbn>
 80117bc:	ab9a      	add	r3, sp, #616	; 0x268
 80117be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80117c2:	ec57 6b10 	vmov	r6, r7, d0
 80117c6:	00ec      	lsls	r4, r5, #3
 80117c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80117cc:	46aa      	mov	sl, r5
 80117ce:	f1ba 0f00 	cmp.w	sl, #0
 80117d2:	f280 80d6 	bge.w	8011982 <__kernel_rem_pio2+0x472>
 80117d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011828 <__kernel_rem_pio2+0x318>
 80117da:	462e      	mov	r6, r5
 80117dc:	2e00      	cmp	r6, #0
 80117de:	f2c0 8104 	blt.w	80119ea <__kernel_rem_pio2+0x4da>
 80117e2:	ab72      	add	r3, sp, #456	; 0x1c8
 80117e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80117e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011850 <__kernel_rem_pio2+0x340>
 80117ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80117f0:	f04f 0800 	mov.w	r8, #0
 80117f4:	1baf      	subs	r7, r5, r6
 80117f6:	e0ea      	b.n	80119ce <__kernel_rem_pio2+0x4be>
 80117f8:	f04f 0b02 	mov.w	fp, #2
 80117fc:	e759      	b.n	80116b2 <__kernel_rem_pio2+0x1a2>
 80117fe:	f8d8 3000 	ldr.w	r3, [r8]
 8011802:	b955      	cbnz	r5, 801181a <__kernel_rem_pio2+0x30a>
 8011804:	b123      	cbz	r3, 8011810 <__kernel_rem_pio2+0x300>
 8011806:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801180a:	f8c8 3000 	str.w	r3, [r8]
 801180e:	2301      	movs	r3, #1
 8011810:	3201      	adds	r2, #1
 8011812:	f108 0804 	add.w	r8, r8, #4
 8011816:	461d      	mov	r5, r3
 8011818:	e752      	b.n	80116c0 <__kernel_rem_pio2+0x1b0>
 801181a:	1acb      	subs	r3, r1, r3
 801181c:	f8c8 3000 	str.w	r3, [r8]
 8011820:	462b      	mov	r3, r5
 8011822:	e7f5      	b.n	8011810 <__kernel_rem_pio2+0x300>
 8011824:	f3af 8000 	nop.w
	...
 8011834:	3ff00000 	.word	0x3ff00000
 8011838:	080129a8 	.word	0x080129a8
 801183c:	40200000 	.word	0x40200000
 8011840:	3ff00000 	.word	0x3ff00000
 8011844:	3e700000 	.word	0x3e700000
 8011848:	41700000 	.word	0x41700000
 801184c:	3fe00000 	.word	0x3fe00000
 8011850:	08012968 	.word	0x08012968
 8011854:	1e62      	subs	r2, r4, #1
 8011856:	ab0e      	add	r3, sp, #56	; 0x38
 8011858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801185c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011860:	a90e      	add	r1, sp, #56	; 0x38
 8011862:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011866:	e739      	b.n	80116dc <__kernel_rem_pio2+0x1cc>
 8011868:	1e62      	subs	r2, r4, #1
 801186a:	ab0e      	add	r3, sp, #56	; 0x38
 801186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011870:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011874:	e7f4      	b.n	8011860 <__kernel_rem_pio2+0x350>
 8011876:	a90e      	add	r1, sp, #56	; 0x38
 8011878:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801187c:	3b01      	subs	r3, #1
 801187e:	430a      	orrs	r2, r1
 8011880:	e789      	b.n	8011796 <__kernel_rem_pio2+0x286>
 8011882:	3301      	adds	r3, #1
 8011884:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011888:	2900      	cmp	r1, #0
 801188a:	d0fa      	beq.n	8011882 <__kernel_rem_pio2+0x372>
 801188c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801188e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011892:	446a      	add	r2, sp
 8011894:	3a98      	subs	r2, #152	; 0x98
 8011896:	920a      	str	r2, [sp, #40]	; 0x28
 8011898:	9a08      	ldr	r2, [sp, #32]
 801189a:	18e3      	adds	r3, r4, r3
 801189c:	18a5      	adds	r5, r4, r2
 801189e:	aa22      	add	r2, sp, #136	; 0x88
 80118a0:	f104 0801 	add.w	r8, r4, #1
 80118a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80118a8:	9304      	str	r3, [sp, #16]
 80118aa:	9b04      	ldr	r3, [sp, #16]
 80118ac:	4543      	cmp	r3, r8
 80118ae:	da04      	bge.n	80118ba <__kernel_rem_pio2+0x3aa>
 80118b0:	461c      	mov	r4, r3
 80118b2:	e6a3      	b.n	80115fc <__kernel_rem_pio2+0xec>
 80118b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118b6:	2301      	movs	r3, #1
 80118b8:	e7e4      	b.n	8011884 <__kernel_rem_pio2+0x374>
 80118ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80118c0:	f7ee fe40 	bl	8000544 <__aeabi_i2d>
 80118c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80118c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118ca:	46ab      	mov	fp, r5
 80118cc:	461c      	mov	r4, r3
 80118ce:	f04f 0900 	mov.w	r9, #0
 80118d2:	2600      	movs	r6, #0
 80118d4:	2700      	movs	r7, #0
 80118d6:	9b06      	ldr	r3, [sp, #24]
 80118d8:	4599      	cmp	r9, r3
 80118da:	dd06      	ble.n	80118ea <__kernel_rem_pio2+0x3da>
 80118dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118de:	e8e3 6702 	strd	r6, r7, [r3], #8
 80118e2:	f108 0801 	add.w	r8, r8, #1
 80118e6:	930a      	str	r3, [sp, #40]	; 0x28
 80118e8:	e7df      	b.n	80118aa <__kernel_rem_pio2+0x39a>
 80118ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80118ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80118f2:	f7ee fe91 	bl	8000618 <__aeabi_dmul>
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	4630      	mov	r0, r6
 80118fc:	4639      	mov	r1, r7
 80118fe:	f7ee fcd5 	bl	80002ac <__adddf3>
 8011902:	f109 0901 	add.w	r9, r9, #1
 8011906:	4606      	mov	r6, r0
 8011908:	460f      	mov	r7, r1
 801190a:	e7e4      	b.n	80118d6 <__kernel_rem_pio2+0x3c6>
 801190c:	3d01      	subs	r5, #1
 801190e:	e748      	b.n	80117a2 <__kernel_rem_pio2+0x292>
 8011910:	ec47 6b10 	vmov	d0, r6, r7
 8011914:	f1ca 0000 	rsb	r0, sl, #0
 8011918:	f000 fa92 	bl	8011e40 <scalbn>
 801191c:	ec57 6b10 	vmov	r6, r7, d0
 8011920:	4ba0      	ldr	r3, [pc, #640]	; (8011ba4 <__kernel_rem_pio2+0x694>)
 8011922:	ee10 0a10 	vmov	r0, s0
 8011926:	2200      	movs	r2, #0
 8011928:	4639      	mov	r1, r7
 801192a:	f7ef f8fb 	bl	8000b24 <__aeabi_dcmpge>
 801192e:	b1f8      	cbz	r0, 8011970 <__kernel_rem_pio2+0x460>
 8011930:	4b9d      	ldr	r3, [pc, #628]	; (8011ba8 <__kernel_rem_pio2+0x698>)
 8011932:	2200      	movs	r2, #0
 8011934:	4630      	mov	r0, r6
 8011936:	4639      	mov	r1, r7
 8011938:	f7ee fe6e 	bl	8000618 <__aeabi_dmul>
 801193c:	f7ef f91c 	bl	8000b78 <__aeabi_d2iz>
 8011940:	4680      	mov	r8, r0
 8011942:	f7ee fdff 	bl	8000544 <__aeabi_i2d>
 8011946:	4b97      	ldr	r3, [pc, #604]	; (8011ba4 <__kernel_rem_pio2+0x694>)
 8011948:	2200      	movs	r2, #0
 801194a:	f7ee fe65 	bl	8000618 <__aeabi_dmul>
 801194e:	460b      	mov	r3, r1
 8011950:	4602      	mov	r2, r0
 8011952:	4639      	mov	r1, r7
 8011954:	4630      	mov	r0, r6
 8011956:	f7ee fca7 	bl	80002a8 <__aeabi_dsub>
 801195a:	f7ef f90d 	bl	8000b78 <__aeabi_d2iz>
 801195e:	1c65      	adds	r5, r4, #1
 8011960:	ab0e      	add	r3, sp, #56	; 0x38
 8011962:	f10a 0a18 	add.w	sl, sl, #24
 8011966:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801196a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801196e:	e720      	b.n	80117b2 <__kernel_rem_pio2+0x2a2>
 8011970:	4630      	mov	r0, r6
 8011972:	4639      	mov	r1, r7
 8011974:	f7ef f900 	bl	8000b78 <__aeabi_d2iz>
 8011978:	ab0e      	add	r3, sp, #56	; 0x38
 801197a:	4625      	mov	r5, r4
 801197c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011980:	e717      	b.n	80117b2 <__kernel_rem_pio2+0x2a2>
 8011982:	ab0e      	add	r3, sp, #56	; 0x38
 8011984:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011988:	f7ee fddc 	bl	8000544 <__aeabi_i2d>
 801198c:	4632      	mov	r2, r6
 801198e:	463b      	mov	r3, r7
 8011990:	f7ee fe42 	bl	8000618 <__aeabi_dmul>
 8011994:	4b84      	ldr	r3, [pc, #528]	; (8011ba8 <__kernel_rem_pio2+0x698>)
 8011996:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801199a:	2200      	movs	r2, #0
 801199c:	4630      	mov	r0, r6
 801199e:	4639      	mov	r1, r7
 80119a0:	f7ee fe3a 	bl	8000618 <__aeabi_dmul>
 80119a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119a8:	4606      	mov	r6, r0
 80119aa:	460f      	mov	r7, r1
 80119ac:	e70f      	b.n	80117ce <__kernel_rem_pio2+0x2be>
 80119ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80119b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80119b6:	f7ee fe2f 	bl	8000618 <__aeabi_dmul>
 80119ba:	4602      	mov	r2, r0
 80119bc:	460b      	mov	r3, r1
 80119be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119c2:	f7ee fc73 	bl	80002ac <__adddf3>
 80119c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80119ca:	f108 0801 	add.w	r8, r8, #1
 80119ce:	9b02      	ldr	r3, [sp, #8]
 80119d0:	4598      	cmp	r8, r3
 80119d2:	dc01      	bgt.n	80119d8 <__kernel_rem_pio2+0x4c8>
 80119d4:	45b8      	cmp	r8, r7
 80119d6:	ddea      	ble.n	80119ae <__kernel_rem_pio2+0x49e>
 80119d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80119dc:	ab4a      	add	r3, sp, #296	; 0x128
 80119de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80119e2:	ed87 7b00 	vstr	d7, [r7]
 80119e6:	3e01      	subs	r6, #1
 80119e8:	e6f8      	b.n	80117dc <__kernel_rem_pio2+0x2cc>
 80119ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	dc0b      	bgt.n	8011a08 <__kernel_rem_pio2+0x4f8>
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	dc35      	bgt.n	8011a60 <__kernel_rem_pio2+0x550>
 80119f4:	d059      	beq.n	8011aaa <__kernel_rem_pio2+0x59a>
 80119f6:	9b04      	ldr	r3, [sp, #16]
 80119f8:	f003 0007 	and.w	r0, r3, #7
 80119fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011a00:	ecbd 8b02 	vpop	{d8}
 8011a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011a0a:	2b03      	cmp	r3, #3
 8011a0c:	d1f3      	bne.n	80119f6 <__kernel_rem_pio2+0x4e6>
 8011a0e:	ab4a      	add	r3, sp, #296	; 0x128
 8011a10:	4423      	add	r3, r4
 8011a12:	9306      	str	r3, [sp, #24]
 8011a14:	461c      	mov	r4, r3
 8011a16:	469a      	mov	sl, r3
 8011a18:	9502      	str	r5, [sp, #8]
 8011a1a:	9b02      	ldr	r3, [sp, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f1aa 0a08 	sub.w	sl, sl, #8
 8011a22:	dc6b      	bgt.n	8011afc <__kernel_rem_pio2+0x5ec>
 8011a24:	46aa      	mov	sl, r5
 8011a26:	f1ba 0f01 	cmp.w	sl, #1
 8011a2a:	f1a4 0408 	sub.w	r4, r4, #8
 8011a2e:	f300 8085 	bgt.w	8011b3c <__kernel_rem_pio2+0x62c>
 8011a32:	9c06      	ldr	r4, [sp, #24]
 8011a34:	2000      	movs	r0, #0
 8011a36:	3408      	adds	r4, #8
 8011a38:	2100      	movs	r1, #0
 8011a3a:	2d01      	cmp	r5, #1
 8011a3c:	f300 809d 	bgt.w	8011b7a <__kernel_rem_pio2+0x66a>
 8011a40:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011a44:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011a48:	f1bb 0f00 	cmp.w	fp, #0
 8011a4c:	f040 809b 	bne.w	8011b86 <__kernel_rem_pio2+0x676>
 8011a50:	9b01      	ldr	r3, [sp, #4]
 8011a52:	e9c3 5600 	strd	r5, r6, [r3]
 8011a56:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011a5a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011a5e:	e7ca      	b.n	80119f6 <__kernel_rem_pio2+0x4e6>
 8011a60:	3408      	adds	r4, #8
 8011a62:	ab4a      	add	r3, sp, #296	; 0x128
 8011a64:	441c      	add	r4, r3
 8011a66:	462e      	mov	r6, r5
 8011a68:	2000      	movs	r0, #0
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	2e00      	cmp	r6, #0
 8011a6e:	da36      	bge.n	8011ade <__kernel_rem_pio2+0x5ce>
 8011a70:	f1bb 0f00 	cmp.w	fp, #0
 8011a74:	d039      	beq.n	8011aea <__kernel_rem_pio2+0x5da>
 8011a76:	4602      	mov	r2, r0
 8011a78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a7c:	9c01      	ldr	r4, [sp, #4]
 8011a7e:	e9c4 2300 	strd	r2, r3, [r4]
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011a8a:	f7ee fc0d 	bl	80002a8 <__aeabi_dsub>
 8011a8e:	ae4c      	add	r6, sp, #304	; 0x130
 8011a90:	2401      	movs	r4, #1
 8011a92:	42a5      	cmp	r5, r4
 8011a94:	da2c      	bge.n	8011af0 <__kernel_rem_pio2+0x5e0>
 8011a96:	f1bb 0f00 	cmp.w	fp, #0
 8011a9a:	d002      	beq.n	8011aa2 <__kernel_rem_pio2+0x592>
 8011a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	9b01      	ldr	r3, [sp, #4]
 8011aa4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011aa8:	e7a5      	b.n	80119f6 <__kernel_rem_pio2+0x4e6>
 8011aaa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011aae:	eb0d 0403 	add.w	r4, sp, r3
 8011ab2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	2100      	movs	r1, #0
 8011aba:	2d00      	cmp	r5, #0
 8011abc:	da09      	bge.n	8011ad2 <__kernel_rem_pio2+0x5c2>
 8011abe:	f1bb 0f00 	cmp.w	fp, #0
 8011ac2:	d002      	beq.n	8011aca <__kernel_rem_pio2+0x5ba>
 8011ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ac8:	4619      	mov	r1, r3
 8011aca:	9b01      	ldr	r3, [sp, #4]
 8011acc:	e9c3 0100 	strd	r0, r1, [r3]
 8011ad0:	e791      	b.n	80119f6 <__kernel_rem_pio2+0x4e6>
 8011ad2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011ad6:	f7ee fbe9 	bl	80002ac <__adddf3>
 8011ada:	3d01      	subs	r5, #1
 8011adc:	e7ed      	b.n	8011aba <__kernel_rem_pio2+0x5aa>
 8011ade:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011ae2:	f7ee fbe3 	bl	80002ac <__adddf3>
 8011ae6:	3e01      	subs	r6, #1
 8011ae8:	e7c0      	b.n	8011a6c <__kernel_rem_pio2+0x55c>
 8011aea:	4602      	mov	r2, r0
 8011aec:	460b      	mov	r3, r1
 8011aee:	e7c5      	b.n	8011a7c <__kernel_rem_pio2+0x56c>
 8011af0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011af4:	f7ee fbda 	bl	80002ac <__adddf3>
 8011af8:	3401      	adds	r4, #1
 8011afa:	e7ca      	b.n	8011a92 <__kernel_rem_pio2+0x582>
 8011afc:	e9da 8900 	ldrd	r8, r9, [sl]
 8011b00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011b04:	9b02      	ldr	r3, [sp, #8]
 8011b06:	3b01      	subs	r3, #1
 8011b08:	9302      	str	r3, [sp, #8]
 8011b0a:	4632      	mov	r2, r6
 8011b0c:	463b      	mov	r3, r7
 8011b0e:	4640      	mov	r0, r8
 8011b10:	4649      	mov	r1, r9
 8011b12:	f7ee fbcb 	bl	80002ac <__adddf3>
 8011b16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	4640      	mov	r0, r8
 8011b20:	4649      	mov	r1, r9
 8011b22:	f7ee fbc1 	bl	80002a8 <__aeabi_dsub>
 8011b26:	4632      	mov	r2, r6
 8011b28:	463b      	mov	r3, r7
 8011b2a:	f7ee fbbf 	bl	80002ac <__adddf3>
 8011b2e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011b32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011b36:	ed8a 7b00 	vstr	d7, [sl]
 8011b3a:	e76e      	b.n	8011a1a <__kernel_rem_pio2+0x50a>
 8011b3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011b40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011b44:	4640      	mov	r0, r8
 8011b46:	4632      	mov	r2, r6
 8011b48:	463b      	mov	r3, r7
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	f7ee fbae 	bl	80002ac <__adddf3>
 8011b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4640      	mov	r0, r8
 8011b5a:	4649      	mov	r1, r9
 8011b5c:	f7ee fba4 	bl	80002a8 <__aeabi_dsub>
 8011b60:	4632      	mov	r2, r6
 8011b62:	463b      	mov	r3, r7
 8011b64:	f7ee fba2 	bl	80002ac <__adddf3>
 8011b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011b70:	ed84 7b00 	vstr	d7, [r4]
 8011b74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b78:	e755      	b.n	8011a26 <__kernel_rem_pio2+0x516>
 8011b7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011b7e:	f7ee fb95 	bl	80002ac <__adddf3>
 8011b82:	3d01      	subs	r5, #1
 8011b84:	e759      	b.n	8011a3a <__kernel_rem_pio2+0x52a>
 8011b86:	9b01      	ldr	r3, [sp, #4]
 8011b88:	9a01      	ldr	r2, [sp, #4]
 8011b8a:	601d      	str	r5, [r3, #0]
 8011b8c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011b90:	605c      	str	r4, [r3, #4]
 8011b92:	609f      	str	r7, [r3, #8]
 8011b94:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011b98:	60d3      	str	r3, [r2, #12]
 8011b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b9e:	6110      	str	r0, [r2, #16]
 8011ba0:	6153      	str	r3, [r2, #20]
 8011ba2:	e728      	b.n	80119f6 <__kernel_rem_pio2+0x4e6>
 8011ba4:	41700000 	.word	0x41700000
 8011ba8:	3e700000 	.word	0x3e700000
 8011bac:	00000000 	.word	0x00000000

08011bb0 <__kernel_sin>:
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	ed2d 8b04 	vpush	{d8-d9}
 8011bb8:	eeb0 8a41 	vmov.f32	s16, s2
 8011bbc:	eef0 8a61 	vmov.f32	s17, s3
 8011bc0:	ec55 4b10 	vmov	r4, r5, d0
 8011bc4:	b083      	sub	sp, #12
 8011bc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011bca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011bce:	9001      	str	r0, [sp, #4]
 8011bd0:	da06      	bge.n	8011be0 <__kernel_sin+0x30>
 8011bd2:	ee10 0a10 	vmov	r0, s0
 8011bd6:	4629      	mov	r1, r5
 8011bd8:	f7ee ffce 	bl	8000b78 <__aeabi_d2iz>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d051      	beq.n	8011c84 <__kernel_sin+0xd4>
 8011be0:	4622      	mov	r2, r4
 8011be2:	462b      	mov	r3, r5
 8011be4:	4620      	mov	r0, r4
 8011be6:	4629      	mov	r1, r5
 8011be8:	f7ee fd16 	bl	8000618 <__aeabi_dmul>
 8011bec:	4682      	mov	sl, r0
 8011bee:	468b      	mov	fp, r1
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	f7ee fd0e 	bl	8000618 <__aeabi_dmul>
 8011bfc:	a341      	add	r3, pc, #260	; (adr r3, 8011d04 <__kernel_sin+0x154>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	4680      	mov	r8, r0
 8011c04:	4689      	mov	r9, r1
 8011c06:	4650      	mov	r0, sl
 8011c08:	4659      	mov	r1, fp
 8011c0a:	f7ee fd05 	bl	8000618 <__aeabi_dmul>
 8011c0e:	a33f      	add	r3, pc, #252	; (adr r3, 8011d0c <__kernel_sin+0x15c>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	f7ee fb48 	bl	80002a8 <__aeabi_dsub>
 8011c18:	4652      	mov	r2, sl
 8011c1a:	465b      	mov	r3, fp
 8011c1c:	f7ee fcfc 	bl	8000618 <__aeabi_dmul>
 8011c20:	a33c      	add	r3, pc, #240	; (adr r3, 8011d14 <__kernel_sin+0x164>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fb41 	bl	80002ac <__adddf3>
 8011c2a:	4652      	mov	r2, sl
 8011c2c:	465b      	mov	r3, fp
 8011c2e:	f7ee fcf3 	bl	8000618 <__aeabi_dmul>
 8011c32:	a33a      	add	r3, pc, #232	; (adr r3, 8011d1c <__kernel_sin+0x16c>)
 8011c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c38:	f7ee fb36 	bl	80002a8 <__aeabi_dsub>
 8011c3c:	4652      	mov	r2, sl
 8011c3e:	465b      	mov	r3, fp
 8011c40:	f7ee fcea 	bl	8000618 <__aeabi_dmul>
 8011c44:	a337      	add	r3, pc, #220	; (adr r3, 8011d24 <__kernel_sin+0x174>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	f7ee fb2f 	bl	80002ac <__adddf3>
 8011c4e:	9b01      	ldr	r3, [sp, #4]
 8011c50:	4606      	mov	r6, r0
 8011c52:	460f      	mov	r7, r1
 8011c54:	b9eb      	cbnz	r3, 8011c92 <__kernel_sin+0xe2>
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	4650      	mov	r0, sl
 8011c5c:	4659      	mov	r1, fp
 8011c5e:	f7ee fcdb 	bl	8000618 <__aeabi_dmul>
 8011c62:	a325      	add	r3, pc, #148	; (adr r3, 8011cf8 <__kernel_sin+0x148>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	f7ee fb1e 	bl	80002a8 <__aeabi_dsub>
 8011c6c:	4642      	mov	r2, r8
 8011c6e:	464b      	mov	r3, r9
 8011c70:	f7ee fcd2 	bl	8000618 <__aeabi_dmul>
 8011c74:	4602      	mov	r2, r0
 8011c76:	460b      	mov	r3, r1
 8011c78:	4620      	mov	r0, r4
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	f7ee fb16 	bl	80002ac <__adddf3>
 8011c80:	4604      	mov	r4, r0
 8011c82:	460d      	mov	r5, r1
 8011c84:	ec45 4b10 	vmov	d0, r4, r5
 8011c88:	b003      	add	sp, #12
 8011c8a:	ecbd 8b04 	vpop	{d8-d9}
 8011c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c92:	4b1b      	ldr	r3, [pc, #108]	; (8011d00 <__kernel_sin+0x150>)
 8011c94:	ec51 0b18 	vmov	r0, r1, d8
 8011c98:	2200      	movs	r2, #0
 8011c9a:	f7ee fcbd 	bl	8000618 <__aeabi_dmul>
 8011c9e:	4632      	mov	r2, r6
 8011ca0:	ec41 0b19 	vmov	d9, r0, r1
 8011ca4:	463b      	mov	r3, r7
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	4649      	mov	r1, r9
 8011caa:	f7ee fcb5 	bl	8000618 <__aeabi_dmul>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	ec51 0b19 	vmov	r0, r1, d9
 8011cb6:	f7ee faf7 	bl	80002a8 <__aeabi_dsub>
 8011cba:	4652      	mov	r2, sl
 8011cbc:	465b      	mov	r3, fp
 8011cbe:	f7ee fcab 	bl	8000618 <__aeabi_dmul>
 8011cc2:	ec53 2b18 	vmov	r2, r3, d8
 8011cc6:	f7ee faef 	bl	80002a8 <__aeabi_dsub>
 8011cca:	a30b      	add	r3, pc, #44	; (adr r3, 8011cf8 <__kernel_sin+0x148>)
 8011ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd0:	4606      	mov	r6, r0
 8011cd2:	460f      	mov	r7, r1
 8011cd4:	4640      	mov	r0, r8
 8011cd6:	4649      	mov	r1, r9
 8011cd8:	f7ee fc9e 	bl	8000618 <__aeabi_dmul>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee fae2 	bl	80002ac <__adddf3>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	4620      	mov	r0, r4
 8011cee:	4629      	mov	r1, r5
 8011cf0:	f7ee fada 	bl	80002a8 <__aeabi_dsub>
 8011cf4:	e7c4      	b.n	8011c80 <__kernel_sin+0xd0>
 8011cf6:	bf00      	nop
 8011cf8:	55555549 	.word	0x55555549
 8011cfc:	3fc55555 	.word	0x3fc55555
 8011d00:	3fe00000 	.word	0x3fe00000
 8011d04:	5acfd57c 	.word	0x5acfd57c
 8011d08:	3de5d93a 	.word	0x3de5d93a
 8011d0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011d10:	3e5ae5e6 	.word	0x3e5ae5e6
 8011d14:	57b1fe7d 	.word	0x57b1fe7d
 8011d18:	3ec71de3 	.word	0x3ec71de3
 8011d1c:	19c161d5 	.word	0x19c161d5
 8011d20:	3f2a01a0 	.word	0x3f2a01a0
 8011d24:	1110f8a6 	.word	0x1110f8a6
 8011d28:	3f811111 	.word	0x3f811111

08011d2c <fabs>:
 8011d2c:	ec51 0b10 	vmov	r0, r1, d0
 8011d30:	ee10 2a10 	vmov	r2, s0
 8011d34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d38:	ec43 2b10 	vmov	d0, r2, r3
 8011d3c:	4770      	bx	lr
	...

08011d40 <floor>:
 8011d40:	ec51 0b10 	vmov	r0, r1, d0
 8011d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011d4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011d50:	2e13      	cmp	r6, #19
 8011d52:	ee10 5a10 	vmov	r5, s0
 8011d56:	ee10 8a10 	vmov	r8, s0
 8011d5a:	460c      	mov	r4, r1
 8011d5c:	dc32      	bgt.n	8011dc4 <floor+0x84>
 8011d5e:	2e00      	cmp	r6, #0
 8011d60:	da14      	bge.n	8011d8c <floor+0x4c>
 8011d62:	a333      	add	r3, pc, #204	; (adr r3, 8011e30 <floor+0xf0>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	f7ee faa0 	bl	80002ac <__adddf3>
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f7ee fee2 	bl	8000b38 <__aeabi_dcmpgt>
 8011d74:	b138      	cbz	r0, 8011d86 <floor+0x46>
 8011d76:	2c00      	cmp	r4, #0
 8011d78:	da57      	bge.n	8011e2a <floor+0xea>
 8011d7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d7e:	431d      	orrs	r5, r3
 8011d80:	d001      	beq.n	8011d86 <floor+0x46>
 8011d82:	4c2d      	ldr	r4, [pc, #180]	; (8011e38 <floor+0xf8>)
 8011d84:	2500      	movs	r5, #0
 8011d86:	4621      	mov	r1, r4
 8011d88:	4628      	mov	r0, r5
 8011d8a:	e025      	b.n	8011dd8 <floor+0x98>
 8011d8c:	4f2b      	ldr	r7, [pc, #172]	; (8011e3c <floor+0xfc>)
 8011d8e:	4137      	asrs	r7, r6
 8011d90:	ea01 0307 	and.w	r3, r1, r7
 8011d94:	4303      	orrs	r3, r0
 8011d96:	d01f      	beq.n	8011dd8 <floor+0x98>
 8011d98:	a325      	add	r3, pc, #148	; (adr r3, 8011e30 <floor+0xf0>)
 8011d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9e:	f7ee fa85 	bl	80002ac <__adddf3>
 8011da2:	2200      	movs	r2, #0
 8011da4:	2300      	movs	r3, #0
 8011da6:	f7ee fec7 	bl	8000b38 <__aeabi_dcmpgt>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d0eb      	beq.n	8011d86 <floor+0x46>
 8011dae:	2c00      	cmp	r4, #0
 8011db0:	bfbe      	ittt	lt
 8011db2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011db6:	fa43 f606 	asrlt.w	r6, r3, r6
 8011dba:	19a4      	addlt	r4, r4, r6
 8011dbc:	ea24 0407 	bic.w	r4, r4, r7
 8011dc0:	2500      	movs	r5, #0
 8011dc2:	e7e0      	b.n	8011d86 <floor+0x46>
 8011dc4:	2e33      	cmp	r6, #51	; 0x33
 8011dc6:	dd0b      	ble.n	8011de0 <floor+0xa0>
 8011dc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011dcc:	d104      	bne.n	8011dd8 <floor+0x98>
 8011dce:	ee10 2a10 	vmov	r2, s0
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	f7ee fa6a 	bl	80002ac <__adddf3>
 8011dd8:	ec41 0b10 	vmov	d0, r0, r1
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011de4:	f04f 33ff 	mov.w	r3, #4294967295
 8011de8:	fa23 f707 	lsr.w	r7, r3, r7
 8011dec:	4207      	tst	r7, r0
 8011dee:	d0f3      	beq.n	8011dd8 <floor+0x98>
 8011df0:	a30f      	add	r3, pc, #60	; (adr r3, 8011e30 <floor+0xf0>)
 8011df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df6:	f7ee fa59 	bl	80002ac <__adddf3>
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f7ee fe9b 	bl	8000b38 <__aeabi_dcmpgt>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d0bf      	beq.n	8011d86 <floor+0x46>
 8011e06:	2c00      	cmp	r4, #0
 8011e08:	da02      	bge.n	8011e10 <floor+0xd0>
 8011e0a:	2e14      	cmp	r6, #20
 8011e0c:	d103      	bne.n	8011e16 <floor+0xd6>
 8011e0e:	3401      	adds	r4, #1
 8011e10:	ea25 0507 	bic.w	r5, r5, r7
 8011e14:	e7b7      	b.n	8011d86 <floor+0x46>
 8011e16:	2301      	movs	r3, #1
 8011e18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011e1c:	fa03 f606 	lsl.w	r6, r3, r6
 8011e20:	4435      	add	r5, r6
 8011e22:	4545      	cmp	r5, r8
 8011e24:	bf38      	it	cc
 8011e26:	18e4      	addcc	r4, r4, r3
 8011e28:	e7f2      	b.n	8011e10 <floor+0xd0>
 8011e2a:	2500      	movs	r5, #0
 8011e2c:	462c      	mov	r4, r5
 8011e2e:	e7aa      	b.n	8011d86 <floor+0x46>
 8011e30:	8800759c 	.word	0x8800759c
 8011e34:	7e37e43c 	.word	0x7e37e43c
 8011e38:	bff00000 	.word	0xbff00000
 8011e3c:	000fffff 	.word	0x000fffff

08011e40 <scalbn>:
 8011e40:	b570      	push	{r4, r5, r6, lr}
 8011e42:	ec55 4b10 	vmov	r4, r5, d0
 8011e46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	462b      	mov	r3, r5
 8011e4e:	b99a      	cbnz	r2, 8011e78 <scalbn+0x38>
 8011e50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e54:	4323      	orrs	r3, r4
 8011e56:	d036      	beq.n	8011ec6 <scalbn+0x86>
 8011e58:	4b39      	ldr	r3, [pc, #228]	; (8011f40 <scalbn+0x100>)
 8011e5a:	4629      	mov	r1, r5
 8011e5c:	ee10 0a10 	vmov	r0, s0
 8011e60:	2200      	movs	r2, #0
 8011e62:	f7ee fbd9 	bl	8000618 <__aeabi_dmul>
 8011e66:	4b37      	ldr	r3, [pc, #220]	; (8011f44 <scalbn+0x104>)
 8011e68:	429e      	cmp	r6, r3
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	460d      	mov	r5, r1
 8011e6e:	da10      	bge.n	8011e92 <scalbn+0x52>
 8011e70:	a32b      	add	r3, pc, #172	; (adr r3, 8011f20 <scalbn+0xe0>)
 8011e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e76:	e03a      	b.n	8011eee <scalbn+0xae>
 8011e78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011e7c:	428a      	cmp	r2, r1
 8011e7e:	d10c      	bne.n	8011e9a <scalbn+0x5a>
 8011e80:	ee10 2a10 	vmov	r2, s0
 8011e84:	4620      	mov	r0, r4
 8011e86:	4629      	mov	r1, r5
 8011e88:	f7ee fa10 	bl	80002ac <__adddf3>
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	460d      	mov	r5, r1
 8011e90:	e019      	b.n	8011ec6 <scalbn+0x86>
 8011e92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e96:	460b      	mov	r3, r1
 8011e98:	3a36      	subs	r2, #54	; 0x36
 8011e9a:	4432      	add	r2, r6
 8011e9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011ea0:	428a      	cmp	r2, r1
 8011ea2:	dd08      	ble.n	8011eb6 <scalbn+0x76>
 8011ea4:	2d00      	cmp	r5, #0
 8011ea6:	a120      	add	r1, pc, #128	; (adr r1, 8011f28 <scalbn+0xe8>)
 8011ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011eac:	da1c      	bge.n	8011ee8 <scalbn+0xa8>
 8011eae:	a120      	add	r1, pc, #128	; (adr r1, 8011f30 <scalbn+0xf0>)
 8011eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011eb4:	e018      	b.n	8011ee8 <scalbn+0xa8>
 8011eb6:	2a00      	cmp	r2, #0
 8011eb8:	dd08      	ble.n	8011ecc <scalbn+0x8c>
 8011eba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ebe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ec2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011ec6:	ec45 4b10 	vmov	d0, r4, r5
 8011eca:	bd70      	pop	{r4, r5, r6, pc}
 8011ecc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011ed0:	da19      	bge.n	8011f06 <scalbn+0xc6>
 8011ed2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011ed6:	429e      	cmp	r6, r3
 8011ed8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011edc:	dd0a      	ble.n	8011ef4 <scalbn+0xb4>
 8011ede:	a112      	add	r1, pc, #72	; (adr r1, 8011f28 <scalbn+0xe8>)
 8011ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1e2      	bne.n	8011eae <scalbn+0x6e>
 8011ee8:	a30f      	add	r3, pc, #60	; (adr r3, 8011f28 <scalbn+0xe8>)
 8011eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eee:	f7ee fb93 	bl	8000618 <__aeabi_dmul>
 8011ef2:	e7cb      	b.n	8011e8c <scalbn+0x4c>
 8011ef4:	a10a      	add	r1, pc, #40	; (adr r1, 8011f20 <scalbn+0xe0>)
 8011ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d0b8      	beq.n	8011e70 <scalbn+0x30>
 8011efe:	a10e      	add	r1, pc, #56	; (adr r1, 8011f38 <scalbn+0xf8>)
 8011f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f04:	e7b4      	b.n	8011e70 <scalbn+0x30>
 8011f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f0a:	3236      	adds	r2, #54	; 0x36
 8011f0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011f14:	4620      	mov	r0, r4
 8011f16:	4b0c      	ldr	r3, [pc, #48]	; (8011f48 <scalbn+0x108>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	e7e8      	b.n	8011eee <scalbn+0xae>
 8011f1c:	f3af 8000 	nop.w
 8011f20:	c2f8f359 	.word	0xc2f8f359
 8011f24:	01a56e1f 	.word	0x01a56e1f
 8011f28:	8800759c 	.word	0x8800759c
 8011f2c:	7e37e43c 	.word	0x7e37e43c
 8011f30:	8800759c 	.word	0x8800759c
 8011f34:	fe37e43c 	.word	0xfe37e43c
 8011f38:	c2f8f359 	.word	0xc2f8f359
 8011f3c:	81a56e1f 	.word	0x81a56e1f
 8011f40:	43500000 	.word	0x43500000
 8011f44:	ffff3cb0 	.word	0xffff3cb0
 8011f48:	3c900000 	.word	0x3c900000

08011f4c <_init>:
 8011f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4e:	bf00      	nop
 8011f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f52:	bc08      	pop	{r3}
 8011f54:	469e      	mov	lr, r3
 8011f56:	4770      	bx	lr

08011f58 <_fini>:
 8011f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5a:	bf00      	nop
 8011f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f5e:	bc08      	pop	{r3}
 8011f60:	469e      	mov	lr, r3
 8011f62:	4770      	bx	lr
