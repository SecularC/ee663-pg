
Secular_PG-TokenRing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08011440  08011440  00021440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011da8  08011da8  000303e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011da8  08011da8  00021da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011db0  08011db0  000303e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011db0  08011db0  00021db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011db4  08011db4  00021db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e8  20000000  08011db8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012cf4  200003e8  080121a0  000303e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200130dc  080121a0  000330dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024431  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d38  00000000  00000000  00054849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00059588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  0005b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de13  00000000  00000000  0005cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022bf9  00000000  00000000  0008ab53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113cf7  00000000  00000000  000ad74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009310  00000000  00000000  001c1494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003e8 	.word	0x200003e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011424 	.word	0x08011424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ec 	.word	0x200003ec
 80001cc:	08011424 	.word	0x08011424

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <app_init>:
extern int msgSize;
QueueHandle_t cmd_queue;


void app_init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	//display beginning message
	msgSize = sprintf((char *)userMsg, "\r\nStart program.\r\n");
 800101c:	490d      	ldr	r1, [pc, #52]	; (8001054 <app_init+0x3c>)
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <app_init+0x40>)
 8001020:	f00b faae 	bl	800c580 <siprintf>
 8001024:	4603      	mov	r3, r0
 8001026:	4a0d      	ldr	r2, [pc, #52]	; (800105c <app_init+0x44>)
 8001028:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, userMsg, msgSize);
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <app_init+0x44>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	4909      	ldr	r1, [pc, #36]	; (8001058 <app_init+0x40>)
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <app_init+0x48>)
 8001034:	f001 feb2 	bl	8002d9c <USART_Write>
	receive_task_init();
 8001038:	f001 f82a 	bl	8002090 <receive_task_init>
	channel_task_init();
 800103c:	f000 f814 	bl	8001068 <channel_task_init>
	cmd_queue = xQueueCreate(99, sizeof(COMMAND_c));
 8001040:	2200      	movs	r2, #0
 8001042:	211c      	movs	r1, #28
 8001044:	2063      	movs	r0, #99	; 0x63
 8001046:	f008 f9f1 	bl	800942c <xQueueGenericCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <app_init+0x4c>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	08011440 	.word	0x08011440
 8001058:	2000b898 	.word	0x2000b898
 800105c:	2000b960 	.word	0x2000b960
 8001060:	40004400 	.word	0x40004400
 8001064:	20000404 	.word	0x20000404

08001068 <channel_task_init>:
};

static void channel_task(void *params);

//creates task to take in gen commands
int channel_task_init(){
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af02      	add	r7, sp, #8
	//create task
	BaseType_t err = xTaskCreate(channel_task, "Channel_Task", 1024, (void *) pc_ch, 2, NULL);
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <channel_task_init+0x3c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	490a      	ldr	r1, [pc, #40]	; (80010a8 <channel_task_init+0x40>)
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <channel_task_init+0x44>)
 8001082:	f008 fd96 	bl	8009bb2 <xTaskCreate>
 8001086:	6078      	str	r0, [r7, #4]
	assert(err == pdPASS);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <channel_task_init+0x32>
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <channel_task_init+0x48>)
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <channel_task_init+0x4c>)
 8001092:	2137      	movs	r1, #55	; 0x37
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <channel_task_init+0x50>)
 8001096:	f00a f821 	bl	800b0dc <__assert_func>
	return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	08011468 	.word	0x08011468
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	08011478 	.word	0x08011478
 80010b4:	08011680 	.word	0x08011680
 80010b8:	08011488 	.word	0x08011488

080010bc <channel_task>:
static void channel_task(void* params){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	; 0x40
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	6078      	str	r0, [r7, #4]
	COMMAND_c * rec_cmd; //pointer to received command
	int channel_sel; //variable to hold selected DAC channel
	uint32_t req_freq; //variable for required frequency of waveform
	uint32_t req_freq_div; //variable for required ARR value
	int noise_bits; //number of noise bits to unmask
	uint16_t prescaler = 0; //prescaler value that the timers will use
 80010c4:	2300      	movs	r3, #0
 80010c6:	867b      	strh	r3, [r7, #50]	; 0x32
	char gen_cmd[] = "gen\0";
 80010c8:	4a96      	ldr	r2, [pc, #600]	; (8001324 <channel_task+0x268>)
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d2:	6018      	str	r0, [r3, #0]
 80010d4:	3304      	adds	r3, #4
 80010d6:	7019      	strb	r1, [r3, #0]
	char cap_cmd[] = "cap\0";
 80010d8:	4a93      	ldr	r2, [pc, #588]	; (8001328 <channel_task+0x26c>)
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e2:	6018      	str	r0, [r3, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	7019      	strb	r1, [r3, #0]
	while(1)
	{
		if(uxQueueMessagesWaiting(cmd_queue))
 80010e8:	4b90      	ldr	r3, [pc, #576]	; (800132c <channel_task+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 fbd5 	bl	800989c <uxQueueMessagesWaiting>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 81ac 	beq.w	8001452 <channel_task+0x396>
		{
			//receive pointer to command struct
			BaseType_t rec_error = xQueueReceive(cmd_queue, &rec_cmd, 0);
 80010fa:	4b8c      	ldr	r3, [pc, #560]	; (800132c <channel_task+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f107 011c 	add.w	r1, r7, #28
 8001102:	2200      	movs	r2, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fae9 	bl	80096dc <xQueueReceive>
 800110a:	62f8      	str	r0, [r7, #44]	; 0x2c
			assert(rec_error == pdPASS);
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	2b01      	cmp	r3, #1
 8001110:	d005      	beq.n	800111e <channel_task+0x62>
 8001112:	4b87      	ldr	r3, [pc, #540]	; (8001330 <channel_task+0x274>)
 8001114:	4a87      	ldr	r2, [pc, #540]	; (8001334 <channel_task+0x278>)
 8001116:	2149      	movs	r1, #73	; 0x49
 8001118:	4887      	ldr	r0, [pc, #540]	; (8001338 <channel_task+0x27c>)
 800111a:	f009 ffdf 	bl	800b0dc <__assert_func>
			if(strcmp((char *) rec_cmd->name, gen_cmd) == 0)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	461a      	mov	r2, r3
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f7ff f851 	bl	80001d0 <strcmp>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 8174 	bne.w	800141e <channel_task+0x362>
			{
				channel_sel = rec_cmd->channel;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
				noise_bits = rec_cmd->noise;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
				TIM2->PSC = prescaler;
 8001142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001146:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001148:	6293      	str	r3, [r2, #40]	; 0x28
				TIM5->PSC = prescaler;
 800114a:	4a7c      	ldr	r2, [pc, #496]	; (800133c <channel_task+0x280>)
 800114c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800114e:	6293      	str	r3, [r2, #40]	; 0x28
				if(rec_cmd->freq == 0)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	edd3 7a04 	vldr	s15, [r3, #16]
 8001156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d108      	bne.n	8001172 <channel_task+0xb6>
				{
					//generate DC signal
					generate_DC(channel_sel, rec_cmd->dac_minv, rec_cmd->noise);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	8a99      	ldrh	r1, [r3, #20]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	461a      	mov	r2, r3
 800116a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800116c:	f000 f98a 	bl	8001484 <generate_DC>
 8001170:	e06b      	b.n	800124a <channel_task+0x18e>
				} else{
					//calculate register values to achieve correct frequency
					req_freq = rec_cmd->freq * LUT_SIZE;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	edd3 7a04 	vldr	s15, [r3, #16]
 8001178:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001340 <channel_task+0x284>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001184:	ee17 3a90 	vmov	r3, s15
 8001188:	623b      	str	r3, [r7, #32]
					req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 800118a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800118c:	3301      	adds	r3, #1
 800118e:	4a6d      	ldr	r2, [pc, #436]	; (8001344 <channel_task+0x288>)
 8001190:	fb92 f3f3 	sdiv	r3, r2, r3
 8001194:	461a      	mov	r2, r3
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	637b      	str	r3, [r7, #52]	; 0x34


					//switch statement to generate the selected waveform
					switch(rec_cmd->type)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	7b1b      	ldrb	r3, [r3, #12]
 80011a2:	3b61      	subs	r3, #97	; 0x61
 80011a4:	2b13      	cmp	r3, #19
 80011a6:	d850      	bhi.n	800124a <channel_task+0x18e>
 80011a8:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <channel_task+0xf4>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	0800123d 	.word	0x0800123d
 80011b4:	0800124b 	.word	0x0800124b
 80011b8:	0800124b 	.word	0x0800124b
 80011bc:	0800124b 	.word	0x0800124b
 80011c0:	0800124b 	.word	0x0800124b
 80011c4:	0800124b 	.word	0x0800124b
 80011c8:	0800124b 	.word	0x0800124b
 80011cc:	0800124b 	.word	0x0800124b
 80011d0:	0800124b 	.word	0x0800124b
 80011d4:	0800124b 	.word	0x0800124b
 80011d8:	0800124b 	.word	0x0800124b
 80011dc:	0800124b 	.word	0x0800124b
 80011e0:	0800124b 	.word	0x0800124b
 80011e4:	0800124b 	.word	0x0800124b
 80011e8:	0800124b 	.word	0x0800124b
 80011ec:	0800124b 	.word	0x0800124b
 80011f0:	0800124b 	.word	0x0800124b
 80011f4:	08001215 	.word	0x08001215
 80011f8:	08001201 	.word	0x08001201
 80011fc:	08001229 	.word	0x08001229
					{
						case 's':
							generate_sine(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	8a99      	ldrh	r1, [r3, #20]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	8ada      	ldrh	r2, [r3, #22]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800120e:	f000 f9c3 	bl	8001598 <generate_sine>
							break;
 8001212:	e01a      	b.n	800124a <channel_task+0x18e>
						case 'r':
							generate_rectangle(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	8a99      	ldrh	r1, [r3, #20]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	8ada      	ldrh	r2, [r3, #22]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001222:	f000 f965 	bl	80014f0 <generate_rectangle>
							break;
 8001226:	e010      	b.n	800124a <channel_task+0x18e>
						case 't':
							generate_triangular(channel_sel, rec_cmd->dac_minv, rec_cmd->dac_maxv, rec_cmd->noise);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	8a99      	ldrh	r1, [r3, #20]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	8ada      	ldrh	r2, [r3, #22]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001236:	f000 fa5b 	bl	80016f0 <generate_triangular>
							break;
 800123a:	e006      	b.n	800124a <channel_task+0x18e>
						case 'a':
							generate_arbitrary(channel_sel, rec_cmd->noise);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4619      	mov	r1, r3
 8001242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001244:	f000 fad2 	bl	80017ec <generate_arbitrary>
							break;
 8001248:	bf00      	nop
					}
				}
				//start the DMA for the data
				switch(channel_sel)
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	2b01      	cmp	r3, #1
 800124e:	d004      	beq.n	800125a <channel_task+0x19e>
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	2b02      	cmp	r3, #2
 8001254:	f000 8082 	beq.w	800135c <channel_task+0x2a0>
 8001258:	e0fb      	b.n	8001452 <channel_task+0x396>
				{
				case 1:
					//turn off DAC
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800125a:	2100      	movs	r1, #0
 800125c:	483a      	ldr	r0, [pc, #232]	; (8001348 <channel_task+0x28c>)
 800125e:	f003 fc13 	bl	8004a88 <HAL_DAC_Stop_DMA>
					//turn off noise
					DAC->CR &= ~(DAC_CR_MAMP1_0 + DAC_CR_MAMP1_1 + DAC_CR_MAMP1_2 + DAC_CR_MAMP1_3);
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <channel_task+0x290>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a39      	ldr	r2, [pc, #228]	; (800134c <channel_task+0x290>)
 8001268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800126c:	6013      	str	r3, [r2, #0]
					DAC->CR &= ~DAC_CR_WAVE1_0;
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <channel_task+0x290>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a36      	ldr	r2, [pc, #216]	; (800134c <channel_task+0x290>)
 8001274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001278:	6013      	str	r3, [r2, #0]
					//if there is noise bits, enable noise generator and unmask that number of bits
					if(noise_bits > 0)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	2b00      	cmp	r3, #0
 800127e:	dd0d      	ble.n	800129c <channel_task+0x1e0>
					{
						DAC->CR |= DAC_CR_WAVE1_0;
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <channel_task+0x290>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <channel_task+0x290>)
 8001286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128a:	6013      	str	r3, [r2, #0]
						DAC->CR |= (noise_bits << DAC_CR_MAMP1_Pos);
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <channel_task+0x290>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001292:	0212      	lsls	r2, r2, #8
 8001294:	4611      	mov	r1, r2
 8001296:	4a2d      	ldr	r2, [pc, #180]	; (800134c <channel_task+0x290>)
 8001298:	430b      	orrs	r3, r1
 800129a:	6013      	str	r3, [r2, #0]
					}
					//start timer 2 and DMA for channel 1
					if(rec_cmd->type == 'c')
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	2b63      	cmp	r3, #99	; 0x63
 80012a2:	d125      	bne.n	80012f0 <channel_task+0x234>
					{
						req_freq = 10000; //put entire buffer into DAC in 2 seconds (20k/2 = 10kHz)
 80012a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80012a8:	623b      	str	r3, [r7, #32]
						req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 80012aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a25      	ldr	r2, [pc, #148]	; (8001344 <channel_task+0x288>)
 80012b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
						TIM2->ARR = req_freq_div;
 80012be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c4:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM2->EGR |= TIM_EGR_UG;
 80012c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim2);
 80012d6:	481e      	ldr	r0, [pc, #120]	; (8001350 <channel_task+0x294>)
 80012d8:	f005 fe34 	bl	8006f44 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)adc_LUT_1, ADC_LUT_SIZE, DAC_ALIGN_12B_R);
 80012dc:	2300      	movs	r3, #0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <channel_task+0x298>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <channel_task+0x28c>)
 80012ea:	f003 fb01 	bl	80048f0 <HAL_DAC_Start_DMA>
						TIM2->ARR = req_freq_div;
						TIM2->EGR |= TIM_EGR_UG;
						HAL_TIM_Base_Start(&htim2);
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_LUT_1, LUT_SIZE , DAC_ALIGN_12B_R);
					}
					break;
 80012ee:	e0b0      	b.n	8001452 <channel_task+0x396>
						TIM2->ARR = req_freq_div;
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f6:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM2->EGR |= TIM_EGR_UG;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim2);
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <channel_task+0x294>)
 800130a:	f005 fe1b 	bl	8006f44 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t *)dac_LUT_1, LUT_SIZE , DAC_ALIGN_12B_R);
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <channel_task+0x29c>)
 8001318:	2100      	movs	r1, #0
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <channel_task+0x28c>)
 800131c:	f003 fae8 	bl	80048f0 <HAL_DAC_Start_DMA>
					break;
 8001320:	e097      	b.n	8001452 <channel_task+0x396>
 8001322:	bf00      	nop
 8001324:	080114b8 	.word	0x080114b8
 8001328:	080114c0 	.word	0x080114c0
 800132c:	20000404 	.word	0x20000404
 8001330:	080114a4 	.word	0x080114a4
 8001334:	08011694 	.word	0x08011694
 8001338:	08011488 	.word	0x08011488
 800133c:	40000c00 	.word	0x40000c00
 8001340:	43800000 	.word	0x43800000
 8001344:	04c4b400 	.word	0x04c4b400
 8001348:	2000b5a8 	.word	0x2000b5a8
 800134c:	40007400 	.word	0x40007400
 8001350:	2000b6a8 	.word	0x2000b6a8
 8001354:	20000808 	.word	0x20000808
 8001358:	20000408 	.word	0x20000408
				case 2:
					//turn off DAC
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_2);
 800135c:	2110      	movs	r1, #16
 800135e:	483f      	ldr	r0, [pc, #252]	; (800145c <channel_task+0x3a0>)
 8001360:	f003 fb92 	bl	8004a88 <HAL_DAC_Stop_DMA>
					//turn off noise
					DAC->CR &= ~(DAC_CR_MAMP2_0 + DAC_CR_MAMP2_1 + DAC_CR_MAMP2_2 + DAC_CR_MAMP2_3);
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <channel_task+0x3a4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <channel_task+0x3a4>)
 800136a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800136e:	6013      	str	r3, [r2, #0]
					DAC->CR &= ~DAC_CR_WAVE2_0;
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <channel_task+0x3a4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <channel_task+0x3a4>)
 8001376:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800137a:	6013      	str	r3, [r2, #0]
					//if there is noise bits, enable noise generator and unmask that number of bits
					if(noise_bits > 0)
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	2b00      	cmp	r3, #0
 8001380:	dd0d      	ble.n	800139e <channel_task+0x2e2>
					{
						DAC->CR |= DAC_CR_WAVE2_0;
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <channel_task+0x3a4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <channel_task+0x3a4>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138c:	6013      	str	r3, [r2, #0]
						DAC->CR |= (noise_bits << DAC_CR_MAMP2_Pos);
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <channel_task+0x3a4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001394:	0612      	lsls	r2, r2, #24
 8001396:	4611      	mov	r1, r2
 8001398:	4a31      	ldr	r2, [pc, #196]	; (8001460 <channel_task+0x3a4>)
 800139a:	430b      	orrs	r3, r1
 800139c:	6013      	str	r3, [r2, #0]
					}

					//start timer 5 and DMA for channel 1
					if(rec_cmd->type == 'c')
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	7b1b      	ldrb	r3, [r3, #12]
 80013a2:	2b63      	cmp	r3, #99	; 0x63
 80013a4:	d125      	bne.n	80013f2 <channel_task+0x336>
					{
						//output to DAC at 10kHz
						HAL_ADC_Stop_DMA(&hadc1);
 80013a6:	482f      	ldr	r0, [pc, #188]	; (8001464 <channel_task+0x3a8>)
 80013a8:	f002 fa22 	bl	80037f0 <HAL_ADC_Stop_DMA>
						req_freq = 10000;
 80013ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80013b0:	623b      	str	r3, [r7, #32]
						req_freq_div = ((80000000/(prescaler + 1))/req_freq);
 80013b2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <channel_task+0x3ac>)
 80013b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
						TIM5->ARR = req_freq_div; //calculated for a frequency of 0.5 Hz (2s)
 80013c6:	4a29      	ldr	r2, [pc, #164]	; (800146c <channel_task+0x3b0>)
 80013c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ca:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM5->EGR |= TIM_EGR_UG;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <channel_task+0x3b0>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <channel_task+0x3b0>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim5);
 80013d8:	4825      	ldr	r0, [pc, #148]	; (8001470 <channel_task+0x3b4>)
 80013da:	f005 fdb3 	bl	8006f44 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)adc_LUT_1, ADC_LUT_SIZE, DAC_ALIGN_12B_R);
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <channel_task+0x3b8>)
 80013e8:	2110      	movs	r1, #16
 80013ea:	481c      	ldr	r0, [pc, #112]	; (800145c <channel_task+0x3a0>)
 80013ec:	f003 fa80 	bl	80048f0 <HAL_DAC_Start_DMA>
						TIM5->ARR = req_freq_div;
						TIM5->EGR |= TIM_EGR_UG;
						HAL_TIM_Base_Start(&htim5);
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)dac_LUT_2, LUT_SIZE, DAC_ALIGN_12B_R);
					}
					break;
 80013f0:	e02f      	b.n	8001452 <channel_task+0x396>
						TIM5->ARR = req_freq_div;
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <channel_task+0x3b0>)
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	62d3      	str	r3, [r2, #44]	; 0x2c
						TIM5->EGR |= TIM_EGR_UG;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <channel_task+0x3b0>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <channel_task+0x3b0>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6153      	str	r3, [r2, #20]
						HAL_TIM_Base_Start(&htim5);
 8001404:	481a      	ldr	r0, [pc, #104]	; (8001470 <channel_task+0x3b4>)
 8001406:	f005 fd9d 	bl	8006f44 <HAL_TIM_Base_Start>
						HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, (uint32_t *)dac_LUT_2, LUT_SIZE, DAC_ALIGN_12B_R);
 800140a:	2300      	movs	r3, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <channel_task+0x3bc>)
 8001414:	2110      	movs	r1, #16
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <channel_task+0x3a0>)
 8001418:	f003 fa6a 	bl	80048f0 <HAL_DAC_Start_DMA>
					break;
 800141c:	e019      	b.n	8001452 <channel_task+0x396>
				}
			} else if (strcmp((char *) rec_cmd->name, cap_cmd) == 0)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	461a      	mov	r2, r3
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	4610      	mov	r0, r2
 800142a:	f7fe fed1 	bl	80001d0 <strcmp>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10e      	bne.n	8001452 <channel_task+0x396>
			{
				TIM4->EGR |= TIM_EGR_UG;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <channel_task+0x3c0>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a10      	ldr	r2, [pc, #64]	; (800147c <channel_task+0x3c0>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6153      	str	r3, [r2, #20]
				HAL_TIM_Base_Start(&htim4);
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <channel_task+0x3c4>)
 8001442:	f005 fd7f 	bl	8006f44 <HAL_TIM_Base_Start>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_LUT_1, ADC_LUT_SIZE);
 8001446:	f644 6220 	movw	r2, #20000	; 0x4e20
 800144a:	490a      	ldr	r1, [pc, #40]	; (8001474 <channel_task+0x3b8>)
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <channel_task+0x3a8>)
 800144e:	f002 f913 	bl	8003678 <HAL_ADC_Start_DMA>
			}
		}
		vTaskDelay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f008 fcfa 	bl	8009e4c <vTaskDelay>
		if(uxQueueMessagesWaiting(cmd_queue))
 8001458:	e646      	b.n	80010e8 <channel_task+0x2c>
 800145a:	bf00      	nop
 800145c:	2000b5a8 	.word	0x2000b5a8
 8001460:	40007400 	.word	0x40007400
 8001464:	2000b4fc 	.word	0x2000b4fc
 8001468:	04c4b400 	.word	0x04c4b400
 800146c:	40000c00 	.word	0x40000c00
 8001470:	2000b740 	.word	0x2000b740
 8001474:	20000808 	.word	0x20000808
 8001478:	20000608 	.word	0x20000608
 800147c:	40000800 	.word	0x40000800
 8001480:	2000b6f4 	.word	0x2000b6f4

08001484 <generate_DC>:
	}
}


void generate_DC(int channel, uint16_t dac_minv, int noise)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	460b      	mov	r3, r1
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	817b      	strh	r3, [r7, #10]
	//generate lookup table for DC signal

	switch(channel)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d003      	beq.n	80014a0 <generate_DC+0x1c>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d00f      	beq.n	80014be <generate_DC+0x3a>
			//add noise
			dac_LUT_2[i] = dac_minv;
		}
		break;
	}
}
 800149e:	e01d      	b.n	80014dc <generate_DC+0x58>
		for(int i = 0; i < LUT_SIZE; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e007      	b.n	80014b6 <generate_DC+0x32>
			dac_LUT_1[i] = dac_minv;
 80014a6:	4910      	ldr	r1, [pc, #64]	; (80014e8 <generate_DC+0x64>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	897a      	ldrh	r2, [r7, #10]
 80014ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2bff      	cmp	r3, #255	; 0xff
 80014ba:	ddf4      	ble.n	80014a6 <generate_DC+0x22>
		break;
 80014bc:	e00e      	b.n	80014dc <generate_DC+0x58>
		for(int i = 0; i < LUT_SIZE; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e007      	b.n	80014d4 <generate_DC+0x50>
			dac_LUT_2[i] = dac_minv;
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <generate_DC+0x68>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	897a      	ldrh	r2, [r7, #10]
 80014ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3301      	adds	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2bff      	cmp	r3, #255	; 0xff
 80014d8:	ddf4      	ble.n	80014c4 <generate_DC+0x40>
		break;
 80014da:	bf00      	nop
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20000408 	.word	0x20000408
 80014ec:	20000608 	.word	0x20000608

080014f0 <generate_rectangle>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_rectangle(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	817b      	strh	r3, [r7, #10]
 80014fe:	4613      	mov	r3, r2
 8001500:	813b      	strh	r3, [r7, #8]
	//generate lookup table for rectangle signal where half is minv and 2nd half is maxv
	switch(channel)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d003      	beq.n	8001510 <generate_rectangle+0x20>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d01d      	beq.n	800154a <generate_rectangle+0x5a>
			//set high part of rectangle
			dac_LUT_2[i] = dac_maxv;
		}
		break;
	}
}
 800150e:	e039      	b.n	8001584 <generate_rectangle+0x94>
		for(int i = 0; i < LUT_SIZE/2; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	e007      	b.n	8001526 <generate_rectangle+0x36>
			dac_LUT_1[i] = dac_minv;
 8001516:	491e      	ldr	r1, [pc, #120]	; (8001590 <generate_rectangle+0xa0>)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	897a      	ldrh	r2, [r7, #10]
 800151c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE/2; i++)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	3301      	adds	r3, #1
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	ddf4      	ble.n	8001516 <generate_rectangle+0x26>
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	e007      	b.n	8001542 <generate_rectangle+0x52>
			dac_LUT_1[i] = dac_maxv;
 8001532:	4917      	ldr	r1, [pc, #92]	; (8001590 <generate_rectangle+0xa0>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	893a      	ldrh	r2, [r7, #8]
 8001538:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	3301      	adds	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	ddf4      	ble.n	8001532 <generate_rectangle+0x42>
		break;
 8001548:	e01c      	b.n	8001584 <generate_rectangle+0x94>
		for(int i = 0; i < LUT_SIZE/2; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e007      	b.n	8001560 <generate_rectangle+0x70>
			dac_LUT_2[i] = dac_minv;
 8001550:	4910      	ldr	r1, [pc, #64]	; (8001594 <generate_rectangle+0xa4>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	897a      	ldrh	r2, [r7, #10]
 8001556:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE/2; i++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b7f      	cmp	r3, #127	; 0x7f
 8001564:	ddf4      	ble.n	8001550 <generate_rectangle+0x60>
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e007      	b.n	800157c <generate_rectangle+0x8c>
			dac_LUT_2[i] = dac_maxv;
 800156c:	4909      	ldr	r1, [pc, #36]	; (8001594 <generate_rectangle+0xa4>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	893a      	ldrh	r2, [r7, #8]
 8001572:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = LUT_SIZE/2; i < LUT_SIZE; i++)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3301      	adds	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	ddf4      	ble.n	800156c <generate_rectangle+0x7c>
		break;
 8001582:	bf00      	nop
}
 8001584:	bf00      	nop
 8001586:	3724      	adds	r7, #36	; 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000408 	.word	0x20000408
 8001594:	20000608 	.word	0x20000608

08001598 <generate_sine>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_sine(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 8001598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800159c:	b088      	sub	sp, #32
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	817b      	strh	r3, [r7, #10]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
	uint16_t midv = (dac_minv + dac_maxv) / 2;
 80015ac:	897a      	ldrh	r2, [r7, #10]
 80015ae:	893b      	ldrh	r3, [r7, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	0fda      	lsrs	r2, r3, #31
 80015b4:	4413      	add	r3, r2
 80015b6:	105b      	asrs	r3, r3, #1
 80015b8:	82fb      	strh	r3, [r7, #22]
	float angle = (float)(2*M_PI)/LUT_SIZE;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <generate_sine+0x14c>)
 80015bc:	613b      	str	r3, [r7, #16]
	switch(channel)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d003      	beq.n	80015cc <generate_sine+0x34>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d043      	beq.n	8001652 <generate_sine+0xba>
			//set LUT to be a sine wave and add noise
			dac_LUT_2[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
		}
		break;
	}
}
 80015ca:	e085      	b.n	80016d8 <generate_sine+0x140>
		for(int i = 0; i < LUT_SIZE; i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	e03b      	b.n	800164a <generate_sine+0xb2>
			dac_LUT_1[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
 80015d2:	8afb      	ldrh	r3, [r7, #22]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb5 	bl	8000544 <__aeabi_i2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
 80015de:	893a      	ldrh	r2, [r7, #8]
 80015e0:	8afb      	ldrh	r3, [r7, #22]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_i2d>
 80015ea:	4680      	mov	r8, r0
 80015ec:	4689      	mov	r9, r1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	ee17 0a90 	vmov	r0, s15
 8001604:	f7fe ffb0 	bl	8000568 <__aeabi_f2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	ec43 2b10 	vmov	d0, r2, r3
 8001610:	f00e febe 	bl	8010390 <sin>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4640      	mov	r0, r8
 800161a:	4649      	mov	r1, r9
 800161c:	f7fe fffc 	bl	8000618 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fe40 	bl	80002ac <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac8 	bl	8000bc8 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b299      	uxth	r1, r3
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <generate_sine+0x150>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	3301      	adds	r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	2bff      	cmp	r3, #255	; 0xff
 800164e:	ddc0      	ble.n	80015d2 <generate_sine+0x3a>
		break;
 8001650:	e042      	b.n	80016d8 <generate_sine+0x140>
		for(int i = 0; i < LUT_SIZE; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	e03b      	b.n	80016d0 <generate_sine+0x138>
			dac_LUT_2[i] = midv + ((dac_maxv - midv) * sin((float)(i * angle)));
 8001658:	8afb      	ldrh	r3, [r7, #22]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff72 	bl	8000544 <__aeabi_i2d>
 8001660:	4604      	mov	r4, r0
 8001662:	460d      	mov	r5, r1
 8001664:	893a      	ldrh	r2, [r7, #8]
 8001666:	8afb      	ldrh	r3, [r7, #22]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff6a 	bl	8000544 <__aeabi_i2d>
 8001670:	4680      	mov	r8, r0
 8001672:	4689      	mov	r9, r1
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	ee17 0a90 	vmov	r0, s15
 800168a:	f7fe ff6d 	bl	8000568 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	ec43 2b10 	vmov	d0, r2, r3
 8001696:	f00e fe7b 	bl	8010390 <sin>
 800169a:	ec53 2b10 	vmov	r2, r3, d0
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe ffb9 	bl	8000618 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fdfd 	bl	80002ac <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa85 	bl	8000bc8 <__aeabi_d2uiz>
 80016be:	4603      	mov	r3, r0
 80016c0:	b299      	uxth	r1, r3
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <generate_sine+0x154>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2bff      	cmp	r3, #255	; 0xff
 80016d4:	ddc0      	ble.n	8001658 <generate_sine+0xc0>
		break;
 80016d6:	bf00      	nop
}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016e2:	bf00      	nop
 80016e4:	3cc90fdb 	.word	0x3cc90fdb
 80016e8:	20000408 	.word	0x20000408
 80016ec:	20000608 	.word	0x20000608

080016f0 <generate_triangular>:
 * 		  uint16_t dac_minv - DAC value of minimum voltage
 * 		  uint16_t dac_maxv - DAC value of max voltage
 * 		  int noise - # of noise bits
 */
void generate_triangular(int channel, uint16_t dac_minv, uint16_t dac_maxv, int noise)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b08b      	sub	sp, #44	; 0x2c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	817b      	strh	r3, [r7, #10]
 80016fe:	4613      	mov	r3, r2
 8001700:	813b      	strh	r3, [r7, #8]
	uint16_t slope = (dac_maxv - dac_minv)/(LUT_SIZE/2);
 8001702:	893a      	ldrh	r2, [r7, #8]
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	da00      	bge.n	800170e <generate_triangular+0x1e>
 800170c:	337f      	adds	r3, #127	; 0x7f
 800170e:	11db      	asrs	r3, r3, #7
 8001710:	82fb      	strh	r3, [r7, #22]
	switch(channel)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d003      	beq.n	8001720 <generate_triangular+0x30>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d02e      	beq.n	800177c <generate_triangular+0x8c>
			//set negative part of the triangular wave
			dac_LUT_2[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
		}
		break;
	}
}
 800171e:	e05b      	b.n	80017d8 <generate_triangular+0xe8>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	e00f      	b.n	8001746 <generate_triangular+0x56>
			dac_LUT_1[i] = dac_minv + (i * slope);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	b29b      	uxth	r3, r3
 800172a:	8afa      	ldrh	r2, [r7, #22]
 800172c:	fb12 f303 	smulbb	r3, r2, r3
 8001730:	b29a      	uxth	r2, r3
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	4413      	add	r3, r2
 8001736:	b299      	uxth	r1, r3
 8001738:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <generate_triangular+0xf4>)
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3301      	adds	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	2b7f      	cmp	r3, #127	; 0x7f
 800174a:	ddec      	ble.n	8001726 <generate_triangular+0x36>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	e010      	b.n	8001774 <generate_triangular+0x84>
			dac_LUT_1[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	b29b      	uxth	r3, r3
 8001756:	8afa      	ldrh	r2, [r7, #22]
 8001758:	fb12 f303 	smulbb	r3, r2, r3
 800175c:	b29a      	uxth	r2, r3
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	3380      	adds	r3, #128	; 0x80
 8001762:	8939      	ldrh	r1, [r7, #8]
 8001764:	1a8a      	subs	r2, r1, r2
 8001766:	b291      	uxth	r1, r2
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <generate_triangular+0xf4>)
 800176a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	3301      	adds	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	2b7f      	cmp	r3, #127	; 0x7f
 8001778:	ddeb      	ble.n	8001752 <generate_triangular+0x62>
		break;
 800177a:	e02d      	b.n	80017d8 <generate_triangular+0xe8>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	e00f      	b.n	80017a2 <generate_triangular+0xb2>
			dac_LUT_2[i] = dac_minv + (i * slope);
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	b29b      	uxth	r3, r3
 8001786:	8afa      	ldrh	r2, [r7, #22]
 8001788:	fb12 f303 	smulbb	r3, r2, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	897b      	ldrh	r3, [r7, #10]
 8001790:	4413      	add	r3, r2
 8001792:	b299      	uxth	r1, r3
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <generate_triangular+0xf8>)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3301      	adds	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	2b7f      	cmp	r3, #127	; 0x7f
 80017a6:	ddec      	ble.n	8001782 <generate_triangular+0x92>
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	e010      	b.n	80017d0 <generate_triangular+0xe0>
			dac_LUT_2[i + (LUT_SIZE / 2)] = dac_maxv - (i * slope);
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	8afa      	ldrh	r2, [r7, #22]
 80017b4:	fb12 f303 	smulbb	r3, r2, r3
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	3380      	adds	r3, #128	; 0x80
 80017be:	8939      	ldrh	r1, [r7, #8]
 80017c0:	1a8a      	subs	r2, r1, r2
 80017c2:	b291      	uxth	r1, r2
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <generate_triangular+0xf8>)
 80017c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < (LUT_SIZE / 2); i++)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b7f      	cmp	r3, #127	; 0x7f
 80017d4:	ddeb      	ble.n	80017ae <generate_triangular+0xbe>
		break;
 80017d6:	bf00      	nop
}
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000408 	.word	0x20000408
 80017e8:	20000608 	.word	0x20000608

080017ec <generate_arbitrary>:
 *
 * Param: int channel - # of DAC channel
 * 		  int noise - # of noise bits
 */
void generate_arbitrary(int channel, int noise)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]

	switch(channel)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d003      	beq.n	8001804 <generate_arbitrary+0x18>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d012      	beq.n	8001828 <generate_arbitrary+0x3c>
			//set equal to EKG part of triangular and add noise
			dac_LUT_2[i] = ekg[i];
		}
		break;
	}
}
 8001802:	e023      	b.n	800184c <generate_arbitrary+0x60>
		for(int i = 0; i < LUT_SIZE; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e00a      	b.n	8001820 <generate_arbitrary+0x34>
			dac_LUT_1[i] = ekg[i];
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <generate_arbitrary+0x6c>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <generate_arbitrary+0x70>)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	ddf1      	ble.n	800180a <generate_arbitrary+0x1e>
		break;
 8001826:	e011      	b.n	800184c <generate_arbitrary+0x60>
		for(int i = 0; i < LUT_SIZE; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	e00a      	b.n	8001844 <generate_arbitrary+0x58>
			dac_LUT_2[i] = ekg[i];
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <generate_arbitrary+0x6c>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <generate_arbitrary+0x74>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < LUT_SIZE; i++)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2bff      	cmp	r3, #255	; 0xff
 8001848:	ddf1      	ble.n	800182e <generate_arbitrary+0x42>
		break;
 800184a:	bf00      	nop
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	20000004 	.word	0x20000004
 800185c:	20000408 	.word	0x20000408
 8001860:	20000608 	.word	0x20000608

08001864 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <vApplicationGetIdleTaskMemory+0x2c>)
 8001874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <vApplicationGetIdleTaskMemory+0x30>)
 800187a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001882:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	2000a448 	.word	0x2000a448
 8001894:	2000a4fc 	.word	0x2000a4fc

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189e:	f001 fb0d 	bl	8002ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a2:	f000 f833 	bl	800190c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018a6:	f000 f882 	bl	80019ae <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018aa:	f000 fb7f 	bl	8001fac <MX_GPIO_Init>
  MX_DMA_Init();
 80018ae:	f000 fb4f 	bl	8001f50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018b2:	f000 faed 	bl	8001e90 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80018b6:	f000 f921 	bl	8001afc <MX_DAC1_Init>
  MX_RNG_Init();
 80018ba:	f000 f971 	bl	8001ba0 <MX_RNG_Init>
  MX_TIM2_Init();
 80018be:	f000 f9d7 	bl	8001c70 <MX_TIM2_Init>
  MX_TIM1_Init();
 80018c2:	f000 f981 	bl	8001bc8 <MX_TIM1_Init>
  MX_TIM5_Init();
 80018c6:	f000 fa95 	bl	8001df4 <MX_TIM5_Init>
  MX_ADC1_Init();
 80018ca:	f000 f89f 	bl	8001a0c <MX_ADC1_Init>
  MX_TIM4_Init();
 80018ce:	f000 fa43 	bl	8001d58 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80018d2:	f000 fb0d 	bl	8001ef0 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <main+0x6c>)
 80018d8:	1d3c      	adds	r4, r7, #4
 80018da:	461d      	mov	r5, r3
 80018dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f007 fc20 	bl	8009132 <osThreadCreate>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <main+0x70>)
 80018f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  app_init();
 80018f8:	f7ff fb8e 	bl	8001018 <app_init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80018fc:	f007 fc12 	bl	8009124 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001900:	e7fe      	b.n	8001900 <main+0x68>
 8001902:	bf00      	nop
 8001904:	080114d4 	.word	0x080114d4
 8001908:	2000b894 	.word	0x2000b894

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b096      	sub	sp, #88	; 0x58
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	2244      	movs	r2, #68	; 0x44
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f009 fd3f 	bl	800b39e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800192e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001932:	f003 ff15 	bl	8005760 <HAL_PWREx_ControlVoltageScaling>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800193c:	f000 fba2 	bl	8002084 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001940:	2302      	movs	r3, #2
 8001942:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001948:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194a:	2310      	movs	r3, #16
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194e:	2302      	movs	r3, #2
 8001950:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001952:	2302      	movs	r3, #2
 8001954:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001956:	2301      	movs	r3, #1
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800195a:	230a      	movs	r3, #10
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800195e:	2307      	movs	r3, #7
 8001960:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001962:	2302      	movs	r3, #2
 8001964:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001966:	2302      	movs	r3, #2
 8001968:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4618      	mov	r0, r3
 8001970:	f003 ff4c 	bl	800580c <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800197a:	f000 fb83 	bl	8002084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197e:	230f      	movs	r3, #15
 8001980:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001982:	2303      	movs	r3, #3
 8001984:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	2104      	movs	r1, #4
 8001996:	4618      	mov	r0, r3
 8001998:	f004 fb14 	bl	8005fc4 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019a2:	f000 fb6f 	bl	8002084 <Error_Handler>
  }
}
 80019a6:	bf00      	nop
 80019a8:	3758      	adds	r7, #88	; 0x58
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b0a2      	sub	sp, #136	; 0x88
 80019b2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2288      	movs	r2, #136	; 0x88
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f009 fcef 	bl	800b39e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 80019c0:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 80019c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019ca:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80019cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019d0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80019d2:	2302      	movs	r3, #2
 80019d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019da:	2308      	movs	r3, #8
 80019dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019de:	2307      	movs	r3, #7
 80019e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80019e2:	2304      	movs	r3, #4
 80019e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019ea:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80019ee:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 fd3c 	bl	8006470 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80019fe:	f000 fb41 	bl	8002084 <Error_Handler>
  }
}
 8001a02:	bf00      	nop
 8001a04:	3788      	adds	r7, #136	; 0x88
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a30:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <MX_ADC1_Init+0xe8>)
 8001a32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a34:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a92:	4817      	ldr	r0, [pc, #92]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001a94:	f001 fc9a 	bl	80033cc <HAL_ADC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001a9e:	f000 faf1 	bl	8002084 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4810      	ldr	r0, [pc, #64]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001aae:	f002 fd6b 	bl	8004588 <HAL_ADCEx_MultiModeConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ab8:	f000 fae4 	bl	8002084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_ADC1_Init+0xec>)
 8001abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ac8:	237f      	movs	r3, #127	; 0x7f
 8001aca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001acc:	2304      	movs	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_ADC1_Init+0xe4>)
 8001ada:	f001 ff09 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001ae4:	f000 face 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000b4fc 	.word	0x2000b4fc
 8001af4:	50040000 	.word	0x50040000
 8001af8:	14f00020 	.word	0x14f00020

08001afc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2224      	movs	r2, #36	; 0x24
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f009 fc48 	bl	800b39e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <MX_DAC1_Init+0x9c>)
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <MX_DAC1_Init+0xa0>)
 8001b12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b14:	4820      	ldr	r0, [pc, #128]	; (8001b98 <MX_DAC1_Init+0x9c>)
 8001b16:	f002 fec9 	bl	80048ac <HAL_DAC_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001b20:	f000 fab0 	bl	8002084 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001b28:	2324      	movs	r3, #36	; 0x24
 8001b2a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4816      	ldr	r0, [pc, #88]	; (8001b98 <MX_DAC1_Init+0x9c>)
 8001b40:	f003 f805 	bl	8004b4e <HAL_DAC_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001b4a:	f000 fa9b 	bl	8002084 <Error_Handler>
  }

  /** Configure Noise wave generation on DAC OUT1
  */
  if (HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_LFSRUNMASK_BIT0) != HAL_OK)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	4811      	ldr	r0, [pc, #68]	; (8001b98 <MX_DAC1_Init+0x9c>)
 8001b54:	f003 f94b 	bl	8004dee <HAL_DACEx_NoiseWaveGenerate>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8001b5e:	f000 fa91 	bl	8002084 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001b62:	231c      	movs	r3, #28
 8001b64:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2210      	movs	r2, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <MX_DAC1_Init+0x9c>)
 8001b6e:	f002 ffee 	bl	8004b4e <HAL_DAC_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 8001b78:	f000 fa84 	bl	8002084 <Error_Handler>
  }

  /** Configure Noise wave generation on DAC OUT2
  */
  if (HAL_DACEx_NoiseWaveGenerate(&hdac1, DAC_CHANNEL_2, DAC_LFSRUNMASK_BIT0) != HAL_OK)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2110      	movs	r1, #16
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_DAC1_Init+0x9c>)
 8001b82:	f003 f934 	bl	8004dee <HAL_DACEx_NoiseWaveGenerate>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_DAC1_Init+0x94>
  {
    Error_Handler();
 8001b8c:	f000 fa7a 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000b5a8 	.word	0x2000b5a8
 8001b9c:	40007400 	.word	0x40007400

08001ba0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_RNG_Init+0x20>)
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <MX_RNG_Init+0x24>)
 8001ba8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_RNG_Init+0x20>)
 8001bac:	f005 f91c 	bl	8006de8 <HAL_RNG_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bb6:	f000 fa65 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000b64c 	.word	0x2000b64c
 8001bc4:	50060800 	.word	0x50060800

08001bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001be8:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <MX_TIM1_Init+0xa4>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c12:	4815      	ldr	r0, [pc, #84]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c14:	f005 f93f 	bl	8006e96 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c1e:	f000 fa31 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c30:	f005 fc5a 	bl	80074e8 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c3a:	f000 fa23 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <MX_TIM1_Init+0xa0>)
 8001c50:	f006 f946 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c5a:	f000 fa13 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000b65c 	.word	0x2000b65c
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001cac:	224f      	movs	r2, #79	; 0x4f
 8001cae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cca:	4822      	ldr	r0, [pc, #136]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001ccc:	f005 f8e3 	bl	8006e96 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cd6:	f000 f9d5 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001ce8:	f005 fbfe 	bl	80074e8 <HAL_TIM_ConfigClockSource>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cf2:	f000 f9c7 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001cf8:	f005 f9fc 	bl	80070f4 <HAL_TIM_OC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d02:	f000 f9bf 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d06:	2320      	movs	r3, #32
 8001d08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	480f      	ldr	r0, [pc, #60]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001d16:	f006 f8e3 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d20:	f000 f9b0 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_RETRIGERRABLE_OPM1;
 8001d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	463b      	mov	r3, r7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_TIM2_Init+0xe4>)
 8001d3e:	f005 fb59 	bl	80073f4 <HAL_TIM_OC_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d48:	f000 f99c 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000b6a8 	.word	0x2000b6a8

08001d58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <MX_TIM4_Init+0x98>)
 8001d7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7999;
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d9c:	4813      	ldr	r0, [pc, #76]	; (8001dec <MX_TIM4_Init+0x94>)
 8001d9e:	f005 f87a 	bl	8006e96 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001da8:	f000 f96c 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	4619      	mov	r1, r3
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <MX_TIM4_Init+0x94>)
 8001dba:	f005 fb95 	bl	80074e8 <HAL_TIM_ConfigClockSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001dc4:	f000 f95e 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_TIM4_Init+0x94>)
 8001dd6:	f006 f883 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001de0:	f000 f950 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000b6f4 	.word	0x2000b6f4
 8001df0:	40000800 	.word	0x40000800

08001df4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <MX_TIM5_Init+0x98>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e1a:	224f      	movs	r2, #79	; 0x4f
 8001e1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e26:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e38:	4813      	ldr	r0, [pc, #76]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e3a:	f005 f82c 	bl	8006e96 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001e44:	f000 f91e 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e56:	f005 fb47 	bl	80074e8 <HAL_TIM_ConfigClockSource>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001e60:	f000 f910 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e64:	2320      	movs	r3, #32
 8001e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e72:	f006 f835 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f000 f902 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000b740 	.word	0x2000b740
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_USART2_UART_Init+0x5c>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ed4:	f006 f8aa 	bl	800802c <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ede:	f000 f8d1 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000b78c 	.word	0x2000b78c
 8001eec:	40004400 	.word	0x40004400

08001ef0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001ef6:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <MX_USART3_UART_Init+0x5c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_USART3_UART_Init+0x58>)
 8001f34:	f006 f87a 	bl	800802c <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f3e:	f000 f8a1 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000b810 	.word	0x2000b810
 8001f4c:	40004800 	.word	0x40004800

08001f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_DMA_Init+0x58>)
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <MX_DMA_Init+0x58>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6493      	str	r3, [r2, #72]	; 0x48
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <MX_DMA_Init+0x58>)
 8001f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2105      	movs	r1, #5
 8001f72:	200b      	movs	r0, #11
 8001f74:	f002 fc70 	bl	8004858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f78:	200b      	movs	r0, #11
 8001f7a:	f002 fc89 	bl	8004890 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	200d      	movs	r0, #13
 8001f84:	f002 fc68 	bl	8004858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f88:	200d      	movs	r0, #13
 8001f8a:	f002 fc81 	bl	8004890 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	200e      	movs	r0, #14
 8001f94:	f002 fc60 	bl	8004858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f002 fc79 	bl	8004890 <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000

08001fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a20      	ldr	r2, [pc, #128]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <MX_GPIO_Init+0x9c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_GPIO_Init+0x9c>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_GPIO_Init+0x9c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <MX_GPIO_Init+0x9c>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_GPIO_Init+0x9c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002028:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800202c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_GPIO_Init+0xa0>)
 800203a:	f003 f9d9 	bl	80053f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	48000800 	.word	0x48000800

08002050 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002058:	2001      	movs	r0, #1
 800205a:	f007 f8b6 	bl	80091ca <osDelay>
 800205e:	e7fb      	b.n	8002058 <StartDefaultTask+0x8>

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002072:	f000 ff43 	bl	8002efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40000400 	.word	0x40000400

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	e7fe      	b.n	800208c <Error_Handler+0x8>
	...

08002090 <receive_task_init>:
static void receive_task(void *params);
static int print_command(COMMAND_c * c_print);

//create receive task
int receive_task_init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af02      	add	r7, sp, #8
	COMMAND_c * c = &cmd;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <receive_task_init+0x48>)
 8002098:	607b      	str	r3, [r7, #4]
	memset(c, 0, sizeof(COMMAND_c));
 800209a:	221c      	movs	r2, #28
 800209c:	2100      	movs	r1, #0
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f009 f97d 	bl	800b39e <memset>
	BaseType_t err = xTaskCreate(receive_task, "Receive_Task", 1024, &cmd, 1, NULL);
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2301      	movs	r3, #1
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <receive_task_init+0x48>)
 80020ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b2:	490a      	ldr	r1, [pc, #40]	; (80020dc <receive_task_init+0x4c>)
 80020b4:	480a      	ldr	r0, [pc, #40]	; (80020e0 <receive_task_init+0x50>)
 80020b6:	f007 fd7c 	bl	8009bb2 <xTaskCreate>
 80020ba:	6038      	str	r0, [r7, #0]
	assert(err == pdPASS);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d005      	beq.n	80020ce <receive_task_init+0x3e>
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <receive_task_init+0x54>)
 80020c4:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <receive_task_init+0x58>)
 80020c6:	211a      	movs	r1, #26
 80020c8:	4808      	ldr	r0, [pc, #32]	; (80020ec <receive_task_init+0x5c>)
 80020ca:	f009 f807 	bl	800b0dc <__assert_func>
	return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000b964 	.word	0x2000b964
 80020dc:	080114f0 	.word	0x080114f0
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	08011500 	.word	0x08011500
 80020e8:	080116a4 	.word	0x080116a4
 80020ec:	08011510 	.word	0x08011510

080020f0 <receive_task>:

static void receive_task(void *params){
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b08f      	sub	sp, #60	; 0x3c
 80020f4:	af06      	add	r7, sp, #24
 80020f6:	6078      	str	r0, [r7, #4]
	COMMAND_c *c = (COMMAND_c *)params;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	617b      	str	r3, [r7, #20]
	float minv; //stores the min/max voltages
	float maxv;
	while(1)
	{
		//check for a completed line
		if(USART_getline(USART2))
 80020fc:	483d      	ldr	r0, [pc, #244]	; (80021f4 <receive_task+0x104>)
 80020fe:	f000 fdeb 	bl	8002cd8 <USART_getline>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d071      	beq.n	80021ec <receive_task+0xfc>
		{
			//read in command and calculate min and max DAC values required
			sscanf((char *)rxBuffer2, "%s %u %c %f %f %f %u", c->name, &(c->channel), &(c->type), &(c->freq), &minv, &maxv, &(c->noise));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	461c      	mov	r4, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f103 0008 	add.w	r0, r3, #8
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	330c      	adds	r3, #12
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	3210      	adds	r2, #16
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	3118      	adds	r1, #24
 800211e:	9104      	str	r1, [sp, #16]
 8002120:	f107 010c 	add.w	r1, r7, #12
 8002124:	9103      	str	r1, [sp, #12]
 8002126:	f107 0110 	add.w	r1, r7, #16
 800212a:	9102      	str	r1, [sp, #8]
 800212c:	9201      	str	r2, [sp, #4]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4603      	mov	r3, r0
 8002132:	4622      	mov	r2, r4
 8002134:	4930      	ldr	r1, [pc, #192]	; (80021f8 <receive_task+0x108>)
 8002136:	4831      	ldr	r0, [pc, #196]	; (80021fc <receive_task+0x10c>)
 8002138:	f00a fa42 	bl	800c5c0 <siscanf>
			c->dac_minv = (float) (4095/3.3) * minv;
 800213c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002140:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002200 <receive_task+0x110>
 8002144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214e:	ee17 2a90 	vmov	r2, s15
 8002152:	b292      	uxth	r2, r2
 8002154:	829a      	strh	r2, [r3, #20]
			c->dac_maxv = (float) (4095/3.3) * maxv;
 8002156:	edd7 7a03 	vldr	s15, [r7, #12]
 800215a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002200 <receive_task+0x110>
 800215e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002168:	ee17 2a90 	vmov	r2, s15
 800216c:	b292      	uxth	r2, r2
 800216e:	82da      	strh	r2, [r3, #22]

			memset(rxBuffer2, '\0', sizeof(rxBuffer2)); //reset buffer to all null terminators
 8002170:	2232      	movs	r2, #50	; 0x32
 8002172:	2100      	movs	r1, #0
 8002174:	4821      	ldr	r0, [pc, #132]	; (80021fc <receive_task+0x10c>)
 8002176:	f009 f912 	bl	800b39e <memset>
			BaseType_t err = xQueueSendToFront(cmd_queue, &c, 0);
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <receive_task+0x114>)
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	f107 0114 	add.w	r1, r7, #20
 8002182:	2301      	movs	r3, #1
 8002184:	2200      	movs	r2, #0
 8002186:	f007 f9ab 	bl	80094e0 <xQueueGenericSend>
 800218a:	61f8      	str	r0, [r7, #28]
			assert(err == pdPASS);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d005      	beq.n	800219e <receive_task+0xae>
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <receive_task+0x118>)
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <receive_task+0x11c>)
 8002196:	212e      	movs	r1, #46	; 0x2e
 8002198:	481d      	ldr	r0, [pc, #116]	; (8002210 <receive_task+0x120>)
 800219a:	f008 ff9f 	bl	800b0dc <__assert_func>
			//send command to the queue if command is okay
			if(print_command(c))
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f83d 	bl	8002220 <print_command>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d011      	beq.n	80021d0 <receive_task+0xe0>
			{
				BaseType_t err = xQueueSendToFront(cmd_queue, &c, 0);
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <receive_task+0x114>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f107 0114 	add.w	r1, r7, #20
 80021b4:	2301      	movs	r3, #1
 80021b6:	2200      	movs	r2, #0
 80021b8:	f007 f992 	bl	80094e0 <xQueueGenericSend>
 80021bc:	61b8      	str	r0, [r7, #24]
				assert(err == pdPASS);
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d013      	beq.n	80021ec <receive_task+0xfc>
 80021c4:	4b10      	ldr	r3, [pc, #64]	; (8002208 <receive_task+0x118>)
 80021c6:	4a11      	ldr	r2, [pc, #68]	; (800220c <receive_task+0x11c>)
 80021c8:	2133      	movs	r1, #51	; 0x33
 80021ca:	4811      	ldr	r0, [pc, #68]	; (8002210 <receive_task+0x120>)
 80021cc:	f008 ff86 	bl	800b0dc <__assert_func>
			} else{
				msgSize = sprintf((char *)userMsg, "Command Error!\r\n");
 80021d0:	4910      	ldr	r1, [pc, #64]	; (8002214 <receive_task+0x124>)
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <receive_task+0x128>)
 80021d4:	f00a f9d4 	bl	800c580 <siprintf>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <receive_task+0x12c>)
 80021dc:	6013      	str	r3, [r2, #0]
				USART_Write(USART2, userMsg, msgSize);
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <receive_task+0x12c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <receive_task+0x128>)
 80021e6:	4803      	ldr	r0, [pc, #12]	; (80021f4 <receive_task+0x104>)
 80021e8:	f000 fdd8 	bl	8002d9c <USART_Write>
			}
		}
		vTaskDelay(1);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f007 fe2d 	bl	8009e4c <vTaskDelay>
		if(USART_getline(USART2))
 80021f2:	e783      	b.n	80020fc <receive_task+0xc>
 80021f4:	40004400 	.word	0x40004400
 80021f8:	0801152c 	.word	0x0801152c
 80021fc:	2000b9dc 	.word	0x2000b9dc
 8002200:	449b1d17 	.word	0x449b1d17
 8002204:	20000404 	.word	0x20000404
 8002208:	08011500 	.word	0x08011500
 800220c:	080116b8 	.word	0x080116b8
 8002210:	08011510 	.word	0x08011510
 8002214:	08011544 	.word	0x08011544
 8002218:	2000b898 	.word	0x2000b898
 800221c:	2000b960 	.word	0x2000b960

08002220 <print_command>:
/*
 * print out command
 * Return: 0 if command error, 1 if command is valid
 */
static int print_command(COMMAND_c * c_print)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b09c      	sub	sp, #112	; 0x70
 8002224:	af02      	add	r7, sp, #8
 8002226:	6078      	str	r0, [r7, #4]
	uint8_t * cmd_type[20];
	uint32_t req_freq;
	char cap_cmd[] = "cap\0";
 8002228:	4aa0      	ldr	r2, [pc, #640]	; (80024ac <print_command+0x28c>)
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002232:	6018      	str	r0, [r3, #0]
 8002234:	3304      	adds	r3, #4
 8002236:	7019      	strb	r1, [r3, #0]
	if (strcmp((char *) c_print->name, cap_cmd) == 0)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f107 0208 	add.w	r2, r7, #8
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7fd ffc5 	bl	80001d0 <strcmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <print_command+0x4c>
	{
		msgSize = sprintf((char *)userMsg, "Capturing\r\n");
 800224c:	4998      	ldr	r1, [pc, #608]	; (80024b0 <print_command+0x290>)
 800224e:	4899      	ldr	r0, [pc, #612]	; (80024b4 <print_command+0x294>)
 8002250:	f00a f996 	bl	800c580 <siprintf>
 8002254:	4603      	mov	r3, r0
 8002256:	4a98      	ldr	r2, [pc, #608]	; (80024b8 <print_command+0x298>)
 8002258:	6013      	str	r3, [r2, #0]
		USART_Write(USART2, userMsg, msgSize);
 800225a:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <print_command+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4994      	ldr	r1, [pc, #592]	; (80024b4 <print_command+0x294>)
 8002262:	4896      	ldr	r0, [pc, #600]	; (80024bc <print_command+0x29c>)
 8002264:	f000 fd9a 	bl	8002d9c <USART_Write>
		return 1;
 8002268:	2301      	movs	r3, #1
 800226a:	e11a      	b.n	80024a2 <print_command+0x282>
	}
	//print out type of output signal
	switch(tolower(c_print->type))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7b1b      	ldrb	r3, [r3, #12]
 8002270:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8002274:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002278:	3301      	adds	r3, #1
 800227a:	4a91      	ldr	r2, [pc, #580]	; (80024c0 <print_command+0x2a0>)
 800227c:	4413      	add	r3, r2
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d103      	bne.n	8002290 <print_command+0x70>
 8002288:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800228c:	3320      	adds	r3, #32
 800228e:	e001      	b.n	8002294 <print_command+0x74>
 8002290:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002294:	3b61      	subs	r3, #97	; 0x61
 8002296:	2b13      	cmp	r3, #19
 8002298:	d871      	bhi.n	800237e <print_command+0x15e>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <print_command+0x80>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	08002321 	.word	0x08002321
 80022a4:	0800237f 	.word	0x0800237f
 80022a8:	08002331 	.word	0x08002331
 80022ac:	0800237f 	.word	0x0800237f
 80022b0:	0800237f 	.word	0x0800237f
 80022b4:	0800237f 	.word	0x0800237f
 80022b8:	0800237f 	.word	0x0800237f
 80022bc:	0800237f 	.word	0x0800237f
 80022c0:	0800237f 	.word	0x0800237f
 80022c4:	0800237f 	.word	0x0800237f
 80022c8:	0800237f 	.word	0x0800237f
 80022cc:	0800237f 	.word	0x0800237f
 80022d0:	0800237f 	.word	0x0800237f
 80022d4:	0800237f 	.word	0x0800237f
 80022d8:	0800237f 	.word	0x0800237f
 80022dc:	0800237f 	.word	0x0800237f
 80022e0:	0800237f 	.word	0x0800237f
 80022e4:	08002301 	.word	0x08002301
 80022e8:	080022f1 	.word	0x080022f1
 80022ec:	08002311 	.word	0x08002311
	{
		case 's':
			strncpy((char *)cmd_type, "Sine", 20);
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	2214      	movs	r2, #20
 80022f6:	4973      	ldr	r1, [pc, #460]	; (80024c4 <print_command+0x2a4>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00a f9d2 	bl	800c6a2 <strncpy>
			break;
 80022fe:	e040      	b.n	8002382 <print_command+0x162>
		case 'r':
			strncpy((char *)cmd_type, "Rectangle", 20);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	2214      	movs	r2, #20
 8002306:	4970      	ldr	r1, [pc, #448]	; (80024c8 <print_command+0x2a8>)
 8002308:	4618      	mov	r0, r3
 800230a:	f00a f9ca 	bl	800c6a2 <strncpy>
			break;
 800230e:	e038      	b.n	8002382 <print_command+0x162>
		case 't':
			strncpy((char *)cmd_type, "Triangular", 20);
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	2214      	movs	r2, #20
 8002316:	496d      	ldr	r1, [pc, #436]	; (80024cc <print_command+0x2ac>)
 8002318:	4618      	mov	r0, r3
 800231a:	f00a f9c2 	bl	800c6a2 <strncpy>
			break;
 800231e:	e030      	b.n	8002382 <print_command+0x162>
		case 'a':
			strncpy((char *)cmd_type, "Arbitrary", 20);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	2214      	movs	r2, #20
 8002326:	496a      	ldr	r1, [pc, #424]	; (80024d0 <print_command+0x2b0>)
 8002328:	4618      	mov	r0, r3
 800232a:	f00a f9ba 	bl	800c6a2 <strncpy>
			break;
 800232e:	e028      	b.n	8002382 <print_command+0x162>
		case 'c':
			msgSize = sprintf((char *)userMsg, "Printing Copied Signal\r\n");
 8002330:	4968      	ldr	r1, [pc, #416]	; (80024d4 <print_command+0x2b4>)
 8002332:	4860      	ldr	r0, [pc, #384]	; (80024b4 <print_command+0x294>)
 8002334:	f00a f924 	bl	800c580 <siprintf>
 8002338:	4603      	mov	r3, r0
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <print_command+0x298>)
 800233c:	6013      	str	r3, [r2, #0]
			USART_Write(USART2, userMsg, msgSize);
 800233e:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <print_command+0x298>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	495b      	ldr	r1, [pc, #364]	; (80024b4 <print_command+0x294>)
 8002346:	485d      	ldr	r0, [pc, #372]	; (80024bc <print_command+0x29c>)
 8002348:	f000 fd28 	bl	8002d9c <USART_Write>
			msgSize = sprintf((char *)userMsg, "Number of Samples Per Waveform: %u\r\n", ADC_LUT_SIZE);
 800234c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002350:	4961      	ldr	r1, [pc, #388]	; (80024d8 <print_command+0x2b8>)
 8002352:	4858      	ldr	r0, [pc, #352]	; (80024b4 <print_command+0x294>)
 8002354:	f00a f914 	bl	800c580 <siprintf>
 8002358:	4603      	mov	r3, r0
 800235a:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <print_command+0x298>)
 800235c:	6013      	str	r3, [r2, #0]
			USART_Write(USART2, userMsg, msgSize);
 800235e:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <print_command+0x298>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	4953      	ldr	r1, [pc, #332]	; (80024b4 <print_command+0x294>)
 8002366:	4855      	ldr	r0, [pc, #340]	; (80024bc <print_command+0x29c>)
 8002368:	f000 fd18 	bl	8002d9c <USART_Write>
			msgSize = sprintf((char *)userMsg, "Update Rate: 10000Hz\r\n");
 800236c:	495b      	ldr	r1, [pc, #364]	; (80024dc <print_command+0x2bc>)
 800236e:	4851      	ldr	r0, [pc, #324]	; (80024b4 <print_command+0x294>)
 8002370:	f00a f906 	bl	800c580 <siprintf>
 8002374:	4603      	mov	r3, r0
 8002376:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <print_command+0x298>)
 8002378:	6013      	str	r3, [r2, #0]
			return(1);
 800237a:	2301      	movs	r3, #1
 800237c:	e091      	b.n	80024a2 <print_command+0x282>
			return(1);
		default:
			//return error if wave type is not valid
			return 0;
 800237e:	2300      	movs	r3, #0
 8002380:	e08f      	b.n	80024a2 <print_command+0x282>
			break;
	}

	if(c_print->freq != 0)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	edd3 7a04 	vldr	s15, [r3, #16]
 8002388:	eef5 7a40 	vcmp.f32	s15, #0.0
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	d00b      	beq.n	80023aa <print_command+0x18a>
	{
		req_freq = c_print->freq * LUT_SIZE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	edd3 7a04 	vldr	s15, [r3, #16]
 8002398:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80024e0 <print_command+0x2c0>
 800239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	msgSize = sprintf((char *)userMsg, "Waveform: %s\r\n", (char *)cmd_type);
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	461a      	mov	r2, r3
 80023b0:	494c      	ldr	r1, [pc, #304]	; (80024e4 <print_command+0x2c4>)
 80023b2:	4840      	ldr	r0, [pc, #256]	; (80024b4 <print_command+0x294>)
 80023b4:	f00a f8e4 	bl	800c580 <siprintf>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <print_command+0x298>)
 80023bc:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, userMsg, msgSize);
 80023be:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <print_command+0x298>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	493b      	ldr	r1, [pc, #236]	; (80024b4 <print_command+0x294>)
 80023c6:	483d      	ldr	r0, [pc, #244]	; (80024bc <print_command+0x29c>)
 80023c8:	f000 fce8 	bl	8002d9c <USART_Write>

	msgSize = sprintf((char *)userMsg, "Frequency: %.2f\tUpdate Rate: %lu\r\n", c_print->freq, req_freq);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f8c9 	bl	8000568 <__aeabi_f2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80023dc:	9100      	str	r1, [sp, #0]
 80023de:	4942      	ldr	r1, [pc, #264]	; (80024e8 <print_command+0x2c8>)
 80023e0:	4834      	ldr	r0, [pc, #208]	; (80024b4 <print_command+0x294>)
 80023e2:	f00a f8cd 	bl	800c580 <siprintf>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <print_command+0x298>)
 80023ea:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, userMsg, msgSize);
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <print_command+0x298>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4930      	ldr	r1, [pc, #192]	; (80024b4 <print_command+0x294>)
 80023f4:	4831      	ldr	r0, [pc, #196]	; (80024bc <print_command+0x29c>)
 80023f6:	f000 fcd1 	bl	8002d9c <USART_Write>

	msgSize = sprintf((char *)userMsg, "Number of Samples Per Waveform: %u\r\n", LUT_SIZE);
 80023fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023fe:	4936      	ldr	r1, [pc, #216]	; (80024d8 <print_command+0x2b8>)
 8002400:	482c      	ldr	r0, [pc, #176]	; (80024b4 <print_command+0x294>)
 8002402:	f00a f8bd 	bl	800c580 <siprintf>
 8002406:	4603      	mov	r3, r0
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <print_command+0x298>)
 800240a:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, userMsg, msgSize);
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <print_command+0x298>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4928      	ldr	r1, [pc, #160]	; (80024b4 <print_command+0x294>)
 8002414:	4829      	ldr	r0, [pc, #164]	; (80024bc <print_command+0x29c>)
 8002416:	f000 fcc1 	bl	8002d9c <USART_Write>

	//if signal was DC, only display minv. If not, display max DAC and min DAC voltage
	if(c_print->freq != 0)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	d020      	beq.n	800246c <print_command+0x24c>
	{
		if((c_print->dac_maxv >= 4096) || (c_print->dac_maxv < c_print->dac_minv) || (c_print->dac_minv < 0))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8adb      	ldrh	r3, [r3, #22]
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	d205      	bcs.n	8002440 <print_command+0x220>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8ada      	ldrh	r2, [r3, #22]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8a9b      	ldrh	r3, [r3, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	d201      	bcs.n	8002444 <print_command+0x224>
		{
			return 0;
 8002440:	2300      	movs	r3, #0
 8002442:	e02e      	b.n	80024a2 <print_command+0x282>
		}

		msgSize = sprintf((char *)userMsg, "Max DAC Value: %u\tMin DAC Value:: %u\r\n", c_print->dac_maxv, c_print->dac_minv);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8adb      	ldrh	r3, [r3, #22]
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8a9b      	ldrh	r3, [r3, #20]
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <print_command+0x2cc>)
 8002450:	4818      	ldr	r0, [pc, #96]	; (80024b4 <print_command+0x294>)
 8002452:	f00a f895 	bl	800c580 <siprintf>
 8002456:	4603      	mov	r3, r0
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <print_command+0x298>)
 800245a:	6013      	str	r3, [r2, #0]
		USART_Write(USART2, userMsg, msgSize);
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <print_command+0x298>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4914      	ldr	r1, [pc, #80]	; (80024b4 <print_command+0x294>)
 8002464:	4815      	ldr	r0, [pc, #84]	; (80024bc <print_command+0x29c>)
 8002466:	f000 fc99 	bl	8002d9c <USART_Write>
 800246a:	e019      	b.n	80024a0 <print_command+0x280>
	} else{
		//return error is DC voltage is less than 0 or greaater than 3.3V
		if(c_print->dac_minv < 0 || c_print->dac_minv > 4096)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8a9b      	ldrh	r3, [r3, #20]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d901      	bls.n	800247a <print_command+0x25a>
		{
			return 0;
 8002476:	2300      	movs	r3, #0
 8002478:	e013      	b.n	80024a2 <print_command+0x282>
		}
		req_freq = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	667b      	str	r3, [r7, #100]	; 0x64
		msgSize = sprintf((char *)userMsg, "DC DAC Value: %u\r\n", c_print->dac_minv);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	8a9b      	ldrh	r3, [r3, #20]
 8002482:	461a      	mov	r2, r3
 8002484:	491a      	ldr	r1, [pc, #104]	; (80024f0 <print_command+0x2d0>)
 8002486:	480b      	ldr	r0, [pc, #44]	; (80024b4 <print_command+0x294>)
 8002488:	f00a f87a 	bl	800c580 <siprintf>
 800248c:	4603      	mov	r3, r0
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <print_command+0x298>)
 8002490:	6013      	str	r3, [r2, #0]
		USART_Write(USART2, userMsg, msgSize);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <print_command+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <print_command+0x294>)
 800249a:	4808      	ldr	r0, [pc, #32]	; (80024bc <print_command+0x29c>)
 800249c:	f000 fc7e 	bl	8002d9c <USART_Write>
	}
	return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3768      	adds	r7, #104	; 0x68
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	0801165c 	.word	0x0801165c
 80024b0:	08011558 	.word	0x08011558
 80024b4:	2000b898 	.word	0x2000b898
 80024b8:	2000b960 	.word	0x2000b960
 80024bc:	40004400 	.word	0x40004400
 80024c0:	0801174c 	.word	0x0801174c
 80024c4:	08011564 	.word	0x08011564
 80024c8:	0801156c 	.word	0x0801156c
 80024cc:	08011578 	.word	0x08011578
 80024d0:	08011584 	.word	0x08011584
 80024d4:	08011590 	.word	0x08011590
 80024d8:	080115ac 	.word	0x080115ac
 80024dc:	080115d4 	.word	0x080115d4
 80024e0:	43800000 	.word	0x43800000
 80024e4:	080115ec 	.word	0x080115ec
 80024e8:	080115fc 	.word	0x080115fc
 80024ec:	08011620 	.word	0x08011620
 80024f0:	08011648 	.word	0x08011648

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_MspInit+0x4c>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_MspInit+0x4c>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6613      	str	r3, [r2, #96]	; 0x60
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_MspInit+0x4c>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_MspInit+0x4c>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_MspInit+0x4c>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	; 0x58
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_MspInit+0x4c>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	210f      	movs	r1, #15
 800252e:	f06f 0001 	mvn.w	r0, #1
 8002532:	f002 f991 	bl	8004858 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <HAL_ADC_MspInit+0xcc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d150      	bne.n	8002608 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_ADC_MspInit+0xd0>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a2a      	ldr	r2, [pc, #168]	; (8002614 <HAL_ADC_MspInit+0xd0>)
 800256c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002572:	4b28      	ldr	r3, [pc, #160]	; (8002614 <HAL_ADC_MspInit+0xd0>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_ADC_MspInit+0xd0>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_ADC_MspInit+0xd0>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_ADC_MspInit+0xd0>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002596:	2301      	movs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800259a:	230b      	movs	r3, #11
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f002 ff20 	bl	80053f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025b2:	4a1a      	ldr	r2, [pc, #104]	; (800261c <HAL_ADC_MspInit+0xd8>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025ec:	480a      	ldr	r0, [pc, #40]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 80025ee:	f002 fc89 	bl	8004f04 <HAL_DMA_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_ADC_MspInit+0xb8>
    {
      Error_Handler();
 80025f8:	f7ff fd44 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 8002600:	64da      	str	r2, [r3, #76]	; 0x4c
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <HAL_ADC_MspInit+0xd4>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	50040000 	.word	0x50040000
 8002614:	40021000 	.word	0x40021000
 8002618:	2000b560 	.word	0x2000b560
 800261c:	40020008 	.word	0x40020008

08002620 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a41      	ldr	r2, [pc, #260]	; (8002744 <HAL_DAC_MspInit+0x124>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d17c      	bne.n	800273c <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_DAC_MspInit+0x128>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a40      	ldr	r2, [pc, #256]	; (8002748 <HAL_DAC_MspInit+0x128>)
 8002648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_DAC_MspInit+0x128>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_DAC_MspInit+0x128>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a3a      	ldr	r2, [pc, #232]	; (8002748 <HAL_DAC_MspInit+0x128>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002666:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_DAC_MspInit+0x128>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002672:	2330      	movs	r3, #48	; 0x30
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002676:	2303      	movs	r3, #3
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002688:	f002 feb2 	bl	80053f0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_DAC_MspInit+0x12c>)
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_DAC_MspInit+0x130>)
 8002690:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_DAC_MspInit+0x12c>)
 8002694:	2206      	movs	r2, #6
 8002696:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_DAC_MspInit+0x12c>)
 800269a:	2210      	movs	r2, #16
 800269c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026aa:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026bc:	2220      	movs	r2, #32
 80026be:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80026c8:	4820      	ldr	r0, [pc, #128]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026ca:	f002 fc1b 	bl	8004f04 <HAL_DMA_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80026d4:	f7ff fcd6 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_DAC_MspInit+0x12c>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_DAC_MspInit+0x134>)
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_DAC_MspInit+0x138>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_DAC_MspInit+0x134>)
 80026ec:	2205      	movs	r2, #5
 80026ee:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_DAC_MspInit+0x134>)
 80026f2:	2210      	movs	r2, #16
 80026f4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_DAC_MspInit+0x134>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_DAC_MspInit+0x134>)
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_DAC_MspInit+0x134>)
 8002704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002708:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_DAC_MspInit+0x134>)
 800270c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002710:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_DAC_MspInit+0x134>)
 8002714:	2220      	movs	r2, #32
 8002716:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_DAC_MspInit+0x134>)
 800271a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002720:	480c      	ldr	r0, [pc, #48]	; (8002754 <HAL_DAC_MspInit+0x134>)
 8002722:	f002 fbef 	bl	8004f04 <HAL_DMA_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 800272c:	f7ff fcaa 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_DAC_MspInit+0x134>)
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_DAC_MspInit+0x134>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40007400 	.word	0x40007400
 8002748:	40021000 	.word	0x40021000
 800274c:	2000b5bc 	.word	0x2000b5bc
 8002750:	40020030 	.word	0x40020030
 8002754:	2000b604 	.word	0x2000b604
 8002758:	40020044 	.word	0x40020044

0800275c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_RNG_MspInit+0x38>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10b      	bne.n	8002786 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RNG_MspInit+0x3c>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RNG_MspInit+0x3c>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_RNG_MspInit+0x3c>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	50060800 	.word	0x50060800
 8002798:	40021000 	.word	0x40021000

0800279c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_TIM_Base_MspInit+0xa4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10c      	bne.n	80027c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027c6:	e034      	b.n	8002832 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d10c      	bne.n	80027ec <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
}
 80027ea:	e022      	b.n	8002832 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_TIM_Base_MspInit+0xac>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10c      	bne.n	8002810 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6593      	str	r3, [r2, #88]	; 0x58
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	e010      	b.n	8002832 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_TIM_Base_MspInit+0xb0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10b      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6593      	str	r3, [r2, #88]	; 0x58
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_TIM_Base_MspInit+0xa8>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40000800 	.word	0x40000800
 800284c:	40000c00 	.word	0x40000c00

08002850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b0ae      	sub	sp, #184	; 0xb8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	2288      	movs	r2, #136	; 0x88
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f008 fd94 	bl	800b39e <memset>
  if(huart->Instance==USART2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a46      	ldr	r2, [pc, #280]	; (8002994 <HAL_UART_MspInit+0x144>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d13c      	bne.n	80028fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002880:	2302      	movs	r3, #2
 8002882:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002884:	2300      	movs	r3, #0
 8002886:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fdef 	bl	8006470 <HAL_RCCEx_PeriphCLKConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002898:	f7ff fbf4 	bl	8002084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_UART_MspInit+0x148>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <HAL_UART_MspInit+0x148>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a6:	6593      	str	r3, [r2, #88]	; 0x58
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_UART_MspInit+0x148>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_UART_MspInit+0x148>)
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	4a37      	ldr	r2, [pc, #220]	; (8002998 <HAL_UART_MspInit+0x148>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c0:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_UART_MspInit+0x148>)
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028cc:	230c      	movs	r3, #12
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e4:	2307      	movs	r3, #7
 80028e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f4:	f002 fd7c 	bl	80053f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028f8:	e047      	b.n	800298a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a27      	ldr	r2, [pc, #156]	; (800299c <HAL_UART_MspInit+0x14c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d142      	bne.n	800298a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002904:	2304      	movs	r3, #4
 8002906:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002908:	2300      	movs	r3, #0
 800290a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fdad 	bl	8006470 <HAL_RCCEx_PeriphCLKConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800291c:	f7ff fbb2 	bl	8002084 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_UART_MspInit+0x148>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <HAL_UART_MspInit+0x148>)
 8002926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_UART_MspInit+0x148>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_UART_MspInit+0x148>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_UART_MspInit+0x148>)
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_UART_MspInit+0x148>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002950:	2330      	movs	r3, #48	; 0x30
 8002952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002968:	2307      	movs	r3, #7
 800296a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002972:	4619      	mov	r1, r3
 8002974:	480a      	ldr	r0, [pc, #40]	; (80029a0 <HAL_UART_MspInit+0x150>)
 8002976:	f002 fd3b 	bl	80053f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2105      	movs	r1, #5
 800297e:	2027      	movs	r0, #39	; 0x27
 8002980:	f001 ff6a 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002984:	2027      	movs	r0, #39	; 0x27
 8002986:	f001 ff83 	bl	8004890 <HAL_NVIC_EnableIRQ>
}
 800298a:	bf00      	nop
 800298c:	37b8      	adds	r7, #184	; 0xb8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40004400 	.word	0x40004400
 8002998:	40021000 	.word	0x40021000
 800299c:	40004800 	.word	0x40004800
 80029a0:	48000800 	.word	0x48000800

080029a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80029b2:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <HAL_InitTick+0xe0>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_InitTick+0xe0>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_InitTick+0xe0>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029ca:	f107 0210 	add.w	r2, r7, #16
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fcb9 	bl	800634c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029e4:	f003 fc86 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80029e8:	6378      	str	r0, [r7, #52]	; 0x34
 80029ea:	e004      	b.n	80029f6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029ec:	f003 fc82 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80029f0:	4603      	mov	r3, r0
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <HAL_InitTick+0xe4>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	3b01      	subs	r3, #1
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_InitTick+0xec>)
 8002a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a10:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002a2a:	4818      	ldr	r0, [pc, #96]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a2c:	f004 fa33 	bl	8006e96 <HAL_TIM_Base_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11b      	bne.n	8002a76 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002a3e:	4813      	ldr	r0, [pc, #76]	; (8002a8c <HAL_InitTick+0xe8>)
 8002a40:	f004 fae8 	bl	8007014 <HAL_TIM_Base_Start_IT>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d111      	bne.n	8002a76 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a52:	201d      	movs	r0, #29
 8002a54:	f001 ff1c 	bl	8004890 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b0f      	cmp	r3, #15
 8002a5c:	d808      	bhi.n	8002a70 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	201d      	movs	r0, #29
 8002a64:	f001 fef8 	bl	8004858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_InitTick+0xf0>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e002      	b.n	8002a76 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3738      	adds	r7, #56	; 0x38
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	431bde83 	.word	0x431bde83
 8002a8c:	2000b980 	.word	0x2000b980
 8002a90:	40000400 	.word	0x40000400
 8002a94:	20000208 	.word	0x20000208

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <NMI_Handler+0x4>

08002a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8002aca:	f002 fbb2 	bl	8005232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2000b560 	.word	0x2000b560

08002ad8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <DMA1_Channel3_IRQHandler+0x10>)
 8002ade:	f002 fba8 	bl	8005232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000b5bc 	.word	0x2000b5bc

08002aec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <DMA1_Channel4_IRQHandler+0x10>)
 8002af2:	f002 fb9e 	bl	8005232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000b604 	.word	0x2000b604

08002b00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <TIM3_IRQHandler+0x10>)
 8002b06:	f004 fb56 	bl	80071b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000b980 	.word	0x2000b980

08002b14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <USART3_IRQHandler+0x10>)
 8002b1a:	f005 fad5 	bl	80080c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	2000b810 	.word	0x2000b810

08002b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return 1;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_kill>:

int _kill(int pid, int sig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b42:	f008 fae9 	bl	800b118 <__errno>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2216      	movs	r2, #22
 8002b4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_exit>:

void _exit (int status)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffe7 	bl	8002b38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b6a:	e7fe      	b.n	8002b6a <_exit+0x12>

08002b6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e00a      	b.n	8002b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b7e:	f3af 8000 	nop.w
 8002b82:	4601      	mov	r1, r0
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	60ba      	str	r2, [r7, #8]
 8002b8a:	b2ca      	uxtb	r2, r1
 8002b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dbf0      	blt.n	8002b7e <_read+0x12>
  }

  return len;
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e009      	b.n	8002bcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	60ba      	str	r2, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbf1      	blt.n	8002bb8 <_write+0x12>
  }
  return len;
 8002bd4:	687b      	ldr	r3, [r7, #4]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_close>:

int _close(int file)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c06:	605a      	str	r2, [r3, #4]
  return 0;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_isatty>:

int _isatty(int file)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <_sbrk+0x5c>)
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <_sbrk+0x60>)
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <_sbrk+0x64>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <_sbrk+0x68>)
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d207      	bcs.n	8002c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c78:	f008 fa4e 	bl	800b118 <__errno>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	220c      	movs	r2, #12
 8002c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	e009      	b.n	8002c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <_sbrk+0x64>)
 8002c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20018000 	.word	0x20018000
 8002ca8:	00000400 	.word	0x00000400
 8002cac:	2000b9cc 	.word	0x2000b9cc
 8002cb0:	200130e0 	.word	0x200130e0

08002cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <SystemInit+0x20>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <SystemInit+0x20>)
 8002cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <USART_getline>:
uint8_t rxByte3; //char and buffer for USART3
uint8_t rxBuffer3[UART_BUFFER_SIZE];
uint8_t txBuffer3[UART_BUFFER_SIZE];

_Bool USART_getline(USART_TypeDef * USARTx)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	rxByte2 = USART_Read(USARTx);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f88d 	bl	8002e00 <USART_Read>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <USART_getline+0xa8>)
 8002cec:	701a      	strb	r2, [r3, #0]
	//if character isn't null
	if(rxByte2 != 255)
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <USART_getline+0xa8>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2bff      	cmp	r3, #255	; 0xff
 8002cf4:	d03c      	beq.n	8002d70 <USART_getline+0x98>
	{
		if(rxByte2 == '\r')
 8002cf6:	4b22      	ldr	r3, [pc, #136]	; (8002d80 <USART_getline+0xa8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b0d      	cmp	r3, #13
 8002cfc:	d112      	bne.n	8002d24 <USART_getline+0x4c>
		{
			n = sprintf((char *)txBuffer2, "\r\n");
 8002cfe:	4921      	ldr	r1, [pc, #132]	; (8002d84 <USART_getline+0xac>)
 8002d00:	4821      	ldr	r0, [pc, #132]	; (8002d88 <USART_getline+0xb0>)
 8002d02:	f009 fc3d 	bl	800c580 <siprintf>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <USART_getline+0xb4>)
 8002d0a:	6013      	str	r3, [r2, #0]
			USART_Write(USART2, txBuffer2, n);
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <USART_getline+0xb4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	491d      	ldr	r1, [pc, #116]	; (8002d88 <USART_getline+0xb0>)
 8002d14:	481e      	ldr	r0, [pc, #120]	; (8002d90 <USART_getline+0xb8>)
 8002d16:	f000 f841 	bl	8002d9c <USART_Write>
			uart2_index = 0;
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <USART_getline+0xbc>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
			return 1;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e028      	b.n	8002d76 <USART_getline+0x9e>
		}
		else if(rxByte2 == '\177'){
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <USART_getline+0xa8>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b7f      	cmp	r3, #127	; 0x7f
 8002d2a:	d110      	bne.n	8002d4e <USART_getline+0x76>
			if(uart2_index > 0)
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <USART_getline+0xbc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	dd0a      	ble.n	8002d4a <USART_getline+0x72>
			{
				rxBuffer2[uart2_index - 1] = '\0';
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <USART_getline+0xbc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <USART_getline+0xc0>)
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	54d1      	strb	r1, [r2, r3]
				uart2_index --;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <USART_getline+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <USART_getline+0xbc>)
 8002d48:	6013      	str	r3, [r2, #0]
			}
			//USART_Write(USARTx, '\r\n');
			return 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e013      	b.n	8002d76 <USART_getline+0x9e>
		}
		else if(uart2_index < UART_BUFFER_SIZE){
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <USART_getline+0xbc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b31      	cmp	r3, #49	; 0x31
 8002d54:	dc0e      	bgt.n	8002d74 <USART_getline+0x9c>
			rxBuffer2[uart2_index] = rxByte2;
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <USART_getline+0xbc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <USART_getline+0xa8>)
 8002d5c:	7811      	ldrb	r1, [r2, #0]
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <USART_getline+0xc0>)
 8002d60:	54d1      	strb	r1, [r2, r3]
			uart2_index++;
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <USART_getline+0xbc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <USART_getline+0xbc>)
 8002d6a:	6013      	str	r3, [r2, #0]
       	    return 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e002      	b.n	8002d76 <USART_getline+0x9e>
		}
	}else{
		return 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <USART_getline+0x9e>
	}
	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000b9d8 	.word	0x2000b9d8
 8002d84:	08011664 	.word	0x08011664
 8002d88:	2000ba10 	.word	0x2000ba10
 8002d8c:	2000b9d4 	.word	0x2000b9d4
 8002d90:	40004400 	.word	0x40004400
 8002d94:	2000b9d0 	.word	0x2000b9d0
 8002d98:	2000b9dc 	.word	0x2000b9dc

08002d9c <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e010      	b.n	8002dd0 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8002dae:	bf00      	nop
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f9      	beq.n	8002db0 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8ea      	bhi.n	8002dae <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8002dd8:	bf00      	nop
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f9      	beq.n	8002dda <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	61da      	str	r2, [r3, #28]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <USART_Read>:

uint8_t USART_Read (USART_TypeDef * USARTx) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if(!(USARTx->ISR & USART_ISR_RXNE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <USART_Read+0x18>
	{
		return -1;
 8002e14:	23ff      	movs	r3, #255	; 0xff
 8002e16:	e018      	b.n	8002e4a <USART_Read+0x4a>
	} else{
		// Reading USART_DR automatically clears the RXNE flag
		//USART_Write(USARTx, (uint8_t)(USARTx->RDR & 0xFF));
		rxBytePnt = ((uint8_t)(USARTx->RDR & 0xFF));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <USART_Read+0x54>)
 8002e22:	701a      	strb	r2, [r3, #0]
		n = sprintf((char *)txBuffer2, "%c", rxBytePnt);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <USART_Read+0x54>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	490b      	ldr	r1, [pc, #44]	; (8002e58 <USART_Read+0x58>)
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <USART_Read+0x5c>)
 8002e2e:	f009 fba7 	bl	800c580 <siprintf>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <USART_Read+0x60>)
 8002e36:	6013      	str	r3, [r2, #0]
 		USART_Write(USART2, txBuffer2, n);
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <USART_Read+0x60>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4907      	ldr	r1, [pc, #28]	; (8002e5c <USART_Read+0x5c>)
 8002e40:	4808      	ldr	r0, [pc, #32]	; (8002e64 <USART_Read+0x64>)
 8002e42:	f7ff ffab 	bl	8002d9c <USART_Write>
		//HAL_UART_Transmit(USARTx, (uint8_t*)&rxBytePnt, sizeof(rxBytePnt), 1);
		return rxBytePnt;
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <USART_Read+0x54>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
	}
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000ba42 	.word	0x2000ba42
 8002e58:	08011668 	.word	0x08011668
 8002e5c:	2000ba10 	.word	0x2000ba10
 8002e60:	2000b9d4 	.word	0x2000b9d4
 8002e64:	40004400 	.word	0x40004400

08002e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e6c:	f7ff ff22 	bl	8002cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e72:	490d      	ldr	r1, [pc, #52]	; (8002ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <LoopForever+0xe>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e88:	4c0a      	ldr	r4, [pc, #40]	; (8002eb4 <LoopForever+0x16>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e96:	f008 fa4d 	bl	800b334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e9a:	f7fe fcfd 	bl	8001898 <main>

08002e9e <LoopForever>:

LoopForever:
    b LoopForever
 8002e9e:	e7fe      	b.n	8002e9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea8:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 8002eac:	08011db8 	.word	0x08011db8
  ldr r2, =_sbss
 8002eb0:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 8002eb4:	200130dc 	.word	0x200130dc

08002eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC1_2_IRQHandler>
	...

08002ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_Init+0x3c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_Init+0x3c>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	f001 fcb5 	bl	8004842 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed8:	200f      	movs	r0, #15
 8002eda:	f7ff fd63 	bl	80029a4 <HAL_InitTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	e001      	b.n	8002eee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002eea:	f7ff fb03 	bl	80024f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eee:	79fb      	ldrb	r3, [r7, #7]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40022000 	.word	0x40022000

08002efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x20>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x24>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_IncTick+0x24>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000020c 	.word	0x2000020c
 8002f20:	2000ba44 	.word	0x2000ba44

08002f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return uwTick;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_GetTick+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000ba44 	.word	0x2000ba44

08002f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff ffee 	bl	8002f24 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d005      	beq.n	8002f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_Delay+0x44>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f62:	bf00      	nop
 8002f64:	f7ff ffde 	bl	8002f24 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8f7      	bhi.n	8002f64 <HAL_Delay+0x28>
  {
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	2000020c 	.word	0x2000020c

08002f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3360      	adds	r3, #96	; 0x60
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LL_ADC_SetOffset+0x44>)
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	4313      	orrs	r3, r2
 800301c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	03fff000 	.word	0x03fff000

08003034 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3360      	adds	r3, #96	; 0x60
 8003042:	461a      	mov	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3360      	adds	r3, #96	; 0x60
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3330      	adds	r3, #48	; 0x30
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	4413      	add	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	211f      	movs	r1, #31
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	401a      	ands	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	f003 011f 	and.w	r1, r3, #31
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	431a      	orrs	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3314      	adds	r3, #20
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0e5b      	lsrs	r3, r3, #25
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	4413      	add	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0d1b      	lsrs	r3, r3, #20
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2107      	movs	r1, #7
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	401a      	ands	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	0d1b      	lsrs	r3, r3, #20
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	431a      	orrs	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003184:	43db      	mvns	r3, r3
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0318 	and.w	r3, r3, #24
 800318e:	4908      	ldr	r1, [pc, #32]	; (80031b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003190:	40d9      	lsrs	r1, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	400b      	ands	r3, r1
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	431a      	orrs	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	0007ffff 	.word	0x0007ffff

080031b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 031f 	and.w	r3, r3, #31
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6093      	str	r3, [r2, #8]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003208:	d101      	bne.n	800320e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800322c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003258:	d101      	bne.n	800325e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800327c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032a8:	f043 0202 	orr.w	r2, r3, #2
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_IsEnabled+0x18>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_IsEnabled+0x1a>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d101      	bne.n	80032fa <LL_ADC_IsDisableOngoing+0x18>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_IsDisableOngoing+0x1a>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d101      	bne.n	8003370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800338e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d101      	bne.n	80033be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e136      	b.n	8003654 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff f8a5 	bl	8002544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fef1 	bl	80031f4 <LL_ADC_IsDeepPowerDownEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fed7 	bl	80031d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff0c 	bl	8003244 <LL_ADC_IsInternalRegulatorEnabled>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fef0 	bl	800321c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800343c:	4b87      	ldr	r3, [pc, #540]	; (800365c <HAL_ADC_Init+0x290>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_ADC_Init+0x294>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003450:	e002      	b.n	8003458 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3b01      	subs	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff feee 	bl	8003244 <LL_ADC_IsInternalRegulatorEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff62 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 8003494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 80cf 	bne.w	8003642 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 80cb 	bne.w	8003642 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034b4:	f043 0202 	orr.w	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fefb 	bl	80032bc <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d115      	bne.n	80034f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034cc:	4865      	ldr	r0, [pc, #404]	; (8003664 <HAL_ADC_Init+0x298>)
 80034ce:	f7ff fef5 	bl	80032bc <LL_ADC_IsEnabled>
 80034d2:	4604      	mov	r4, r0
 80034d4:	4864      	ldr	r0, [pc, #400]	; (8003668 <HAL_ADC_Init+0x29c>)
 80034d6:	f7ff fef1 	bl	80032bc <LL_ADC_IsEnabled>
 80034da:	4603      	mov	r3, r0
 80034dc:	431c      	orrs	r4, r3
 80034de:	4863      	ldr	r0, [pc, #396]	; (800366c <HAL_ADC_Init+0x2a0>)
 80034e0:	f7ff feec 	bl	80032bc <LL_ADC_IsEnabled>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4323      	orrs	r3, r4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4619      	mov	r1, r3
 80034f2:	485f      	ldr	r0, [pc, #380]	; (8003670 <HAL_ADC_Init+0x2a4>)
 80034f4:	f7ff fd46 	bl	8002f84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7e5b      	ldrb	r3, [r3, #25]
 80034fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003502:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003508:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800350e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003516:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d106      	bne.n	8003534 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	3b01      	subs	r3, #1
 800352c:	045b      	lsls	r3, r3, #17
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_ADC_Init+0x2a8>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	430b      	orrs	r3, r1
 8003562:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fef5 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 800356e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff16 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 800357a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13d      	bne.n	80035fe <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d13a      	bne.n	80035fe <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800358c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003594:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a4:	f023 0302 	bic.w	r3, r3, #2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	430b      	orrs	r3, r1
 80035b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d118      	bne.n	80035ee <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035c6:	f023 0304 	bic.w	r3, r3, #4
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035d8:	4311      	orrs	r1, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035de:	430a      	orrs	r2, r1
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	611a      	str	r2, [r3, #16]
 80035ec:	e007      	b.n	80035fe <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10c      	bne.n	8003620 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	f023 010f 	bic.w	r1, r3, #15
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
 800361e:	e007      	b.n	8003630 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 020f 	bic.w	r2, r2, #15
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f023 0303 	bic.w	r3, r3, #3
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
 8003640:	e007      	b.n	8003652 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f043 0210 	orr.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003652:	7ffb      	ldrb	r3, [r7, #31]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3724      	adds	r7, #36	; 0x24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	20000204 	.word	0x20000204
 8003660:	053e2d63 	.word	0x053e2d63
 8003664:	50040000 	.word	0x50040000
 8003668:	50040100 	.word	0x50040100
 800366c:	50040200 	.word	0x50040200
 8003670:	50040300 	.word	0x50040300
 8003674:	fff0c007 	.word	0xfff0c007

08003678 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003684:	4853      	ldr	r0, [pc, #332]	; (80037d4 <HAL_ADC_Start_DMA+0x15c>)
 8003686:	f7ff fd95 	bl	80031b4 <LL_ADC_GetMultimode>
 800368a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fe61 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 8093 	bne.w	80037c4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_Start_DMA+0x34>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e08e      	b.n	80037ca <HAL_ADC_Start_DMA+0x152>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <HAL_ADC_Start_DMA+0x160>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d008      	beq.n	80036d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d002      	beq.n	80036d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b09      	cmp	r3, #9
 80036ce:	d172      	bne.n	80037b6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fdb9 	bl	8004248 <ADC_Enable>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d165      	bne.n	80037ac <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a38      	ldr	r2, [pc, #224]	; (80037dc <HAL_ADC_Start_DMA+0x164>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d002      	beq.n	8003704 <HAL_ADC_Start_DMA+0x8c>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e000      	b.n	8003706 <HAL_ADC_Start_DMA+0x8e>
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_ADC_Start_DMA+0x168>)
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	4293      	cmp	r3, r2
 800370c:	d002      	beq.n	8003714 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f023 0206 	bic.w	r2, r3, #6
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	659a      	str	r2, [r3, #88]	; 0x58
 8003738:	e002      	b.n	8003740 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_ADC_Start_DMA+0x16c>)
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_ADC_Start_DMA+0x170>)
 800374e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	4a25      	ldr	r2, [pc, #148]	; (80037ec <HAL_ADC_Start_DMA+0x174>)
 8003756:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	221c      	movs	r2, #28
 800375e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0210 	orr.w	r2, r2, #16
 8003776:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3340      	adds	r3, #64	; 0x40
 8003792:	4619      	mov	r1, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f001 fc6c 	bl	8005074 <HAL_DMA_Start_IT>
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fdaf 	bl	8003308 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80037aa:	e00d      	b.n	80037c8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80037b4:	e008      	b.n	80037c8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80037c2:	e001      	b.n	80037c8 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
 80037c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	50040300 	.word	0x50040300
 80037d8:	50040200 	.word	0x50040200
 80037dc:	50040100 	.word	0x50040100
 80037e0:	50040000 	.word	0x50040000
 80037e4:	08004413 	.word	0x08004413
 80037e8:	080044eb 	.word	0x080044eb
 80037ec:	08004507 	.word	0x08004507

080037f0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_ADC_Stop_DMA+0x16>
 8003802:	2302      	movs	r3, #2
 8003804:	e051      	b.n	80038aa <HAL_ADC_Stop_DMA+0xba>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800380e:	2103      	movs	r1, #3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fc5d 	bl	80040d0 <ADC_ConversionStop>
 8003816:	4603      	mov	r3, r0
 8003818:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d13f      	bne.n	80038a0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d10f      	bne.n	800385e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fc76 	bl	8005134 <HAL_DMA_Abort>
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0210 	bic.w	r2, r2, #16
 800386c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fd6d 	bl	8004354 <ADC_Disable>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e002      	b.n	8003886 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fd67 	bl	8004354 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b0b6      	sub	sp, #216	; 0xd8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x22>
 800390e:	2302      	movs	r3, #2
 8003910:	e3c7      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x7b2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd1a 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 83a8 	bne.w	800407c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d824      	bhi.n	800397e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	3b02      	subs	r3, #2
 800393a:	2b03      	cmp	r3, #3
 800393c:	d81b      	bhi.n	8003976 <HAL_ADC_ConfigChannel+0x86>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <HAL_ADC_ConfigChannel+0x54>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003955 	.word	0x08003955
 8003948:	0800395d 	.word	0x0800395d
 800394c:	08003965 	.word	0x08003965
 8003950:	0800396d 	.word	0x0800396d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	220c      	movs	r2, #12
 8003958:	605a      	str	r2, [r3, #4]
          break;
 800395a:	e011      	b.n	8003980 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2212      	movs	r2, #18
 8003960:	605a      	str	r2, [r3, #4]
          break;
 8003962:	e00d      	b.n	8003980 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2218      	movs	r2, #24
 8003968:	605a      	str	r2, [r3, #4]
          break;
 800396a:	e009      	b.n	8003980 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003972:	605a      	str	r2, [r3, #4]
          break;
 8003974:	e004      	b.n	8003980 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2206      	movs	r2, #6
 800397a:	605a      	str	r2, [r3, #4]
          break;
 800397c:	e000      	b.n	8003980 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800397e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	f7ff fb95 	bl	80030bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fcde 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 800399c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fcfe 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 80039aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 81a6 	bne.w	8003d04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 81a1 	bne.w	8003d04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6819      	ldr	r1, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7ff fba0 	bl	8003114 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00a      	beq.n	8003a0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6919      	ldr	r1, [r3, #16]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a06:	f7ff faf1 	bl	8002fec <LL_ADC_SetOffset>
 8003a0a:	e17b      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fb0e 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x148>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fb03 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	e01e      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x186>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff faf8 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003a66:	2320      	movs	r3, #32
 8003a68:	e004      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x19e>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	0e9b      	lsrs	r3, r3, #26
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	e018      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x1d0>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003ab2:	2320      	movs	r3, #32
 8003ab4:	e004      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fac7 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff faab 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x20e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff faa0 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003af4:	4603      	mov	r3, r0
 8003af6:	0e9b      	lsrs	r3, r3, #26
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	e01e      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x24c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fa95 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e004      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x264>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	e018      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x296>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e004      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d106      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fa64 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fa48 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x2d4>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fa3d 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 021f 	and.w	r2, r3, #31
 8003bc2:	e01e      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x312>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2102      	movs	r1, #2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fa32 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	e004      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x32a>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	e016      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x358>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	e004      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d106      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fa03 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2103      	movs	r1, #3
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f9e7 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x396>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2103      	movs	r1, #3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f9dc 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	0e9b      	lsrs	r3, r3, #26
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	e017      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x3c6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2103      	movs	r1, #3
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f9d1 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	e003      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x3de>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	0e9b      	lsrs	r3, r3, #26
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	e011      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x402>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e003      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cec:	fab3 f383 	clz	r3, r3
 8003cf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d106      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2103      	movs	r1, #3
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f9ae 	bl	8003060 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fad7 	bl	80032bc <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f040 813f 	bne.w	8003f94 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f7ff fa22 	bl	800316c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a8e      	ldr	r2, [pc, #568]	; (8003f68 <HAL_ADC_ConfigChannel+0x678>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f040 8130 	bne.w	8003f94 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x46c>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	0e9b      	lsrs	r3, r3, #26
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	bf94      	ite	ls
 8003d54:	2301      	movls	r3, #1
 8003d56:	2300      	movhi	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e019      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x4a0>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003d74:	2320      	movs	r3, #32
 8003d76:	e003      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	3301      	adds	r3, #1
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	bf94      	ite	ls
 8003d8a:	2301      	movls	r3, #1
 8003d8c:	2300      	movhi	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d079      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x4c0>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	3301      	adds	r3, #1
 8003da8:	069b      	lsls	r3, r3, #26
 8003daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dae:	e015      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x4ec>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db8:	fa93 f3a3 	rbit	r3, r3
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003dc8:	2320      	movs	r3, #32
 8003dca:	e003      	b.n	8003dd4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	069b      	lsls	r3, r3, #26
 8003dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x50c>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	3301      	adds	r3, #1
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	e017      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x53c>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e003      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2101      	movs	r1, #1
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x562>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0e9b      	lsrs	r3, r3, #26
 8003e42:	3301      	adds	r3, #1
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	051b      	lsls	r3, r3, #20
 8003e50:	e018      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x594>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e003      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	fab3 f383 	clz	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e84:	430b      	orrs	r3, r1
 8003e86:	e080      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x5b4>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	069b      	lsls	r3, r3, #26
 8003e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ea2:	e015      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x5e0>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e003      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	069b      	lsls	r3, r3, #26
 8003ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x600>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f003 031f 	and.w	r3, r3, #31
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	e017      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x630>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	61fb      	str	r3, [r7, #28]
  return result;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003f08:	2320      	movs	r3, #32
 8003f0a:	e003      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	ea42 0103 	orr.w	r1, r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x65c>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	3301      	adds	r3, #1
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	3b1e      	subs	r3, #30
 8003f44:	051b      	lsls	r3, r3, #20
 8003f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	e01d      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x698>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	613b      	str	r3, [r7, #16]
  return result;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e005      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x684>
 8003f68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f003 021f 	and.w	r2, r3, #31
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	3b1e      	subs	r3, #30
 8003f82:	051b      	lsls	r3, r3, #20
 8003f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f7ff f8c0 	bl	8003114 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_ADC_ConfigChannel+0x7bc>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d07a      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fa0:	4843      	ldr	r0, [pc, #268]	; (80040b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fa2:	f7ff f815 	bl	8002fd0 <LL_ADC_GetCommonPathInternalCh>
 8003fa6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a41      	ldr	r2, [pc, #260]	; (80040b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d12c      	bne.n	800400e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d126      	bne.n	800400e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x6e4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a3b      	ldr	r2, [pc, #236]	; (80040bc <HAL_ADC_ConfigChannel+0x7cc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d15d      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4834      	ldr	r0, [pc, #208]	; (80040b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fe0:	f7fe ffe3 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fe4:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	4a36      	ldr	r2, [pc, #216]	; (80040c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	099b      	lsrs	r3, r3, #6
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ffe:	e002      	b.n	8004006 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f9      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800400c:	e040      	b.n	8004090 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d118      	bne.n	800404a <HAL_ADC_ConfigChannel+0x75a>
 8004018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d112      	bne.n	800404a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a23      	ldr	r2, [pc, #140]	; (80040b8 <HAL_ADC_ConfigChannel+0x7c8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_ADC_ConfigChannel+0x748>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a22      	ldr	r2, [pc, #136]	; (80040bc <HAL_ADC_ConfigChannel+0x7cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d12d      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800403c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004040:	4619      	mov	r1, r3
 8004042:	481b      	ldr	r0, [pc, #108]	; (80040b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004044:	f7fe ffb1 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004048:	e024      	b.n	8004094 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_ADC_ConfigChannel+0x7dc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d120      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11a      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d115      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800406a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800406e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004072:	4619      	mov	r1, r3
 8004074:	480e      	ldr	r0, [pc, #56]	; (80040b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004076:	f7fe ff98 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
 800407a:	e00c      	b.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800408e:	e002      	b.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004094:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800409e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	37d8      	adds	r7, #216	; 0xd8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	80080000 	.word	0x80080000
 80040b0:	50040300 	.word	0x50040300
 80040b4:	c7520000 	.word	0xc7520000
 80040b8:	50040000 	.word	0x50040000
 80040bc:	50040200 	.word	0x50040200
 80040c0:	20000204 	.word	0x20000204
 80040c4:	053e2d63 	.word	0x053e2d63
 80040c8:	cb840000 	.word	0xcb840000
 80040cc:	80000001 	.word	0x80000001

080040d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff f936 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 80040ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff f957 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 80040f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 8098 	beq.w	8004238 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02a      	beq.n	800416c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7e5b      	ldrb	r3, [r3, #25]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d126      	bne.n	800416c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7e1b      	ldrb	r3, [r3, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d122      	bne.n	800416c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004126:	2301      	movs	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800412a:	e014      	b.n	8004156 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4a45      	ldr	r2, [pc, #276]	; (8004244 <ADC_ConversionStop+0x174>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d90d      	bls.n	8004150 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0210 	orr.w	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f043 0201 	orr.w	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e074      	b.n	800423a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d1e3      	bne.n	800412c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d014      	beq.n	800419c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff f8ee 	bl	8003358 <LL_ADC_REG_IsConversionOngoing>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff f8ab 	bl	80032e2 <LL_ADC_IsDisableOngoing>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff f8ca 	bl	8003330 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d014      	beq.n	80041cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f8fd 	bl	80033a6 <LL_ADC_INJ_IsConversionOngoing>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00c      	beq.n	80041cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f893 	bl	80032e2 <LL_ADC_IsDisableOngoing>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d104      	bne.n	80041cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff f8d9 	bl	800337e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d005      	beq.n	80041de <ADC_ConversionStop+0x10e>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d105      	bne.n	80041e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80041d8:	230c      	movs	r3, #12
 80041da:	617b      	str	r3, [r7, #20]
        break;
 80041dc:	e005      	b.n	80041ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80041de:	2308      	movs	r3, #8
 80041e0:	617b      	str	r3, [r7, #20]
        break;
 80041e2:	e002      	b.n	80041ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80041e4:	2304      	movs	r3, #4
 80041e6:	617b      	str	r3, [r7, #20]
        break;
 80041e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80041ea:	f7fe fe9b 	bl	8002f24 <HAL_GetTick>
 80041ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041f0:	e01b      	b.n	800422a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041f2:	f7fe fe97 	bl	8002f24 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d914      	bls.n	800422a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f043 0210 	orr.w	r2, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f043 0201 	orr.w	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e007      	b.n	800423a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1dc      	bne.n	80041f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	a33fffff 	.word	0xa33fffff

08004248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff f82f 	bl	80032bc <LL_ADC_IsEnabled>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d169      	bne.n	8004338 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	4b36      	ldr	r3, [pc, #216]	; (8004344 <ADC_Enable+0xfc>)
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e055      	b.n	800433a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe ffea 	bl	800326c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004298:	482b      	ldr	r0, [pc, #172]	; (8004348 <ADC_Enable+0x100>)
 800429a:	f7fe fe99 	bl	8002fd0 <LL_ADC_GetCommonPathInternalCh>
 800429e:	4603      	mov	r3, r0
 80042a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042a8:	4b28      	ldr	r3, [pc, #160]	; (800434c <ADC_Enable+0x104>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	099b      	lsrs	r3, r3, #6
 80042ae:	4a28      	ldr	r2, [pc, #160]	; (8004350 <ADC_Enable+0x108>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80042c2:	e002      	b.n	80042ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f9      	bne.n	80042c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042d0:	f7fe fe28 	bl	8002f24 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042d6:	e028      	b.n	800432a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe ffed 	bl	80032bc <LL_ADC_IsEnabled>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe ffbd 	bl	800326c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042f2:	f7fe fe17 	bl	8002f24 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d914      	bls.n	800432a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d00d      	beq.n	800432a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f043 0210 	orr.w	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e007      	b.n	800433a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d1cf      	bne.n	80042d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	8000003f 	.word	0x8000003f
 8004348:	50040300 	.word	0x50040300
 800434c:	20000204 	.word	0x20000204
 8004350:	053e2d63 	.word	0x053e2d63

08004354 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe ffbe 	bl	80032e2 <LL_ADC_IsDisableOngoing>
 8004366:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe ffa5 	bl	80032bc <LL_ADC_IsEnabled>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d047      	beq.n	8004408 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d144      	bne.n	8004408 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030d 	and.w	r3, r3, #13
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10c      	bne.n	80043a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe ff7f 	bl	8003294 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2203      	movs	r2, #3
 800439c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800439e:	f7fe fdc1 	bl	8002f24 <HAL_GetTick>
 80043a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043a4:	e029      	b.n	80043fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f043 0201 	orr.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e023      	b.n	800440a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043c2:	f7fe fdaf 	bl	8002f24 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d914      	bls.n	80043fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f043 0210 	orr.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e007      	b.n	800440a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1dc      	bne.n	80043c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004428:	2b00      	cmp	r3, #0
 800442a:	d14b      	bne.n	80044c4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d021      	beq.n	800448a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fe23 	bl	8003096 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d032      	beq.n	80044bc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d12b      	bne.n	80044bc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11f      	bne.n	80044bc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
 8004488:	e018      	b.n	80044bc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d111      	bne.n	80044bc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff f9f8 	bl	80038b2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044c2:	e00e      	b.n	80044e2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff fa02 	bl	80038da <HAL_ADC_ErrorCallback>
}
 80044d6:	e004      	b.n	80044e2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff f9e4 	bl	80038c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff f9d4 	bl	80038da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <LL_ADC_IsEnabled>:
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <LL_ADC_IsEnabled+0x18>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_ADC_IsEnabled+0x1a>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_REG_IsConversionOngoing>:
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d101      	bne.n	8004578 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b09f      	sub	sp, #124	; 0x7c
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e093      	b.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80045ae:	2300      	movs	r3, #0
 80045b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80045b2:	2300      	movs	r3, #0
 80045b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a47      	ldr	r2, [pc, #284]	; (80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d102      	bne.n	80045c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	e001      	b.n	80045ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e072      	b.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ffb8 	bl	8004560 <LL_ADC_REG_IsConversionOngoing>
 80045f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ffb2 	bl	8004560 <LL_ADC_REG_IsConversionOngoing>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d154      	bne.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004604:	2b00      	cmp	r3, #0
 8004606:	d151      	bne.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800460a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02c      	beq.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004626:	035b      	lsls	r3, r3, #13
 8004628:	430b      	orrs	r3, r1
 800462a:	431a      	orrs	r2, r3
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004630:	4829      	ldr	r0, [pc, #164]	; (80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004632:	f7ff ff82 	bl	800453a <LL_ADC_IsEnabled>
 8004636:	4604      	mov	r4, r0
 8004638:	4828      	ldr	r0, [pc, #160]	; (80046dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800463a:	f7ff ff7e 	bl	800453a <LL_ADC_IsEnabled>
 800463e:	4603      	mov	r3, r0
 8004640:	431c      	orrs	r4, r3
 8004642:	4828      	ldr	r0, [pc, #160]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004644:	f7ff ff79 	bl	800453a <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	4323      	orrs	r3, r4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d137      	bne.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004658:	f023 030f 	bic.w	r3, r3, #15
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	6811      	ldr	r1, [r2, #0]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	430a      	orrs	r2, r1
 8004666:	431a      	orrs	r2, r3
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800466c:	e028      	b.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800467a:	4817      	ldr	r0, [pc, #92]	; (80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800467c:	f7ff ff5d 	bl	800453a <LL_ADC_IsEnabled>
 8004680:	4604      	mov	r4, r0
 8004682:	4816      	ldr	r0, [pc, #88]	; (80046dc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004684:	f7ff ff59 	bl	800453a <LL_ADC_IsEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	431c      	orrs	r4, r3
 800468c:	4815      	ldr	r0, [pc, #84]	; (80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800468e:	f7ff ff54 	bl	800453a <LL_ADC_IsEnabled>
 8004692:	4603      	mov	r3, r0
 8004694:	4323      	orrs	r3, r4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d112      	bne.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800469a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046a2:	f023 030f 	bic.w	r3, r3, #15
 80046a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046aa:	e009      	b.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80046be:	e000      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80046ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	377c      	adds	r7, #124	; 0x7c
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}
 80046d6:	bf00      	nop
 80046d8:	50040000 	.word	0x50040000
 80046dc:	50040100 	.word	0x50040100
 80046e0:	50040300 	.word	0x50040300
 80046e4:	50040200 	.word	0x50040200

080046e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <__NVIC_SetPriorityGrouping+0x44>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004704:	4013      	ands	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800471a:	4a04      	ldr	r2, [pc, #16]	; (800472c <__NVIC_SetPriorityGrouping+0x44>)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	60d3      	str	r3, [r2, #12]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <__NVIC_GetPriorityGrouping+0x18>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	f003 0307 	and.w	r3, r3, #7
}
 800473e:	4618      	mov	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475a:	2b00      	cmp	r3, #0
 800475c:	db0b      	blt.n	8004776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	f003 021f 	and.w	r2, r3, #31
 8004764:	4907      	ldr	r1, [pc, #28]	; (8004784 <__NVIC_EnableIRQ+0x38>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2001      	movs	r0, #1
 800476e:	fa00 f202 	lsl.w	r2, r0, r2
 8004772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000e100 	.word	0xe000e100

08004788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	db0a      	blt.n	80047b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	490c      	ldr	r1, [pc, #48]	; (80047d4 <__NVIC_SetPriority+0x4c>)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	0112      	lsls	r2, r2, #4
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	440b      	add	r3, r1
 80047ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b0:	e00a      	b.n	80047c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4908      	ldr	r1, [pc, #32]	; (80047d8 <__NVIC_SetPriority+0x50>)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3b04      	subs	r3, #4
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	440b      	add	r3, r1
 80047c6:	761a      	strb	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000e100 	.word	0xe000e100
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	; 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf28      	it	cs
 80047fa:	2304      	movcs	r3, #4
 80047fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3304      	adds	r3, #4
 8004802:	2b06      	cmp	r3, #6
 8004804:	d902      	bls.n	800480c <NVIC_EncodePriority+0x30>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3b03      	subs	r3, #3
 800480a:	e000      	b.n	800480e <NVIC_EncodePriority+0x32>
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	401a      	ands	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004824:	f04f 31ff 	mov.w	r1, #4294967295
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	43d9      	mvns	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	4313      	orrs	r3, r2
         );
}
 8004836:	4618      	mov	r0, r3
 8004838:	3724      	adds	r7, #36	; 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff4c 	bl	80046e8 <__NVIC_SetPriorityGrouping>
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800486a:	f7ff ff61 	bl	8004730 <__NVIC_GetPriorityGrouping>
 800486e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	6978      	ldr	r0, [r7, #20]
 8004876:	f7ff ffb1 	bl	80047dc <NVIC_EncodePriority>
 800487a:	4602      	mov	r2, r0
 800487c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff80 	bl	8004788 <__NVIC_SetPriority>
}
 8004888:	bf00      	nop
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff ff54 	bl	800474c <__NVIC_EnableIRQ>
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e014      	b.n	80048e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	791b      	ldrb	r3, [r3, #4]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fea6 	bl	8002620 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	795b      	ldrb	r3, [r3, #5]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_DAC_Start_DMA+0x1e>
 800490a:	2302      	movs	r3, #2
 800490c:	e0ab      	b.n	8004a66 <HAL_DAC_Start_DMA+0x176>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2202      	movs	r2, #2
 8004918:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d12f      	bne.n	8004980 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_DAC_Start_DMA+0x180>)
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a51      	ldr	r2, [pc, #324]	; (8004a74 <HAL_DAC_Start_DMA+0x184>)
 800492e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a50      	ldr	r2, [pc, #320]	; (8004a78 <HAL_DAC_Start_DMA+0x188>)
 8004936:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004946:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b08      	cmp	r3, #8
 800494c:	d013      	beq.n	8004976 <HAL_DAC_Start_DMA+0x86>
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d845      	bhi.n	80049e0 <HAL_DAC_Start_DMA+0xf0>
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_DAC_Start_DMA+0x72>
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d005      	beq.n	800496c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004960:	e03e      	b.n	80049e0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3308      	adds	r3, #8
 8004968:	613b      	str	r3, [r7, #16]
        break;
 800496a:	e03c      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	613b      	str	r3, [r7, #16]
        break;
 8004974:	e037      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3310      	adds	r3, #16
 800497c:	613b      	str	r3, [r7, #16]
        break;
 800497e:	e032      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a3d      	ldr	r2, [pc, #244]	; (8004a7c <HAL_DAC_Start_DMA+0x18c>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a3c      	ldr	r2, [pc, #240]	; (8004a80 <HAL_DAC_Start_DMA+0x190>)
 800498e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4a3b      	ldr	r2, [pc, #236]	; (8004a84 <HAL_DAC_Start_DMA+0x194>)
 8004996:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d013      	beq.n	80049d6 <HAL_DAC_Start_DMA+0xe6>
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d817      	bhi.n	80049e4 <HAL_DAC_Start_DMA+0xf4>
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_DAC_Start_DMA+0xd2>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d005      	beq.n	80049cc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80049c0:	e010      	b.n	80049e4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	613b      	str	r3, [r7, #16]
        break;
 80049ca:	e00c      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3318      	adds	r3, #24
 80049d2:	613b      	str	r3, [r7, #16]
        break;
 80049d4:	e007      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	331c      	adds	r3, #28
 80049dc:	613b      	str	r3, [r7, #16]
        break;
 80049de:	e002      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80049e4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d111      	bne.n	8004a10 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6898      	ldr	r0, [r3, #8]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	f000 fb35 	bl	8005074 <HAL_DMA_Start_IT>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	75fb      	strb	r3, [r7, #23]
 8004a0e:	e010      	b.n	8004a32 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68d8      	ldr	r0, [r3, #12]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	f000 fb23 	bl	8005074 <HAL_DMA_Start_IT>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e005      	b.n	8004a64 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f043 0204 	orr.w	r2, r3, #4
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	08004d83 	.word	0x08004d83
 8004a74:	08004da5 	.word	0x08004da5
 8004a78:	08004dc1 	.word	0x08004dc1
 8004a7c:	08004e99 	.word	0x08004e99
 8004a80:	08004ebb 	.word	0x08004ebb
 8004a84:	08004ed7 	.word	0x08004ed7

08004a88 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6819      	ldr	r1, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	400a      	ands	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2201      	movs	r2, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fb2c 	bl	8005134 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e00c      	b.n	8004b08 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fb1e 	bl	8005134 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b06:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b088      	sub	sp, #32
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	795b      	ldrb	r3, [r3, #5]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_DAC_ConfigChannel+0x1c>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e107      	b.n	8004d7a <HAL_DAC_ConfigChannel+0x22c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2202      	movs	r2, #2
 8004b74:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d174      	bne.n	8004c68 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004b7e:	f7fe f9d1 	bl	8002f24 <HAL_GetTick>
 8004b82:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d134      	bne.n	8004bf4 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b8a:	e011      	b.n	8004bb0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b8c:	f7fe f9ca 	bl	8002f24 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d90a      	bls.n	8004bb0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f043 0208 	orr.w	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e0e4      	b.n	8004d7a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e6      	bne.n	8004b8c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	f7fe f9bc 	bl	8002f3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	6992      	ldr	r2, [r2, #24]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8004bce:	e01e      	b.n	8004c0e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004bd0:	f7fe f9a8 	bl	8002f24 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d90a      	bls.n	8004bf4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f043 0208 	orr.w	r2, r3, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2203      	movs	r2, #3
 8004bee:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0c2      	b.n	8004d7a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dbe8      	blt.n	8004bd0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f7fe f99c 	bl	8002f3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	6992      	ldr	r2, [r2, #24]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	ea02 0103 	and.w	r1, r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	409a      	lsls	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	21ff      	movs	r1, #255	; 0xff
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	ea02 0103 	and.w	r1, r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d11d      	bne.n	8004cac <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	221f      	movs	r2, #31
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2207      	movs	r2, #7
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	43da      	mvns	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	400a      	ands	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6819      	ldr	r1, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	22c0      	movs	r2, #192	; 0xc0
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43da      	mvns	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	400a      	ands	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff febe 	bl	8004b12 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	711a      	strb	r2, [r3, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff feb7 	bl	8004b26 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f043 0204 	orr.w	r2, r3, #4
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fead 	bl	8004b3a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	711a      	strb	r2, [r3, #4]
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	795b      	ldrb	r3, [r3, #5]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_DACEx_NoiseWaveGenerate+0x18>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e024      	b.n	8004e50 <HAL_DACEx_NoiseWaveGenerate+0x62>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	ea02 0103 	and.w	r1, r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff ffd8 	bl	8004e5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	711a      	strb	r2, [r3, #4]
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff ffd1 	bl	8004e70 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f043 0204 	orr.w	r2, r3, #4
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff ffc7 	bl	8004e84 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	711a      	strb	r2, [r3, #4]
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e098      	b.n	8005048 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <HAL_DMA_Init+0x150>)
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d80f      	bhi.n	8004f42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <HAL_DMA_Init+0x154>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a4b      	ldr	r2, [pc, #300]	; (800505c <HAL_DMA_Init+0x158>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	009a      	lsls	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a48      	ldr	r2, [pc, #288]	; (8005060 <HAL_DMA_Init+0x15c>)
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004f40:	e00e      	b.n	8004f60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b46      	ldr	r3, [pc, #280]	; (8005064 <HAL_DMA_Init+0x160>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	4a43      	ldr	r2, [pc, #268]	; (800505c <HAL_DMA_Init+0x158>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	009a      	lsls	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a42      	ldr	r2, [pc, #264]	; (8005068 <HAL_DMA_Init+0x164>)
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fba:	d039      	beq.n	8005030 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	4a27      	ldr	r2, [pc, #156]	; (8005060 <HAL_DMA_Init+0x15c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d11a      	bne.n	8004ffc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fc6:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_DMA_Init+0x168>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f003 031c 	and.w	r3, r3, #28
 8004fd2:	210f      	movs	r1, #15
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	4924      	ldr	r1, [pc, #144]	; (800506c <HAL_DMA_Init+0x168>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <HAL_DMA_Init+0x168>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fec:	f003 031c 	and.w	r3, r3, #28
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	491d      	ldr	r1, [pc, #116]	; (800506c <HAL_DMA_Init+0x168>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]
 8004ffa:	e019      	b.n	8005030 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <HAL_DMA_Init+0x16c>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	f003 031c 	and.w	r3, r3, #28
 8005008:	210f      	movs	r1, #15
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	4917      	ldr	r1, [pc, #92]	; (8005070 <HAL_DMA_Init+0x16c>)
 8005012:	4013      	ands	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_DMA_Init+0x16c>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	f003 031c 	and.w	r3, r3, #28
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	4911      	ldr	r1, [pc, #68]	; (8005070 <HAL_DMA_Init+0x16c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40020407 	.word	0x40020407
 8005058:	bffdfff8 	.word	0xbffdfff8
 800505c:	cccccccd 	.word	0xcccccccd
 8005060:	40020000 	.word	0x40020000
 8005064:	bffdfbf8 	.word	0xbffdfbf8
 8005068:	40020400 	.word	0x40020400
 800506c:	400200a8 	.word	0x400200a8
 8005070:	400204a8 	.word	0x400204a8

08005074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_DMA_Start_IT+0x20>
 8005090:	2302      	movs	r3, #2
 8005092:	e04b      	b.n	800512c <HAL_DMA_Start_IT+0xb8>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d13a      	bne.n	800511e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f95f 	bl	8005390 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 020e 	orr.w	r2, r2, #14
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e00f      	b.n	800510c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0204 	bic.w	r2, r2, #4
 80050fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 020a 	orr.w	r2, r2, #10
 800510a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e005      	b.n	800512a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005126:	2302      	movs	r3, #2
 8005128:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800512a:	7dfb      	ldrb	r3, [r7, #23]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d008      	beq.n	800515e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2204      	movs	r2, #4
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e022      	b.n	80051a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 020e 	bic.w	r2, r2, #14
 800516c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f003 021c 	and.w	r2, r3, #28
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	2101      	movs	r1, #1
 800518c:	fa01 f202 	lsl.w	r2, r1, r2
 8005190:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d005      	beq.n	80051d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2204      	movs	r2, #4
 80051cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
 80051d2:	e029      	b.n	8005228 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 020e 	bic.w	r2, r2, #14
 80051e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	f003 021c 	and.w	r2, r3, #28
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2101      	movs	r1, #1
 8005202:	fa01 f202 	lsl.w	r2, r1, r2
 8005206:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
    }
  }
  return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f003 031c 	and.w	r3, r3, #28
 8005252:	2204      	movs	r2, #4
 8005254:	409a      	lsls	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4013      	ands	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d026      	beq.n	80052ac <HAL_DMA_IRQHandler+0x7a>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d021      	beq.n	80052ac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0204 	bic.w	r2, r2, #4
 8005284:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	f003 021c 	and.w	r2, r3, #28
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2104      	movs	r1, #4
 8005294:	fa01 f202 	lsl.w	r2, r1, r2
 8005298:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d071      	beq.n	8005386 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80052aa:	e06c      	b.n	8005386 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	f003 031c 	and.w	r3, r3, #28
 80052b4:	2202      	movs	r2, #2
 80052b6:	409a      	lsls	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02e      	beq.n	800531e <HAL_DMA_IRQHandler+0xec>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d029      	beq.n	800531e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 020a 	bic.w	r2, r2, #10
 80052e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f4:	f003 021c 	and.w	r2, r3, #28
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2102      	movs	r1, #2
 80052fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005302:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d038      	beq.n	8005386 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800531c:	e033      	b.n	8005386 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f003 031c 	and.w	r3, r3, #28
 8005326:	2208      	movs	r2, #8
 8005328:	409a      	lsls	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02a      	beq.n	8005388 <HAL_DMA_IRQHandler+0x156>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d025      	beq.n	8005388 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 020e 	bic.w	r2, r2, #14
 800534a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	f003 021c 	and.w	r2, r3, #28
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f202 	lsl.w	r2, r1, r2
 800535e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005386:	bf00      	nop
 8005388:	bf00      	nop
}
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f003 021c 	and.w	r2, r3, #28
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2101      	movs	r1, #1
 80053ac:	fa01 f202 	lsl.w	r2, r1, r2
 80053b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d108      	bne.n	80053d4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053d2:	e007      	b.n	80053e4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053fe:	e17f      	b.n	8005700 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8171 	beq.w	80056fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d005      	beq.n	8005430 <HAL_GPIO_Init+0x40>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d130      	bne.n	8005492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	2203      	movs	r2, #3
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005466:	2201      	movs	r2, #1
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0201 	and.w	r2, r3, #1
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b03      	cmp	r3, #3
 800549c:	d118      	bne.n	80054d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80054a4:	2201      	movs	r2, #1
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0201 	and.w	r2, r3, #1
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d017      	beq.n	800550c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	2203      	movs	r2, #3
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d123      	bne.n	8005560 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	08da      	lsrs	r2, r3, #3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3208      	adds	r2, #8
 8005520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	220f      	movs	r2, #15
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	08da      	lsrs	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3208      	adds	r2, #8
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	2203      	movs	r2, #3
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 0203 	and.w	r2, r3, #3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80ac 	beq.w	80056fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a2:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <HAL_GPIO_Init+0x330>)
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	4a5e      	ldr	r2, [pc, #376]	; (8005720 <HAL_GPIO_Init+0x330>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6613      	str	r3, [r2, #96]	; 0x60
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <HAL_GPIO_Init+0x330>)
 80055b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055ba:	4a5a      	ldr	r2, [pc, #360]	; (8005724 <HAL_GPIO_Init+0x334>)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	3302      	adds	r3, #2
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055e4:	d025      	beq.n	8005632 <HAL_GPIO_Init+0x242>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a4f      	ldr	r2, [pc, #316]	; (8005728 <HAL_GPIO_Init+0x338>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <HAL_GPIO_Init+0x23e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a4e      	ldr	r2, [pc, #312]	; (800572c <HAL_GPIO_Init+0x33c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d019      	beq.n	800562a <HAL_GPIO_Init+0x23a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4d      	ldr	r2, [pc, #308]	; (8005730 <HAL_GPIO_Init+0x340>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_GPIO_Init+0x236>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4c      	ldr	r2, [pc, #304]	; (8005734 <HAL_GPIO_Init+0x344>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00d      	beq.n	8005622 <HAL_GPIO_Init+0x232>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a4b      	ldr	r2, [pc, #300]	; (8005738 <HAL_GPIO_Init+0x348>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <HAL_GPIO_Init+0x22e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a4a      	ldr	r2, [pc, #296]	; (800573c <HAL_GPIO_Init+0x34c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_GPIO_Init+0x22a>
 8005616:	2306      	movs	r3, #6
 8005618:	e00c      	b.n	8005634 <HAL_GPIO_Init+0x244>
 800561a:	2307      	movs	r3, #7
 800561c:	e00a      	b.n	8005634 <HAL_GPIO_Init+0x244>
 800561e:	2305      	movs	r3, #5
 8005620:	e008      	b.n	8005634 <HAL_GPIO_Init+0x244>
 8005622:	2304      	movs	r3, #4
 8005624:	e006      	b.n	8005634 <HAL_GPIO_Init+0x244>
 8005626:	2303      	movs	r3, #3
 8005628:	e004      	b.n	8005634 <HAL_GPIO_Init+0x244>
 800562a:	2302      	movs	r3, #2
 800562c:	e002      	b.n	8005634 <HAL_GPIO_Init+0x244>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <HAL_GPIO_Init+0x244>
 8005632:	2300      	movs	r3, #0
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	f002 0203 	and.w	r2, r2, #3
 800563a:	0092      	lsls	r2, r2, #2
 800563c:	4093      	lsls	r3, r2
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005644:	4937      	ldr	r1, [pc, #220]	; (8005724 <HAL_GPIO_Init+0x334>)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	3302      	adds	r3, #2
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005652:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <HAL_GPIO_Init+0x350>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	43db      	mvns	r3, r3
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4013      	ands	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005676:	4a32      	ldr	r2, [pc, #200]	; (8005740 <HAL_GPIO_Init+0x350>)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <HAL_GPIO_Init+0x350>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	43db      	mvns	r3, r3
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <HAL_GPIO_Init+0x350>)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056a6:	4b26      	ldr	r3, [pc, #152]	; (8005740 <HAL_GPIO_Init+0x350>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	43db      	mvns	r3, r3
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <HAL_GPIO_Init+0x350>)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_GPIO_Init+0x350>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	43db      	mvns	r3, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4013      	ands	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056f4:	4a12      	ldr	r2, [pc, #72]	; (8005740 <HAL_GPIO_Init+0x350>)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	3301      	adds	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	f47f ae78 	bne.w	8005400 <HAL_GPIO_Init+0x10>
  }
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	40010000 	.word	0x40010000
 8005728:	48000400 	.word	0x48000400
 800572c:	48000800 	.word	0x48000800
 8005730:	48000c00 	.word	0x48000c00
 8005734:	48001000 	.word	0x48001000
 8005738:	48001400 	.word	0x48001400
 800573c:	48001800 	.word	0x48001800
 8005740:	40010400 	.word	0x40010400

08005744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <HAL_PWREx_GetVoltageRange+0x18>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40007000 	.word	0x40007000

08005760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576e:	d130      	bne.n	80057d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005770:	4b23      	ldr	r3, [pc, #140]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577c:	d038      	beq.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800577e:	4b20      	ldr	r3, [pc, #128]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800578c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2232      	movs	r2, #50	; 0x32
 8005794:	fb02 f303 	mul.w	r3, r2, r3
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	0c9b      	lsrs	r3, r3, #18
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057a4:	e002      	b.n	80057ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b8:	d102      	bne.n	80057c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f2      	bne.n	80057a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d110      	bne.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e00f      	b.n	80057f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057d2:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d007      	beq.n	80057f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057e8:	4a05      	ldr	r2, [pc, #20]	; (8005800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40007000 	.word	0x40007000
 8005804:	20000204 	.word	0x20000204
 8005808:	431bde83 	.word	0x431bde83

0800580c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e3ca      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581e:	4b97      	ldr	r3, [pc, #604]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005828:	4b94      	ldr	r3, [pc, #592]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80e4 	beq.w	8005a08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_RCC_OscConfig+0x4a>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	f040 808b 	bne.w	8005964 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b01      	cmp	r3, #1
 8005852:	f040 8087 	bne.w	8005964 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005856:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCC_OscConfig+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e3a2      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	4b82      	ldr	r3, [pc, #520]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <HAL_RCC_OscConfig+0x7c>
 800587e:	4b7f      	ldr	r3, [pc, #508]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005886:	e005      	b.n	8005894 <HAL_RCC_OscConfig+0x88>
 8005888:	4b7c      	ldr	r3, [pc, #496]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588e:	091b      	lsrs	r3, r3, #4
 8005890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005894:	4293      	cmp	r3, r2
 8005896:	d223      	bcs.n	80058e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fd87 	bl	80063b0 <RCC_SetFlashLatencyFromMSIRange>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e383      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058ac:	4b73      	ldr	r3, [pc, #460]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a72      	ldr	r2, [pc, #456]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058b2:	f043 0308 	orr.w	r3, r3, #8
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	4b70      	ldr	r3, [pc, #448]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	496d      	ldr	r1, [pc, #436]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ca:	4b6c      	ldr	r3, [pc, #432]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	4968      	ldr	r1, [pc, #416]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	604b      	str	r3, [r1, #4]
 80058de:	e025      	b.n	800592c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058e0:	4b66      	ldr	r3, [pc, #408]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a65      	ldr	r2, [pc, #404]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058e6:	f043 0308 	orr.w	r3, r3, #8
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	4960      	ldr	r1, [pc, #384]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058fe:	4b5f      	ldr	r3, [pc, #380]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	495b      	ldr	r1, [pc, #364]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 800590e:	4313      	orrs	r3, r2
 8005910:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fd47 	bl	80063b0 <RCC_SetFlashLatencyFromMSIRange>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e343      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800592c:	f000 fc4a 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 8005930:	4602      	mov	r2, r0
 8005932:	4b52      	ldr	r3, [pc, #328]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	4950      	ldr	r1, [pc, #320]	; (8005a80 <HAL_RCC_OscConfig+0x274>)
 800593e:	5ccb      	ldrb	r3, [r1, r3]
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
 8005948:	4a4e      	ldr	r2, [pc, #312]	; (8005a84 <HAL_RCC_OscConfig+0x278>)
 800594a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800594c:	4b4e      	ldr	r3, [pc, #312]	; (8005a88 <HAL_RCC_OscConfig+0x27c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f7fd f827 	bl	80029a4 <HAL_InitTick>
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d052      	beq.n	8005a06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	e327      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d032      	beq.n	80059d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800596c:	4b43      	ldr	r3, [pc, #268]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a42      	ldr	r2, [pc, #264]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005978:	f7fd fad4 	bl	8002f24 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005980:	f7fd fad0 	bl	8002f24 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e310      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005992:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800599e:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a36      	ldr	r2, [pc, #216]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059a4:	f043 0308 	orr.w	r3, r3, #8
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	4931      	ldr	r1, [pc, #196]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059bc:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	492c      	ldr	r1, [pc, #176]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	604b      	str	r3, [r1, #4]
 80059d0:	e01a      	b.n	8005a08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059d2:	4b2a      	ldr	r3, [pc, #168]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059de:	f7fd faa1 	bl	8002f24 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059e6:	f7fd fa9d 	bl	8002f24 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e2dd      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x1da>
 8005a04:	e000      	b.n	8005a08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d074      	beq.n	8005afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d005      	beq.n	8005a26 <HAL_RCC_OscConfig+0x21a>
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b0c      	cmp	r3, #12
 8005a1e:	d10e      	bne.n	8005a3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d10b      	bne.n	8005a3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d064      	beq.n	8005afc <HAL_RCC_OscConfig+0x2f0>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d160      	bne.n	8005afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e2ba      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a46:	d106      	bne.n	8005a56 <HAL_RCC_OscConfig+0x24a>
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a0b      	ldr	r2, [pc, #44]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	e026      	b.n	8005aa4 <HAL_RCC_OscConfig+0x298>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a5e:	d115      	bne.n	8005a8c <HAL_RCC_OscConfig+0x280>
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a05      	ldr	r2, [pc, #20]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a02      	ldr	r2, [pc, #8]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 8005a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e014      	b.n	8005aa4 <HAL_RCC_OscConfig+0x298>
 8005a7a:	bf00      	nop
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	080116c8 	.word	0x080116c8
 8005a84:	20000204 	.word	0x20000204
 8005a88:	20000208 	.word	0x20000208
 8005a8c:	4ba0      	ldr	r3, [pc, #640]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a9f      	ldr	r2, [pc, #636]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4b9d      	ldr	r3, [pc, #628]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a9c      	ldr	r2, [pc, #624]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fd fa3a 	bl	8002f24 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab4:	f7fd fa36 	bl	8002f24 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b64      	cmp	r3, #100	; 0x64
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e276      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ac6:	4b92      	ldr	r3, [pc, #584]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f0      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x2a8>
 8005ad2:	e014      	b.n	8005afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad4:	f7fd fa26 	bl	8002f24 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005adc:	f7fd fa22 	bl	8002f24 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e262      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aee:	4b88      	ldr	r3, [pc, #544]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x2d0>
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d060      	beq.n	8005bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_OscConfig+0x310>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b0c      	cmp	r3, #12
 8005b14:	d119      	bne.n	8005b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d116      	bne.n	8005b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b1c:	4b7c      	ldr	r3, [pc, #496]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_OscConfig+0x328>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e23f      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b34:	4b76      	ldr	r3, [pc, #472]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	4973      	ldr	r1, [pc, #460]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b48:	e040      	b.n	8005bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d023      	beq.n	8005b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b52:	4b6f      	ldr	r3, [pc, #444]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a6e      	ldr	r2, [pc, #440]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5e:	f7fd f9e1 	bl	8002f24 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b66:	f7fd f9dd 	bl	8002f24 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e21d      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b78:	4b65      	ldr	r3, [pc, #404]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b84:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	495f      	ldr	r1, [pc, #380]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	604b      	str	r3, [r1, #4]
 8005b98:	e018      	b.n	8005bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b9a:	4b5d      	ldr	r3, [pc, #372]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a5c      	ldr	r2, [pc, #368]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fd f9bd 	bl	8002f24 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bae:	f7fd f9b9 	bl	8002f24 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e1f9      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bc0:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03c      	beq.n	8005c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01c      	beq.n	8005c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be0:	4b4b      	ldr	r3, [pc, #300]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be6:	4a4a      	ldr	r2, [pc, #296]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fd f998 	bl	8002f24 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf8:	f7fd f994 	bl	8002f24 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e1d4      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c0a:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0ef      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x3ec>
 8005c18:	e01b      	b.n	8005c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c20:	4a3b      	ldr	r2, [pc, #236]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2a:	f7fd f97b 	bl	8002f24 <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c32:	f7fd f977 	bl	8002f24 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e1b7      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c44:	4b32      	ldr	r3, [pc, #200]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1ef      	bne.n	8005c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 80a6 	beq.w	8005dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c64:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c70:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c7c:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8c:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <HAL_RCC_OscConfig+0x508>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d118      	bne.n	8005cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <HAL_RCC_OscConfig+0x508>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <HAL_RCC_OscConfig+0x508>)
 8005c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ca4:	f7fd f93e 	bl	8002f24 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cac:	f7fd f93a 	bl	8002f24 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e17a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <HAL_RCC_OscConfig+0x508>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d108      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x4d8>
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ce2:	e029      	b.n	8005d38 <HAL_RCC_OscConfig+0x52c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d115      	bne.n	8005d18 <HAL_RCC_OscConfig+0x50c>
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005cf4:	f043 0304 	orr.w	r3, r3, #4
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	4a03      	ldr	r2, [pc, #12]	; (8005d10 <HAL_RCC_OscConfig+0x504>)
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d0c:	e014      	b.n	8005d38 <HAL_RCC_OscConfig+0x52c>
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40007000 	.word	0x40007000
 8005d18:	4b9c      	ldr	r3, [pc, #624]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	4a9b      	ldr	r2, [pc, #620]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d28:	4b98      	ldr	r3, [pc, #608]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	4a97      	ldr	r2, [pc, #604]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005d30:	f023 0304 	bic.w	r3, r3, #4
 8005d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d016      	beq.n	8005d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fd f8f0 	bl	8002f24 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fd f8ec 	bl	8002f24 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e12a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d5e:	4b8b      	ldr	r3, [pc, #556]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0ed      	beq.n	8005d48 <HAL_RCC_OscConfig+0x53c>
 8005d6c:	e015      	b.n	8005d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6e:	f7fd f8d9 	bl	8002f24 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fd f8d5 	bl	8002f24 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e113      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d8c:	4b7f      	ldr	r3, [pc, #508]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1ed      	bne.n	8005d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d9a:	7ffb      	ldrb	r3, [r7, #31]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d105      	bne.n	8005dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da0:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	4a79      	ldr	r2, [pc, #484]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005daa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80fe 	beq.w	8005fb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	f040 80d0 	bne.w	8005f60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005dc0:	4b72      	ldr	r3, [pc, #456]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 0203 	and.w	r2, r3, #3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d130      	bne.n	8005e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	3b01      	subs	r3, #1
 8005de0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d127      	bne.n	8005e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d11f      	bne.n	8005e36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e00:	2a07      	cmp	r2, #7
 8005e02:	bf14      	ite	ne
 8005e04:	2201      	movne	r2, #1
 8005e06:	2200      	moveq	r2, #0
 8005e08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d113      	bne.n	8005e36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d109      	bne.n	8005e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d06e      	beq.n	8005f14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d069      	beq.n	8005f10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e3c:	4b53      	ldr	r3, [pc, #332]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e48:	4b50      	ldr	r3, [pc, #320]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0ad      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e58:	4b4c      	ldr	r3, [pc, #304]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e64:	f7fd f85e 	bl	8002f24 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e6c:	f7fd f85a 	bl	8002f24 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e09a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e7e:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1f0      	bne.n	8005e6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e8a:	4b40      	ldr	r3, [pc, #256]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	4b40      	ldr	r3, [pc, #256]	; (8005f90 <HAL_RCC_OscConfig+0x784>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e9a:	3a01      	subs	r2, #1
 8005e9c:	0112      	lsls	r2, r2, #4
 8005e9e:	4311      	orrs	r1, r2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ea4:	0212      	lsls	r2, r2, #8
 8005ea6:	4311      	orrs	r1, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005eac:	0852      	lsrs	r2, r2, #1
 8005eae:	3a01      	subs	r2, #1
 8005eb0:	0552      	lsls	r2, r2, #21
 8005eb2:	4311      	orrs	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005eb8:	0852      	lsrs	r2, r2, #1
 8005eba:	3a01      	subs	r2, #1
 8005ebc:	0652      	lsls	r2, r2, #25
 8005ebe:	4311      	orrs	r1, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ec4:	0912      	lsrs	r2, r2, #4
 8005ec6:	0452      	lsls	r2, r2, #17
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	4930      	ldr	r1, [pc, #192]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ed0:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2d      	ldr	r2, [pc, #180]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005edc:	4b2b      	ldr	r3, [pc, #172]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a2a      	ldr	r2, [pc, #168]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ee8:	f7fd f81c 	bl	8002f24 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fd f818 	bl	8002f24 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e058      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f0e:	e050      	b.n	8005fb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e04f      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d148      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f2c:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f38:	f7fc fff4 	bl	8002f24 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f40:	f7fc fff0 	bl	8002f24 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e030      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x734>
 8005f5e:	e028      	b.n	8005fb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d023      	beq.n	8005fae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <HAL_RCC_OscConfig+0x780>)
 8005f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f72:	f7fc ffd7 	bl	8002f24 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f78:	e00c      	b.n	8005f94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7a:	f7fc ffd3 	bl	8002f24 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d905      	bls.n	8005f94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e013      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f94:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <HAL_RCC_OscConfig+0x7b0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1ec      	bne.n	8005f7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <HAL_RCC_OscConfig+0x7b0>)
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	4905      	ldr	r1, [pc, #20]	; (8005fbc <HAL_RCC_OscConfig+0x7b0>)
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCC_OscConfig+0x7b4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60cb      	str	r3, [r1, #12]
 8005fac:	e001      	b.n	8005fb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3720      	adds	r7, #32
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	feeefffc 	.word	0xfeeefffc

08005fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0e7      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b75      	ldr	r3, [pc, #468]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d910      	bls.n	8006008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b72      	ldr	r3, [pc, #456]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 0207 	bic.w	r2, r3, #7
 8005fee:	4970      	ldr	r1, [pc, #448]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b6e      	ldr	r3, [pc, #440]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0cf      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d010      	beq.n	8006036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006020:	429a      	cmp	r2, r3
 8006022:	d908      	bls.n	8006036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006024:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4960      	ldr	r1, [pc, #384]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04c      	beq.n	80060dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b03      	cmp	r3, #3
 8006048:	d107      	bne.n	800605a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800604a:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d121      	bne.n	800609a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0a6      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d107      	bne.n	8006072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006062:	4b54      	ldr	r3, [pc, #336]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d115      	bne.n	800609a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e09a      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800607a:	4b4e      	ldr	r3, [pc, #312]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e08e      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800608a:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e086      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4943      	ldr	r1, [pc, #268]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ac:	f7fc ff3a 	bl	8002f24 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fc ff36 	bl	8002f24 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e06e      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b3a      	ldr	r3, [pc, #232]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d208      	bcs.n	800610a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f8:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	492b      	ldr	r1, [pc, #172]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800610a:	4b29      	ldr	r3, [pc, #164]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d210      	bcs.n	800613a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 0207 	bic.w	r2, r3, #7
 8006120:	4923      	ldr	r1, [pc, #140]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006128:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <HAL_RCC_ClockConfig+0x1ec>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e036      	b.n	80061a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4918      	ldr	r1, [pc, #96]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006154:	4313      	orrs	r3, r2
 8006156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4910      	ldr	r1, [pc, #64]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006178:	f000 f824 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <HAL_RCC_ClockConfig+0x1f0>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	490b      	ldr	r1, [pc, #44]	; (80061b8 <HAL_RCC_ClockConfig+0x1f4>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	4a09      	ldr	r2, [pc, #36]	; (80061bc <HAL_RCC_ClockConfig+0x1f8>)
 8006196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <HAL_RCC_ClockConfig+0x1fc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fc fc01 	bl	80029a4 <HAL_InitTick>
 80061a2:	4603      	mov	r3, r0
 80061a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80061a6:	7afb      	ldrb	r3, [r7, #11]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40022000 	.word	0x40022000
 80061b4:	40021000 	.word	0x40021000
 80061b8:	080116c8 	.word	0x080116c8
 80061bc:	20000204 	.word	0x20000204
 80061c0:	20000208 	.word	0x20000208

080061c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b089      	sub	sp, #36	; 0x24
 80061c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d2:	4b3e      	ldr	r3, [pc, #248]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
 80061da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061dc:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0303 	and.w	r3, r3, #3
 80061e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x34>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	d121      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d11e      	bne.n	8006236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061f8:	4b34      	ldr	r3, [pc, #208]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006204:	4b31      	ldr	r3, [pc, #196]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e005      	b.n	8006220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006214:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006220:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10d      	bne.n	800624c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006234:	e00a      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b04      	cmp	r3, #4
 800623a:	d102      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800623c:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	e004      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b08      	cmp	r3, #8
 8006246:	d101      	bne.n	800624c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006248:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800624a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d134      	bne.n	80062bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d003      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0xa6>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d003      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0xac>
 8006268:	e005      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800626c:	617b      	str	r3, [r7, #20]
      break;
 800626e:	e005      	b.n	800627c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006270:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006272:	617b      	str	r3, [r7, #20]
      break;
 8006274:	e002      	b.n	800627c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	617b      	str	r3, [r7, #20]
      break;
 800627a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	3301      	adds	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800628a:	4b10      	ldr	r3, [pc, #64]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	fb03 f202 	mul.w	r2, r3, r2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_RCC_GetSysClockFreq+0x108>)
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	0e5b      	lsrs	r3, r3, #25
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	3301      	adds	r3, #1
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062bc:	69bb      	ldr	r3, [r7, #24]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3724      	adds	r7, #36	; 0x24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40021000 	.word	0x40021000
 80062d0:	080116e0 	.word	0x080116e0
 80062d4:	00f42400 	.word	0x00f42400
 80062d8:	007a1200 	.word	0x007a1200

080062dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e0:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e2:	681b      	ldr	r3, [r3, #0]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000204 	.word	0x20000204

080062f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062f8:	f7ff fff0 	bl	80062dc <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4904      	ldr	r1, [pc, #16]	; (800631c <HAL_RCC_GetPCLK1Freq+0x28>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40021000 	.word	0x40021000
 800631c:	080116d8 	.word	0x080116d8

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006324:	f7ff ffda 	bl	80062dc <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0adb      	lsrs	r3, r3, #11
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4904      	ldr	r1, [pc, #16]	; (8006348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40021000 	.word	0x40021000
 8006348:	080116d8 	.word	0x080116d8

0800634c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	220f      	movs	r2, #15
 800635a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800635c:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0203 	and.w	r2, r3, #3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006380:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	08db      	lsrs	r3, r3, #3
 8006386:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <HAL_RCC_GetClockConfig+0x60>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0207 	and.w	r2, r3, #7
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40022000 	.word	0x40022000

080063b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063bc:	4b2a      	ldr	r3, [pc, #168]	; (8006468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063c8:	f7ff f9bc 	bl	8005744 <HAL_PWREx_GetVoltageRange>
 80063cc:	6178      	str	r0, [r7, #20]
 80063ce:	e014      	b.n	80063fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063d0:	4b25      	ldr	r3, [pc, #148]	; (8006468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	4a24      	ldr	r2, [pc, #144]	; (8006468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063da:	6593      	str	r3, [r2, #88]	; 0x58
 80063dc:	4b22      	ldr	r3, [pc, #136]	; (8006468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063e8:	f7ff f9ac 	bl	8005744 <HAL_PWREx_GetVoltageRange>
 80063ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f2:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006400:	d10b      	bne.n	800641a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d919      	bls.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2ba0      	cmp	r3, #160	; 0xa0
 800640c:	d902      	bls.n	8006414 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800640e:	2302      	movs	r3, #2
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	e013      	b.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006414:	2301      	movs	r3, #1
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	e010      	b.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b80      	cmp	r3, #128	; 0x80
 800641e:	d902      	bls.n	8006426 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006420:	2303      	movs	r3, #3
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e00a      	b.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d102      	bne.n	8006432 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800642c:	2302      	movs	r3, #2
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	e004      	b.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b70      	cmp	r3, #112	; 0x70
 8006436:	d101      	bne.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006438:	2301      	movs	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f023 0207 	bic.w	r2, r3, #7
 8006444:	4909      	ldr	r1, [pc, #36]	; (800646c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d001      	beq.n	800645e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	40022000 	.word	0x40022000

08006470 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006478:	2300      	movs	r3, #0
 800647a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800647c:	2300      	movs	r3, #0
 800647e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006488:	2b00      	cmp	r3, #0
 800648a:	d041      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006490:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006494:	d02a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006496:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800649a:	d824      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800649c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a0:	d008      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80064a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a6:	d81e      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80064ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b0:	d010      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064b2:	e018      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064b4:	4b86      	ldr	r3, [pc, #536]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	4a85      	ldr	r2, [pc, #532]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064c0:	e015      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2100      	movs	r1, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fabb 	bl	8006a44 <RCCEx_PLLSAI1_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064d2:	e00c      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3320      	adds	r3, #32
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fba6 	bl	8006c2c <RCCEx_PLLSAI2_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064e4:	e003      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	74fb      	strb	r3, [r7, #19]
      break;
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ee:	7cfb      	ldrb	r3, [r7, #19]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064f4:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006502:	4973      	ldr	r1, [pc, #460]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800650a:	e001      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	7cfb      	ldrb	r3, [r7, #19]
 800650e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d041      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006520:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006524:	d02a      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006526:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800652a:	d824      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800652c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006530:	d008      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006536:	d81e      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800653c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006540:	d010      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006542:	e018      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006544:	4b62      	ldr	r3, [pc, #392]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a61      	ldr	r2, [pc, #388]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006550:	e015      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3304      	adds	r3, #4
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fa73 	bl	8006a44 <RCCEx_PLLSAI1_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006562:	e00c      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3320      	adds	r3, #32
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fb5e 	bl	8006c2c <RCCEx_PLLSAI2_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	74fb      	strb	r3, [r7, #19]
      break;
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800657c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657e:	7cfb      	ldrb	r3, [r7, #19]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006584:	4b52      	ldr	r3, [pc, #328]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006592:	494f      	ldr	r1, [pc, #316]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800659a:	e001      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 80a0 	beq.w	80066ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ae:	2300      	movs	r3, #0
 80065b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065b2:	4b47      	ldr	r3, [pc, #284]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c8:	4b41      	ldr	r3, [pc, #260]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	4a40      	ldr	r2, [pc, #256]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	6593      	str	r3, [r2, #88]	; 0x58
 80065d4:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e0:	2301      	movs	r3, #1
 80065e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065e4:	4b3b      	ldr	r3, [pc, #236]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a3a      	ldr	r2, [pc, #232]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065f0:	f7fc fc98 	bl	8002f24 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065f6:	e009      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f8:	f7fc fc94 	bl	8002f24 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d902      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	74fb      	strb	r3, [r7, #19]
        break;
 800660a:	e005      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800660c:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ef      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d15c      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800661e:	4b2c      	ldr	r3, [pc, #176]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006628:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01f      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	429a      	cmp	r2, r3
 800663a:	d019      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800663c:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006648:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	4a20      	ldr	r2, [pc, #128]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800665a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665e:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d016      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fc fc53 	bl	8002f24 <HAL_GetTick>
 800667e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006680:	e00b      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006682:	f7fc fc4f 	bl	8002f24 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006690:	4293      	cmp	r3, r2
 8006692:	d902      	bls.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	74fb      	strb	r3, [r7, #19]
            break;
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800669c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ec      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80066a8:	7cfb      	ldrb	r3, [r7, #19]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066be:	4904      	ldr	r1, [pc, #16]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066c6:	e009      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
 80066ca:	74bb      	strb	r3, [r7, #18]
 80066cc:	e006      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
 80066d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d8:	7cfb      	ldrb	r3, [r7, #19]
 80066da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066dc:	7c7b      	ldrb	r3, [r7, #17]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d105      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e2:	4b9e      	ldr	r3, [pc, #632]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	4a9d      	ldr	r2, [pc, #628]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066fa:	4b98      	ldr	r3, [pc, #608]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f023 0203 	bic.w	r2, r3, #3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	4994      	ldr	r1, [pc, #592]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800671c:	4b8f      	ldr	r3, [pc, #572]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f023 020c 	bic.w	r2, r3, #12
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672a:	498c      	ldr	r1, [pc, #560]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800673e:	4b87      	ldr	r3, [pc, #540]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006744:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	4983      	ldr	r1, [pc, #524]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006760:	4b7e      	ldr	r3, [pc, #504]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	497b      	ldr	r1, [pc, #492]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006782:	4b76      	ldr	r3, [pc, #472]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006790:	4972      	ldr	r1, [pc, #456]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067a4:	4b6d      	ldr	r3, [pc, #436]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b2:	496a      	ldr	r1, [pc, #424]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067c6:	4b65      	ldr	r3, [pc, #404]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d4:	4961      	ldr	r1, [pc, #388]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067e8:	4b5c      	ldr	r3, [pc, #368]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f6:	4959      	ldr	r1, [pc, #356]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800680a:	4b54      	ldr	r3, [pc, #336]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006818:	4950      	ldr	r1, [pc, #320]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800681a:	4313      	orrs	r3, r2
 800681c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800682c:	4b4b      	ldr	r3, [pc, #300]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006832:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	4948      	ldr	r1, [pc, #288]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800684e:	4b43      	ldr	r3, [pc, #268]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	493f      	ldr	r1, [pc, #252]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d028      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006870:	4b3a      	ldr	r3, [pc, #232]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687e:	4937      	ldr	r1, [pc, #220]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688e:	d106      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006890:	4b32      	ldr	r3, [pc, #200]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4a31      	ldr	r2, [pc, #196]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800689a:	60d3      	str	r3, [r2, #12]
 800689c:	e011      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a6:	d10c      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f8c8 	bl	8006a44 <RCCEx_PLLSAI1_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80068b8:	7cfb      	ldrb	r3, [r7, #19]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80068be:	7cfb      	ldrb	r3, [r7, #19]
 80068c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d028      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068ce:	4b23      	ldr	r3, [pc, #140]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	491f      	ldr	r1, [pc, #124]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ec:	d106      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ee:	4b1b      	ldr	r3, [pc, #108]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	4a1a      	ldr	r2, [pc, #104]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068f8:	60d3      	str	r3, [r2, #12]
 80068fa:	e011      	b.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006904:	d10c      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3304      	adds	r3, #4
 800690a:	2101      	movs	r1, #1
 800690c:	4618      	mov	r0, r3
 800690e:	f000 f899 	bl	8006a44 <RCCEx_PLLSAI1_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006916:	7cfb      	ldrb	r3, [r7, #19]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800691c:	7cfb      	ldrb	r3, [r7, #19]
 800691e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d02b      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693a:	4908      	ldr	r1, [pc, #32]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694a:	d109      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	4a02      	ldr	r2, [pc, #8]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006956:	60d3      	str	r3, [r2, #12]
 8006958:	e014      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006968:	d10c      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3304      	adds	r3, #4
 800696e:	2101      	movs	r1, #1
 8006970:	4618      	mov	r0, r3
 8006972:	f000 f867 	bl	8006a44 <RCCEx_PLLSAI1_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800697a:	7cfb      	ldrb	r3, [r7, #19]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006980:	7cfb      	ldrb	r3, [r7, #19]
 8006982:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d02f      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006990:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006996:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699e:	4928      	ldr	r1, [pc, #160]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ae:	d10d      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	2102      	movs	r1, #2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f844 	bl	8006a44 <RCCEx_PLLSAI1_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d014      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80069c6:	7cfb      	ldrb	r3, [r7, #19]
 80069c8:	74bb      	strb	r3, [r7, #18]
 80069ca:	e011      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d4:	d10c      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3320      	adds	r3, #32
 80069da:	2102      	movs	r1, #2
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f925 	bl	8006c2c <RCCEx_PLLSAI2_Config>
 80069e2:	4603      	mov	r3, r0
 80069e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80069ec:	7cfb      	ldrb	r3, [r7, #19]
 80069ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0a:	490d      	ldr	r1, [pc, #52]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a2e:	4904      	ldr	r1, [pc, #16]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a36:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40021000 	.word	0x40021000

08006a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a52:	4b75      	ldr	r3, [pc, #468]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a5e:	4b72      	ldr	r3, [pc, #456]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f003 0203 	and.w	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d10d      	bne.n	8006a8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
       ||
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a76:	4b6c      	ldr	r3, [pc, #432]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	091b      	lsrs	r3, r3, #4
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
       ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d047      	beq.n	8006b1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e044      	b.n	8006b1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d018      	beq.n	8006aca <RCCEx_PLLSAI1_Config+0x86>
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d825      	bhi.n	8006ae8 <RCCEx_PLLSAI1_Config+0xa4>
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d002      	beq.n	8006aa6 <RCCEx_PLLSAI1_Config+0x62>
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d009      	beq.n	8006ab8 <RCCEx_PLLSAI1_Config+0x74>
 8006aa4:	e020      	b.n	8006ae8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006aa6:	4b60      	ldr	r3, [pc, #384]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d11d      	bne.n	8006aee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ab6:	e01a      	b.n	8006aee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ab8:	4b5b      	ldr	r3, [pc, #364]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d116      	bne.n	8006af2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ac8:	e013      	b.n	8006af2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006aca:	4b57      	ldr	r3, [pc, #348]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ad6:	4b54      	ldr	r3, [pc, #336]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ae6:	e006      	b.n	8006af6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
      break;
 8006aec:	e004      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006afe:	4b4a      	ldr	r3, [pc, #296]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	430b      	orrs	r3, r1
 8006b14:	4944      	ldr	r1, [pc, #272]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d17d      	bne.n	8006c1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b20:	4b41      	ldr	r3, [pc, #260]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a40      	ldr	r2, [pc, #256]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2c:	f7fc f9fa 	bl	8002f24 <HAL_GetTick>
 8006b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b32:	e009      	b.n	8006b48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b34:	f7fc f9f6 	bl	8002f24 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d902      	bls.n	8006b48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	73fb      	strb	r3, [r7, #15]
        break;
 8006b46:	e005      	b.n	8006b54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b48:	4b37      	ldr	r3, [pc, #220]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1ef      	bne.n	8006b34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d160      	bne.n	8006c1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d111      	bne.n	8006b84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b60:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6892      	ldr	r2, [r2, #8]
 8006b70:	0211      	lsls	r1, r2, #8
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68d2      	ldr	r2, [r2, #12]
 8006b76:	0912      	lsrs	r2, r2, #4
 8006b78:	0452      	lsls	r2, r2, #17
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	492a      	ldr	r1, [pc, #168]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	610b      	str	r3, [r1, #16]
 8006b82:	e027      	b.n	8006bd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d112      	bne.n	8006bb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b8a:	4b27      	ldr	r3, [pc, #156]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6892      	ldr	r2, [r2, #8]
 8006b9a:	0211      	lsls	r1, r2, #8
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6912      	ldr	r2, [r2, #16]
 8006ba0:	0852      	lsrs	r2, r2, #1
 8006ba2:	3a01      	subs	r2, #1
 8006ba4:	0552      	lsls	r2, r2, #21
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	491f      	ldr	r1, [pc, #124]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	610b      	str	r3, [r1, #16]
 8006bae:	e011      	b.n	8006bd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6892      	ldr	r2, [r2, #8]
 8006bc0:	0211      	lsls	r1, r2, #8
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6952      	ldr	r2, [r2, #20]
 8006bc6:	0852      	lsrs	r2, r2, #1
 8006bc8:	3a01      	subs	r2, #1
 8006bca:	0652      	lsls	r2, r2, #25
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	4916      	ldr	r1, [pc, #88]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bd4:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be0:	f7fc f9a0 	bl	8002f24 <HAL_GetTick>
 8006be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006be6:	e009      	b.n	8006bfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006be8:	f7fc f99c 	bl	8002f24 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d902      	bls.n	8006bfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8006bfa:	e005      	b.n	8006c08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0ef      	beq.n	8006be8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	4904      	ldr	r1, [pc, #16]	; (8006c28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	40021000 	.word	0x40021000

08006c2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c3a:	4b6a      	ldr	r3, [pc, #424]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d018      	beq.n	8006c78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c46:	4b67      	ldr	r3, [pc, #412]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0203 	and.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d10d      	bne.n	8006c72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
       ||
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006c5e:	4b61      	ldr	r3, [pc, #388]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d047      	beq.n	8006d02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
 8006c76:	e044      	b.n	8006d02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d018      	beq.n	8006cb2 <RCCEx_PLLSAI2_Config+0x86>
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d825      	bhi.n	8006cd0 <RCCEx_PLLSAI2_Config+0xa4>
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d002      	beq.n	8006c8e <RCCEx_PLLSAI2_Config+0x62>
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d009      	beq.n	8006ca0 <RCCEx_PLLSAI2_Config+0x74>
 8006c8c:	e020      	b.n	8006cd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c8e:	4b55      	ldr	r3, [pc, #340]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11d      	bne.n	8006cd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c9e:	e01a      	b.n	8006cd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ca0:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d116      	bne.n	8006cda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cb0:	e013      	b.n	8006cda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cb2:	4b4c      	ldr	r3, [pc, #304]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10f      	bne.n	8006cde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cbe:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cce:	e006      	b.n	8006cde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e004      	b.n	8006ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e002      	b.n	8006ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cda:	bf00      	nop
 8006cdc:	e000      	b.n	8006ce0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006cde:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10d      	bne.n	8006d02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ce6:	4b3f      	ldr	r3, [pc, #252]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6819      	ldr	r1, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	4939      	ldr	r1, [pc, #228]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d167      	bne.n	8006dd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d08:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a35      	ldr	r2, [pc, #212]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d14:	f7fc f906 	bl	8002f24 <HAL_GetTick>
 8006d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d1a:	e009      	b.n	8006d30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d1c:	f7fc f902 	bl	8002f24 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d902      	bls.n	8006d30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8006d2e:	e005      	b.n	8006d3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d30:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ef      	bne.n	8006d1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d14a      	bne.n	8006dd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d111      	bne.n	8006d6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d48:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6892      	ldr	r2, [r2, #8]
 8006d58:	0211      	lsls	r1, r2, #8
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68d2      	ldr	r2, [r2, #12]
 8006d5e:	0912      	lsrs	r2, r2, #4
 8006d60:	0452      	lsls	r2, r2, #17
 8006d62:	430a      	orrs	r2, r1
 8006d64:	491f      	ldr	r1, [pc, #124]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	614b      	str	r3, [r1, #20]
 8006d6a:	e011      	b.n	8006d90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6892      	ldr	r2, [r2, #8]
 8006d7c:	0211      	lsls	r1, r2, #8
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6912      	ldr	r2, [r2, #16]
 8006d82:	0852      	lsrs	r2, r2, #1
 8006d84:	3a01      	subs	r2, #1
 8006d86:	0652      	lsls	r2, r2, #25
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	4916      	ldr	r1, [pc, #88]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d90:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9c:	f7fc f8c2 	bl	8002f24 <HAL_GetTick>
 8006da0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006da2:	e009      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006da4:	f7fc f8be 	bl	8002f24 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d902      	bls.n	8006db8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
          break;
 8006db6:	e005      	b.n	8006dc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006db8:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0ef      	beq.n	8006da4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4904      	ldr	r1, [pc, #16]	; (8006de4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40021000 	.word	0x40021000

08006de8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e049      	b.n	8006e8e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	795b      	ldrb	r3, [r3, #5]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fb fca6 	bl	800275c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0204 	orr.w	r2, r2, #4
 8006e24:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	d104      	bne.n	8006e3e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2204      	movs	r2, #4
 8006e38:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e027      	b.n	8006e8e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006e3e:	f7fc f871 	bl	8002f24 <HAL_GetTick>
 8006e42:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e44:	e015      	b.n	8006e72 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006e46:	f7fc f86d 	bl	8002f24 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d90e      	bls.n	8006e72 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d107      	bne.n	8006e72 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2204      	movs	r2, #4
 8006e66:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e00d      	b.n	8006e8e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d0e2      	beq.n	8006e46 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e049      	b.n	8006f3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fb fc6d 	bl	800279c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f000 fbf9 	bl	80076cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e047      	b.n	8006fec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <HAL_TIM_Base_Start+0xb4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01d      	beq.n	8006faa <HAL_TIM_Base_Start+0x66>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f76:	d018      	beq.n	8006faa <HAL_TIM_Base_Start+0x66>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <HAL_TIM_Base_Start+0xb8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_TIM_Base_Start+0x66>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1e      	ldr	r2, [pc, #120]	; (8007000 <HAL_TIM_Base_Start+0xbc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_TIM_Base_Start+0x66>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <HAL_TIM_Base_Start+0xc0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_TIM_Base_Start+0x66>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <HAL_TIM_Base_Start+0xc4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_TIM_Base_Start+0x66>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a19      	ldr	r2, [pc, #100]	; (800700c <HAL_TIM_Base_Start+0xc8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d115      	bne.n	8006fd6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	4b17      	ldr	r3, [pc, #92]	; (8007010 <HAL_TIM_Base_Start+0xcc>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b06      	cmp	r3, #6
 8006fba:	d015      	beq.n	8006fe8 <HAL_TIM_Base_Start+0xa4>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d011      	beq.n	8006fe8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd4:	e008      	b.n	8006fe8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e000      	b.n	8006fea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	40013400 	.word	0x40013400
 800700c:	40014000 	.word	0x40014000
 8007010:	00010007 	.word	0x00010007

08007014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d001      	beq.n	800702c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e04f      	b.n	80070cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a23      	ldr	r2, [pc, #140]	; (80070d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d01d      	beq.n	800708a <HAL_TIM_Base_Start_IT+0x76>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d018      	beq.n	800708a <HAL_TIM_Base_Start_IT+0x76>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <HAL_TIM_Base_Start_IT+0xc8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d013      	beq.n	800708a <HAL_TIM_Base_Start_IT+0x76>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00e      	beq.n	800708a <HAL_TIM_Base_Start_IT+0x76>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d009      	beq.n	800708a <HAL_TIM_Base_Start_IT+0x76>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d004      	beq.n	800708a <HAL_TIM_Base_Start_IT+0x76>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <HAL_TIM_Base_Start_IT+0xd8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d115      	bne.n	80070b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007092:	4013      	ands	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b06      	cmp	r3, #6
 800709a:	d015      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0xb4>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a2:	d011      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b4:	e008      	b.n	80070c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e000      	b.n	80070ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800
 80070e4:	40000c00 	.word	0x40000c00
 80070e8:	40013400 	.word	0x40013400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	00010007 	.word	0x00010007

080070f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e049      	b.n	800719a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f841 	bl	80071a2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 faca 	bl	80076cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d122      	bne.n	8007212 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d11b      	bne.n	8007212 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f06f 0202 	mvn.w	r2, #2
 80071e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa48 	bl	800768e <HAL_TIM_IC_CaptureCallback>
 80071fe:	e005      	b.n	800720c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa3a 	bl	800767a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa4b 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b04      	cmp	r3, #4
 800721e:	d122      	bne.n	8007266 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b04      	cmp	r3, #4
 800722c:	d11b      	bne.n	8007266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f06f 0204 	mvn.w	r2, #4
 8007236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa1e 	bl	800768e <HAL_TIM_IC_CaptureCallback>
 8007252:	e005      	b.n	8007260 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fa10 	bl	800767a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa21 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b08      	cmp	r3, #8
 8007272:	d122      	bne.n	80072ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b08      	cmp	r3, #8
 8007280:	d11b      	bne.n	80072ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f06f 0208 	mvn.w	r2, #8
 800728a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2204      	movs	r2, #4
 8007290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9f4 	bl	800768e <HAL_TIM_IC_CaptureCallback>
 80072a6:	e005      	b.n	80072b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9e6 	bl	800767a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f9f7 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b10      	cmp	r3, #16
 80072c6:	d122      	bne.n	800730e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0310 	and.w	r3, r3, #16
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d11b      	bne.n	800730e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f06f 0210 	mvn.w	r2, #16
 80072de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2208      	movs	r2, #8
 80072e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f9ca 	bl	800768e <HAL_TIM_IC_CaptureCallback>
 80072fa:	e005      	b.n	8007308 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9bc 	bl	800767a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9cd 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10e      	bne.n	800733a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d107      	bne.n	800733a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f06f 0201 	mvn.w	r2, #1
 8007332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fa fe93 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007344:	2b80      	cmp	r3, #128	; 0x80
 8007346:	d10e      	bne.n	8007366 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d107      	bne.n	8007366 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800735e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fe4f 	bl	8008004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	d10e      	bne.n	8007394 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007380:	2b80      	cmp	r3, #128	; 0x80
 8007382:	d107      	bne.n	8007394 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800738c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fe42 	bl	8008018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d10e      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	d107      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f97b 	bl	80076b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d10e      	bne.n	80073ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b20      	cmp	r3, #32
 80073da:	d107      	bne.n	80073ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0220 	mvn.w	r2, #32
 80073e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fe02 	bl	8007ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740a:	2b01      	cmp	r3, #1
 800740c:	d101      	bne.n	8007412 <HAL_TIM_OC_ConfigChannel+0x1e>
 800740e:	2302      	movs	r3, #2
 8007410:	e066      	b.n	80074e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b14      	cmp	r3, #20
 800741e:	d857      	bhi.n	80074d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800747d 	.word	0x0800747d
 800742c:	080074d1 	.word	0x080074d1
 8007430:	080074d1 	.word	0x080074d1
 8007434:	080074d1 	.word	0x080074d1
 8007438:	0800748b 	.word	0x0800748b
 800743c:	080074d1 	.word	0x080074d1
 8007440:	080074d1 	.word	0x080074d1
 8007444:	080074d1 	.word	0x080074d1
 8007448:	08007499 	.word	0x08007499
 800744c:	080074d1 	.word	0x080074d1
 8007450:	080074d1 	.word	0x080074d1
 8007454:	080074d1 	.word	0x080074d1
 8007458:	080074a7 	.word	0x080074a7
 800745c:	080074d1 	.word	0x080074d1
 8007460:	080074d1 	.word	0x080074d1
 8007464:	080074d1 	.word	0x080074d1
 8007468:	080074b5 	.word	0x080074b5
 800746c:	080074d1 	.word	0x080074d1
 8007470:	080074d1 	.word	0x080074d1
 8007474:	080074d1 	.word	0x080074d1
 8007478:	080074c3 	.word	0x080074c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f9bc 	bl	8007800 <TIM_OC1_SetConfig>
      break;
 8007488:	e025      	b.n	80074d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fa45 	bl	8007920 <TIM_OC2_SetConfig>
      break;
 8007496:	e01e      	b.n	80074d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fac8 	bl	8007a34 <TIM_OC3_SetConfig>
      break;
 80074a4:	e017      	b.n	80074d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fb49 	bl	8007b44 <TIM_OC4_SetConfig>
      break;
 80074b2:	e010      	b.n	80074d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fbac 	bl	8007c18 <TIM_OC5_SetConfig>
      break;
 80074c0:	e009      	b.n	80074d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fc09 	bl	8007ce0 <TIM_OC6_SetConfig>
      break;
 80074ce:	e002      	b.n	80074d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
      break;
 80074d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_TIM_ConfigClockSource+0x1c>
 8007500:	2302      	movs	r3, #2
 8007502:	e0b6      	b.n	8007672 <HAL_TIM_ConfigClockSource+0x18a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800752e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007540:	d03e      	beq.n	80075c0 <HAL_TIM_ConfigClockSource+0xd8>
 8007542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007546:	f200 8087 	bhi.w	8007658 <HAL_TIM_ConfigClockSource+0x170>
 800754a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754e:	f000 8086 	beq.w	800765e <HAL_TIM_ConfigClockSource+0x176>
 8007552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007556:	d87f      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007558:	2b70      	cmp	r3, #112	; 0x70
 800755a:	d01a      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0xaa>
 800755c:	2b70      	cmp	r3, #112	; 0x70
 800755e:	d87b      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007560:	2b60      	cmp	r3, #96	; 0x60
 8007562:	d050      	beq.n	8007606 <HAL_TIM_ConfigClockSource+0x11e>
 8007564:	2b60      	cmp	r3, #96	; 0x60
 8007566:	d877      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007568:	2b50      	cmp	r3, #80	; 0x50
 800756a:	d03c      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0xfe>
 800756c:	2b50      	cmp	r3, #80	; 0x50
 800756e:	d873      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007570:	2b40      	cmp	r3, #64	; 0x40
 8007572:	d058      	beq.n	8007626 <HAL_TIM_ConfigClockSource+0x13e>
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d86f      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007578:	2b30      	cmp	r3, #48	; 0x30
 800757a:	d064      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x15e>
 800757c:	2b30      	cmp	r3, #48	; 0x30
 800757e:	d86b      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007580:	2b20      	cmp	r3, #32
 8007582:	d060      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x15e>
 8007584:	2b20      	cmp	r3, #32
 8007586:	d867      	bhi.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d05c      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x15e>
 800758c:	2b10      	cmp	r3, #16
 800758e:	d05a      	beq.n	8007646 <HAL_TIM_ConfigClockSource+0x15e>
 8007590:	e062      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	6899      	ldr	r1, [r3, #8]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f000 fc7d 	bl	8007ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	609a      	str	r2, [r3, #8]
      break;
 80075be:	e04f      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	6899      	ldr	r1, [r3, #8]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f000 fc66 	bl	8007ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075e2:	609a      	str	r2, [r3, #8]
      break;
 80075e4:	e03c      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f000 fbda 	bl	8007dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2150      	movs	r1, #80	; 0x50
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fc33 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007604:	e02c      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6859      	ldr	r1, [r3, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	461a      	mov	r2, r3
 8007614:	f000 fbf9 	bl	8007e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2160      	movs	r1, #96	; 0x60
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fc23 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007624:	e01c      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6859      	ldr	r1, [r3, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	461a      	mov	r2, r3
 8007634:	f000 fbba 	bl	8007dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2140      	movs	r1, #64	; 0x40
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fc13 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007644:	e00c      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f000 fc0a 	bl	8007e6a <TIM_ITRx_SetConfig>
      break;
 8007656:	e003      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
      break;
 800765c:	e000      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800765e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
	...

080076cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a40      	ldr	r2, [pc, #256]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ea:	d00f      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3d      	ldr	r2, [pc, #244]	; (80077e4 <TIM_Base_SetConfig+0x118>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a3c      	ldr	r2, [pc, #240]	; (80077e8 <TIM_Base_SetConfig+0x11c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a3b      	ldr	r2, [pc, #236]	; (80077ec <TIM_Base_SetConfig+0x120>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a3a      	ldr	r2, [pc, #232]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2f      	ldr	r2, [pc, #188]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01f      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772c:	d01b      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <TIM_Base_SetConfig+0x118>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d017      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2b      	ldr	r2, [pc, #172]	; (80077e8 <TIM_Base_SetConfig+0x11c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2a      	ldr	r2, [pc, #168]	; (80077ec <TIM_Base_SetConfig+0x120>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00f      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00b      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a28      	ldr	r2, [pc, #160]	; (80077f4 <TIM_Base_SetConfig+0x128>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <TIM_Base_SetConfig+0x12c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a26      	ldr	r2, [pc, #152]	; (80077fc <TIM_Base_SetConfig+0x130>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d108      	bne.n	8007778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00f      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <TIM_Base_SetConfig+0x128>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <TIM_Base_SetConfig+0x12c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <TIM_Base_SetConfig+0x130>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d103      	bne.n	80077cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	615a      	str	r2, [r3, #20]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40012c00 	.word	0x40012c00
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40013400 	.word	0x40013400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800

08007800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f023 0201 	bic.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0302 	bic.w	r3, r3, #2
 800784c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a2c      	ldr	r2, [pc, #176]	; (800790c <TIM_OC1_SetConfig+0x10c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00f      	beq.n	8007880 <TIM_OC1_SetConfig+0x80>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a2b      	ldr	r2, [pc, #172]	; (8007910 <TIM_OC1_SetConfig+0x110>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <TIM_OC1_SetConfig+0x80>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <TIM_OC1_SetConfig+0x114>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_OC1_SetConfig+0x80>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a29      	ldr	r2, [pc, #164]	; (8007918 <TIM_OC1_SetConfig+0x118>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_OC1_SetConfig+0x80>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a28      	ldr	r2, [pc, #160]	; (800791c <TIM_OC1_SetConfig+0x11c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10c      	bne.n	800789a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 0308 	bic.w	r3, r3, #8
 8007886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 0304 	bic.w	r3, r3, #4
 8007898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1b      	ldr	r2, [pc, #108]	; (800790c <TIM_OC1_SetConfig+0x10c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00f      	beq.n	80078c2 <TIM_OC1_SetConfig+0xc2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1a      	ldr	r2, [pc, #104]	; (8007910 <TIM_OC1_SetConfig+0x110>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00b      	beq.n	80078c2 <TIM_OC1_SetConfig+0xc2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <TIM_OC1_SetConfig+0x114>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d007      	beq.n	80078c2 <TIM_OC1_SetConfig+0xc2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a18      	ldr	r2, [pc, #96]	; (8007918 <TIM_OC1_SetConfig+0x118>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d003      	beq.n	80078c2 <TIM_OC1_SetConfig+0xc2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a17      	ldr	r2, [pc, #92]	; (800791c <TIM_OC1_SetConfig+0x11c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d111      	bne.n	80078e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	621a      	str	r2, [r3, #32]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40012c00 	.word	0x40012c00
 8007910:	40013400 	.word	0x40013400
 8007914:	40014000 	.word	0x40014000
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800

08007920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0210 	bic.w	r2, r3, #16
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0320 	bic.w	r3, r3, #32
 800796e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a28      	ldr	r2, [pc, #160]	; (8007a20 <TIM_OC2_SetConfig+0x100>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_OC2_SetConfig+0x6c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a27      	ldr	r2, [pc, #156]	; (8007a24 <TIM_OC2_SetConfig+0x104>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d10d      	bne.n	80079a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <TIM_OC2_SetConfig+0x100>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00f      	beq.n	80079d0 <TIM_OC2_SetConfig+0xb0>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <TIM_OC2_SetConfig+0x104>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00b      	beq.n	80079d0 <TIM_OC2_SetConfig+0xb0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a1b      	ldr	r2, [pc, #108]	; (8007a28 <TIM_OC2_SetConfig+0x108>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d007      	beq.n	80079d0 <TIM_OC2_SetConfig+0xb0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a1a      	ldr	r2, [pc, #104]	; (8007a2c <TIM_OC2_SetConfig+0x10c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_OC2_SetConfig+0xb0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <TIM_OC2_SetConfig+0x110>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d113      	bne.n	80079f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40012c00 	.word	0x40012c00
 8007a24:	40013400 	.word	0x40013400
 8007a28:	40014000 	.word	0x40014000
 8007a2c:	40014400 	.word	0x40014400
 8007a30:	40014800 	.word	0x40014800

08007a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a27      	ldr	r2, [pc, #156]	; (8007b30 <TIM_OC3_SetConfig+0xfc>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_OC3_SetConfig+0x6a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a26      	ldr	r2, [pc, #152]	; (8007b34 <TIM_OC3_SetConfig+0x100>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d10d      	bne.n	8007aba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	; (8007b30 <TIM_OC3_SetConfig+0xfc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00f      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xae>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1b      	ldr	r2, [pc, #108]	; (8007b34 <TIM_OC3_SetConfig+0x100>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00b      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xae>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a1a      	ldr	r2, [pc, #104]	; (8007b38 <TIM_OC3_SetConfig+0x104>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d007      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xae>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <TIM_OC3_SetConfig+0x108>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d003      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xae>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <TIM_OC3_SetConfig+0x10c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d113      	bne.n	8007b0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	621a      	str	r2, [r3, #32]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	40012c00 	.word	0x40012c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800

08007b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	031b      	lsls	r3, r3, #12
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a18      	ldr	r2, [pc, #96]	; (8007c04 <TIM_OC4_SetConfig+0xc0>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00f      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x84>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <TIM_OC4_SetConfig+0xc4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00b      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x84>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <TIM_OC4_SetConfig+0xc8>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d007      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x84>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <TIM_OC4_SetConfig+0xcc>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x84>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a14      	ldr	r2, [pc, #80]	; (8007c14 <TIM_OC4_SetConfig+0xd0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d109      	bne.n	8007bdc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	019b      	lsls	r3, r3, #6
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	621a      	str	r2, [r3, #32]
}
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40013400 	.word	0x40013400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800

08007c18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <TIM_OC5_SetConfig+0xb4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00f      	beq.n	8007c92 <TIM_OC5_SetConfig+0x7a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a16      	ldr	r2, [pc, #88]	; (8007cd0 <TIM_OC5_SetConfig+0xb8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00b      	beq.n	8007c92 <TIM_OC5_SetConfig+0x7a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <TIM_OC5_SetConfig+0xbc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d007      	beq.n	8007c92 <TIM_OC5_SetConfig+0x7a>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a14      	ldr	r2, [pc, #80]	; (8007cd8 <TIM_OC5_SetConfig+0xc0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d003      	beq.n	8007c92 <TIM_OC5_SetConfig+0x7a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <TIM_OC5_SetConfig+0xc4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d109      	bne.n	8007ca6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	621a      	str	r2, [r3, #32]
}
 8007cc0:	bf00      	nop
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40012c00 	.word	0x40012c00
 8007cd0:	40013400 	.word	0x40013400
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	40014800 	.word	0x40014800

08007ce0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	051b      	lsls	r3, r3, #20
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <TIM_OC6_SetConfig+0xb8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00f      	beq.n	8007d5c <TIM_OC6_SetConfig+0x7c>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <TIM_OC6_SetConfig+0xbc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_OC6_SetConfig+0x7c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <TIM_OC6_SetConfig+0xc0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_OC6_SetConfig+0x7c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <TIM_OC6_SetConfig+0xc4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_OC6_SetConfig+0x7c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <TIM_OC6_SetConfig+0xc8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d109      	bne.n	8007d70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	029b      	lsls	r3, r3, #10
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	621a      	str	r2, [r3, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0201 	bic.w	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 030a 	bic.w	r3, r3, #10
 8007de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b087      	sub	sp, #28
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f023 0210 	bic.w	r2, r3, #16
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	031b      	lsls	r3, r3, #12
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	f043 0307 	orr.w	r3, r3, #7
 8007e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	021a      	lsls	r2, r3, #8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	609a      	str	r2, [r3, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e068      	b.n	8007fca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a2e      	ldr	r2, [pc, #184]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a2d      	ldr	r2, [pc, #180]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d108      	bne.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1e      	ldr	r2, [pc, #120]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01d      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d018      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d013      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1a      	ldr	r2, [pc, #104]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00e      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d009      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d004      	beq.n	8007f9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a14      	ldr	r2, [pc, #80]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40012c00 	.word	0x40012c00
 8007fdc:	40013400 	.word	0x40013400
 8007fe0:	40000400 	.word	0x40000400
 8007fe4:	40000800 	.word	0x40000800
 8007fe8:	40000c00 	.word	0x40000c00
 8007fec:	40014000 	.word	0x40014000

08007ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e040      	b.n	80080c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fa fbfe 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2224      	movs	r2, #36	; 0x24
 8008058:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0201 	bic.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fb2e 	bl	80086cc <UART_SetConfig>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e022      	b.n	80080c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fdda 	bl	8008c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0201 	orr.w	r2, r2, #1
 80080b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fe61 	bl	8008d80 <UART_CheckIdleState>
 80080be:	4603      	mov	r3, r0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b0ba      	sub	sp, #232	; 0xe8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80080f6:	4013      	ands	r3, r2
 80080f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d115      	bne.n	8008130 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008108:	f003 0320 	and.w	r3, r3, #32
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 82a6 	beq.w	8008672 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
      }
      return;
 800812e:	e2a0      	b.n	8008672 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8117 	beq.w	8008368 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800813a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008146:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800814a:	4b85      	ldr	r3, [pc, #532]	; (8008360 <HAL_UART_IRQHandler+0x298>)
 800814c:	4013      	ands	r3, r2
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 810a 	beq.w	8008368 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d011      	beq.n	8008184 <HAL_UART_IRQHandler+0xbc>
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2201      	movs	r2, #1
 8008172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817a:	f043 0201 	orr.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d011      	beq.n	80081b4 <HAL_UART_IRQHandler+0xec>
 8008190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2202      	movs	r2, #2
 80081a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081aa:	f043 0204 	orr.w	r2, r3, #4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d011      	beq.n	80081e4 <HAL_UART_IRQHandler+0x11c>
 80081c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2204      	movs	r2, #4
 80081d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081da:	f043 0202 	orr.w	r2, r3, #2
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d017      	beq.n	8008220 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008200:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00b      	beq.n	8008220 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2208      	movs	r2, #8
 800820e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008216:	f043 0208 	orr.w	r2, r3, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008228:	2b00      	cmp	r3, #0
 800822a:	d012      	beq.n	8008252 <HAL_UART_IRQHandler+0x18a>
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 820c 	beq.w	8008676 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800826a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800828c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d005      	beq.n	80082aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800829e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d04f      	beq.n	800834a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fe75 	bl	8008f9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	d141      	bne.n	8008342 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1d9      	bne.n	80082be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	2b00      	cmp	r3, #0
 8008310:	d013      	beq.n	800833a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	4a13      	ldr	r2, [pc, #76]	; (8008364 <HAL_UART_IRQHandler+0x29c>)
 8008318:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4618      	mov	r0, r3
 8008320:	f7fc ff46 	bl	80051b0 <HAL_DMA_Abort_IT>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d017      	beq.n	800835a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008338:	e00f      	b.n	800835a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9b0 	bl	80086a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008340:	e00b      	b.n	800835a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9ac 	bl	80086a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	e007      	b.n	800835a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9a8 	bl	80086a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008358:	e18d      	b.n	8008676 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835a:	bf00      	nop
    return;
 800835c:	e18b      	b.n	8008676 <HAL_UART_IRQHandler+0x5ae>
 800835e:	bf00      	nop
 8008360:	04000120 	.word	0x04000120
 8008364:	08009061 	.word	0x08009061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	2b01      	cmp	r3, #1
 800836e:	f040 8146 	bne.w	80085fe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 813f 	beq.w	80085fe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8138 	beq.w	80085fe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2210      	movs	r2, #16
 8008394:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a0:	2b40      	cmp	r3, #64	; 0x40
 80083a2:	f040 80b4 	bne.w	800850e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 815f 	beq.w	800867a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f080 8157 	bcs.w	800867a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 8085 	bne.w	80084f2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008416:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800841e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800842a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1da      	bne.n	80083e8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800845a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800845e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e1      	bne.n	8008432 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800847e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008492:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e3      	bne.n	800846e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80084d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e4      	bne.n	80084b2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fc fe21 	bl	8005134 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	b29b      	uxth	r3, r3
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f8d4 	bl	80086b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800850c:	e0b5      	b.n	800867a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800851a:	b29b      	uxth	r3, r3
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80a7 	beq.w	800867e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80a2 	beq.w	800867e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	e853 3f00 	ldrex	r3, [r3]
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800854e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800855c:	647b      	str	r3, [r7, #68]	; 0x44
 800855e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008560:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008564:	e841 2300 	strex	r3, r2, [r1]
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800856a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e4      	bne.n	800853a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3308      	adds	r3, #8
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	e853 3f00 	ldrex	r3, [r3]
 800857e:	623b      	str	r3, [r7, #32]
   return(result);
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	f023 0301 	bic.w	r3, r3, #1
 8008586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008594:	633a      	str	r2, [r7, #48]	; 0x30
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800859a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e3      	bne.n	8008570 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0310 	bic.w	r3, r3, #16
 80085ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e4      	bne.n	80085ba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f85c 	bl	80086b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085fc:	e03f      	b.n	800867e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <HAL_UART_IRQHandler+0x560>
 800860a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d008      	beq.n	8008628 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800861e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fd5d 	bl	80090e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008626:	e02d      	b.n	8008684 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00e      	beq.n	8008652 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b00      	cmp	r3, #0
 800863e:	d008      	beq.n	8008652 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01c      	beq.n	8008682 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	4798      	blx	r3
    }
    return;
 8008650:	e017      	b.n	8008682 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d012      	beq.n	8008684 <HAL_UART_IRQHandler+0x5bc>
 800865e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fd0e 	bl	800908c <UART_EndTransmit_IT>
    return;
 8008670:	e008      	b.n	8008684 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008672:	bf00      	nop
 8008674:	e006      	b.n	8008684 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008676:	bf00      	nop
 8008678:	e004      	b.n	8008684 <HAL_UART_IRQHandler+0x5bc>
      return;
 800867a:	bf00      	nop
 800867c:	e002      	b.n	8008684 <HAL_UART_IRQHandler+0x5bc>
      return;
 800867e:	bf00      	nop
 8008680:	e000      	b.n	8008684 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008682:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008684:	37e8      	adds	r7, #232	; 0xe8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop

0800868c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086d0:	b08a      	sub	sp, #40	; 0x28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4ba4      	ldr	r3, [pc, #656]	; (800898c <UART_SetConfig+0x2c0>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008704:	430b      	orrs	r3, r1
 8008706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a99      	ldr	r2, [pc, #612]	; (8008990 <UART_SetConfig+0x2c4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008734:	4313      	orrs	r3, r2
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008748:	430a      	orrs	r2, r1
 800874a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a90      	ldr	r2, [pc, #576]	; (8008994 <UART_SetConfig+0x2c8>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d126      	bne.n	80087a4 <UART_SetConfig+0xd8>
 8008756:	4b90      	ldr	r3, [pc, #576]	; (8008998 <UART_SetConfig+0x2cc>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875c:	f003 0303 	and.w	r3, r3, #3
 8008760:	2b03      	cmp	r3, #3
 8008762:	d81b      	bhi.n	800879c <UART_SetConfig+0xd0>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0xa0>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	0800877d 	.word	0x0800877d
 8008770:	0800878d 	.word	0x0800878d
 8008774:	08008785 	.word	0x08008785
 8008778:	08008795 	.word	0x08008795
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008782:	e116      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008784:	2302      	movs	r3, #2
 8008786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800878a:	e112      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800878c:	2304      	movs	r3, #4
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008792:	e10e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008794:	2308      	movs	r3, #8
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879a:	e10a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800879c:	2310      	movs	r3, #16
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a2:	e106      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a7c      	ldr	r2, [pc, #496]	; (800899c <UART_SetConfig+0x2d0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d138      	bne.n	8008820 <UART_SetConfig+0x154>
 80087ae:	4b7a      	ldr	r3, [pc, #488]	; (8008998 <UART_SetConfig+0x2cc>)
 80087b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	2b0c      	cmp	r3, #12
 80087ba:	d82d      	bhi.n	8008818 <UART_SetConfig+0x14c>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <UART_SetConfig+0xf8>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f9 	.word	0x080087f9
 80087c8:	08008819 	.word	0x08008819
 80087cc:	08008819 	.word	0x08008819
 80087d0:	08008819 	.word	0x08008819
 80087d4:	08008809 	.word	0x08008809
 80087d8:	08008819 	.word	0x08008819
 80087dc:	08008819 	.word	0x08008819
 80087e0:	08008819 	.word	0x08008819
 80087e4:	08008801 	.word	0x08008801
 80087e8:	08008819 	.word	0x08008819
 80087ec:	08008819 	.word	0x08008819
 80087f0:	08008819 	.word	0x08008819
 80087f4:	08008811 	.word	0x08008811
 80087f8:	2300      	movs	r3, #0
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087fe:	e0d8      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008806:	e0d4      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008808:	2304      	movs	r3, #4
 800880a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800880e:	e0d0      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008810:	2308      	movs	r3, #8
 8008812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008816:	e0cc      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008818:	2310      	movs	r3, #16
 800881a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800881e:	e0c8      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a5e      	ldr	r2, [pc, #376]	; (80089a0 <UART_SetConfig+0x2d4>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d125      	bne.n	8008876 <UART_SetConfig+0x1aa>
 800882a:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <UART_SetConfig+0x2cc>)
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008830:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	d016      	beq.n	8008866 <UART_SetConfig+0x19a>
 8008838:	2b30      	cmp	r3, #48	; 0x30
 800883a:	d818      	bhi.n	800886e <UART_SetConfig+0x1a2>
 800883c:	2b20      	cmp	r3, #32
 800883e:	d00a      	beq.n	8008856 <UART_SetConfig+0x18a>
 8008840:	2b20      	cmp	r3, #32
 8008842:	d814      	bhi.n	800886e <UART_SetConfig+0x1a2>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <UART_SetConfig+0x182>
 8008848:	2b10      	cmp	r3, #16
 800884a:	d008      	beq.n	800885e <UART_SetConfig+0x192>
 800884c:	e00f      	b.n	800886e <UART_SetConfig+0x1a2>
 800884e:	2300      	movs	r3, #0
 8008850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008854:	e0ad      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008856:	2302      	movs	r3, #2
 8008858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885c:	e0a9      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800885e:	2304      	movs	r3, #4
 8008860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008864:	e0a5      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008866:	2308      	movs	r3, #8
 8008868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886c:	e0a1      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800886e:	2310      	movs	r3, #16
 8008870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008874:	e09d      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a4a      	ldr	r2, [pc, #296]	; (80089a4 <UART_SetConfig+0x2d8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d125      	bne.n	80088cc <UART_SetConfig+0x200>
 8008880:	4b45      	ldr	r3, [pc, #276]	; (8008998 <UART_SetConfig+0x2cc>)
 8008882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800888a:	2bc0      	cmp	r3, #192	; 0xc0
 800888c:	d016      	beq.n	80088bc <UART_SetConfig+0x1f0>
 800888e:	2bc0      	cmp	r3, #192	; 0xc0
 8008890:	d818      	bhi.n	80088c4 <UART_SetConfig+0x1f8>
 8008892:	2b80      	cmp	r3, #128	; 0x80
 8008894:	d00a      	beq.n	80088ac <UART_SetConfig+0x1e0>
 8008896:	2b80      	cmp	r3, #128	; 0x80
 8008898:	d814      	bhi.n	80088c4 <UART_SetConfig+0x1f8>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <UART_SetConfig+0x1d8>
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d008      	beq.n	80088b4 <UART_SetConfig+0x1e8>
 80088a2:	e00f      	b.n	80088c4 <UART_SetConfig+0x1f8>
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088aa:	e082      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088ac:	2302      	movs	r3, #2
 80088ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b2:	e07e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088b4:	2304      	movs	r3, #4
 80088b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ba:	e07a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088bc:	2308      	movs	r3, #8
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c2:	e076      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088c4:	2310      	movs	r3, #16
 80088c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ca:	e072      	b.n	80089b2 <UART_SetConfig+0x2e6>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a35      	ldr	r2, [pc, #212]	; (80089a8 <UART_SetConfig+0x2dc>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d12a      	bne.n	800892c <UART_SetConfig+0x260>
 80088d6:	4b30      	ldr	r3, [pc, #192]	; (8008998 <UART_SetConfig+0x2cc>)
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088e4:	d01a      	beq.n	800891c <UART_SetConfig+0x250>
 80088e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088ea:	d81b      	bhi.n	8008924 <UART_SetConfig+0x258>
 80088ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f0:	d00c      	beq.n	800890c <UART_SetConfig+0x240>
 80088f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f6:	d815      	bhi.n	8008924 <UART_SetConfig+0x258>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <UART_SetConfig+0x238>
 80088fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x248>
 8008902:	e00f      	b.n	8008924 <UART_SetConfig+0x258>
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800890a:	e052      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800890c:	2302      	movs	r3, #2
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008912:	e04e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008914:	2304      	movs	r3, #4
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800891a:	e04a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800891c:	2308      	movs	r3, #8
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008922:	e046      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008924:	2310      	movs	r3, #16
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892a:	e042      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a17      	ldr	r2, [pc, #92]	; (8008990 <UART_SetConfig+0x2c4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d13a      	bne.n	80089ac <UART_SetConfig+0x2e0>
 8008936:	4b18      	ldr	r3, [pc, #96]	; (8008998 <UART_SetConfig+0x2cc>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008944:	d01a      	beq.n	800897c <UART_SetConfig+0x2b0>
 8008946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800894a:	d81b      	bhi.n	8008984 <UART_SetConfig+0x2b8>
 800894c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008950:	d00c      	beq.n	800896c <UART_SetConfig+0x2a0>
 8008952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008956:	d815      	bhi.n	8008984 <UART_SetConfig+0x2b8>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <UART_SetConfig+0x298>
 800895c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008960:	d008      	beq.n	8008974 <UART_SetConfig+0x2a8>
 8008962:	e00f      	b.n	8008984 <UART_SetConfig+0x2b8>
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800896a:	e022      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800896c:	2302      	movs	r3, #2
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008972:	e01e      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008974:	2304      	movs	r3, #4
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800897a:	e01a      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800897c:	2308      	movs	r3, #8
 800897e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008982:	e016      	b.n	80089b2 <UART_SetConfig+0x2e6>
 8008984:	2310      	movs	r3, #16
 8008986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800898a:	e012      	b.n	80089b2 <UART_SetConfig+0x2e6>
 800898c:	efff69f3 	.word	0xefff69f3
 8008990:	40008000 	.word	0x40008000
 8008994:	40013800 	.word	0x40013800
 8008998:	40021000 	.word	0x40021000
 800899c:	40004400 	.word	0x40004400
 80089a0:	40004800 	.word	0x40004800
 80089a4:	40004c00 	.word	0x40004c00
 80089a8:	40005000 	.word	0x40005000
 80089ac:	2310      	movs	r3, #16
 80089ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a9f      	ldr	r2, [pc, #636]	; (8008c34 <UART_SetConfig+0x568>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d17a      	bne.n	8008ab2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d824      	bhi.n	8008a0e <UART_SetConfig+0x342>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <UART_SetConfig+0x300>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	08008a0f 	.word	0x08008a0f
 80089d4:	080089f9 	.word	0x080089f9
 80089d8:	08008a0f 	.word	0x08008a0f
 80089dc:	080089ff 	.word	0x080089ff
 80089e0:	08008a0f 	.word	0x08008a0f
 80089e4:	08008a0f 	.word	0x08008a0f
 80089e8:	08008a0f 	.word	0x08008a0f
 80089ec:	08008a07 	.word	0x08008a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089f0:	f7fd fc80 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 80089f4:	61f8      	str	r0, [r7, #28]
        break;
 80089f6:	e010      	b.n	8008a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089f8:	4b8f      	ldr	r3, [pc, #572]	; (8008c38 <UART_SetConfig+0x56c>)
 80089fa:	61fb      	str	r3, [r7, #28]
        break;
 80089fc:	e00d      	b.n	8008a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089fe:	f7fd fbe1 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 8008a02:	61f8      	str	r0, [r7, #28]
        break;
 8008a04:	e009      	b.n	8008a1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0a:	61fb      	str	r3, [r7, #28]
        break;
 8008a0c:	e005      	b.n	8008a1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80fb 	beq.w	8008c18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d305      	bcc.n	8008a3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a38:	69fa      	ldr	r2, [r7, #28]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d903      	bls.n	8008a46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a44:	e0e8      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	461c      	mov	r4, r3
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	f04f 0200 	mov.w	r2, #0
 8008a52:	f04f 0300 	mov.w	r3, #0
 8008a56:	022b      	lsls	r3, r5, #8
 8008a58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008a5c:	0222      	lsls	r2, r4, #8
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	6849      	ldr	r1, [r1, #4]
 8008a62:	0849      	lsrs	r1, r1, #1
 8008a64:	2000      	movs	r0, #0
 8008a66:	4688      	mov	r8, r1
 8008a68:	4681      	mov	r9, r0
 8008a6a:	eb12 0a08 	adds.w	sl, r2, r8
 8008a6e:	eb43 0b09 	adc.w	fp, r3, r9
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	f7f8 f910 	bl	8000ca8 <__aeabi_uldivmod>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a96:	d308      	bcc.n	8008aaa <UART_SetConfig+0x3de>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a9e:	d204      	bcs.n	8008aaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	60da      	str	r2, [r3, #12]
 8008aa8:	e0b6      	b.n	8008c18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008ab0:	e0b2      	b.n	8008c18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aba:	d15e      	bne.n	8008b7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008abc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d828      	bhi.n	8008b16 <UART_SetConfig+0x44a>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <UART_SetConfig+0x400>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b17 	.word	0x08008b17
 8008adc:	08008b07 	.word	0x08008b07
 8008ae0:	08008b17 	.word	0x08008b17
 8008ae4:	08008b17 	.word	0x08008b17
 8008ae8:	08008b17 	.word	0x08008b17
 8008aec:	08008b0f 	.word	0x08008b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af0:	f7fd fc00 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 8008af4:	61f8      	str	r0, [r7, #28]
        break;
 8008af6:	e014      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af8:	f7fd fc12 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8008afc:	61f8      	str	r0, [r7, #28]
        break;
 8008afe:	e010      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b00:	4b4d      	ldr	r3, [pc, #308]	; (8008c38 <UART_SetConfig+0x56c>)
 8008b02:	61fb      	str	r3, [r7, #28]
        break;
 8008b04:	e00d      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b06:	f7fd fb5d 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 8008b0a:	61f8      	str	r0, [r7, #28]
        break;
 8008b0c:	e009      	b.n	8008b22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b12:	61fb      	str	r3, [r7, #28]
        break;
 8008b14:	e005      	b.n	8008b22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d077      	beq.n	8008c18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	005a      	lsls	r2, r3, #1
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	441a      	add	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b0f      	cmp	r3, #15
 8008b42:	d916      	bls.n	8008b72 <UART_SetConfig+0x4a6>
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4a:	d212      	bcs.n	8008b72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f023 030f 	bic.w	r3, r3, #15
 8008b54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	8afb      	ldrh	r3, [r7, #22]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	8afa      	ldrh	r2, [r7, #22]
 8008b6e:	60da      	str	r2, [r3, #12]
 8008b70:	e052      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b78:	e04e      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	d827      	bhi.n	8008bd2 <UART_SetConfig+0x506>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <UART_SetConfig+0x4bc>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	08008bd3 	.word	0x08008bd3
 8008b98:	08008bc3 	.word	0x08008bc3
 8008b9c:	08008bd3 	.word	0x08008bd3
 8008ba0:	08008bd3 	.word	0x08008bd3
 8008ba4:	08008bd3 	.word	0x08008bd3
 8008ba8:	08008bcb 	.word	0x08008bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bac:	f7fd fba2 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 8008bb0:	61f8      	str	r0, [r7, #28]
        break;
 8008bb2:	e014      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb4:	f7fd fbb4 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8008bb8:	61f8      	str	r0, [r7, #28]
        break;
 8008bba:	e010      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bbc:	4b1e      	ldr	r3, [pc, #120]	; (8008c38 <UART_SetConfig+0x56c>)
 8008bbe:	61fb      	str	r3, [r7, #28]
        break;
 8008bc0:	e00d      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bc2:	f7fd faff 	bl	80061c4 <HAL_RCC_GetSysClockFreq>
 8008bc6:	61f8      	str	r0, [r7, #28]
        break;
 8008bc8:	e009      	b.n	8008bde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bce:	61fb      	str	r3, [r7, #28]
        break;
 8008bd0:	e005      	b.n	8008bde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d019      	beq.n	8008c18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	085a      	lsrs	r2, r3, #1
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d909      	bls.n	8008c12 <UART_SetConfig+0x546>
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c04:	d205      	bcs.n	8008c12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60da      	str	r2, [r3, #12]
 8008c10:	e002      	b.n	8008c18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3728      	adds	r7, #40	; 0x28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c32:	bf00      	nop
 8008c34:	40008000 	.word	0x40008000
 8008c38:	00f42400 	.word	0x00f42400

08008c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00a      	beq.n	8008caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	f003 0310 	and.w	r3, r3, #16
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01a      	beq.n	8008d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d3a:	d10a      	bne.n	8008d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	605a      	str	r2, [r3, #4]
  }
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d90:	f7fa f8c8 	bl	8002f24 <HAL_GetTick>
 8008d94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d10e      	bne.n	8008dc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f82d 	bl	8008e12 <UART_WaitOnFlagUntilTimeout>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e023      	b.n	8008e0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d10e      	bne.n	8008dee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f817 	bl	8008e12 <UART_WaitOnFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e00d      	b.n	8008e0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2220      	movs	r2, #32
 8008df2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2220      	movs	r2, #32
 8008df8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b09c      	sub	sp, #112	; 0x70
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	603b      	str	r3, [r7, #0]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e22:	e0a5      	b.n	8008f70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	f000 80a1 	beq.w	8008f70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e2e:	f7fa f879 	bl	8002f24 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d302      	bcc.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d13e      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e58:	667b      	str	r3, [r7, #100]	; 0x64
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e6      	bne.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	f023 0301 	bic.w	r3, r3, #1
 8008e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e5      	bne.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e067      	b.n	8008f92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d04f      	beq.n	8008f70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ede:	d147      	bne.n	8008f70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ee8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f08:	637b      	str	r3, [r7, #52]	; 0x34
 8008f0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f3c:	623a      	str	r2, [r7, #32]
 8008f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	69f9      	ldr	r1, [r7, #28]
 8008f42:	6a3a      	ldr	r2, [r7, #32]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e5      	bne.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2220      	movs	r2, #32
 8008f54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e010      	b.n	8008f92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69da      	ldr	r2, [r3, #28]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	bf0c      	ite	eq
 8008f80:	2301      	moveq	r3, #1
 8008f82:	2300      	movne	r3, #0
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	461a      	mov	r2, r3
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	f43f af4a 	beq.w	8008e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3770      	adds	r7, #112	; 0x70
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b095      	sub	sp, #84	; 0x54
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e5      	bne.n	8008fd4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900c:	2b01      	cmp	r3, #1
 800900e:	d118      	bne.n	8009042 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	60bb      	str	r3, [r7, #8]
   return(result);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f023 0310 	bic.w	r3, r3, #16
 8009024:	647b      	str	r3, [r7, #68]	; 0x44
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800902e:	61bb      	str	r3, [r7, #24]
 8009030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6979      	ldr	r1, [r7, #20]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	613b      	str	r3, [r7, #16]
   return(result);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e6      	bne.n	8009010 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009054:	bf00      	nop
 8009056:	3754      	adds	r7, #84	; 0x54
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fb0e 	bl	80086a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	69ba      	ldr	r2, [r7, #24]
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	613b      	str	r3, [r7, #16]
   return(result);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e6      	bne.n	8009094 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2220      	movs	r2, #32
 80090ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7ff fada 	bl	800868c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090d8:	bf00      	nop
 80090da:	3720      	adds	r7, #32
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009106:	2b84      	cmp	r3, #132	; 0x84
 8009108:	d005      	beq.n	8009116 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800910a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4413      	add	r3, r2
 8009112:	3303      	adds	r3, #3
 8009114:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009116:	68fb      	ldr	r3, [r7, #12]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009128:	f000 fec4 	bl	8009eb4 <vTaskStartScheduler>
  
  return osOK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	bd80      	pop	{r7, pc}

08009132 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009132:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009134:	b089      	sub	sp, #36	; 0x24
 8009136:	af04      	add	r7, sp, #16
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d020      	beq.n	8009186 <osThreadCreate+0x54>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01c      	beq.n	8009186 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685c      	ldr	r4, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681d      	ldr	r5, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691e      	ldr	r6, [r3, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ffc8 	bl	80090f4 <makeFreeRtosPriority>
 8009164:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800916e:	9202      	str	r2, [sp, #8]
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	9100      	str	r1, [sp, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	4632      	mov	r2, r6
 8009178:	4629      	mov	r1, r5
 800917a:	4620      	mov	r0, r4
 800917c:	f000 fcbc 	bl	8009af8 <xTaskCreateStatic>
 8009180:	4603      	mov	r3, r0
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e01c      	b.n	80091c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685c      	ldr	r4, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009192:	b29e      	uxth	r6, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff ffaa 	bl	80090f4 <makeFreeRtosPriority>
 80091a0:	4602      	mov	r2, r0
 80091a2:	f107 030c 	add.w	r3, r7, #12
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	9200      	str	r2, [sp, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	4632      	mov	r2, r6
 80091ae:	4629      	mov	r1, r5
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fcfe 	bl	8009bb2 <xTaskCreate>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d001      	beq.n	80091c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	e000      	b.n	80091c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091c0:	68fb      	ldr	r3, [r7, #12]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <osDelay+0x16>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	e000      	b.n	80091e2 <osDelay+0x18>
 80091e0:	2301      	movs	r3, #1
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fe32 	bl	8009e4c <vTaskDelay>
  
  return osOK;
 80091e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f103 0208 	add.w	r2, r3, #8
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f04f 32ff 	mov.w	r2, #4294967295
 800920a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f103 0208 	add.w	r2, r3, #8
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f103 0208 	add.w	r2, r3, #8
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
}
 8009288:	bf00      	nop
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092aa:	d103      	bne.n	80092b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	60fb      	str	r3, [r7, #12]
 80092b2:	e00c      	b.n	80092ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3308      	adds	r3, #8
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	e002      	b.n	80092c2 <vListInsert+0x2e>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d2f6      	bcs.n	80092bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	1c5a      	adds	r2, r3, #1
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6892      	ldr	r2, [r2, #8]
 800931c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6852      	ldr	r2, [r2, #4]
 8009326:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d103      	bne.n	800933a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	1e5a      	subs	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009386:	f001 fbdd 	bl	800ab44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	441a      	add	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	3b01      	subs	r3, #1
 80093b8:	68f9      	ldr	r1, [r7, #12]
 80093ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093bc:	fb01 f303 	mul.w	r3, r1, r3
 80093c0:	441a      	add	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	22ff      	movs	r2, #255	; 0xff
 80093ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	22ff      	movs	r2, #255	; 0xff
 80093d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d114      	bne.n	8009406 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d01a      	beq.n	800941a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3310      	adds	r3, #16
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 ffb5 	bl	800a358 <xTaskRemoveFromEventList>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d012      	beq.n	800941a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093f4:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <xQueueGenericReset+0xcc>)
 80093f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	e009      	b.n	800941a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3310      	adds	r3, #16
 800940a:	4618      	mov	r0, r3
 800940c:	f7ff fef1 	bl	80091f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3324      	adds	r3, #36	; 0x24
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff feec 	bl	80091f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800941a:	f001 fbc3 	bl	800aba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800941e:	2301      	movs	r3, #1
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	e000ed04 	.word	0xe000ed04

0800942c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	; 0x28
 8009430:	af02      	add	r7, sp, #8
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	613b      	str	r3, [r7, #16]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	3348      	adds	r3, #72	; 0x48
 8009464:	4618      	mov	r0, r3
 8009466:	f001 fc4f 	bl	800ad08 <pvPortMalloc>
 800946a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d011      	beq.n	8009496 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	3348      	adds	r3, #72	; 0x48
 800947a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009484:	79fa      	ldrb	r2, [r7, #7]
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	4613      	mov	r3, r2
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 f805 	bl	80094a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009496:	69bb      	ldr	r3, [r7, #24]
	}
 8009498:	4618      	mov	r0, r3
 800949a:	3720      	adds	r7, #32
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d103      	bne.n	80094bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094ce:	2101      	movs	r1, #1
 80094d0:	69b8      	ldr	r0, [r7, #24]
 80094d2:	f7ff ff43 	bl	800935c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094d6:	bf00      	nop
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08e      	sub	sp, #56	; 0x38
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094ee:	2300      	movs	r3, #0
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <xQueueGenericSend+0x32>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d103      	bne.n	8009520 <xQueueGenericSend+0x40>
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <xQueueGenericSend+0x44>
 8009520:	2301      	movs	r3, #1
 8009522:	e000      	b.n	8009526 <xQueueGenericSend+0x46>
 8009524:	2300      	movs	r3, #0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <xQueueGenericSend+0x60>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d103      	bne.n	800954e <xQueueGenericSend+0x6e>
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <xQueueGenericSend+0x72>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <xQueueGenericSend+0x74>
 8009552:	2300      	movs	r3, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <xQueueGenericSend+0x8e>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	623b      	str	r3, [r7, #32]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800956e:	f001 f8b3 	bl	800a6d8 <xTaskGetSchedulerState>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <xQueueGenericSend+0x9e>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <xQueueGenericSend+0xa2>
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <xQueueGenericSend+0xa4>
 8009582:	2300      	movs	r3, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xQueueGenericSend+0xbe>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	61fb      	str	r3, [r7, #28]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800959e:	f001 fad1 	bl	800ab44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d302      	bcc.n	80095b4 <xQueueGenericSend+0xd4>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d129      	bne.n	8009608 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ba:	f000 f98d 	bl	80098d8 <prvCopyDataToQueue>
 80095be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d010      	beq.n	80095ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	3324      	adds	r3, #36	; 0x24
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fec3 	bl	800a358 <xTaskRemoveFromEventList>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d013      	beq.n	8009600 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095d8:	4b3f      	ldr	r3, [pc, #252]	; (80096d8 <xQueueGenericSend+0x1f8>)
 80095da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	e00a      	b.n	8009600 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095f0:	4b39      	ldr	r3, [pc, #228]	; (80096d8 <xQueueGenericSend+0x1f8>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009600:	f001 fad0 	bl	800aba4 <vPortExitCritical>
				return pdPASS;
 8009604:	2301      	movs	r3, #1
 8009606:	e063      	b.n	80096d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800960e:	f001 fac9 	bl	800aba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009612:	2300      	movs	r3, #0
 8009614:	e05c      	b.n	80096d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009618:	2b00      	cmp	r3, #0
 800961a:	d106      	bne.n	800962a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800961c:	f107 0314 	add.w	r3, r7, #20
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fefb 	bl	800a41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009626:	2301      	movs	r3, #1
 8009628:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800962a:	f001 fabb 	bl	800aba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800962e:	f000 fcab 	bl	8009f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009632:	f001 fa87 	bl	800ab44 <vPortEnterCritical>
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800963c:	b25b      	sxtb	r3, r3
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009642:	d103      	bne.n	800964c <xQueueGenericSend+0x16c>
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009652:	b25b      	sxtb	r3, r3
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d103      	bne.n	8009662 <xQueueGenericSend+0x182>
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009662:	f001 fa9f 	bl	800aba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009666:	1d3a      	adds	r2, r7, #4
 8009668:	f107 0314 	add.w	r3, r7, #20
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f000 feea 	bl	800a448 <xTaskCheckForTimeOut>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d124      	bne.n	80096c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800967a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967c:	f000 fa24 	bl	8009ac8 <prvIsQueueFull>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d018      	beq.n	80096b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	3310      	adds	r3, #16
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fe3e 	bl	800a310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009696:	f000 f9af 	bl	80099f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800969a:	f000 fc83 	bl	8009fa4 <xTaskResumeAll>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f47f af7c 	bne.w	800959e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096a6:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <xQueueGenericSend+0x1f8>)
 80096a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	e772      	b.n	800959e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ba:	f000 f99d 	bl	80099f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096be:	f000 fc71 	bl	8009fa4 <xTaskResumeAll>
 80096c2:	e76c      	b.n	800959e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096c6:	f000 f997 	bl	80099f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096ca:	f000 fc6b 	bl	8009fa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3738      	adds	r7, #56	; 0x38
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08c      	sub	sp, #48	; 0x30
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10a      	bne.n	800970c <xQueueReceive+0x30>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	623b      	str	r3, [r7, #32]
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <xQueueReceive+0x3e>
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <xQueueReceive+0x42>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueReceive+0x44>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xQueueReceive+0x5e>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	61fb      	str	r3, [r7, #28]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800973a:	f000 ffcd 	bl	800a6d8 <xTaskGetSchedulerState>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d102      	bne.n	800974a <xQueueReceive+0x6e>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <xQueueReceive+0x72>
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <xQueueReceive+0x74>
 800974e:	2300      	movs	r3, #0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <xQueueReceive+0x8e>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	61bb      	str	r3, [r7, #24]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800976a:	f001 f9eb 	bl	800ab44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01f      	beq.n	80097ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977e:	f000 f915 	bl	80099ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009784:	1e5a      	subs	r2, r3, #1
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00f      	beq.n	80097b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	3310      	adds	r3, #16
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fdde 	bl	800a358 <xTaskRemoveFromEventList>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097a2:	4b3d      	ldr	r3, [pc, #244]	; (8009898 <xQueueReceive+0x1bc>)
 80097a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097b2:	f001 f9f7 	bl	800aba4 <vPortExitCritical>
				return pdPASS;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e069      	b.n	800988e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097c0:	f001 f9f0 	bl	800aba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e062      	b.n	800988e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ce:	f107 0310 	add.w	r3, r7, #16
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fe22 	bl	800a41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097dc:	f001 f9e2 	bl	800aba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097e0:	f000 fbd2 	bl	8009f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097e4:	f001 f9ae 	bl	800ab44 <vPortEnterCritical>
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ee:	b25b      	sxtb	r3, r3
 80097f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f4:	d103      	bne.n	80097fe <xQueueReceive+0x122>
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009804:	b25b      	sxtb	r3, r3
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d103      	bne.n	8009814 <xQueueReceive+0x138>
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009814:	f001 f9c6 	bl	800aba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009818:	1d3a      	adds	r2, r7, #4
 800981a:	f107 0310 	add.w	r3, r7, #16
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fe11 	bl	800a448 <xTaskCheckForTimeOut>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d123      	bne.n	8009874 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800982c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800982e:	f000 f935 	bl	8009a9c <prvIsQueueEmpty>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d017      	beq.n	8009868 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	3324      	adds	r3, #36	; 0x24
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fd65 	bl	800a310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009848:	f000 f8d6 	bl	80099f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800984c:	f000 fbaa 	bl	8009fa4 <xTaskResumeAll>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d189      	bne.n	800976a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <xQueueReceive+0x1bc>)
 8009858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	e780      	b.n	800976a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800986a:	f000 f8c5 	bl	80099f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800986e:	f000 fb99 	bl	8009fa4 <xTaskResumeAll>
 8009872:	e77a      	b.n	800976a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009876:	f000 f8bf 	bl	80099f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800987a:	f000 fb93 	bl	8009fa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800987e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009880:	f000 f90c 	bl	8009a9c <prvIsQueueEmpty>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	f43f af6f 	beq.w	800976a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800988c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800988e:	4618      	mov	r0, r3
 8009890:	3730      	adds	r7, #48	; 0x30
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	e000ed04 	.word	0xe000ed04

0800989c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60bb      	str	r3, [r7, #8]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80098c0:	f001 f940 	bl	800ab44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80098ca:	f001 f96b 	bl	800aba4 <vPortExitCritical>

	return uxReturn;
 80098ce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10d      	bne.n	8009912 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d14d      	bne.n	800999a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 ff06 	bl	800a714 <xTaskPriorityDisinherit>
 8009908:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	609a      	str	r2, [r3, #8]
 8009910:	e043      	b.n	800999a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d119      	bne.n	800994c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6858      	ldr	r0, [r3, #4]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009920:	461a      	mov	r2, r3
 8009922:	68b9      	ldr	r1, [r7, #8]
 8009924:	f001 fd2d 	bl	800b382 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	441a      	add	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	d32b      	bcc.n	800999a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]
 800994a:	e026      	b.n	800999a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68d8      	ldr	r0, [r3, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	461a      	mov	r2, r3
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	f001 fd13 	bl	800b382 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009964:	425b      	negs	r3, r3
 8009966:	441a      	add	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	429a      	cmp	r2, r3
 8009976:	d207      	bcs.n	8009988 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009980:	425b      	negs	r3, r3
 8009982:	441a      	add	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b02      	cmp	r3, #2
 800998c:	d105      	bne.n	800999a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	3b01      	subs	r3, #1
 8009998:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099a2:	697b      	ldr	r3, [r7, #20]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d018      	beq.n	80099f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	441a      	add	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d303      	bcc.n	80099e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68d9      	ldr	r1, [r3, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	461a      	mov	r2, r3
 80099ea:	6838      	ldr	r0, [r7, #0]
 80099ec:	f001 fcc9 	bl	800b382 <memcpy>
	}
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a00:	f001 f8a0 	bl	800ab44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a0c:	e011      	b.n	8009a32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d012      	beq.n	8009a3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3324      	adds	r3, #36	; 0x24
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fc9c 	bl	800a358 <xTaskRemoveFromEventList>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a26:	f000 fd71 	bl	800a50c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dce9      	bgt.n	8009a0e <prvUnlockQueue+0x16>
 8009a3a:	e000      	b.n	8009a3e <prvUnlockQueue+0x46>
					break;
 8009a3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	22ff      	movs	r2, #255	; 0xff
 8009a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a46:	f001 f8ad 	bl	800aba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a4a:	f001 f87b 	bl	800ab44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a56:	e011      	b.n	8009a7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d012      	beq.n	8009a86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3310      	adds	r3, #16
 8009a64:	4618      	mov	r0, r3
 8009a66:	f000 fc77 	bl	800a358 <xTaskRemoveFromEventList>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a70:	f000 fd4c 	bl	800a50c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dce9      	bgt.n	8009a58 <prvUnlockQueue+0x60>
 8009a84:	e000      	b.n	8009a88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	22ff      	movs	r2, #255	; 0xff
 8009a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a90:	f001 f888 	bl	800aba4 <vPortExitCritical>
}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aa4:	f001 f84e 	bl	800ab44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	e001      	b.n	8009aba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aba:	f001 f873 	bl	800aba4 <vPortExitCritical>

	return xReturn;
 8009abe:	68fb      	ldr	r3, [r7, #12]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ad0:	f001 f838 	bl	800ab44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d102      	bne.n	8009ae6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	e001      	b.n	8009aea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aea:	f001 f85b 	bl	800aba4 <vPortExitCritical>

	return xReturn;
 8009aee:	68fb      	ldr	r3, [r7, #12]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08e      	sub	sp, #56	; 0x38
 8009afc:	af04      	add	r7, sp, #16
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	623b      	str	r3, [r7, #32]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <xTaskCreateStatic+0x46>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	61fb      	str	r3, [r7, #28]
}
 8009b3a:	bf00      	nop
 8009b3c:	e7fe      	b.n	8009b3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b3e:	23b4      	movs	r3, #180	; 0xb4
 8009b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	2bb4      	cmp	r3, #180	; 0xb4
 8009b46:	d00a      	beq.n	8009b5e <xTaskCreateStatic+0x66>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	61bb      	str	r3, [r7, #24]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01e      	beq.n	8009ba4 <xTaskCreateStatic+0xac>
 8009b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d01b      	beq.n	8009ba4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9303      	str	r3, [sp, #12]
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	9302      	str	r3, [sp, #8]
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 f850 	bl	8009c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b9e:	f000 f8eb 	bl	8009d78 <prvAddNewTaskToReadyList>
 8009ba2:	e001      	b.n	8009ba8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ba8:	697b      	ldr	r3, [r7, #20]
	}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3728      	adds	r7, #40	; 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b08c      	sub	sp, #48	; 0x30
 8009bb6:	af04      	add	r7, sp, #16
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bc2:	88fb      	ldrh	r3, [r7, #6]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 f89e 	bl	800ad08 <pvPortMalloc>
 8009bcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00e      	beq.n	8009bf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bd4:	20b4      	movs	r0, #180	; 0xb4
 8009bd6:	f001 f897 	bl	800ad08 <pvPortMalloc>
 8009bda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	697a      	ldr	r2, [r7, #20]
 8009be6:	631a      	str	r2, [r3, #48]	; 0x30
 8009be8:	e005      	b.n	8009bf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009bea:	6978      	ldr	r0, [r7, #20]
 8009bec:	f001 f958 	bl	800aea0 <vPortFree>
 8009bf0:	e001      	b.n	8009bf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d017      	beq.n	8009c2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	2300      	movs	r3, #0
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	9302      	str	r3, [sp, #8]
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 f80e 	bl	8009c3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c20:	69f8      	ldr	r0, [r7, #28]
 8009c22:	f000 f8a9 	bl	8009d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c26:	2301      	movs	r3, #1
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e002      	b.n	8009c32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c32:	69bb      	ldr	r3, [r7, #24]
	}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3720      	adds	r7, #32
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c54:	3b01      	subs	r3, #1
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	f023 0307 	bic.w	r3, r3, #7
 8009c62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	617b      	str	r3, [r7, #20]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01f      	beq.n	8009cca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e012      	b.n	8009cb6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	7819      	ldrb	r1, [r3, #0]
 8009c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3334      	adds	r3, #52	; 0x34
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	2b0f      	cmp	r3, #15
 8009cba:	d9e9      	bls.n	8009c90 <prvInitialiseNewTask+0x54>
 8009cbc:	e000      	b.n	8009cc0 <prvInitialiseNewTask+0x84>
			{
				break;
 8009cbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cc8:	e003      	b.n	8009cd2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	2b06      	cmp	r3, #6
 8009cd6:	d901      	bls.n	8009cdc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009cd8:	2306      	movs	r3, #6
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	2200      	movs	r2, #0
 8009cec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff fa9d 	bl	8009232 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	3318      	adds	r3, #24
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fa98 	bl	8009232 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0a:	f1c3 0207 	rsb	r2, r3, #7
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	334c      	adds	r3, #76	; 0x4c
 8009d2c:	2260      	movs	r2, #96	; 0x60
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 fb34 	bl	800b39e <memset>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	4a0c      	ldr	r2, [pc, #48]	; (8009d6c <prvInitialiseNewTask+0x130>)
 8009d3a:	651a      	str	r2, [r3, #80]	; 0x50
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	4a0c      	ldr	r2, [pc, #48]	; (8009d70 <prvInitialiseNewTask+0x134>)
 8009d40:	655a      	str	r2, [r3, #84]	; 0x54
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	4a0b      	ldr	r2, [pc, #44]	; (8009d74 <prvInitialiseNewTask+0x138>)
 8009d46:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	68f9      	ldr	r1, [r7, #12]
 8009d4c:	69b8      	ldr	r0, [r7, #24]
 8009d4e:	f000 fdcd 	bl	800a8ec <pxPortInitialiseStack>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d64:	bf00      	nop
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	08011870 	.word	0x08011870
 8009d70:	08011890 	.word	0x08011890
 8009d74:	08011850 	.word	0x08011850

08009d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d80:	f000 fee0 	bl	800ab44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d84:	4b2a      	ldr	r3, [pc, #168]	; (8009e30 <prvAddNewTaskToReadyList+0xb8>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	4a29      	ldr	r2, [pc, #164]	; (8009e30 <prvAddNewTaskToReadyList+0xb8>)
 8009d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d8e:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <prvAddNewTaskToReadyList+0xbc>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d96:	4a27      	ldr	r2, [pc, #156]	; (8009e34 <prvAddNewTaskToReadyList+0xbc>)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d9c:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <prvAddNewTaskToReadyList+0xb8>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d110      	bne.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009da4:	f000 fbd6 	bl	800a554 <prvInitialiseTaskLists>
 8009da8:	e00d      	b.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009daa:	4b23      	ldr	r3, [pc, #140]	; (8009e38 <prvAddNewTaskToReadyList+0xc0>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d109      	bne.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009db2:	4b20      	ldr	r3, [pc, #128]	; (8009e34 <prvAddNewTaskToReadyList+0xbc>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d802      	bhi.n	8009dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009dc0:	4a1c      	ldr	r2, [pc, #112]	; (8009e34 <prvAddNewTaskToReadyList+0xbc>)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <prvAddNewTaskToReadyList+0xc4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	4a1b      	ldr	r2, [pc, #108]	; (8009e3c <prvAddNewTaskToReadyList+0xc4>)
 8009dce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	409a      	lsls	r2, r3
 8009dd8:	4b19      	ldr	r3, [pc, #100]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	4a18      	ldr	r2, [pc, #96]	; (8009e40 <prvAddNewTaskToReadyList+0xc8>)
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4a15      	ldr	r2, [pc, #84]	; (8009e44 <prvAddNewTaskToReadyList+0xcc>)
 8009df0:	441a      	add	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3304      	adds	r3, #4
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f7ff fa27 	bl	800924c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dfe:	f000 fed1 	bl	800aba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e02:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <prvAddNewTaskToReadyList+0xc0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00e      	beq.n	8009e28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e0a:	4b0a      	ldr	r3, [pc, #40]	; (8009e34 <prvAddNewTaskToReadyList+0xbc>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d207      	bcs.n	8009e28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e18:	4b0b      	ldr	r3, [pc, #44]	; (8009e48 <prvAddNewTaskToReadyList+0xd0>)
 8009e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	2000bb48 	.word	0x2000bb48
 8009e34:	2000ba48 	.word	0x2000ba48
 8009e38:	2000bb54 	.word	0x2000bb54
 8009e3c:	2000bb64 	.word	0x2000bb64
 8009e40:	2000bb50 	.word	0x2000bb50
 8009e44:	2000ba4c 	.word	0x2000ba4c
 8009e48:	e000ed04 	.word	0xe000ed04

08009e4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d017      	beq.n	8009e8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e5e:	4b13      	ldr	r3, [pc, #76]	; (8009eac <vTaskDelay+0x60>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <vTaskDelay+0x30>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	60bb      	str	r3, [r7, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e7c:	f000 f884 	bl	8009f88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e80:	2100      	movs	r1, #0
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fccc 	bl	800a820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e88:	f000 f88c 	bl	8009fa4 <xTaskResumeAll>
 8009e8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d107      	bne.n	8009ea4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e94:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <vTaskDelay+0x64>)
 8009e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ea4:	bf00      	nop
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	2000bb70 	.word	0x2000bb70
 8009eb0:	e000ed04 	.word	0xe000ed04

08009eb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08a      	sub	sp, #40	; 0x28
 8009eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ec2:	463a      	mov	r2, r7
 8009ec4:	1d39      	adds	r1, r7, #4
 8009ec6:	f107 0308 	add.w	r3, r7, #8
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7f7 fcca 	bl	8001864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	9202      	str	r2, [sp, #8]
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	2300      	movs	r3, #0
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	460a      	mov	r2, r1
 8009ee2:	4921      	ldr	r1, [pc, #132]	; (8009f68 <vTaskStartScheduler+0xb4>)
 8009ee4:	4821      	ldr	r0, [pc, #132]	; (8009f6c <vTaskStartScheduler+0xb8>)
 8009ee6:	f7ff fe07 	bl	8009af8 <xTaskCreateStatic>
 8009eea:	4603      	mov	r3, r0
 8009eec:	4a20      	ldr	r2, [pc, #128]	; (8009f70 <vTaskStartScheduler+0xbc>)
 8009eee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ef0:	4b1f      	ldr	r3, [pc, #124]	; (8009f70 <vTaskStartScheduler+0xbc>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	e001      	b.n	8009f02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d11b      	bne.n	8009f40 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	613b      	str	r3, [r7, #16]
}
 8009f1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f1c:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <vTaskStartScheduler+0xc0>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	334c      	adds	r3, #76	; 0x4c
 8009f22:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <vTaskStartScheduler+0xc4>)
 8009f24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f26:	4b15      	ldr	r3, [pc, #84]	; (8009f7c <vTaskStartScheduler+0xc8>)
 8009f28:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <vTaskStartScheduler+0xcc>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f34:	4b13      	ldr	r3, [pc, #76]	; (8009f84 <vTaskStartScheduler+0xd0>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f3a:	f000 fd61 	bl	800aa00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f3e:	e00e      	b.n	8009f5e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	d10a      	bne.n	8009f5e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	60fb      	str	r3, [r7, #12]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <vTaskStartScheduler+0xa8>
}
 8009f5e:	bf00      	nop
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	0801166c 	.word	0x0801166c
 8009f6c:	0800a525 	.word	0x0800a525
 8009f70:	2000bb6c 	.word	0x2000bb6c
 8009f74:	2000ba48 	.word	0x2000ba48
 8009f78:	20000214 	.word	0x20000214
 8009f7c:	2000bb68 	.word	0x2000bb68
 8009f80:	2000bb54 	.word	0x2000bb54
 8009f84:	2000bb4c 	.word	0x2000bb4c

08009f88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f8c:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <vTaskSuspendAll+0x18>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3301      	adds	r3, #1
 8009f92:	4a03      	ldr	r2, [pc, #12]	; (8009fa0 <vTaskSuspendAll+0x18>)
 8009f94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f96:	bf00      	nop
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	2000bb70 	.word	0x2000bb70

08009fa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fb2:	4b41      	ldr	r3, [pc, #260]	; (800a0b8 <xTaskResumeAll+0x114>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10a      	bne.n	8009fd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	603b      	str	r3, [r7, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009fd0:	f000 fdb8 	bl	800ab44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fd4:	4b38      	ldr	r3, [pc, #224]	; (800a0b8 <xTaskResumeAll+0x114>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	4a37      	ldr	r2, [pc, #220]	; (800a0b8 <xTaskResumeAll+0x114>)
 8009fdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fde:	4b36      	ldr	r3, [pc, #216]	; (800a0b8 <xTaskResumeAll+0x114>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d161      	bne.n	800a0aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fe6:	4b35      	ldr	r3, [pc, #212]	; (800a0bc <xTaskResumeAll+0x118>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d05d      	beq.n	800a0aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fee:	e02e      	b.n	800a04e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff0:	4b33      	ldr	r3, [pc, #204]	; (800a0c0 <xTaskResumeAll+0x11c>)
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff f982 	bl	8009306 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3304      	adds	r3, #4
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff f97d 	bl	8009306 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	2201      	movs	r2, #1
 800a012:	409a      	lsls	r2, r3
 800a014:	4b2b      	ldr	r3, [pc, #172]	; (800a0c4 <xTaskResumeAll+0x120>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4313      	orrs	r3, r2
 800a01a:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <xTaskResumeAll+0x120>)
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4a27      	ldr	r2, [pc, #156]	; (800a0c8 <xTaskResumeAll+0x124>)
 800a02c:	441a      	add	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3304      	adds	r3, #4
 800a032:	4619      	mov	r1, r3
 800a034:	4610      	mov	r0, r2
 800a036:	f7ff f909 	bl	800924c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	4b23      	ldr	r3, [pc, #140]	; (800a0cc <xTaskResumeAll+0x128>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	429a      	cmp	r2, r3
 800a046:	d302      	bcc.n	800a04e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a048:	4b21      	ldr	r3, [pc, #132]	; (800a0d0 <xTaskResumeAll+0x12c>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a04e:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <xTaskResumeAll+0x11c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1cc      	bne.n	8009ff0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a05c:	f000 fb1c 	bl	800a698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a060:	4b1c      	ldr	r3, [pc, #112]	; (800a0d4 <xTaskResumeAll+0x130>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d010      	beq.n	800a08e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a06c:	f000 f836 	bl	800a0dc <xTaskIncrementTick>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <xTaskResumeAll+0x12c>)
 800a078:	2201      	movs	r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3b01      	subs	r3, #1
 800a080:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1f1      	bne.n	800a06c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a088:	4b12      	ldr	r3, [pc, #72]	; (800a0d4 <xTaskResumeAll+0x130>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a08e:	4b10      	ldr	r3, [pc, #64]	; (800a0d0 <xTaskResumeAll+0x12c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d009      	beq.n	800a0aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a096:	2301      	movs	r3, #1
 800a098:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a09a:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <xTaskResumeAll+0x134>)
 800a09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0aa:	f000 fd7b 	bl	800aba4 <vPortExitCritical>

	return xAlreadyYielded;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	2000bb70 	.word	0x2000bb70
 800a0bc:	2000bb48 	.word	0x2000bb48
 800a0c0:	2000bb08 	.word	0x2000bb08
 800a0c4:	2000bb50 	.word	0x2000bb50
 800a0c8:	2000ba4c 	.word	0x2000ba4c
 800a0cc:	2000ba48 	.word	0x2000ba48
 800a0d0:	2000bb5c 	.word	0x2000bb5c
 800a0d4:	2000bb58 	.word	0x2000bb58
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e6:	4b4e      	ldr	r3, [pc, #312]	; (800a220 <xTaskIncrementTick+0x144>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f040 808e 	bne.w	800a20c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0f0:	4b4c      	ldr	r3, [pc, #304]	; (800a224 <xTaskIncrementTick+0x148>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0f8:	4a4a      	ldr	r2, [pc, #296]	; (800a224 <xTaskIncrementTick+0x148>)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d120      	bne.n	800a146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a104:	4b48      	ldr	r3, [pc, #288]	; (800a228 <xTaskIncrementTick+0x14c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <xTaskIncrementTick+0x48>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	603b      	str	r3, [r7, #0]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <xTaskIncrementTick+0x46>
 800a124:	4b40      	ldr	r3, [pc, #256]	; (800a228 <xTaskIncrementTick+0x14c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	4b40      	ldr	r3, [pc, #256]	; (800a22c <xTaskIncrementTick+0x150>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a3e      	ldr	r2, [pc, #248]	; (800a228 <xTaskIncrementTick+0x14c>)
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	4a3e      	ldr	r2, [pc, #248]	; (800a22c <xTaskIncrementTick+0x150>)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	4b3d      	ldr	r3, [pc, #244]	; (800a230 <xTaskIncrementTick+0x154>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3301      	adds	r3, #1
 800a13e:	4a3c      	ldr	r2, [pc, #240]	; (800a230 <xTaskIncrementTick+0x154>)
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	f000 faa9 	bl	800a698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a146:	4b3b      	ldr	r3, [pc, #236]	; (800a234 <xTaskIncrementTick+0x158>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d348      	bcc.n	800a1e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a150:	4b35      	ldr	r3, [pc, #212]	; (800a228 <xTaskIncrementTick+0x14c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15a:	4b36      	ldr	r3, [pc, #216]	; (800a234 <xTaskIncrementTick+0x158>)
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	601a      	str	r2, [r3, #0]
					break;
 800a162:	e03e      	b.n	800a1e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a164:	4b30      	ldr	r3, [pc, #192]	; (800a228 <xTaskIncrementTick+0x14c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d203      	bcs.n	800a184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a17c:	4a2d      	ldr	r2, [pc, #180]	; (800a234 <xTaskIncrementTick+0x158>)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a182:	e02e      	b.n	800a1e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	3304      	adds	r3, #4
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff f8bc 	bl	8009306 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	3318      	adds	r3, #24
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff f8b3 	bl	8009306 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	409a      	lsls	r2, r3
 800a1a8:	4b23      	ldr	r3, [pc, #140]	; (800a238 <xTaskIncrementTick+0x15c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	4a22      	ldr	r2, [pc, #136]	; (800a238 <xTaskIncrementTick+0x15c>)
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4a1f      	ldr	r2, [pc, #124]	; (800a23c <xTaskIncrementTick+0x160>)
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f7ff f83f 	bl	800924c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <xTaskIncrementTick+0x164>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d3b9      	bcc.n	800a150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e0:	e7b6      	b.n	800a150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1e2:	4b17      	ldr	r3, [pc, #92]	; (800a240 <xTaskIncrementTick+0x164>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4914      	ldr	r1, [pc, #80]	; (800a23c <xTaskIncrementTick+0x160>)
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d901      	bls.n	800a1fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1fe:	4b11      	ldr	r3, [pc, #68]	; (800a244 <xTaskIncrementTick+0x168>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a206:	2301      	movs	r3, #1
 800a208:	617b      	str	r3, [r7, #20]
 800a20a:	e004      	b.n	800a216 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <xTaskIncrementTick+0x16c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3301      	adds	r3, #1
 800a212:	4a0d      	ldr	r2, [pc, #52]	; (800a248 <xTaskIncrementTick+0x16c>)
 800a214:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a216:	697b      	ldr	r3, [r7, #20]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	2000bb70 	.word	0x2000bb70
 800a224:	2000bb4c 	.word	0x2000bb4c
 800a228:	2000bb00 	.word	0x2000bb00
 800a22c:	2000bb04 	.word	0x2000bb04
 800a230:	2000bb60 	.word	0x2000bb60
 800a234:	2000bb68 	.word	0x2000bb68
 800a238:	2000bb50 	.word	0x2000bb50
 800a23c:	2000ba4c 	.word	0x2000ba4c
 800a240:	2000ba48 	.word	0x2000ba48
 800a244:	2000bb5c 	.word	0x2000bb5c
 800a248:	2000bb58 	.word	0x2000bb58

0800a24c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a252:	4b29      	ldr	r3, [pc, #164]	; (800a2f8 <vTaskSwitchContext+0xac>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a25a:	4b28      	ldr	r3, [pc, #160]	; (800a2fc <vTaskSwitchContext+0xb0>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a260:	e044      	b.n	800a2ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a262:	4b26      	ldr	r3, [pc, #152]	; (800a2fc <vTaskSwitchContext+0xb0>)
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a268:	4b25      	ldr	r3, [pc, #148]	; (800a300 <vTaskSwitchContext+0xb4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	fab3 f383 	clz	r3, r3
 800a274:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a276:	7afb      	ldrb	r3, [r7, #11]
 800a278:	f1c3 031f 	rsb	r3, r3, #31
 800a27c:	617b      	str	r3, [r7, #20]
 800a27e:	4921      	ldr	r1, [pc, #132]	; (800a304 <vTaskSwitchContext+0xb8>)
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	4613      	mov	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	440b      	add	r3, r1
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10a      	bne.n	800a2a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	607b      	str	r3, [r7, #4]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <vTaskSwitchContext+0x5a>
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4a14      	ldr	r2, [pc, #80]	; (800a304 <vTaskSwitchContext+0xb8>)
 800a2b4:	4413      	add	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	605a      	str	r2, [r3, #4]
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d104      	bne.n	800a2d8 <vTaskSwitchContext+0x8c>
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	605a      	str	r2, [r3, #4]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	4a0a      	ldr	r2, [pc, #40]	; (800a308 <vTaskSwitchContext+0xbc>)
 800a2e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <vTaskSwitchContext+0xbc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	334c      	adds	r3, #76	; 0x4c
 800a2e8:	4a08      	ldr	r2, [pc, #32]	; (800a30c <vTaskSwitchContext+0xc0>)
 800a2ea:	6013      	str	r3, [r2, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	371c      	adds	r7, #28
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	2000bb70 	.word	0x2000bb70
 800a2fc:	2000bb5c 	.word	0x2000bb5c
 800a300:	2000bb50 	.word	0x2000bb50
 800a304:	2000ba4c 	.word	0x2000ba4c
 800a308:	2000ba48 	.word	0x2000ba48
 800a30c:	20000214 	.word	0x20000214

0800a310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60fb      	str	r3, [r7, #12]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <vTaskPlaceOnEventList+0x44>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3318      	adds	r3, #24
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7fe ffa8 	bl	8009294 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a344:	2101      	movs	r1, #1
 800a346:	6838      	ldr	r0, [r7, #0]
 800a348:	f000 fa6a 	bl	800a820 <prvAddCurrentTaskToDelayedList>
}
 800a34c:	bf00      	nop
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	2000ba48 	.word	0x2000ba48

0800a358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60fb      	str	r3, [r7, #12]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	3318      	adds	r3, #24
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe ffbc 	bl	8009306 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <xTaskRemoveFromEventList+0xac>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d11c      	bne.n	800a3d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	3304      	adds	r3, #4
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe ffb3 	bl	8009306 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	409a      	lsls	r2, r3
 800a3a8:	4b17      	ldr	r3, [pc, #92]	; (800a408 <xTaskRemoveFromEventList+0xb0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	4a16      	ldr	r2, [pc, #88]	; (800a408 <xTaskRemoveFromEventList+0xb0>)
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4a13      	ldr	r2, [pc, #76]	; (800a40c <xTaskRemoveFromEventList+0xb4>)
 800a3c0:	441a      	add	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7fe ff3f 	bl	800924c <vListInsertEnd>
 800a3ce:	e005      	b.n	800a3dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	3318      	adds	r3, #24
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	480e      	ldr	r0, [pc, #56]	; (800a410 <xTaskRemoveFromEventList+0xb8>)
 800a3d8:	f7fe ff38 	bl	800924c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e0:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <xTaskRemoveFromEventList+0xbc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d905      	bls.n	800a3f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <xTaskRemoveFromEventList+0xc0>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e001      	b.n	800a3fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3fa:	697b      	ldr	r3, [r7, #20]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	2000bb70 	.word	0x2000bb70
 800a408:	2000bb50 	.word	0x2000bb50
 800a40c:	2000ba4c 	.word	0x2000ba4c
 800a410:	2000bb08 	.word	0x2000bb08
 800a414:	2000ba48 	.word	0x2000ba48
 800a418:	2000bb5c 	.word	0x2000bb5c

0800a41c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <vTaskInternalSetTimeOutState+0x24>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <vTaskInternalSetTimeOutState+0x28>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	605a      	str	r2, [r3, #4]
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	2000bb60 	.word	0x2000bb60
 800a444:	2000bb4c 	.word	0x2000bb4c

0800a448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	613b      	str	r3, [r7, #16]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60fb      	str	r3, [r7, #12]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a48a:	f000 fb5b 	bl	800ab44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a48e:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <xTaskCheckForTimeOut+0xbc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d102      	bne.n	800a4ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	e023      	b.n	800a4f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b15      	ldr	r3, [pc, #84]	; (800a508 <xTaskCheckForTimeOut+0xc0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d007      	beq.n	800a4ca <xTaskCheckForTimeOut+0x82>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d302      	bcc.n	800a4ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	e015      	b.n	800a4f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d20b      	bcs.n	800a4ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	1ad2      	subs	r2, r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff ff9b 	bl	800a41c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	e004      	b.n	800a4f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4f6:	f000 fb55 	bl	800aba4 <vPortExitCritical>

	return xReturn;
 800a4fa:	69fb      	ldr	r3, [r7, #28]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3720      	adds	r7, #32
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	2000bb4c 	.word	0x2000bb4c
 800a508:	2000bb60 	.word	0x2000bb60

0800a50c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a510:	4b03      	ldr	r3, [pc, #12]	; (800a520 <vTaskMissedYield+0x14>)
 800a512:	2201      	movs	r2, #1
 800a514:	601a      	str	r2, [r3, #0]
}
 800a516:	bf00      	nop
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	2000bb5c 	.word	0x2000bb5c

0800a524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a52c:	f000 f852 	bl	800a5d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a530:	4b06      	ldr	r3, [pc, #24]	; (800a54c <prvIdleTask+0x28>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d9f9      	bls.n	800a52c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <prvIdleTask+0x2c>)
 800a53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a548:	e7f0      	b.n	800a52c <prvIdleTask+0x8>
 800a54a:	bf00      	nop
 800a54c:	2000ba4c 	.word	0x2000ba4c
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a55a:	2300      	movs	r3, #0
 800a55c:	607b      	str	r3, [r7, #4]
 800a55e:	e00c      	b.n	800a57a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4a12      	ldr	r2, [pc, #72]	; (800a5b4 <prvInitialiseTaskLists+0x60>)
 800a56c:	4413      	add	r3, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fe3f 	bl	80091f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3301      	adds	r3, #1
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b06      	cmp	r3, #6
 800a57e:	d9ef      	bls.n	800a560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a580:	480d      	ldr	r0, [pc, #52]	; (800a5b8 <prvInitialiseTaskLists+0x64>)
 800a582:	f7fe fe36 	bl	80091f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a586:	480d      	ldr	r0, [pc, #52]	; (800a5bc <prvInitialiseTaskLists+0x68>)
 800a588:	f7fe fe33 	bl	80091f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a58c:	480c      	ldr	r0, [pc, #48]	; (800a5c0 <prvInitialiseTaskLists+0x6c>)
 800a58e:	f7fe fe30 	bl	80091f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a592:	480c      	ldr	r0, [pc, #48]	; (800a5c4 <prvInitialiseTaskLists+0x70>)
 800a594:	f7fe fe2d 	bl	80091f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a598:	480b      	ldr	r0, [pc, #44]	; (800a5c8 <prvInitialiseTaskLists+0x74>)
 800a59a:	f7fe fe2a 	bl	80091f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a59e:	4b0b      	ldr	r3, [pc, #44]	; (800a5cc <prvInitialiseTaskLists+0x78>)
 800a5a0:	4a05      	ldr	r2, [pc, #20]	; (800a5b8 <prvInitialiseTaskLists+0x64>)
 800a5a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <prvInitialiseTaskLists+0x7c>)
 800a5a6:	4a05      	ldr	r2, [pc, #20]	; (800a5bc <prvInitialiseTaskLists+0x68>)
 800a5a8:	601a      	str	r2, [r3, #0]
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000ba4c 	.word	0x2000ba4c
 800a5b8:	2000bad8 	.word	0x2000bad8
 800a5bc:	2000baec 	.word	0x2000baec
 800a5c0:	2000bb08 	.word	0x2000bb08
 800a5c4:	2000bb1c 	.word	0x2000bb1c
 800a5c8:	2000bb34 	.word	0x2000bb34
 800a5cc:	2000bb00 	.word	0x2000bb00
 800a5d0:	2000bb04 	.word	0x2000bb04

0800a5d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5da:	e019      	b.n	800a610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5dc:	f000 fab2 	bl	800ab44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e0:	4b10      	ldr	r3, [pc, #64]	; (800a624 <prvCheckTasksWaitingTermination+0x50>)
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fe8a 	bl	8009306 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <prvCheckTasksWaitingTermination+0x54>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	4a0b      	ldr	r2, [pc, #44]	; (800a628 <prvCheckTasksWaitingTermination+0x54>)
 800a5fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5fc:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <prvCheckTasksWaitingTermination+0x58>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3b01      	subs	r3, #1
 800a602:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <prvCheckTasksWaitingTermination+0x58>)
 800a604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a606:	f000 facd 	bl	800aba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f810 	bl	800a630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a610:	4b06      	ldr	r3, [pc, #24]	; (800a62c <prvCheckTasksWaitingTermination+0x58>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e1      	bne.n	800a5dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a618:	bf00      	nop
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	2000bb1c 	.word	0x2000bb1c
 800a628:	2000bb48 	.word	0x2000bb48
 800a62c:	2000bb30 	.word	0x2000bb30

0800a630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	334c      	adds	r3, #76	; 0x4c
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 ff2d 	bl	800c49c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d108      	bne.n	800a65e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fc25 	bl	800aea0 <vPortFree>
				vPortFree( pxTCB );
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fc22 	bl	800aea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a65c:	e018      	b.n	800a690 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a664:	2b01      	cmp	r3, #1
 800a666:	d103      	bne.n	800a670 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fc19 	bl	800aea0 <vPortFree>
	}
 800a66e:	e00f      	b.n	800a690 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a676:	2b02      	cmp	r3, #2
 800a678:	d00a      	beq.n	800a690 <prvDeleteTCB+0x60>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	60fb      	str	r3, [r7, #12]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <prvDeleteTCB+0x5e>
	}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <prvResetNextTaskUnblockTime+0x38>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d104      	bne.n	800a6b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6b0:	e008      	b.n	800a6c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b2:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <prvResetNextTaskUnblockTime+0x38>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4a04      	ldr	r2, [pc, #16]	; (800a6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a6c2:	6013      	str	r3, [r2, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	2000bb00 	.word	0x2000bb00
 800a6d4:	2000bb68 	.word	0x2000bb68

0800a6d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6de:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <xTaskGetSchedulerState+0x34>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	e008      	b.n	800a6fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ec:	4b08      	ldr	r3, [pc, #32]	; (800a710 <xTaskGetSchedulerState+0x38>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	e001      	b.n	800a6fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6fe:	687b      	ldr	r3, [r7, #4]
	}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	2000bb54 	.word	0x2000bb54
 800a710:	2000bb70 	.word	0x2000bb70

0800a714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d06e      	beq.n	800a808 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a72a:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <xTaskPriorityDisinherit+0x100>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	429a      	cmp	r2, r3
 800a732:	d00a      	beq.n	800a74a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	60bb      	str	r3, [r7, #8]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76c:	1e5a      	subs	r2, r3, #1
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d044      	beq.n	800a808 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a782:	2b00      	cmp	r3, #0
 800a784:	d140      	bne.n	800a808 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	3304      	adds	r3, #4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fdbb 	bl	8009306 <uxListRemove>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d115      	bne.n	800a7c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79a:	491f      	ldr	r1, [pc, #124]	; (800a818 <xTaskPriorityDisinherit+0x104>)
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <xTaskPriorityDisinherit+0xae>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43da      	mvns	r2, r3
 800a7b8:	4b18      	ldr	r3, [pc, #96]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	4a17      	ldr	r2, [pc, #92]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	f1c3 0207 	rsb	r2, r3, #7
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7da:	2201      	movs	r2, #1
 800a7dc:	409a      	lsls	r2, r3
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	4a0d      	ldr	r2, [pc, #52]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4a08      	ldr	r2, [pc, #32]	; (800a818 <xTaskPriorityDisinherit+0x104>)
 800a7f6:	441a      	add	r2, r3
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fe fd24 	bl	800924c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a804:	2301      	movs	r3, #1
 800a806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a808:	697b      	ldr	r3, [r7, #20]
	}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	2000ba48 	.word	0x2000ba48
 800a818:	2000ba4c 	.word	0x2000ba4c
 800a81c:	2000bb50 	.word	0x2000bb50

0800a820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a82a:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3304      	adds	r3, #4
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fd65 	bl	8009306 <uxListRemove>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10b      	bne.n	800a85a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a842:	4b24      	ldr	r3, [pc, #144]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	2201      	movs	r2, #1
 800a84a:	fa02 f303 	lsl.w	r3, r2, r3
 800a84e:	43da      	mvns	r2, r3
 800a850:	4b21      	ldr	r3, [pc, #132]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4013      	ands	r3, r2
 800a856:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d10a      	bne.n	800a878 <prvAddCurrentTaskToDelayedList+0x58>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d007      	beq.n	800a878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a868:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4619      	mov	r1, r3
 800a870:	481a      	ldr	r0, [pc, #104]	; (800a8dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a872:	f7fe fceb 	bl	800924c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a876:	e026      	b.n	800a8c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a880:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d209      	bcs.n	800a8a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a890:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4b0f      	ldr	r3, [pc, #60]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3304      	adds	r3, #4
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7fe fcf9 	bl	8009294 <vListInsert>
}
 800a8a2:	e010      	b.n	800a8c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fe fcef 	bl	8009294 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d202      	bcs.n	800a8c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a8c0:	4a09      	ldr	r2, [pc, #36]	; (800a8e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6013      	str	r3, [r2, #0]
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	2000bb4c 	.word	0x2000bb4c
 800a8d4:	2000ba48 	.word	0x2000ba48
 800a8d8:	2000bb50 	.word	0x2000bb50
 800a8dc:	2000bb34 	.word	0x2000bb34
 800a8e0:	2000bb04 	.word	0x2000bb04
 800a8e4:	2000bb00 	.word	0x2000bb00
 800a8e8:	2000bb68 	.word	0x2000bb68

0800a8ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3b04      	subs	r3, #4
 800a8fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3b04      	subs	r3, #4
 800a90a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f023 0201 	bic.w	r2, r3, #1
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3b04      	subs	r3, #4
 800a91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a91c:	4a0c      	ldr	r2, [pc, #48]	; (800a950 <pxPortInitialiseStack+0x64>)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3b14      	subs	r3, #20
 800a926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3b04      	subs	r3, #4
 800a932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f06f 0202 	mvn.w	r2, #2
 800a93a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3b20      	subs	r3, #32
 800a940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a942:	68fb      	ldr	r3, [r7, #12]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	0800a955 	.word	0x0800a955

0800a954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a95e:	4b12      	ldr	r3, [pc, #72]	; (800a9a8 <prvTaskExitError+0x54>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d00a      	beq.n	800a97e <prvTaskExitError+0x2a>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	60fb      	str	r3, [r7, #12]
}
 800a97a:	bf00      	nop
 800a97c:	e7fe      	b.n	800a97c <prvTaskExitError+0x28>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	60bb      	str	r3, [r7, #8]
}
 800a990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a992:	bf00      	nop
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0fc      	beq.n	800a994 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	20000210 	.word	0x20000210
 800a9ac:	00000000 	.word	0x00000000

0800a9b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <pxCurrentTCBConst2>)
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	6808      	ldr	r0, [r1, #0]
 800a9b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ba:	f380 8809 	msr	PSP, r0
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f04f 0000 	mov.w	r0, #0
 800a9c6:	f380 8811 	msr	BASEPRI, r0
 800a9ca:	4770      	bx	lr
 800a9cc:	f3af 8000 	nop.w

0800a9d0 <pxCurrentTCBConst2>:
 800a9d0:	2000ba48 	.word	0x2000ba48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop

0800a9d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9d8:	4808      	ldr	r0, [pc, #32]	; (800a9fc <prvPortStartFirstTask+0x24>)
 800a9da:	6800      	ldr	r0, [r0, #0]
 800a9dc:	6800      	ldr	r0, [r0, #0]
 800a9de:	f380 8808 	msr	MSP, r0
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8814 	msr	CONTROL, r0
 800a9ea:	b662      	cpsie	i
 800a9ec:	b661      	cpsie	f
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	df00      	svc	0
 800a9f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9fa:	bf00      	nop
 800a9fc:	e000ed08 	.word	0xe000ed08

0800aa00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa06:	4b46      	ldr	r3, [pc, #280]	; (800ab20 <xPortStartScheduler+0x120>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a46      	ldr	r2, [pc, #280]	; (800ab24 <xPortStartScheduler+0x124>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d10a      	bne.n	800aa26 <xPortStartScheduler+0x26>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa26:	4b3e      	ldr	r3, [pc, #248]	; (800ab20 <xPortStartScheduler+0x120>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a3f      	ldr	r2, [pc, #252]	; (800ab28 <xPortStartScheduler+0x128>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d10a      	bne.n	800aa46 <xPortStartScheduler+0x46>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	60fb      	str	r3, [r7, #12]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa46:	4b39      	ldr	r3, [pc, #228]	; (800ab2c <xPortStartScheduler+0x12c>)
 800aa48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	22ff      	movs	r2, #255	; 0xff
 800aa56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa60:	78fb      	ldrb	r3, [r7, #3]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4b31      	ldr	r3, [pc, #196]	; (800ab30 <xPortStartScheduler+0x130>)
 800aa6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa6e:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa70:	2207      	movs	r2, #7
 800aa72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa74:	e009      	b.n	800aa8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa76:	4b2f      	ldr	r3, [pc, #188]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	4a2d      	ldr	r2, [pc, #180]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d0ef      	beq.n	800aa76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa96:	4b27      	ldr	r3, [pc, #156]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f1c3 0307 	rsb	r3, r3, #7
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d00a      	beq.n	800aab8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	60bb      	str	r3, [r7, #8]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aab8:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <xPortStartScheduler+0x134>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <xPortStartScheduler+0x134>)
 800aac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aac2:	4b1c      	ldr	r3, [pc, #112]	; (800ab34 <xPortStartScheduler+0x134>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaca:	4a1a      	ldr	r2, [pc, #104]	; (800ab34 <xPortStartScheduler+0x134>)
 800aacc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aad6:	4b18      	ldr	r3, [pc, #96]	; (800ab38 <xPortStartScheduler+0x138>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a17      	ldr	r2, [pc, #92]	; (800ab38 <xPortStartScheduler+0x138>)
 800aadc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <xPortStartScheduler+0x138>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a14      	ldr	r2, [pc, #80]	; (800ab38 <xPortStartScheduler+0x138>)
 800aae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aaec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aaee:	f000 f8dd 	bl	800acac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aaf2:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <xPortStartScheduler+0x13c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aaf8:	f000 f8fc 	bl	800acf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aafc:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <xPortStartScheduler+0x140>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a0f      	ldr	r2, [pc, #60]	; (800ab40 <xPortStartScheduler+0x140>)
 800ab02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab08:	f7ff ff66 	bl	800a9d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab0c:	f7ff fb9e 	bl	800a24c <vTaskSwitchContext>
	prvTaskExitError();
 800ab10:	f7ff ff20 	bl	800a954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	e000ed00 	.word	0xe000ed00
 800ab24:	410fc271 	.word	0x410fc271
 800ab28:	410fc270 	.word	0x410fc270
 800ab2c:	e000e400 	.word	0xe000e400
 800ab30:	2000bb74 	.word	0x2000bb74
 800ab34:	2000bb78 	.word	0x2000bb78
 800ab38:	e000ed20 	.word	0xe000ed20
 800ab3c:	20000210 	.word	0x20000210
 800ab40:	e000ef34 	.word	0xe000ef34

0800ab44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	607b      	str	r3, [r7, #4]
}
 800ab5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab5e:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <vPortEnterCritical+0x58>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3301      	adds	r3, #1
 800ab64:	4a0d      	ldr	r2, [pc, #52]	; (800ab9c <vPortEnterCritical+0x58>)
 800ab66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab68:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <vPortEnterCritical+0x58>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d10f      	bne.n	800ab90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <vPortEnterCritical+0x5c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	603b      	str	r3, [r7, #0]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <vPortEnterCritical+0x4a>
	}
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	20000210 	.word	0x20000210
 800aba0:	e000ed04 	.word	0xe000ed04

0800aba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abaa:	4b12      	ldr	r3, [pc, #72]	; (800abf4 <vPortExitCritical+0x50>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <vPortExitCritical+0x24>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	607b      	str	r3, [r7, #4]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <vPortExitCritical+0x50>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3b01      	subs	r3, #1
 800abce:	4a09      	ldr	r2, [pc, #36]	; (800abf4 <vPortExitCritical+0x50>)
 800abd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abd2:	4b08      	ldr	r3, [pc, #32]	; (800abf4 <vPortExitCritical+0x50>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <vPortExitCritical+0x42>
 800abda:	2300      	movs	r3, #0
 800abdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abe6:	bf00      	nop
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20000210 	.word	0x20000210
	...

0800ac00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac00:	f3ef 8009 	mrs	r0, PSP
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <pxCurrentTCBConst>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	f01e 0f10 	tst.w	lr, #16
 800ac10:	bf08      	it	eq
 800ac12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1a:	6010      	str	r0, [r2, #0]
 800ac1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac24:	f380 8811 	msr	BASEPRI, r0
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f7ff fb0c 	bl	800a24c <vTaskSwitchContext>
 800ac34:	f04f 0000 	mov.w	r0, #0
 800ac38:	f380 8811 	msr	BASEPRI, r0
 800ac3c:	bc09      	pop	{r0, r3}
 800ac3e:	6819      	ldr	r1, [r3, #0]
 800ac40:	6808      	ldr	r0, [r1, #0]
 800ac42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac46:	f01e 0f10 	tst.w	lr, #16
 800ac4a:	bf08      	it	eq
 800ac4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac50:	f380 8809 	msr	PSP, r0
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	f3af 8000 	nop.w

0800ac60 <pxCurrentTCBConst>:
 800ac60:	2000ba48 	.word	0x2000ba48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop

0800ac68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
}
 800ac80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac82:	f7ff fa2b 	bl	800a0dc <xTaskIncrementTick>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac8c:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <SysTick_Handler+0x40>)
 800ac8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f383 8811 	msr	BASEPRI, r3
}
 800ac9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	e000ed04 	.word	0xe000ed04

0800acac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acb0:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <vPortSetupTimerInterrupt+0x34>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acb6:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <vPortSetupTimerInterrupt+0x38>)
 800acb8:	2200      	movs	r2, #0
 800acba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <vPortSetupTimerInterrupt+0x3c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0a      	ldr	r2, [pc, #40]	; (800acec <vPortSetupTimerInterrupt+0x40>)
 800acc2:	fba2 2303 	umull	r2, r3, r2, r3
 800acc6:	099b      	lsrs	r3, r3, #6
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <vPortSetupTimerInterrupt+0x44>)
 800acca:	3b01      	subs	r3, #1
 800accc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acce:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <vPortSetupTimerInterrupt+0x34>)
 800acd0:	2207      	movs	r2, #7
 800acd2:	601a      	str	r2, [r3, #0]
}
 800acd4:	bf00      	nop
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	e000e010 	.word	0xe000e010
 800ace4:	e000e018 	.word	0xe000e018
 800ace8:	20000204 	.word	0x20000204
 800acec:	10624dd3 	.word	0x10624dd3
 800acf0:	e000e014 	.word	0xe000e014

0800acf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800acf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad04 <vPortEnableVFP+0x10>
 800acf8:	6801      	ldr	r1, [r0, #0]
 800acfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acfe:	6001      	str	r1, [r0, #0]
 800ad00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad02:	bf00      	nop
 800ad04:	e000ed88 	.word	0xe000ed88

0800ad08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	; 0x28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad14:	f7ff f938 	bl	8009f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad18:	4b5b      	ldr	r3, [pc, #364]	; (800ae88 <pvPortMalloc+0x180>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad20:	f000 f920 	bl	800af64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad24:	4b59      	ldr	r3, [pc, #356]	; (800ae8c <pvPortMalloc+0x184>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f040 8093 	bne.w	800ae58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d01d      	beq.n	800ad74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad38:	2208      	movs	r2, #8
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d014      	beq.n	800ad74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f023 0307 	bic.w	r3, r3, #7
 800ad50:	3308      	adds	r3, #8
 800ad52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00a      	beq.n	800ad74 <pvPortMalloc+0x6c>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	617b      	str	r3, [r7, #20]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d06e      	beq.n	800ae58 <pvPortMalloc+0x150>
 800ad7a:	4b45      	ldr	r3, [pc, #276]	; (800ae90 <pvPortMalloc+0x188>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d869      	bhi.n	800ae58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad84:	4b43      	ldr	r3, [pc, #268]	; (800ae94 <pvPortMalloc+0x18c>)
 800ad86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad88:	4b42      	ldr	r3, [pc, #264]	; (800ae94 <pvPortMalloc+0x18c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad8e:	e004      	b.n	800ad9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d903      	bls.n	800adac <pvPortMalloc+0xa4>
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f1      	bne.n	800ad90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adac:	4b36      	ldr	r3, [pc, #216]	; (800ae88 <pvPortMalloc+0x180>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d050      	beq.n	800ae58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2208      	movs	r2, #8
 800adbc:	4413      	add	r3, r2
 800adbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	2308      	movs	r3, #8
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	429a      	cmp	r2, r3
 800add6:	d91f      	bls.n	800ae18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800add8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <pvPortMalloc+0xf8>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	613b      	str	r3, [r7, #16]
}
 800adfc:	bf00      	nop
 800adfe:	e7fe      	b.n	800adfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	1ad2      	subs	r2, r2, r3
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae12:	69b8      	ldr	r0, [r7, #24]
 800ae14:	f000 f908 	bl	800b028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae18:	4b1d      	ldr	r3, [pc, #116]	; (800ae90 <pvPortMalloc+0x188>)
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	4a1b      	ldr	r2, [pc, #108]	; (800ae90 <pvPortMalloc+0x188>)
 800ae24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae26:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <pvPortMalloc+0x188>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	4b1b      	ldr	r3, [pc, #108]	; (800ae98 <pvPortMalloc+0x190>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d203      	bcs.n	800ae3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae32:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <pvPortMalloc+0x188>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a18      	ldr	r2, [pc, #96]	; (800ae98 <pvPortMalloc+0x190>)
 800ae38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <pvPortMalloc+0x184>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	431a      	orrs	r2, r3
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae4e:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <pvPortMalloc+0x194>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3301      	adds	r3, #1
 800ae54:	4a11      	ldr	r2, [pc, #68]	; (800ae9c <pvPortMalloc+0x194>)
 800ae56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae58:	f7ff f8a4 	bl	8009fa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00a      	beq.n	800ae7c <pvPortMalloc+0x174>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	60fb      	str	r3, [r7, #12]
}
 800ae78:	bf00      	nop
 800ae7a:	e7fe      	b.n	800ae7a <pvPortMalloc+0x172>
	return pvReturn;
 800ae7c:	69fb      	ldr	r3, [r7, #28]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3728      	adds	r7, #40	; 0x28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200130b4 	.word	0x200130b4
 800ae8c:	200130c8 	.word	0x200130c8
 800ae90:	200130b8 	.word	0x200130b8
 800ae94:	200130ac 	.word	0x200130ac
 800ae98:	200130bc 	.word	0x200130bc
 800ae9c:	200130c0 	.word	0x200130c0

0800aea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d04d      	beq.n	800af4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aeb2:	2308      	movs	r3, #8
 800aeb4:	425b      	negs	r3, r3
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	4413      	add	r3, r2
 800aeba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	685a      	ldr	r2, [r3, #4]
 800aec4:	4b24      	ldr	r3, [pc, #144]	; (800af58 <vPortFree+0xb8>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4013      	ands	r3, r2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10a      	bne.n	800aee4 <vPortFree+0x44>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	60fb      	str	r3, [r7, #12]
}
 800aee0:	bf00      	nop
 800aee2:	e7fe      	b.n	800aee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00a      	beq.n	800af02 <vPortFree+0x62>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	60bb      	str	r3, [r7, #8]
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	4b14      	ldr	r3, [pc, #80]	; (800af58 <vPortFree+0xb8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4013      	ands	r3, r2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d01e      	beq.n	800af4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d11a      	bne.n	800af4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <vPortFree+0xb8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	43db      	mvns	r3, r3
 800af22:	401a      	ands	r2, r3
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af28:	f7ff f82e 	bl	8009f88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <vPortFree+0xbc>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4413      	add	r3, r2
 800af36:	4a09      	ldr	r2, [pc, #36]	; (800af5c <vPortFree+0xbc>)
 800af38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af3a:	6938      	ldr	r0, [r7, #16]
 800af3c:	f000 f874 	bl	800b028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af40:	4b07      	ldr	r3, [pc, #28]	; (800af60 <vPortFree+0xc0>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3301      	adds	r3, #1
 800af46:	4a06      	ldr	r2, [pc, #24]	; (800af60 <vPortFree+0xc0>)
 800af48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af4a:	f7ff f82b 	bl	8009fa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af4e:	bf00      	nop
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	200130c8 	.word	0x200130c8
 800af5c:	200130b8 	.word	0x200130b8
 800af60:	200130c4 	.word	0x200130c4

0800af64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af6a:	f247 5330 	movw	r3, #30000	; 0x7530
 800af6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af70:	4b27      	ldr	r3, [pc, #156]	; (800b010 <prvHeapInit+0xac>)
 800af72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00c      	beq.n	800af98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	3307      	adds	r3, #7
 800af82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 0307 	bic.w	r3, r3, #7
 800af8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	4a1f      	ldr	r2, [pc, #124]	; (800b010 <prvHeapInit+0xac>)
 800af94:	4413      	add	r3, r2
 800af96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af9c:	4a1d      	ldr	r2, [pc, #116]	; (800b014 <prvHeapInit+0xb0>)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afa2:	4b1c      	ldr	r3, [pc, #112]	; (800b014 <prvHeapInit+0xb0>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	4413      	add	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afb0:	2208      	movs	r2, #8
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0307 	bic.w	r3, r3, #7
 800afbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a15      	ldr	r2, [pc, #84]	; (800b018 <prvHeapInit+0xb4>)
 800afc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afc6:	4b14      	ldr	r3, [pc, #80]	; (800b018 <prvHeapInit+0xb4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2200      	movs	r2, #0
 800afcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afce:	4b12      	ldr	r3, [pc, #72]	; (800b018 <prvHeapInit+0xb4>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	1ad2      	subs	r2, r2, r3
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afe4:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <prvHeapInit+0xb4>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <prvHeapInit+0xb8>)
 800aff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4a09      	ldr	r2, [pc, #36]	; (800b020 <prvHeapInit+0xbc>)
 800affa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800affc:	4b09      	ldr	r3, [pc, #36]	; (800b024 <prvHeapInit+0xc0>)
 800affe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b002:	601a      	str	r2, [r3, #0]
}
 800b004:	bf00      	nop
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	2000bb7c 	.word	0x2000bb7c
 800b014:	200130ac 	.word	0x200130ac
 800b018:	200130b4 	.word	0x200130b4
 800b01c:	200130bc 	.word	0x200130bc
 800b020:	200130b8 	.word	0x200130b8
 800b024:	200130c8 	.word	0x200130c8

0800b028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b030:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <prvInsertBlockIntoFreeList+0xac>)
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	e002      	b.n	800b03c <prvInsertBlockIntoFreeList+0x14>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	429a      	cmp	r2, r3
 800b044:	d8f7      	bhi.n	800b036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	4413      	add	r3, r2
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	429a      	cmp	r2, r3
 800b056:	d108      	bne.n	800b06a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	441a      	add	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	441a      	add	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d118      	bne.n	800b0b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d00d      	beq.n	800b0a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	441a      	add	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	e008      	b.n	800b0b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0a6:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	e003      	b.n	800b0b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d002      	beq.n	800b0c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	200130ac 	.word	0x200130ac
 800b0d8:	200130b4 	.word	0x200130b4

0800b0dc <__assert_func>:
 800b0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0de:	4614      	mov	r4, r2
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4b09      	ldr	r3, [pc, #36]	; (800b108 <__assert_func+0x2c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	68d8      	ldr	r0, [r3, #12]
 800b0ea:	b14c      	cbz	r4, 800b100 <__assert_func+0x24>
 800b0ec:	4b07      	ldr	r3, [pc, #28]	; (800b10c <__assert_func+0x30>)
 800b0ee:	9100      	str	r1, [sp, #0]
 800b0f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0f4:	4906      	ldr	r1, [pc, #24]	; (800b110 <__assert_func+0x34>)
 800b0f6:	462b      	mov	r3, r5
 800b0f8:	f000 f8ea 	bl	800b2d0 <fiprintf>
 800b0fc:	f002 fa62 	bl	800d5c4 <abort>
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <__assert_func+0x38>)
 800b102:	461c      	mov	r4, r3
 800b104:	e7f3      	b.n	800b0ee <__assert_func+0x12>
 800b106:	bf00      	nop
 800b108:	20000214 	.word	0x20000214
 800b10c:	08011710 	.word	0x08011710
 800b110:	0801171d 	.word	0x0801171d
 800b114:	0801174b 	.word	0x0801174b

0800b118 <__errno>:
 800b118:	4b01      	ldr	r3, [pc, #4]	; (800b120 <__errno+0x8>)
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20000214 	.word	0x20000214

0800b124 <std>:
 800b124:	2300      	movs	r3, #0
 800b126:	b510      	push	{r4, lr}
 800b128:	4604      	mov	r4, r0
 800b12a:	e9c0 3300 	strd	r3, r3, [r0]
 800b12e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b132:	6083      	str	r3, [r0, #8]
 800b134:	8181      	strh	r1, [r0, #12]
 800b136:	6643      	str	r3, [r0, #100]	; 0x64
 800b138:	81c2      	strh	r2, [r0, #14]
 800b13a:	6183      	str	r3, [r0, #24]
 800b13c:	4619      	mov	r1, r3
 800b13e:	2208      	movs	r2, #8
 800b140:	305c      	adds	r0, #92	; 0x5c
 800b142:	f000 f92c 	bl	800b39e <memset>
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <std+0x38>)
 800b148:	6263      	str	r3, [r4, #36]	; 0x24
 800b14a:	4b05      	ldr	r3, [pc, #20]	; (800b160 <std+0x3c>)
 800b14c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b14e:	4b05      	ldr	r3, [pc, #20]	; (800b164 <std+0x40>)
 800b150:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b152:	4b05      	ldr	r3, [pc, #20]	; (800b168 <std+0x44>)
 800b154:	6224      	str	r4, [r4, #32]
 800b156:	6323      	str	r3, [r4, #48]	; 0x30
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	bf00      	nop
 800b15c:	0800c619 	.word	0x0800c619
 800b160:	0800c63f 	.word	0x0800c63f
 800b164:	0800c677 	.word	0x0800c677
 800b168:	0800c69b 	.word	0x0800c69b

0800b16c <_cleanup_r>:
 800b16c:	4901      	ldr	r1, [pc, #4]	; (800b174 <_cleanup_r+0x8>)
 800b16e:	f000 b8c1 	b.w	800b2f4 <_fwalk_reent>
 800b172:	bf00      	nop
 800b174:	0800e3f9 	.word	0x0800e3f9

0800b178 <__sfmoreglue>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	2268      	movs	r2, #104	; 0x68
 800b17c:	1e4d      	subs	r5, r1, #1
 800b17e:	4355      	muls	r5, r2
 800b180:	460e      	mov	r6, r1
 800b182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b186:	f000 f933 	bl	800b3f0 <_malloc_r>
 800b18a:	4604      	mov	r4, r0
 800b18c:	b140      	cbz	r0, 800b1a0 <__sfmoreglue+0x28>
 800b18e:	2100      	movs	r1, #0
 800b190:	e9c0 1600 	strd	r1, r6, [r0]
 800b194:	300c      	adds	r0, #12
 800b196:	60a0      	str	r0, [r4, #8]
 800b198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b19c:	f000 f8ff 	bl	800b39e <memset>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}

0800b1a4 <__sfp_lock_acquire>:
 800b1a4:	4801      	ldr	r0, [pc, #4]	; (800b1ac <__sfp_lock_acquire+0x8>)
 800b1a6:	f000 b8ea 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800b1aa:	bf00      	nop
 800b1ac:	200130cd 	.word	0x200130cd

0800b1b0 <__sfp_lock_release>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__sfp_lock_release+0x8>)
 800b1b2:	f000 b8e5 	b.w	800b380 <__retarget_lock_release_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	200130cd 	.word	0x200130cd

0800b1bc <__sinit_lock_acquire>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__sinit_lock_acquire+0x8>)
 800b1be:	f000 b8de 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	200130ce 	.word	0x200130ce

0800b1c8 <__sinit_lock_release>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	; (800b1d0 <__sinit_lock_release+0x8>)
 800b1ca:	f000 b8d9 	b.w	800b380 <__retarget_lock_release_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	200130ce 	.word	0x200130ce

0800b1d4 <__sinit>:
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	f7ff fff0 	bl	800b1bc <__sinit_lock_acquire>
 800b1dc:	69a3      	ldr	r3, [r4, #24]
 800b1de:	b11b      	cbz	r3, 800b1e8 <__sinit+0x14>
 800b1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e4:	f7ff bff0 	b.w	800b1c8 <__sinit_lock_release>
 800b1e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1ec:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <__sinit+0x68>)
 800b1f0:	4a13      	ldr	r2, [pc, #76]	; (800b240 <__sinit+0x6c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	bf04      	itt	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	61a3      	streq	r3, [r4, #24]
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 f820 	bl	800b244 <__sfp>
 800b204:	6060      	str	r0, [r4, #4]
 800b206:	4620      	mov	r0, r4
 800b208:	f000 f81c 	bl	800b244 <__sfp>
 800b20c:	60a0      	str	r0, [r4, #8]
 800b20e:	4620      	mov	r0, r4
 800b210:	f000 f818 	bl	800b244 <__sfp>
 800b214:	2200      	movs	r2, #0
 800b216:	60e0      	str	r0, [r4, #12]
 800b218:	2104      	movs	r1, #4
 800b21a:	6860      	ldr	r0, [r4, #4]
 800b21c:	f7ff ff82 	bl	800b124 <std>
 800b220:	68a0      	ldr	r0, [r4, #8]
 800b222:	2201      	movs	r2, #1
 800b224:	2109      	movs	r1, #9
 800b226:	f7ff ff7d 	bl	800b124 <std>
 800b22a:	68e0      	ldr	r0, [r4, #12]
 800b22c:	2202      	movs	r2, #2
 800b22e:	2112      	movs	r1, #18
 800b230:	f7ff ff78 	bl	800b124 <std>
 800b234:	2301      	movs	r3, #1
 800b236:	61a3      	str	r3, [r4, #24]
 800b238:	e7d2      	b.n	800b1e0 <__sinit+0xc>
 800b23a:	bf00      	nop
 800b23c:	080118b0 	.word	0x080118b0
 800b240:	0800b16d 	.word	0x0800b16d

0800b244 <__sfp>:
 800b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b246:	4607      	mov	r7, r0
 800b248:	f7ff ffac 	bl	800b1a4 <__sfp_lock_acquire>
 800b24c:	4b1e      	ldr	r3, [pc, #120]	; (800b2c8 <__sfp+0x84>)
 800b24e:	681e      	ldr	r6, [r3, #0]
 800b250:	69b3      	ldr	r3, [r6, #24]
 800b252:	b913      	cbnz	r3, 800b25a <__sfp+0x16>
 800b254:	4630      	mov	r0, r6
 800b256:	f7ff ffbd 	bl	800b1d4 <__sinit>
 800b25a:	3648      	adds	r6, #72	; 0x48
 800b25c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b260:	3b01      	subs	r3, #1
 800b262:	d503      	bpl.n	800b26c <__sfp+0x28>
 800b264:	6833      	ldr	r3, [r6, #0]
 800b266:	b30b      	cbz	r3, 800b2ac <__sfp+0x68>
 800b268:	6836      	ldr	r6, [r6, #0]
 800b26a:	e7f7      	b.n	800b25c <__sfp+0x18>
 800b26c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b270:	b9d5      	cbnz	r5, 800b2a8 <__sfp+0x64>
 800b272:	4b16      	ldr	r3, [pc, #88]	; (800b2cc <__sfp+0x88>)
 800b274:	60e3      	str	r3, [r4, #12]
 800b276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b27a:	6665      	str	r5, [r4, #100]	; 0x64
 800b27c:	f000 f87e 	bl	800b37c <__retarget_lock_init_recursive>
 800b280:	f7ff ff96 	bl	800b1b0 <__sfp_lock_release>
 800b284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b28c:	6025      	str	r5, [r4, #0]
 800b28e:	61a5      	str	r5, [r4, #24]
 800b290:	2208      	movs	r2, #8
 800b292:	4629      	mov	r1, r5
 800b294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b298:	f000 f881 	bl	800b39e <memset>
 800b29c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a8:	3468      	adds	r4, #104	; 0x68
 800b2aa:	e7d9      	b.n	800b260 <__sfp+0x1c>
 800b2ac:	2104      	movs	r1, #4
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7ff ff62 	bl	800b178 <__sfmoreglue>
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	6030      	str	r0, [r6, #0]
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d1d5      	bne.n	800b268 <__sfp+0x24>
 800b2bc:	f7ff ff78 	bl	800b1b0 <__sfp_lock_release>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	e7ee      	b.n	800b2a4 <__sfp+0x60>
 800b2c6:	bf00      	nop
 800b2c8:	080118b0 	.word	0x080118b0
 800b2cc:	ffff0001 	.word	0xffff0001

0800b2d0 <fiprintf>:
 800b2d0:	b40e      	push	{r1, r2, r3}
 800b2d2:	b503      	push	{r0, r1, lr}
 800b2d4:	4601      	mov	r1, r0
 800b2d6:	ab03      	add	r3, sp, #12
 800b2d8:	4805      	ldr	r0, [pc, #20]	; (800b2f0 <fiprintf+0x20>)
 800b2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2de:	6800      	ldr	r0, [r0, #0]
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	f000 f923 	bl	800b52c <_vfiprintf_r>
 800b2e6:	b002      	add	sp, #8
 800b2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2ec:	b003      	add	sp, #12
 800b2ee:	4770      	bx	lr
 800b2f0:	20000214 	.word	0x20000214

0800b2f4 <_fwalk_reent>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	4688      	mov	r8, r1
 800b2fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b300:	2700      	movs	r7, #0
 800b302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b306:	f1b9 0901 	subs.w	r9, r9, #1
 800b30a:	d505      	bpl.n	800b318 <_fwalk_reent+0x24>
 800b30c:	6824      	ldr	r4, [r4, #0]
 800b30e:	2c00      	cmp	r4, #0
 800b310:	d1f7      	bne.n	800b302 <_fwalk_reent+0xe>
 800b312:	4638      	mov	r0, r7
 800b314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b318:	89ab      	ldrh	r3, [r5, #12]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d907      	bls.n	800b32e <_fwalk_reent+0x3a>
 800b31e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b322:	3301      	adds	r3, #1
 800b324:	d003      	beq.n	800b32e <_fwalk_reent+0x3a>
 800b326:	4629      	mov	r1, r5
 800b328:	4630      	mov	r0, r6
 800b32a:	47c0      	blx	r8
 800b32c:	4307      	orrs	r7, r0
 800b32e:	3568      	adds	r5, #104	; 0x68
 800b330:	e7e9      	b.n	800b306 <_fwalk_reent+0x12>
	...

0800b334 <__libc_init_array>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	4d0d      	ldr	r5, [pc, #52]	; (800b36c <__libc_init_array+0x38>)
 800b338:	4c0d      	ldr	r4, [pc, #52]	; (800b370 <__libc_init_array+0x3c>)
 800b33a:	1b64      	subs	r4, r4, r5
 800b33c:	10a4      	asrs	r4, r4, #2
 800b33e:	2600      	movs	r6, #0
 800b340:	42a6      	cmp	r6, r4
 800b342:	d109      	bne.n	800b358 <__libc_init_array+0x24>
 800b344:	4d0b      	ldr	r5, [pc, #44]	; (800b374 <__libc_init_array+0x40>)
 800b346:	4c0c      	ldr	r4, [pc, #48]	; (800b378 <__libc_init_array+0x44>)
 800b348:	f006 f86c 	bl	8011424 <_init>
 800b34c:	1b64      	subs	r4, r4, r5
 800b34e:	10a4      	asrs	r4, r4, #2
 800b350:	2600      	movs	r6, #0
 800b352:	42a6      	cmp	r6, r4
 800b354:	d105      	bne.n	800b362 <__libc_init_array+0x2e>
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35c:	4798      	blx	r3
 800b35e:	3601      	adds	r6, #1
 800b360:	e7ee      	b.n	800b340 <__libc_init_array+0xc>
 800b362:	f855 3b04 	ldr.w	r3, [r5], #4
 800b366:	4798      	blx	r3
 800b368:	3601      	adds	r6, #1
 800b36a:	e7f2      	b.n	800b352 <__libc_init_array+0x1e>
 800b36c:	08011db0 	.word	0x08011db0
 800b370:	08011db0 	.word	0x08011db0
 800b374:	08011db0 	.word	0x08011db0
 800b378:	08011db4 	.word	0x08011db4

0800b37c <__retarget_lock_init_recursive>:
 800b37c:	4770      	bx	lr

0800b37e <__retarget_lock_acquire_recursive>:
 800b37e:	4770      	bx	lr

0800b380 <__retarget_lock_release_recursive>:
 800b380:	4770      	bx	lr

0800b382 <memcpy>:
 800b382:	440a      	add	r2, r1
 800b384:	4291      	cmp	r1, r2
 800b386:	f100 33ff 	add.w	r3, r0, #4294967295
 800b38a:	d100      	bne.n	800b38e <memcpy+0xc>
 800b38c:	4770      	bx	lr
 800b38e:	b510      	push	{r4, lr}
 800b390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b398:	4291      	cmp	r1, r2
 800b39a:	d1f9      	bne.n	800b390 <memcpy+0xe>
 800b39c:	bd10      	pop	{r4, pc}

0800b39e <memset>:
 800b39e:	4402      	add	r2, r0
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d100      	bne.n	800b3a8 <memset+0xa>
 800b3a6:	4770      	bx	lr
 800b3a8:	f803 1b01 	strb.w	r1, [r3], #1
 800b3ac:	e7f9      	b.n	800b3a2 <memset+0x4>
	...

0800b3b0 <sbrk_aligned>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	4e0e      	ldr	r6, [pc, #56]	; (800b3ec <sbrk_aligned+0x3c>)
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	6831      	ldr	r1, [r6, #0]
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	b911      	cbnz	r1, 800b3c2 <sbrk_aligned+0x12>
 800b3bc:	f001 f8ca 	bl	800c554 <_sbrk_r>
 800b3c0:	6030      	str	r0, [r6, #0]
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f001 f8c5 	bl	800c554 <_sbrk_r>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	d00a      	beq.n	800b3e4 <sbrk_aligned+0x34>
 800b3ce:	1cc4      	adds	r4, r0, #3
 800b3d0:	f024 0403 	bic.w	r4, r4, #3
 800b3d4:	42a0      	cmp	r0, r4
 800b3d6:	d007      	beq.n	800b3e8 <sbrk_aligned+0x38>
 800b3d8:	1a21      	subs	r1, r4, r0
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f001 f8ba 	bl	800c554 <_sbrk_r>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d101      	bne.n	800b3e8 <sbrk_aligned+0x38>
 800b3e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	200130d4 	.word	0x200130d4

0800b3f0 <_malloc_r>:
 800b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f4:	1ccd      	adds	r5, r1, #3
 800b3f6:	f025 0503 	bic.w	r5, r5, #3
 800b3fa:	3508      	adds	r5, #8
 800b3fc:	2d0c      	cmp	r5, #12
 800b3fe:	bf38      	it	cc
 800b400:	250c      	movcc	r5, #12
 800b402:	2d00      	cmp	r5, #0
 800b404:	4607      	mov	r7, r0
 800b406:	db01      	blt.n	800b40c <_malloc_r+0x1c>
 800b408:	42a9      	cmp	r1, r5
 800b40a:	d905      	bls.n	800b418 <_malloc_r+0x28>
 800b40c:	230c      	movs	r3, #12
 800b40e:	603b      	str	r3, [r7, #0]
 800b410:	2600      	movs	r6, #0
 800b412:	4630      	mov	r0, r6
 800b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b418:	4e2e      	ldr	r6, [pc, #184]	; (800b4d4 <_malloc_r+0xe4>)
 800b41a:	f003 fc49 	bl	800ecb0 <__malloc_lock>
 800b41e:	6833      	ldr	r3, [r6, #0]
 800b420:	461c      	mov	r4, r3
 800b422:	bb34      	cbnz	r4, 800b472 <_malloc_r+0x82>
 800b424:	4629      	mov	r1, r5
 800b426:	4638      	mov	r0, r7
 800b428:	f7ff ffc2 	bl	800b3b0 <sbrk_aligned>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	4604      	mov	r4, r0
 800b430:	d14d      	bne.n	800b4ce <_malloc_r+0xde>
 800b432:	6834      	ldr	r4, [r6, #0]
 800b434:	4626      	mov	r6, r4
 800b436:	2e00      	cmp	r6, #0
 800b438:	d140      	bne.n	800b4bc <_malloc_r+0xcc>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	4631      	mov	r1, r6
 800b43e:	4638      	mov	r0, r7
 800b440:	eb04 0803 	add.w	r8, r4, r3
 800b444:	f001 f886 	bl	800c554 <_sbrk_r>
 800b448:	4580      	cmp	r8, r0
 800b44a:	d13a      	bne.n	800b4c2 <_malloc_r+0xd2>
 800b44c:	6821      	ldr	r1, [r4, #0]
 800b44e:	3503      	adds	r5, #3
 800b450:	1a6d      	subs	r5, r5, r1
 800b452:	f025 0503 	bic.w	r5, r5, #3
 800b456:	3508      	adds	r5, #8
 800b458:	2d0c      	cmp	r5, #12
 800b45a:	bf38      	it	cc
 800b45c:	250c      	movcc	r5, #12
 800b45e:	4629      	mov	r1, r5
 800b460:	4638      	mov	r0, r7
 800b462:	f7ff ffa5 	bl	800b3b0 <sbrk_aligned>
 800b466:	3001      	adds	r0, #1
 800b468:	d02b      	beq.n	800b4c2 <_malloc_r+0xd2>
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	442b      	add	r3, r5
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	e00e      	b.n	800b490 <_malloc_r+0xa0>
 800b472:	6822      	ldr	r2, [r4, #0]
 800b474:	1b52      	subs	r2, r2, r5
 800b476:	d41e      	bmi.n	800b4b6 <_malloc_r+0xc6>
 800b478:	2a0b      	cmp	r2, #11
 800b47a:	d916      	bls.n	800b4aa <_malloc_r+0xba>
 800b47c:	1961      	adds	r1, r4, r5
 800b47e:	42a3      	cmp	r3, r4
 800b480:	6025      	str	r5, [r4, #0]
 800b482:	bf18      	it	ne
 800b484:	6059      	strne	r1, [r3, #4]
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	bf08      	it	eq
 800b48a:	6031      	streq	r1, [r6, #0]
 800b48c:	5162      	str	r2, [r4, r5]
 800b48e:	604b      	str	r3, [r1, #4]
 800b490:	4638      	mov	r0, r7
 800b492:	f104 060b 	add.w	r6, r4, #11
 800b496:	f003 fc11 	bl	800ecbc <__malloc_unlock>
 800b49a:	f026 0607 	bic.w	r6, r6, #7
 800b49e:	1d23      	adds	r3, r4, #4
 800b4a0:	1af2      	subs	r2, r6, r3
 800b4a2:	d0b6      	beq.n	800b412 <_malloc_r+0x22>
 800b4a4:	1b9b      	subs	r3, r3, r6
 800b4a6:	50a3      	str	r3, [r4, r2]
 800b4a8:	e7b3      	b.n	800b412 <_malloc_r+0x22>
 800b4aa:	6862      	ldr	r2, [r4, #4]
 800b4ac:	42a3      	cmp	r3, r4
 800b4ae:	bf0c      	ite	eq
 800b4b0:	6032      	streq	r2, [r6, #0]
 800b4b2:	605a      	strne	r2, [r3, #4]
 800b4b4:	e7ec      	b.n	800b490 <_malloc_r+0xa0>
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	6864      	ldr	r4, [r4, #4]
 800b4ba:	e7b2      	b.n	800b422 <_malloc_r+0x32>
 800b4bc:	4634      	mov	r4, r6
 800b4be:	6876      	ldr	r6, [r6, #4]
 800b4c0:	e7b9      	b.n	800b436 <_malloc_r+0x46>
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	603b      	str	r3, [r7, #0]
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	f003 fbf8 	bl	800ecbc <__malloc_unlock>
 800b4cc:	e7a1      	b.n	800b412 <_malloc_r+0x22>
 800b4ce:	6025      	str	r5, [r4, #0]
 800b4d0:	e7de      	b.n	800b490 <_malloc_r+0xa0>
 800b4d2:	bf00      	nop
 800b4d4:	200130d0 	.word	0x200130d0

0800b4d8 <__sfputc_r>:
 800b4d8:	6893      	ldr	r3, [r2, #8]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	b410      	push	{r4}
 800b4e0:	6093      	str	r3, [r2, #8]
 800b4e2:	da08      	bge.n	800b4f6 <__sfputc_r+0x1e>
 800b4e4:	6994      	ldr	r4, [r2, #24]
 800b4e6:	42a3      	cmp	r3, r4
 800b4e8:	db01      	blt.n	800b4ee <__sfputc_r+0x16>
 800b4ea:	290a      	cmp	r1, #10
 800b4ec:	d103      	bne.n	800b4f6 <__sfputc_r+0x1e>
 800b4ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f2:	f001 bf95 	b.w	800d420 <__swbuf_r>
 800b4f6:	6813      	ldr	r3, [r2, #0]
 800b4f8:	1c58      	adds	r0, r3, #1
 800b4fa:	6010      	str	r0, [r2, #0]
 800b4fc:	7019      	strb	r1, [r3, #0]
 800b4fe:	4608      	mov	r0, r1
 800b500:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <__sfputs_r>:
 800b506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b508:	4606      	mov	r6, r0
 800b50a:	460f      	mov	r7, r1
 800b50c:	4614      	mov	r4, r2
 800b50e:	18d5      	adds	r5, r2, r3
 800b510:	42ac      	cmp	r4, r5
 800b512:	d101      	bne.n	800b518 <__sfputs_r+0x12>
 800b514:	2000      	movs	r0, #0
 800b516:	e007      	b.n	800b528 <__sfputs_r+0x22>
 800b518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51c:	463a      	mov	r2, r7
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ffda 	bl	800b4d8 <__sfputc_r>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d1f3      	bne.n	800b510 <__sfputs_r+0xa>
 800b528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b52c <_vfiprintf_r>:
 800b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	460d      	mov	r5, r1
 800b532:	b09d      	sub	sp, #116	; 0x74
 800b534:	4614      	mov	r4, r2
 800b536:	4698      	mov	r8, r3
 800b538:	4606      	mov	r6, r0
 800b53a:	b118      	cbz	r0, 800b544 <_vfiprintf_r+0x18>
 800b53c:	6983      	ldr	r3, [r0, #24]
 800b53e:	b90b      	cbnz	r3, 800b544 <_vfiprintf_r+0x18>
 800b540:	f7ff fe48 	bl	800b1d4 <__sinit>
 800b544:	4b89      	ldr	r3, [pc, #548]	; (800b76c <_vfiprintf_r+0x240>)
 800b546:	429d      	cmp	r5, r3
 800b548:	d11b      	bne.n	800b582 <_vfiprintf_r+0x56>
 800b54a:	6875      	ldr	r5, [r6, #4]
 800b54c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d405      	bmi.n	800b55e <_vfiprintf_r+0x32>
 800b552:	89ab      	ldrh	r3, [r5, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d402      	bmi.n	800b55e <_vfiprintf_r+0x32>
 800b558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b55a:	f7ff ff10 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	071b      	lsls	r3, r3, #28
 800b562:	d501      	bpl.n	800b568 <_vfiprintf_r+0x3c>
 800b564:	692b      	ldr	r3, [r5, #16]
 800b566:	b9eb      	cbnz	r3, 800b5a4 <_vfiprintf_r+0x78>
 800b568:	4629      	mov	r1, r5
 800b56a:	4630      	mov	r0, r6
 800b56c:	f001 ffbc 	bl	800d4e8 <__swsetup_r>
 800b570:	b1c0      	cbz	r0, 800b5a4 <_vfiprintf_r+0x78>
 800b572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b574:	07dc      	lsls	r4, r3, #31
 800b576:	d50e      	bpl.n	800b596 <_vfiprintf_r+0x6a>
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	b01d      	add	sp, #116	; 0x74
 800b57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b582:	4b7b      	ldr	r3, [pc, #492]	; (800b770 <_vfiprintf_r+0x244>)
 800b584:	429d      	cmp	r5, r3
 800b586:	d101      	bne.n	800b58c <_vfiprintf_r+0x60>
 800b588:	68b5      	ldr	r5, [r6, #8]
 800b58a:	e7df      	b.n	800b54c <_vfiprintf_r+0x20>
 800b58c:	4b79      	ldr	r3, [pc, #484]	; (800b774 <_vfiprintf_r+0x248>)
 800b58e:	429d      	cmp	r5, r3
 800b590:	bf08      	it	eq
 800b592:	68f5      	ldreq	r5, [r6, #12]
 800b594:	e7da      	b.n	800b54c <_vfiprintf_r+0x20>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	0598      	lsls	r0, r3, #22
 800b59a:	d4ed      	bmi.n	800b578 <_vfiprintf_r+0x4c>
 800b59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b59e:	f7ff feef 	bl	800b380 <__retarget_lock_release_recursive>
 800b5a2:	e7e9      	b.n	800b578 <_vfiprintf_r+0x4c>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b2:	2330      	movs	r3, #48	; 0x30
 800b5b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b778 <_vfiprintf_r+0x24c>
 800b5b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5bc:	f04f 0901 	mov.w	r9, #1
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	469a      	mov	sl, r3
 800b5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5c8:	b10a      	cbz	r2, 800b5ce <_vfiprintf_r+0xa2>
 800b5ca:	2a25      	cmp	r2, #37	; 0x25
 800b5cc:	d1f9      	bne.n	800b5c2 <_vfiprintf_r+0x96>
 800b5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d2:	d00b      	beq.n	800b5ec <_vfiprintf_r+0xc0>
 800b5d4:	465b      	mov	r3, fp
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7ff ff93 	bl	800b506 <__sfputs_r>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f000 80aa 	beq.w	800b73a <_vfiprintf_r+0x20e>
 800b5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5e8:	445a      	add	r2, fp
 800b5ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 80a2 	beq.w	800b73a <_vfiprintf_r+0x20e>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b600:	f10a 0a01 	add.w	sl, sl, #1
 800b604:	9304      	str	r3, [sp, #16]
 800b606:	9307      	str	r3, [sp, #28]
 800b608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b60c:	931a      	str	r3, [sp, #104]	; 0x68
 800b60e:	4654      	mov	r4, sl
 800b610:	2205      	movs	r2, #5
 800b612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b616:	4858      	ldr	r0, [pc, #352]	; (800b778 <_vfiprintf_r+0x24c>)
 800b618:	f7f4 fdf2 	bl	8000200 <memchr>
 800b61c:	9a04      	ldr	r2, [sp, #16]
 800b61e:	b9d8      	cbnz	r0, 800b658 <_vfiprintf_r+0x12c>
 800b620:	06d1      	lsls	r1, r2, #27
 800b622:	bf44      	itt	mi
 800b624:	2320      	movmi	r3, #32
 800b626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b62a:	0713      	lsls	r3, r2, #28
 800b62c:	bf44      	itt	mi
 800b62e:	232b      	movmi	r3, #43	; 0x2b
 800b630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b634:	f89a 3000 	ldrb.w	r3, [sl]
 800b638:	2b2a      	cmp	r3, #42	; 0x2a
 800b63a:	d015      	beq.n	800b668 <_vfiprintf_r+0x13c>
 800b63c:	9a07      	ldr	r2, [sp, #28]
 800b63e:	4654      	mov	r4, sl
 800b640:	2000      	movs	r0, #0
 800b642:	f04f 0c0a 	mov.w	ip, #10
 800b646:	4621      	mov	r1, r4
 800b648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b64c:	3b30      	subs	r3, #48	; 0x30
 800b64e:	2b09      	cmp	r3, #9
 800b650:	d94e      	bls.n	800b6f0 <_vfiprintf_r+0x1c4>
 800b652:	b1b0      	cbz	r0, 800b682 <_vfiprintf_r+0x156>
 800b654:	9207      	str	r2, [sp, #28]
 800b656:	e014      	b.n	800b682 <_vfiprintf_r+0x156>
 800b658:	eba0 0308 	sub.w	r3, r0, r8
 800b65c:	fa09 f303 	lsl.w	r3, r9, r3
 800b660:	4313      	orrs	r3, r2
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	46a2      	mov	sl, r4
 800b666:	e7d2      	b.n	800b60e <_vfiprintf_r+0xe2>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	1d19      	adds	r1, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	9103      	str	r1, [sp, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfbb      	ittet	lt
 800b674:	425b      	neglt	r3, r3
 800b676:	f042 0202 	orrlt.w	r2, r2, #2
 800b67a:	9307      	strge	r3, [sp, #28]
 800b67c:	9307      	strlt	r3, [sp, #28]
 800b67e:	bfb8      	it	lt
 800b680:	9204      	strlt	r2, [sp, #16]
 800b682:	7823      	ldrb	r3, [r4, #0]
 800b684:	2b2e      	cmp	r3, #46	; 0x2e
 800b686:	d10c      	bne.n	800b6a2 <_vfiprintf_r+0x176>
 800b688:	7863      	ldrb	r3, [r4, #1]
 800b68a:	2b2a      	cmp	r3, #42	; 0x2a
 800b68c:	d135      	bne.n	800b6fa <_vfiprintf_r+0x1ce>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	1d1a      	adds	r2, r3, #4
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	9203      	str	r2, [sp, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfb8      	it	lt
 800b69a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b69e:	3402      	adds	r4, #2
 800b6a0:	9305      	str	r3, [sp, #20]
 800b6a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b788 <_vfiprintf_r+0x25c>
 800b6a6:	7821      	ldrb	r1, [r4, #0]
 800b6a8:	2203      	movs	r2, #3
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	f7f4 fda8 	bl	8000200 <memchr>
 800b6b0:	b140      	cbz	r0, 800b6c4 <_vfiprintf_r+0x198>
 800b6b2:	2340      	movs	r3, #64	; 0x40
 800b6b4:	eba0 000a 	sub.w	r0, r0, sl
 800b6b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b6bc:	9b04      	ldr	r3, [sp, #16]
 800b6be:	4303      	orrs	r3, r0
 800b6c0:	3401      	adds	r4, #1
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c8:	482c      	ldr	r0, [pc, #176]	; (800b77c <_vfiprintf_r+0x250>)
 800b6ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ce:	2206      	movs	r2, #6
 800b6d0:	f7f4 fd96 	bl	8000200 <memchr>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d03f      	beq.n	800b758 <_vfiprintf_r+0x22c>
 800b6d8:	4b29      	ldr	r3, [pc, #164]	; (800b780 <_vfiprintf_r+0x254>)
 800b6da:	bb1b      	cbnz	r3, 800b724 <_vfiprintf_r+0x1f8>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	3307      	adds	r3, #7
 800b6e0:	f023 0307 	bic.w	r3, r3, #7
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	9303      	str	r3, [sp, #12]
 800b6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ea:	443b      	add	r3, r7
 800b6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ee:	e767      	b.n	800b5c0 <_vfiprintf_r+0x94>
 800b6f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	e7a5      	b.n	800b646 <_vfiprintf_r+0x11a>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	4619      	mov	r1, r3
 800b702:	f04f 0c0a 	mov.w	ip, #10
 800b706:	4620      	mov	r0, r4
 800b708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b70c:	3a30      	subs	r2, #48	; 0x30
 800b70e:	2a09      	cmp	r2, #9
 800b710:	d903      	bls.n	800b71a <_vfiprintf_r+0x1ee>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0c5      	beq.n	800b6a2 <_vfiprintf_r+0x176>
 800b716:	9105      	str	r1, [sp, #20]
 800b718:	e7c3      	b.n	800b6a2 <_vfiprintf_r+0x176>
 800b71a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b71e:	4604      	mov	r4, r0
 800b720:	2301      	movs	r3, #1
 800b722:	e7f0      	b.n	800b706 <_vfiprintf_r+0x1da>
 800b724:	ab03      	add	r3, sp, #12
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	462a      	mov	r2, r5
 800b72a:	4b16      	ldr	r3, [pc, #88]	; (800b784 <_vfiprintf_r+0x258>)
 800b72c:	a904      	add	r1, sp, #16
 800b72e:	4630      	mov	r0, r6
 800b730:	f000 f8cc 	bl	800b8cc <_printf_float>
 800b734:	4607      	mov	r7, r0
 800b736:	1c78      	adds	r0, r7, #1
 800b738:	d1d6      	bne.n	800b6e8 <_vfiprintf_r+0x1bc>
 800b73a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b73c:	07d9      	lsls	r1, r3, #31
 800b73e:	d405      	bmi.n	800b74c <_vfiprintf_r+0x220>
 800b740:	89ab      	ldrh	r3, [r5, #12]
 800b742:	059a      	lsls	r2, r3, #22
 800b744:	d402      	bmi.n	800b74c <_vfiprintf_r+0x220>
 800b746:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b748:	f7ff fe1a 	bl	800b380 <__retarget_lock_release_recursive>
 800b74c:	89ab      	ldrh	r3, [r5, #12]
 800b74e:	065b      	lsls	r3, r3, #25
 800b750:	f53f af12 	bmi.w	800b578 <_vfiprintf_r+0x4c>
 800b754:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b756:	e711      	b.n	800b57c <_vfiprintf_r+0x50>
 800b758:	ab03      	add	r3, sp, #12
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	462a      	mov	r2, r5
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <_vfiprintf_r+0x258>)
 800b760:	a904      	add	r1, sp, #16
 800b762:	4630      	mov	r0, r6
 800b764:	f000 fb56 	bl	800be14 <_printf_i>
 800b768:	e7e4      	b.n	800b734 <_vfiprintf_r+0x208>
 800b76a:	bf00      	nop
 800b76c:	08011870 	.word	0x08011870
 800b770:	08011890 	.word	0x08011890
 800b774:	08011850 	.word	0x08011850
 800b778:	080118b4 	.word	0x080118b4
 800b77c:	080118be 	.word	0x080118be
 800b780:	0800b8cd 	.word	0x0800b8cd
 800b784:	0800b507 	.word	0x0800b507
 800b788:	080118ba 	.word	0x080118ba

0800b78c <__cvt>:
 800b78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b790:	ec55 4b10 	vmov	r4, r5, d0
 800b794:	2d00      	cmp	r5, #0
 800b796:	460e      	mov	r6, r1
 800b798:	4619      	mov	r1, r3
 800b79a:	462b      	mov	r3, r5
 800b79c:	bfbb      	ittet	lt
 800b79e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7a2:	461d      	movlt	r5, r3
 800b7a4:	2300      	movge	r3, #0
 800b7a6:	232d      	movlt	r3, #45	; 0x2d
 800b7a8:	700b      	strb	r3, [r1, #0]
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7b0:	4691      	mov	r9, r2
 800b7b2:	f023 0820 	bic.w	r8, r3, #32
 800b7b6:	bfbc      	itt	lt
 800b7b8:	4622      	movlt	r2, r4
 800b7ba:	4614      	movlt	r4, r2
 800b7bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7c0:	d005      	beq.n	800b7ce <__cvt+0x42>
 800b7c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7c6:	d100      	bne.n	800b7ca <__cvt+0x3e>
 800b7c8:	3601      	adds	r6, #1
 800b7ca:	2102      	movs	r1, #2
 800b7cc:	e000      	b.n	800b7d0 <__cvt+0x44>
 800b7ce:	2103      	movs	r1, #3
 800b7d0:	ab03      	add	r3, sp, #12
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	ab02      	add	r3, sp, #8
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	ec45 4b10 	vmov	d0, r4, r5
 800b7dc:	4653      	mov	r3, sl
 800b7de:	4632      	mov	r2, r6
 800b7e0:	f001 ff96 	bl	800d710 <_dtoa_r>
 800b7e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	d102      	bne.n	800b7f2 <__cvt+0x66>
 800b7ec:	f019 0f01 	tst.w	r9, #1
 800b7f0:	d022      	beq.n	800b838 <__cvt+0xac>
 800b7f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7f6:	eb07 0906 	add.w	r9, r7, r6
 800b7fa:	d110      	bne.n	800b81e <__cvt+0x92>
 800b7fc:	783b      	ldrb	r3, [r7, #0]
 800b7fe:	2b30      	cmp	r3, #48	; 0x30
 800b800:	d10a      	bne.n	800b818 <__cvt+0x8c>
 800b802:	2200      	movs	r2, #0
 800b804:	2300      	movs	r3, #0
 800b806:	4620      	mov	r0, r4
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f5 f96d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b80e:	b918      	cbnz	r0, 800b818 <__cvt+0x8c>
 800b810:	f1c6 0601 	rsb	r6, r6, #1
 800b814:	f8ca 6000 	str.w	r6, [sl]
 800b818:	f8da 3000 	ldr.w	r3, [sl]
 800b81c:	4499      	add	r9, r3
 800b81e:	2200      	movs	r2, #0
 800b820:	2300      	movs	r3, #0
 800b822:	4620      	mov	r0, r4
 800b824:	4629      	mov	r1, r5
 800b826:	f7f5 f95f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b82a:	b108      	cbz	r0, 800b830 <__cvt+0xa4>
 800b82c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b830:	2230      	movs	r2, #48	; 0x30
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	454b      	cmp	r3, r9
 800b836:	d307      	bcc.n	800b848 <__cvt+0xbc>
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b83c:	1bdb      	subs	r3, r3, r7
 800b83e:	4638      	mov	r0, r7
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	b004      	add	sp, #16
 800b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b848:	1c59      	adds	r1, r3, #1
 800b84a:	9103      	str	r1, [sp, #12]
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	e7f0      	b.n	800b832 <__cvt+0xa6>

0800b850 <__exponent>:
 800b850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b852:	4603      	mov	r3, r0
 800b854:	2900      	cmp	r1, #0
 800b856:	bfb8      	it	lt
 800b858:	4249      	neglt	r1, r1
 800b85a:	f803 2b02 	strb.w	r2, [r3], #2
 800b85e:	bfb4      	ite	lt
 800b860:	222d      	movlt	r2, #45	; 0x2d
 800b862:	222b      	movge	r2, #43	; 0x2b
 800b864:	2909      	cmp	r1, #9
 800b866:	7042      	strb	r2, [r0, #1]
 800b868:	dd2a      	ble.n	800b8c0 <__exponent+0x70>
 800b86a:	f10d 0407 	add.w	r4, sp, #7
 800b86e:	46a4      	mov	ip, r4
 800b870:	270a      	movs	r7, #10
 800b872:	46a6      	mov	lr, r4
 800b874:	460a      	mov	r2, r1
 800b876:	fb91 f6f7 	sdiv	r6, r1, r7
 800b87a:	fb07 1516 	mls	r5, r7, r6, r1
 800b87e:	3530      	adds	r5, #48	; 0x30
 800b880:	2a63      	cmp	r2, #99	; 0x63
 800b882:	f104 34ff 	add.w	r4, r4, #4294967295
 800b886:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b88a:	4631      	mov	r1, r6
 800b88c:	dcf1      	bgt.n	800b872 <__exponent+0x22>
 800b88e:	3130      	adds	r1, #48	; 0x30
 800b890:	f1ae 0502 	sub.w	r5, lr, #2
 800b894:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b898:	1c44      	adds	r4, r0, #1
 800b89a:	4629      	mov	r1, r5
 800b89c:	4561      	cmp	r1, ip
 800b89e:	d30a      	bcc.n	800b8b6 <__exponent+0x66>
 800b8a0:	f10d 0209 	add.w	r2, sp, #9
 800b8a4:	eba2 020e 	sub.w	r2, r2, lr
 800b8a8:	4565      	cmp	r5, ip
 800b8aa:	bf88      	it	hi
 800b8ac:	2200      	movhi	r2, #0
 800b8ae:	4413      	add	r3, r2
 800b8b0:	1a18      	subs	r0, r3, r0
 800b8b2:	b003      	add	sp, #12
 800b8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8be:	e7ed      	b.n	800b89c <__exponent+0x4c>
 800b8c0:	2330      	movs	r3, #48	; 0x30
 800b8c2:	3130      	adds	r1, #48	; 0x30
 800b8c4:	7083      	strb	r3, [r0, #2]
 800b8c6:	70c1      	strb	r1, [r0, #3]
 800b8c8:	1d03      	adds	r3, r0, #4
 800b8ca:	e7f1      	b.n	800b8b0 <__exponent+0x60>

0800b8cc <_printf_float>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	ed2d 8b02 	vpush	{d8}
 800b8d4:	b08d      	sub	sp, #52	; 0x34
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8dc:	4616      	mov	r6, r2
 800b8de:	461f      	mov	r7, r3
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	f003 f935 	bl	800eb50 <_localeconv_r>
 800b8e6:	f8d0 a000 	ldr.w	sl, [r0]
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	f7f4 fc7a 	bl	80001e4 <strlen>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8f4:	6823      	ldr	r3, [r4, #0]
 800b8f6:	9305      	str	r3, [sp, #20]
 800b8f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b900:	3307      	adds	r3, #7
 800b902:	f023 0307 	bic.w	r3, r3, #7
 800b906:	f103 0208 	add.w	r2, r3, #8
 800b90a:	f8c8 2000 	str.w	r2, [r8]
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b916:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b91a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b91e:	9307      	str	r3, [sp, #28]
 800b920:	f8cd 8018 	str.w	r8, [sp, #24]
 800b924:	ee08 0a10 	vmov	s16, r0
 800b928:	4b9f      	ldr	r3, [pc, #636]	; (800bba8 <_printf_float+0x2dc>)
 800b92a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b92e:	f04f 32ff 	mov.w	r2, #4294967295
 800b932:	f7f5 f90b 	bl	8000b4c <__aeabi_dcmpun>
 800b936:	bb88      	cbnz	r0, 800b99c <_printf_float+0xd0>
 800b938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b93c:	4b9a      	ldr	r3, [pc, #616]	; (800bba8 <_printf_float+0x2dc>)
 800b93e:	f04f 32ff 	mov.w	r2, #4294967295
 800b942:	f7f5 f8e5 	bl	8000b10 <__aeabi_dcmple>
 800b946:	bb48      	cbnz	r0, 800b99c <_printf_float+0xd0>
 800b948:	2200      	movs	r2, #0
 800b94a:	2300      	movs	r3, #0
 800b94c:	4640      	mov	r0, r8
 800b94e:	4649      	mov	r1, r9
 800b950:	f7f5 f8d4 	bl	8000afc <__aeabi_dcmplt>
 800b954:	b110      	cbz	r0, 800b95c <_printf_float+0x90>
 800b956:	232d      	movs	r3, #45	; 0x2d
 800b958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b95c:	4b93      	ldr	r3, [pc, #588]	; (800bbac <_printf_float+0x2e0>)
 800b95e:	4894      	ldr	r0, [pc, #592]	; (800bbb0 <_printf_float+0x2e4>)
 800b960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b964:	bf94      	ite	ls
 800b966:	4698      	movls	r8, r3
 800b968:	4680      	movhi	r8, r0
 800b96a:	2303      	movs	r3, #3
 800b96c:	6123      	str	r3, [r4, #16]
 800b96e:	9b05      	ldr	r3, [sp, #20]
 800b970:	f023 0204 	bic.w	r2, r3, #4
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	f04f 0900 	mov.w	r9, #0
 800b97a:	9700      	str	r7, [sp, #0]
 800b97c:	4633      	mov	r3, r6
 800b97e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b980:	4621      	mov	r1, r4
 800b982:	4628      	mov	r0, r5
 800b984:	f000 f9d8 	bl	800bd38 <_printf_common>
 800b988:	3001      	adds	r0, #1
 800b98a:	f040 8090 	bne.w	800baae <_printf_float+0x1e2>
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295
 800b992:	b00d      	add	sp, #52	; 0x34
 800b994:	ecbd 8b02 	vpop	{d8}
 800b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99c:	4642      	mov	r2, r8
 800b99e:	464b      	mov	r3, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f5 f8d2 	bl	8000b4c <__aeabi_dcmpun>
 800b9a8:	b140      	cbz	r0, 800b9bc <_printf_float+0xf0>
 800b9aa:	464b      	mov	r3, r9
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	bfbc      	itt	lt
 800b9b0:	232d      	movlt	r3, #45	; 0x2d
 800b9b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9b6:	487f      	ldr	r0, [pc, #508]	; (800bbb4 <_printf_float+0x2e8>)
 800b9b8:	4b7f      	ldr	r3, [pc, #508]	; (800bbb8 <_printf_float+0x2ec>)
 800b9ba:	e7d1      	b.n	800b960 <_printf_float+0x94>
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9c2:	9206      	str	r2, [sp, #24]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	d13f      	bne.n	800ba48 <_printf_float+0x17c>
 800b9c8:	2306      	movs	r3, #6
 800b9ca:	6063      	str	r3, [r4, #4]
 800b9cc:	9b05      	ldr	r3, [sp, #20]
 800b9ce:	6861      	ldr	r1, [r4, #4]
 800b9d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9303      	str	r3, [sp, #12]
 800b9d8:	ab0a      	add	r3, sp, #40	; 0x28
 800b9da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9de:	ab09      	add	r3, sp, #36	; 0x24
 800b9e0:	ec49 8b10 	vmov	d0, r8, r9
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f7ff fecd 	bl	800b78c <__cvt>
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9f6:	2b47      	cmp	r3, #71	; 0x47
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	d108      	bne.n	800ba0e <_printf_float+0x142>
 800b9fc:	1cc8      	adds	r0, r1, #3
 800b9fe:	db02      	blt.n	800ba06 <_printf_float+0x13a>
 800ba00:	6863      	ldr	r3, [r4, #4]
 800ba02:	4299      	cmp	r1, r3
 800ba04:	dd41      	ble.n	800ba8a <_printf_float+0x1be>
 800ba06:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba0a:	fa5f fb8b 	uxtb.w	fp, fp
 800ba0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba12:	d820      	bhi.n	800ba56 <_printf_float+0x18a>
 800ba14:	3901      	subs	r1, #1
 800ba16:	465a      	mov	r2, fp
 800ba18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba1c:	9109      	str	r1, [sp, #36]	; 0x24
 800ba1e:	f7ff ff17 	bl	800b850 <__exponent>
 800ba22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba24:	1813      	adds	r3, r2, r0
 800ba26:	2a01      	cmp	r2, #1
 800ba28:	4681      	mov	r9, r0
 800ba2a:	6123      	str	r3, [r4, #16]
 800ba2c:	dc02      	bgt.n	800ba34 <_printf_float+0x168>
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	07d2      	lsls	r2, r2, #31
 800ba32:	d501      	bpl.n	800ba38 <_printf_float+0x16c>
 800ba34:	3301      	adds	r3, #1
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d09c      	beq.n	800b97a <_printf_float+0xae>
 800ba40:	232d      	movs	r3, #45	; 0x2d
 800ba42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba46:	e798      	b.n	800b97a <_printf_float+0xae>
 800ba48:	9a06      	ldr	r2, [sp, #24]
 800ba4a:	2a47      	cmp	r2, #71	; 0x47
 800ba4c:	d1be      	bne.n	800b9cc <_printf_float+0x100>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1bc      	bne.n	800b9cc <_printf_float+0x100>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e7b9      	b.n	800b9ca <_printf_float+0xfe>
 800ba56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba5a:	d118      	bne.n	800ba8e <_printf_float+0x1c2>
 800ba5c:	2900      	cmp	r1, #0
 800ba5e:	6863      	ldr	r3, [r4, #4]
 800ba60:	dd0b      	ble.n	800ba7a <_printf_float+0x1ae>
 800ba62:	6121      	str	r1, [r4, #16]
 800ba64:	b913      	cbnz	r3, 800ba6c <_printf_float+0x1a0>
 800ba66:	6822      	ldr	r2, [r4, #0]
 800ba68:	07d0      	lsls	r0, r2, #31
 800ba6a:	d502      	bpl.n	800ba72 <_printf_float+0x1a6>
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	440b      	add	r3, r1
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba74:	f04f 0900 	mov.w	r9, #0
 800ba78:	e7de      	b.n	800ba38 <_printf_float+0x16c>
 800ba7a:	b913      	cbnz	r3, 800ba82 <_printf_float+0x1b6>
 800ba7c:	6822      	ldr	r2, [r4, #0]
 800ba7e:	07d2      	lsls	r2, r2, #31
 800ba80:	d501      	bpl.n	800ba86 <_printf_float+0x1ba>
 800ba82:	3302      	adds	r3, #2
 800ba84:	e7f4      	b.n	800ba70 <_printf_float+0x1a4>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e7f2      	b.n	800ba70 <_printf_float+0x1a4>
 800ba8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba90:	4299      	cmp	r1, r3
 800ba92:	db05      	blt.n	800baa0 <_printf_float+0x1d4>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	6121      	str	r1, [r4, #16]
 800ba98:	07d8      	lsls	r0, r3, #31
 800ba9a:	d5ea      	bpl.n	800ba72 <_printf_float+0x1a6>
 800ba9c:	1c4b      	adds	r3, r1, #1
 800ba9e:	e7e7      	b.n	800ba70 <_printf_float+0x1a4>
 800baa0:	2900      	cmp	r1, #0
 800baa2:	bfd4      	ite	le
 800baa4:	f1c1 0202 	rsble	r2, r1, #2
 800baa8:	2201      	movgt	r2, #1
 800baaa:	4413      	add	r3, r2
 800baac:	e7e0      	b.n	800ba70 <_printf_float+0x1a4>
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	055a      	lsls	r2, r3, #21
 800bab2:	d407      	bmi.n	800bac4 <_printf_float+0x1f8>
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	4642      	mov	r2, r8
 800bab8:	4631      	mov	r1, r6
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	d12c      	bne.n	800bb1c <_printf_float+0x250>
 800bac2:	e764      	b.n	800b98e <_printf_float+0xc2>
 800bac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bac8:	f240 80e0 	bls.w	800bc8c <_printf_float+0x3c0>
 800bacc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bad0:	2200      	movs	r2, #0
 800bad2:	2300      	movs	r3, #0
 800bad4:	f7f5 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d034      	beq.n	800bb46 <_printf_float+0x27a>
 800badc:	4a37      	ldr	r2, [pc, #220]	; (800bbbc <_printf_float+0x2f0>)
 800bade:	2301      	movs	r3, #1
 800bae0:	4631      	mov	r1, r6
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	f43f af51 	beq.w	800b98e <_printf_float+0xc2>
 800baec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baf0:	429a      	cmp	r2, r3
 800baf2:	db02      	blt.n	800bafa <_printf_float+0x22e>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	07d8      	lsls	r0, r3, #31
 800baf8:	d510      	bpl.n	800bb1c <_printf_float+0x250>
 800bafa:	ee18 3a10 	vmov	r3, s16
 800bafe:	4652      	mov	r2, sl
 800bb00:	4631      	mov	r1, r6
 800bb02:	4628      	mov	r0, r5
 800bb04:	47b8      	blx	r7
 800bb06:	3001      	adds	r0, #1
 800bb08:	f43f af41 	beq.w	800b98e <_printf_float+0xc2>
 800bb0c:	f04f 0800 	mov.w	r8, #0
 800bb10:	f104 091a 	add.w	r9, r4, #26
 800bb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb16:	3b01      	subs	r3, #1
 800bb18:	4543      	cmp	r3, r8
 800bb1a:	dc09      	bgt.n	800bb30 <_printf_float+0x264>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	079b      	lsls	r3, r3, #30
 800bb20:	f100 8105 	bmi.w	800bd2e <_printf_float+0x462>
 800bb24:	68e0      	ldr	r0, [r4, #12]
 800bb26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb28:	4298      	cmp	r0, r3
 800bb2a:	bfb8      	it	lt
 800bb2c:	4618      	movlt	r0, r3
 800bb2e:	e730      	b.n	800b992 <_printf_float+0xc6>
 800bb30:	2301      	movs	r3, #1
 800bb32:	464a      	mov	r2, r9
 800bb34:	4631      	mov	r1, r6
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	f43f af27 	beq.w	800b98e <_printf_float+0xc2>
 800bb40:	f108 0801 	add.w	r8, r8, #1
 800bb44:	e7e6      	b.n	800bb14 <_printf_float+0x248>
 800bb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	dc39      	bgt.n	800bbc0 <_printf_float+0x2f4>
 800bb4c:	4a1b      	ldr	r2, [pc, #108]	; (800bbbc <_printf_float+0x2f0>)
 800bb4e:	2301      	movs	r3, #1
 800bb50:	4631      	mov	r1, r6
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b8      	blx	r7
 800bb56:	3001      	adds	r0, #1
 800bb58:	f43f af19 	beq.w	800b98e <_printf_float+0xc2>
 800bb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb60:	4313      	orrs	r3, r2
 800bb62:	d102      	bne.n	800bb6a <_printf_float+0x29e>
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	07d9      	lsls	r1, r3, #31
 800bb68:	d5d8      	bpl.n	800bb1c <_printf_float+0x250>
 800bb6a:	ee18 3a10 	vmov	r3, s16
 800bb6e:	4652      	mov	r2, sl
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b8      	blx	r7
 800bb76:	3001      	adds	r0, #1
 800bb78:	f43f af09 	beq.w	800b98e <_printf_float+0xc2>
 800bb7c:	f04f 0900 	mov.w	r9, #0
 800bb80:	f104 0a1a 	add.w	sl, r4, #26
 800bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb86:	425b      	negs	r3, r3
 800bb88:	454b      	cmp	r3, r9
 800bb8a:	dc01      	bgt.n	800bb90 <_printf_float+0x2c4>
 800bb8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8e:	e792      	b.n	800bab6 <_printf_float+0x1ea>
 800bb90:	2301      	movs	r3, #1
 800bb92:	4652      	mov	r2, sl
 800bb94:	4631      	mov	r1, r6
 800bb96:	4628      	mov	r0, r5
 800bb98:	47b8      	blx	r7
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	f43f aef7 	beq.w	800b98e <_printf_float+0xc2>
 800bba0:	f109 0901 	add.w	r9, r9, #1
 800bba4:	e7ee      	b.n	800bb84 <_printf_float+0x2b8>
 800bba6:	bf00      	nop
 800bba8:	7fefffff 	.word	0x7fefffff
 800bbac:	080118c5 	.word	0x080118c5
 800bbb0:	080118c9 	.word	0x080118c9
 800bbb4:	080118d1 	.word	0x080118d1
 800bbb8:	080118cd 	.word	0x080118cd
 800bbbc:	08011bb8 	.word	0x08011bb8
 800bbc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	bfa8      	it	ge
 800bbc8:	461a      	movge	r2, r3
 800bbca:	2a00      	cmp	r2, #0
 800bbcc:	4691      	mov	r9, r2
 800bbce:	dc37      	bgt.n	800bc40 <_printf_float+0x374>
 800bbd0:	f04f 0b00 	mov.w	fp, #0
 800bbd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbd8:	f104 021a 	add.w	r2, r4, #26
 800bbdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	eba3 0309 	sub.w	r3, r3, r9
 800bbe4:	455b      	cmp	r3, fp
 800bbe6:	dc33      	bgt.n	800bc50 <_printf_float+0x384>
 800bbe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbec:	429a      	cmp	r2, r3
 800bbee:	db3b      	blt.n	800bc68 <_printf_float+0x39c>
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	07da      	lsls	r2, r3, #31
 800bbf4:	d438      	bmi.n	800bc68 <_printf_float+0x39c>
 800bbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf8:	9a05      	ldr	r2, [sp, #20]
 800bbfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbfc:	1a9a      	subs	r2, r3, r2
 800bbfe:	eba3 0901 	sub.w	r9, r3, r1
 800bc02:	4591      	cmp	r9, r2
 800bc04:	bfa8      	it	ge
 800bc06:	4691      	movge	r9, r2
 800bc08:	f1b9 0f00 	cmp.w	r9, #0
 800bc0c:	dc35      	bgt.n	800bc7a <_printf_float+0x3ae>
 800bc0e:	f04f 0800 	mov.w	r8, #0
 800bc12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc16:	f104 0a1a 	add.w	sl, r4, #26
 800bc1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	eba3 0309 	sub.w	r3, r3, r9
 800bc24:	4543      	cmp	r3, r8
 800bc26:	f77f af79 	ble.w	800bb1c <_printf_float+0x250>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4652      	mov	r2, sl
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b8      	blx	r7
 800bc34:	3001      	adds	r0, #1
 800bc36:	f43f aeaa 	beq.w	800b98e <_printf_float+0xc2>
 800bc3a:	f108 0801 	add.w	r8, r8, #1
 800bc3e:	e7ec      	b.n	800bc1a <_printf_float+0x34e>
 800bc40:	4613      	mov	r3, r2
 800bc42:	4631      	mov	r1, r6
 800bc44:	4642      	mov	r2, r8
 800bc46:	4628      	mov	r0, r5
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	d1c0      	bne.n	800bbd0 <_printf_float+0x304>
 800bc4e:	e69e      	b.n	800b98e <_printf_float+0xc2>
 800bc50:	2301      	movs	r3, #1
 800bc52:	4631      	mov	r1, r6
 800bc54:	4628      	mov	r0, r5
 800bc56:	9205      	str	r2, [sp, #20]
 800bc58:	47b8      	blx	r7
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	f43f ae97 	beq.w	800b98e <_printf_float+0xc2>
 800bc60:	9a05      	ldr	r2, [sp, #20]
 800bc62:	f10b 0b01 	add.w	fp, fp, #1
 800bc66:	e7b9      	b.n	800bbdc <_printf_float+0x310>
 800bc68:	ee18 3a10 	vmov	r3, s16
 800bc6c:	4652      	mov	r2, sl
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	d1be      	bne.n	800bbf6 <_printf_float+0x32a>
 800bc78:	e689      	b.n	800b98e <_printf_float+0xc2>
 800bc7a:	9a05      	ldr	r2, [sp, #20]
 800bc7c:	464b      	mov	r3, r9
 800bc7e:	4442      	add	r2, r8
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b8      	blx	r7
 800bc86:	3001      	adds	r0, #1
 800bc88:	d1c1      	bne.n	800bc0e <_printf_float+0x342>
 800bc8a:	e680      	b.n	800b98e <_printf_float+0xc2>
 800bc8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc8e:	2a01      	cmp	r2, #1
 800bc90:	dc01      	bgt.n	800bc96 <_printf_float+0x3ca>
 800bc92:	07db      	lsls	r3, r3, #31
 800bc94:	d538      	bpl.n	800bd08 <_printf_float+0x43c>
 800bc96:	2301      	movs	r3, #1
 800bc98:	4642      	mov	r2, r8
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b8      	blx	r7
 800bca0:	3001      	adds	r0, #1
 800bca2:	f43f ae74 	beq.w	800b98e <_printf_float+0xc2>
 800bca6:	ee18 3a10 	vmov	r3, s16
 800bcaa:	4652      	mov	r2, sl
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f ae6b 	beq.w	800b98e <_printf_float+0xc2>
 800bcb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f7f4 ff12 	bl	8000ae8 <__aeabi_dcmpeq>
 800bcc4:	b9d8      	cbnz	r0, 800bcfe <_printf_float+0x432>
 800bcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcc8:	f108 0201 	add.w	r2, r8, #1
 800bccc:	3b01      	subs	r3, #1
 800bcce:	4631      	mov	r1, r6
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b8      	blx	r7
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d10e      	bne.n	800bcf6 <_printf_float+0x42a>
 800bcd8:	e659      	b.n	800b98e <_printf_float+0xc2>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4652      	mov	r2, sl
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	f43f ae52 	beq.w	800b98e <_printf_float+0xc2>
 800bcea:	f108 0801 	add.w	r8, r8, #1
 800bcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	4543      	cmp	r3, r8
 800bcf4:	dcf1      	bgt.n	800bcda <_printf_float+0x40e>
 800bcf6:	464b      	mov	r3, r9
 800bcf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bcfc:	e6dc      	b.n	800bab8 <_printf_float+0x1ec>
 800bcfe:	f04f 0800 	mov.w	r8, #0
 800bd02:	f104 0a1a 	add.w	sl, r4, #26
 800bd06:	e7f2      	b.n	800bcee <_printf_float+0x422>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4642      	mov	r2, r8
 800bd0c:	e7df      	b.n	800bcce <_printf_float+0x402>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	464a      	mov	r2, r9
 800bd12:	4631      	mov	r1, r6
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	f43f ae38 	beq.w	800b98e <_printf_float+0xc2>
 800bd1e:	f108 0801 	add.w	r8, r8, #1
 800bd22:	68e3      	ldr	r3, [r4, #12]
 800bd24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd26:	1a5b      	subs	r3, r3, r1
 800bd28:	4543      	cmp	r3, r8
 800bd2a:	dcf0      	bgt.n	800bd0e <_printf_float+0x442>
 800bd2c:	e6fa      	b.n	800bb24 <_printf_float+0x258>
 800bd2e:	f04f 0800 	mov.w	r8, #0
 800bd32:	f104 0919 	add.w	r9, r4, #25
 800bd36:	e7f4      	b.n	800bd22 <_printf_float+0x456>

0800bd38 <_printf_common>:
 800bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd3c:	4616      	mov	r6, r2
 800bd3e:	4699      	mov	r9, r3
 800bd40:	688a      	ldr	r2, [r1, #8]
 800bd42:	690b      	ldr	r3, [r1, #16]
 800bd44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	bfb8      	it	lt
 800bd4c:	4613      	movlt	r3, r2
 800bd4e:	6033      	str	r3, [r6, #0]
 800bd50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd54:	4607      	mov	r7, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	b10a      	cbz	r2, 800bd5e <_printf_common+0x26>
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	6033      	str	r3, [r6, #0]
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	0699      	lsls	r1, r3, #26
 800bd62:	bf42      	ittt	mi
 800bd64:	6833      	ldrmi	r3, [r6, #0]
 800bd66:	3302      	addmi	r3, #2
 800bd68:	6033      	strmi	r3, [r6, #0]
 800bd6a:	6825      	ldr	r5, [r4, #0]
 800bd6c:	f015 0506 	ands.w	r5, r5, #6
 800bd70:	d106      	bne.n	800bd80 <_printf_common+0x48>
 800bd72:	f104 0a19 	add.w	sl, r4, #25
 800bd76:	68e3      	ldr	r3, [r4, #12]
 800bd78:	6832      	ldr	r2, [r6, #0]
 800bd7a:	1a9b      	subs	r3, r3, r2
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	dc26      	bgt.n	800bdce <_printf_common+0x96>
 800bd80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd84:	1e13      	subs	r3, r2, #0
 800bd86:	6822      	ldr	r2, [r4, #0]
 800bd88:	bf18      	it	ne
 800bd8a:	2301      	movne	r3, #1
 800bd8c:	0692      	lsls	r2, r2, #26
 800bd8e:	d42b      	bmi.n	800bde8 <_printf_common+0xb0>
 800bd90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd94:	4649      	mov	r1, r9
 800bd96:	4638      	mov	r0, r7
 800bd98:	47c0      	blx	r8
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d01e      	beq.n	800bddc <_printf_common+0xa4>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	68e5      	ldr	r5, [r4, #12]
 800bda2:	6832      	ldr	r2, [r6, #0]
 800bda4:	f003 0306 	and.w	r3, r3, #6
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	bf08      	it	eq
 800bdac:	1aad      	subeq	r5, r5, r2
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	6922      	ldr	r2, [r4, #16]
 800bdb2:	bf0c      	ite	eq
 800bdb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb8:	2500      	movne	r5, #0
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	bfc4      	itt	gt
 800bdbe:	1a9b      	subgt	r3, r3, r2
 800bdc0:	18ed      	addgt	r5, r5, r3
 800bdc2:	2600      	movs	r6, #0
 800bdc4:	341a      	adds	r4, #26
 800bdc6:	42b5      	cmp	r5, r6
 800bdc8:	d11a      	bne.n	800be00 <_printf_common+0xc8>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	e008      	b.n	800bde0 <_printf_common+0xa8>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	4652      	mov	r2, sl
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	47c0      	blx	r8
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d103      	bne.n	800bde4 <_printf_common+0xac>
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde4:	3501      	adds	r5, #1
 800bde6:	e7c6      	b.n	800bd76 <_printf_common+0x3e>
 800bde8:	18e1      	adds	r1, r4, r3
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	2030      	movs	r0, #48	; 0x30
 800bdee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdf2:	4422      	add	r2, r4
 800bdf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdfc:	3302      	adds	r3, #2
 800bdfe:	e7c7      	b.n	800bd90 <_printf_common+0x58>
 800be00:	2301      	movs	r3, #1
 800be02:	4622      	mov	r2, r4
 800be04:	4649      	mov	r1, r9
 800be06:	4638      	mov	r0, r7
 800be08:	47c0      	blx	r8
 800be0a:	3001      	adds	r0, #1
 800be0c:	d0e6      	beq.n	800bddc <_printf_common+0xa4>
 800be0e:	3601      	adds	r6, #1
 800be10:	e7d9      	b.n	800bdc6 <_printf_common+0x8e>
	...

0800be14 <_printf_i>:
 800be14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be18:	7e0f      	ldrb	r7, [r1, #24]
 800be1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be1c:	2f78      	cmp	r7, #120	; 0x78
 800be1e:	4691      	mov	r9, r2
 800be20:	4680      	mov	r8, r0
 800be22:	460c      	mov	r4, r1
 800be24:	469a      	mov	sl, r3
 800be26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be2a:	d807      	bhi.n	800be3c <_printf_i+0x28>
 800be2c:	2f62      	cmp	r7, #98	; 0x62
 800be2e:	d80a      	bhi.n	800be46 <_printf_i+0x32>
 800be30:	2f00      	cmp	r7, #0
 800be32:	f000 80d8 	beq.w	800bfe6 <_printf_i+0x1d2>
 800be36:	2f58      	cmp	r7, #88	; 0x58
 800be38:	f000 80a3 	beq.w	800bf82 <_printf_i+0x16e>
 800be3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be44:	e03a      	b.n	800bebc <_printf_i+0xa8>
 800be46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be4a:	2b15      	cmp	r3, #21
 800be4c:	d8f6      	bhi.n	800be3c <_printf_i+0x28>
 800be4e:	a101      	add	r1, pc, #4	; (adr r1, 800be54 <_printf_i+0x40>)
 800be50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be54:	0800bead 	.word	0x0800bead
 800be58:	0800bec1 	.word	0x0800bec1
 800be5c:	0800be3d 	.word	0x0800be3d
 800be60:	0800be3d 	.word	0x0800be3d
 800be64:	0800be3d 	.word	0x0800be3d
 800be68:	0800be3d 	.word	0x0800be3d
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800be3d 	.word	0x0800be3d
 800be74:	0800be3d 	.word	0x0800be3d
 800be78:	0800be3d 	.word	0x0800be3d
 800be7c:	0800be3d 	.word	0x0800be3d
 800be80:	0800bfcd 	.word	0x0800bfcd
 800be84:	0800bef1 	.word	0x0800bef1
 800be88:	0800bfaf 	.word	0x0800bfaf
 800be8c:	0800be3d 	.word	0x0800be3d
 800be90:	0800be3d 	.word	0x0800be3d
 800be94:	0800bfef 	.word	0x0800bfef
 800be98:	0800be3d 	.word	0x0800be3d
 800be9c:	0800bef1 	.word	0x0800bef1
 800bea0:	0800be3d 	.word	0x0800be3d
 800bea4:	0800be3d 	.word	0x0800be3d
 800bea8:	0800bfb7 	.word	0x0800bfb7
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	1d1a      	adds	r2, r3, #4
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	602a      	str	r2, [r5, #0]
 800beb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bebc:	2301      	movs	r3, #1
 800bebe:	e0a3      	b.n	800c008 <_printf_i+0x1f4>
 800bec0:	6820      	ldr	r0, [r4, #0]
 800bec2:	6829      	ldr	r1, [r5, #0]
 800bec4:	0606      	lsls	r6, r0, #24
 800bec6:	f101 0304 	add.w	r3, r1, #4
 800beca:	d50a      	bpl.n	800bee2 <_printf_i+0xce>
 800becc:	680e      	ldr	r6, [r1, #0]
 800bece:	602b      	str	r3, [r5, #0]
 800bed0:	2e00      	cmp	r6, #0
 800bed2:	da03      	bge.n	800bedc <_printf_i+0xc8>
 800bed4:	232d      	movs	r3, #45	; 0x2d
 800bed6:	4276      	negs	r6, r6
 800bed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bedc:	485e      	ldr	r0, [pc, #376]	; (800c058 <_printf_i+0x244>)
 800bede:	230a      	movs	r3, #10
 800bee0:	e019      	b.n	800bf16 <_printf_i+0x102>
 800bee2:	680e      	ldr	r6, [r1, #0]
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800beea:	bf18      	it	ne
 800beec:	b236      	sxthne	r6, r6
 800beee:	e7ef      	b.n	800bed0 <_printf_i+0xbc>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	6820      	ldr	r0, [r4, #0]
 800bef4:	1d19      	adds	r1, r3, #4
 800bef6:	6029      	str	r1, [r5, #0]
 800bef8:	0601      	lsls	r1, r0, #24
 800befa:	d501      	bpl.n	800bf00 <_printf_i+0xec>
 800befc:	681e      	ldr	r6, [r3, #0]
 800befe:	e002      	b.n	800bf06 <_printf_i+0xf2>
 800bf00:	0646      	lsls	r6, r0, #25
 800bf02:	d5fb      	bpl.n	800befc <_printf_i+0xe8>
 800bf04:	881e      	ldrh	r6, [r3, #0]
 800bf06:	4854      	ldr	r0, [pc, #336]	; (800c058 <_printf_i+0x244>)
 800bf08:	2f6f      	cmp	r7, #111	; 0x6f
 800bf0a:	bf0c      	ite	eq
 800bf0c:	2308      	moveq	r3, #8
 800bf0e:	230a      	movne	r3, #10
 800bf10:	2100      	movs	r1, #0
 800bf12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf16:	6865      	ldr	r5, [r4, #4]
 800bf18:	60a5      	str	r5, [r4, #8]
 800bf1a:	2d00      	cmp	r5, #0
 800bf1c:	bfa2      	ittt	ge
 800bf1e:	6821      	ldrge	r1, [r4, #0]
 800bf20:	f021 0104 	bicge.w	r1, r1, #4
 800bf24:	6021      	strge	r1, [r4, #0]
 800bf26:	b90e      	cbnz	r6, 800bf2c <_printf_i+0x118>
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	d04d      	beq.n	800bfc8 <_printf_i+0x1b4>
 800bf2c:	4615      	mov	r5, r2
 800bf2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf32:	fb03 6711 	mls	r7, r3, r1, r6
 800bf36:	5dc7      	ldrb	r7, [r0, r7]
 800bf38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf3c:	4637      	mov	r7, r6
 800bf3e:	42bb      	cmp	r3, r7
 800bf40:	460e      	mov	r6, r1
 800bf42:	d9f4      	bls.n	800bf2e <_printf_i+0x11a>
 800bf44:	2b08      	cmp	r3, #8
 800bf46:	d10b      	bne.n	800bf60 <_printf_i+0x14c>
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	07de      	lsls	r6, r3, #31
 800bf4c:	d508      	bpl.n	800bf60 <_printf_i+0x14c>
 800bf4e:	6923      	ldr	r3, [r4, #16]
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	4299      	cmp	r1, r3
 800bf54:	bfde      	ittt	le
 800bf56:	2330      	movle	r3, #48	; 0x30
 800bf58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf60:	1b52      	subs	r2, r2, r5
 800bf62:	6122      	str	r2, [r4, #16]
 800bf64:	f8cd a000 	str.w	sl, [sp]
 800bf68:	464b      	mov	r3, r9
 800bf6a:	aa03      	add	r2, sp, #12
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4640      	mov	r0, r8
 800bf70:	f7ff fee2 	bl	800bd38 <_printf_common>
 800bf74:	3001      	adds	r0, #1
 800bf76:	d14c      	bne.n	800c012 <_printf_i+0x1fe>
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7c:	b004      	add	sp, #16
 800bf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf82:	4835      	ldr	r0, [pc, #212]	; (800c058 <_printf_i+0x244>)
 800bf84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf88:	6829      	ldr	r1, [r5, #0]
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf90:	6029      	str	r1, [r5, #0]
 800bf92:	061d      	lsls	r5, r3, #24
 800bf94:	d514      	bpl.n	800bfc0 <_printf_i+0x1ac>
 800bf96:	07df      	lsls	r7, r3, #31
 800bf98:	bf44      	itt	mi
 800bf9a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf9e:	6023      	strmi	r3, [r4, #0]
 800bfa0:	b91e      	cbnz	r6, 800bfaa <_printf_i+0x196>
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	f023 0320 	bic.w	r3, r3, #32
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	2310      	movs	r3, #16
 800bfac:	e7b0      	b.n	800bf10 <_printf_i+0xfc>
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	f043 0320 	orr.w	r3, r3, #32
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	2378      	movs	r3, #120	; 0x78
 800bfb8:	4828      	ldr	r0, [pc, #160]	; (800c05c <_printf_i+0x248>)
 800bfba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfbe:	e7e3      	b.n	800bf88 <_printf_i+0x174>
 800bfc0:	0659      	lsls	r1, r3, #25
 800bfc2:	bf48      	it	mi
 800bfc4:	b2b6      	uxthmi	r6, r6
 800bfc6:	e7e6      	b.n	800bf96 <_printf_i+0x182>
 800bfc8:	4615      	mov	r5, r2
 800bfca:	e7bb      	b.n	800bf44 <_printf_i+0x130>
 800bfcc:	682b      	ldr	r3, [r5, #0]
 800bfce:	6826      	ldr	r6, [r4, #0]
 800bfd0:	6961      	ldr	r1, [r4, #20]
 800bfd2:	1d18      	adds	r0, r3, #4
 800bfd4:	6028      	str	r0, [r5, #0]
 800bfd6:	0635      	lsls	r5, r6, #24
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	d501      	bpl.n	800bfe0 <_printf_i+0x1cc>
 800bfdc:	6019      	str	r1, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <_printf_i+0x1d2>
 800bfe0:	0670      	lsls	r0, r6, #25
 800bfe2:	d5fb      	bpl.n	800bfdc <_printf_i+0x1c8>
 800bfe4:	8019      	strh	r1, [r3, #0]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	4615      	mov	r5, r2
 800bfec:	e7ba      	b.n	800bf64 <_printf_i+0x150>
 800bfee:	682b      	ldr	r3, [r5, #0]
 800bff0:	1d1a      	adds	r2, r3, #4
 800bff2:	602a      	str	r2, [r5, #0]
 800bff4:	681d      	ldr	r5, [r3, #0]
 800bff6:	6862      	ldr	r2, [r4, #4]
 800bff8:	2100      	movs	r1, #0
 800bffa:	4628      	mov	r0, r5
 800bffc:	f7f4 f900 	bl	8000200 <memchr>
 800c000:	b108      	cbz	r0, 800c006 <_printf_i+0x1f2>
 800c002:	1b40      	subs	r0, r0, r5
 800c004:	6060      	str	r0, [r4, #4]
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	6123      	str	r3, [r4, #16]
 800c00a:	2300      	movs	r3, #0
 800c00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c010:	e7a8      	b.n	800bf64 <_printf_i+0x150>
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	462a      	mov	r2, r5
 800c016:	4649      	mov	r1, r9
 800c018:	4640      	mov	r0, r8
 800c01a:	47d0      	blx	sl
 800c01c:	3001      	adds	r0, #1
 800c01e:	d0ab      	beq.n	800bf78 <_printf_i+0x164>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	079b      	lsls	r3, r3, #30
 800c024:	d413      	bmi.n	800c04e <_printf_i+0x23a>
 800c026:	68e0      	ldr	r0, [r4, #12]
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	4298      	cmp	r0, r3
 800c02c:	bfb8      	it	lt
 800c02e:	4618      	movlt	r0, r3
 800c030:	e7a4      	b.n	800bf7c <_printf_i+0x168>
 800c032:	2301      	movs	r3, #1
 800c034:	4632      	mov	r2, r6
 800c036:	4649      	mov	r1, r9
 800c038:	4640      	mov	r0, r8
 800c03a:	47d0      	blx	sl
 800c03c:	3001      	adds	r0, #1
 800c03e:	d09b      	beq.n	800bf78 <_printf_i+0x164>
 800c040:	3501      	adds	r5, #1
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	9903      	ldr	r1, [sp, #12]
 800c046:	1a5b      	subs	r3, r3, r1
 800c048:	42ab      	cmp	r3, r5
 800c04a:	dcf2      	bgt.n	800c032 <_printf_i+0x21e>
 800c04c:	e7eb      	b.n	800c026 <_printf_i+0x212>
 800c04e:	2500      	movs	r5, #0
 800c050:	f104 0619 	add.w	r6, r4, #25
 800c054:	e7f5      	b.n	800c042 <_printf_i+0x22e>
 800c056:	bf00      	nop
 800c058:	080118d5 	.word	0x080118d5
 800c05c:	080118e6 	.word	0x080118e6

0800c060 <_scanf_float>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	b087      	sub	sp, #28
 800c066:	4617      	mov	r7, r2
 800c068:	9303      	str	r3, [sp, #12]
 800c06a:	688b      	ldr	r3, [r1, #8]
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c072:	bf83      	ittte	hi
 800c074:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c078:	195b      	addhi	r3, r3, r5
 800c07a:	9302      	strhi	r3, [sp, #8]
 800c07c:	2300      	movls	r3, #0
 800c07e:	bf86      	itte	hi
 800c080:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c084:	608b      	strhi	r3, [r1, #8]
 800c086:	9302      	strls	r3, [sp, #8]
 800c088:	680b      	ldr	r3, [r1, #0]
 800c08a:	468b      	mov	fp, r1
 800c08c:	2500      	movs	r5, #0
 800c08e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c092:	f84b 3b1c 	str.w	r3, [fp], #28
 800c096:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c09a:	4680      	mov	r8, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	465e      	mov	r6, fp
 800c0a0:	46aa      	mov	sl, r5
 800c0a2:	46a9      	mov	r9, r5
 800c0a4:	9501      	str	r5, [sp, #4]
 800c0a6:	68a2      	ldr	r2, [r4, #8]
 800c0a8:	b152      	cbz	r2, 800c0c0 <_scanf_float+0x60>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b4e      	cmp	r3, #78	; 0x4e
 800c0b0:	d864      	bhi.n	800c17c <_scanf_float+0x11c>
 800c0b2:	2b40      	cmp	r3, #64	; 0x40
 800c0b4:	d83c      	bhi.n	800c130 <_scanf_float+0xd0>
 800c0b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c0ba:	b2c8      	uxtb	r0, r1
 800c0bc:	280e      	cmp	r0, #14
 800c0be:	d93a      	bls.n	800c136 <_scanf_float+0xd6>
 800c0c0:	f1b9 0f00 	cmp.w	r9, #0
 800c0c4:	d003      	beq.n	800c0ce <_scanf_float+0x6e>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0d2:	f1ba 0f01 	cmp.w	sl, #1
 800c0d6:	f200 8113 	bhi.w	800c300 <_scanf_float+0x2a0>
 800c0da:	455e      	cmp	r6, fp
 800c0dc:	f200 8105 	bhi.w	800c2ea <_scanf_float+0x28a>
 800c0e0:	2501      	movs	r5, #1
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	b007      	add	sp, #28
 800c0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c0ee:	2a0d      	cmp	r2, #13
 800c0f0:	d8e6      	bhi.n	800c0c0 <_scanf_float+0x60>
 800c0f2:	a101      	add	r1, pc, #4	; (adr r1, 800c0f8 <_scanf_float+0x98>)
 800c0f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0f8:	0800c237 	.word	0x0800c237
 800c0fc:	0800c0c1 	.word	0x0800c0c1
 800c100:	0800c0c1 	.word	0x0800c0c1
 800c104:	0800c0c1 	.word	0x0800c0c1
 800c108:	0800c297 	.word	0x0800c297
 800c10c:	0800c26f 	.word	0x0800c26f
 800c110:	0800c0c1 	.word	0x0800c0c1
 800c114:	0800c0c1 	.word	0x0800c0c1
 800c118:	0800c245 	.word	0x0800c245
 800c11c:	0800c0c1 	.word	0x0800c0c1
 800c120:	0800c0c1 	.word	0x0800c0c1
 800c124:	0800c0c1 	.word	0x0800c0c1
 800c128:	0800c0c1 	.word	0x0800c0c1
 800c12c:	0800c1fd 	.word	0x0800c1fd
 800c130:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c134:	e7db      	b.n	800c0ee <_scanf_float+0x8e>
 800c136:	290e      	cmp	r1, #14
 800c138:	d8c2      	bhi.n	800c0c0 <_scanf_float+0x60>
 800c13a:	a001      	add	r0, pc, #4	; (adr r0, 800c140 <_scanf_float+0xe0>)
 800c13c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c140:	0800c1ef 	.word	0x0800c1ef
 800c144:	0800c0c1 	.word	0x0800c0c1
 800c148:	0800c1ef 	.word	0x0800c1ef
 800c14c:	0800c283 	.word	0x0800c283
 800c150:	0800c0c1 	.word	0x0800c0c1
 800c154:	0800c19d 	.word	0x0800c19d
 800c158:	0800c1d9 	.word	0x0800c1d9
 800c15c:	0800c1d9 	.word	0x0800c1d9
 800c160:	0800c1d9 	.word	0x0800c1d9
 800c164:	0800c1d9 	.word	0x0800c1d9
 800c168:	0800c1d9 	.word	0x0800c1d9
 800c16c:	0800c1d9 	.word	0x0800c1d9
 800c170:	0800c1d9 	.word	0x0800c1d9
 800c174:	0800c1d9 	.word	0x0800c1d9
 800c178:	0800c1d9 	.word	0x0800c1d9
 800c17c:	2b6e      	cmp	r3, #110	; 0x6e
 800c17e:	d809      	bhi.n	800c194 <_scanf_float+0x134>
 800c180:	2b60      	cmp	r3, #96	; 0x60
 800c182:	d8b2      	bhi.n	800c0ea <_scanf_float+0x8a>
 800c184:	2b54      	cmp	r3, #84	; 0x54
 800c186:	d077      	beq.n	800c278 <_scanf_float+0x218>
 800c188:	2b59      	cmp	r3, #89	; 0x59
 800c18a:	d199      	bne.n	800c0c0 <_scanf_float+0x60>
 800c18c:	2d07      	cmp	r5, #7
 800c18e:	d197      	bne.n	800c0c0 <_scanf_float+0x60>
 800c190:	2508      	movs	r5, #8
 800c192:	e029      	b.n	800c1e8 <_scanf_float+0x188>
 800c194:	2b74      	cmp	r3, #116	; 0x74
 800c196:	d06f      	beq.n	800c278 <_scanf_float+0x218>
 800c198:	2b79      	cmp	r3, #121	; 0x79
 800c19a:	e7f6      	b.n	800c18a <_scanf_float+0x12a>
 800c19c:	6821      	ldr	r1, [r4, #0]
 800c19e:	05c8      	lsls	r0, r1, #23
 800c1a0:	d51a      	bpl.n	800c1d8 <_scanf_float+0x178>
 800c1a2:	9b02      	ldr	r3, [sp, #8]
 800c1a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1a8:	6021      	str	r1, [r4, #0]
 800c1aa:	f109 0901 	add.w	r9, r9, #1
 800c1ae:	b11b      	cbz	r3, 800c1b8 <_scanf_float+0x158>
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	3201      	adds	r2, #1
 800c1b4:	9302      	str	r3, [sp, #8]
 800c1b6:	60a2      	str	r2, [r4, #8]
 800c1b8:	68a3      	ldr	r3, [r4, #8]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	60a3      	str	r3, [r4, #8]
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	6123      	str	r3, [r4, #16]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	607b      	str	r3, [r7, #4]
 800c1cc:	f340 8084 	ble.w	800c2d8 <_scanf_float+0x278>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	603b      	str	r3, [r7, #0]
 800c1d6:	e766      	b.n	800c0a6 <_scanf_float+0x46>
 800c1d8:	eb1a 0f05 	cmn.w	sl, r5
 800c1dc:	f47f af70 	bne.w	800c0c0 <_scanf_float+0x60>
 800c1e0:	6822      	ldr	r2, [r4, #0]
 800c1e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c1e6:	6022      	str	r2, [r4, #0]
 800c1e8:	f806 3b01 	strb.w	r3, [r6], #1
 800c1ec:	e7e4      	b.n	800c1b8 <_scanf_float+0x158>
 800c1ee:	6822      	ldr	r2, [r4, #0]
 800c1f0:	0610      	lsls	r0, r2, #24
 800c1f2:	f57f af65 	bpl.w	800c0c0 <_scanf_float+0x60>
 800c1f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1fa:	e7f4      	b.n	800c1e6 <_scanf_float+0x186>
 800c1fc:	f1ba 0f00 	cmp.w	sl, #0
 800c200:	d10e      	bne.n	800c220 <_scanf_float+0x1c0>
 800c202:	f1b9 0f00 	cmp.w	r9, #0
 800c206:	d10e      	bne.n	800c226 <_scanf_float+0x1c6>
 800c208:	6822      	ldr	r2, [r4, #0]
 800c20a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c20e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c212:	d108      	bne.n	800c226 <_scanf_float+0x1c6>
 800c214:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c218:	6022      	str	r2, [r4, #0]
 800c21a:	f04f 0a01 	mov.w	sl, #1
 800c21e:	e7e3      	b.n	800c1e8 <_scanf_float+0x188>
 800c220:	f1ba 0f02 	cmp.w	sl, #2
 800c224:	d055      	beq.n	800c2d2 <_scanf_float+0x272>
 800c226:	2d01      	cmp	r5, #1
 800c228:	d002      	beq.n	800c230 <_scanf_float+0x1d0>
 800c22a:	2d04      	cmp	r5, #4
 800c22c:	f47f af48 	bne.w	800c0c0 <_scanf_float+0x60>
 800c230:	3501      	adds	r5, #1
 800c232:	b2ed      	uxtb	r5, r5
 800c234:	e7d8      	b.n	800c1e8 <_scanf_float+0x188>
 800c236:	f1ba 0f01 	cmp.w	sl, #1
 800c23a:	f47f af41 	bne.w	800c0c0 <_scanf_float+0x60>
 800c23e:	f04f 0a02 	mov.w	sl, #2
 800c242:	e7d1      	b.n	800c1e8 <_scanf_float+0x188>
 800c244:	b97d      	cbnz	r5, 800c266 <_scanf_float+0x206>
 800c246:	f1b9 0f00 	cmp.w	r9, #0
 800c24a:	f47f af3c 	bne.w	800c0c6 <_scanf_float+0x66>
 800c24e:	6822      	ldr	r2, [r4, #0]
 800c250:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c254:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c258:	f47f af39 	bne.w	800c0ce <_scanf_float+0x6e>
 800c25c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c260:	6022      	str	r2, [r4, #0]
 800c262:	2501      	movs	r5, #1
 800c264:	e7c0      	b.n	800c1e8 <_scanf_float+0x188>
 800c266:	2d03      	cmp	r5, #3
 800c268:	d0e2      	beq.n	800c230 <_scanf_float+0x1d0>
 800c26a:	2d05      	cmp	r5, #5
 800c26c:	e7de      	b.n	800c22c <_scanf_float+0x1cc>
 800c26e:	2d02      	cmp	r5, #2
 800c270:	f47f af26 	bne.w	800c0c0 <_scanf_float+0x60>
 800c274:	2503      	movs	r5, #3
 800c276:	e7b7      	b.n	800c1e8 <_scanf_float+0x188>
 800c278:	2d06      	cmp	r5, #6
 800c27a:	f47f af21 	bne.w	800c0c0 <_scanf_float+0x60>
 800c27e:	2507      	movs	r5, #7
 800c280:	e7b2      	b.n	800c1e8 <_scanf_float+0x188>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	0591      	lsls	r1, r2, #22
 800c286:	f57f af1b 	bpl.w	800c0c0 <_scanf_float+0x60>
 800c28a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c28e:	6022      	str	r2, [r4, #0]
 800c290:	f8cd 9004 	str.w	r9, [sp, #4]
 800c294:	e7a8      	b.n	800c1e8 <_scanf_float+0x188>
 800c296:	6822      	ldr	r2, [r4, #0]
 800c298:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c29c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c2a0:	d006      	beq.n	800c2b0 <_scanf_float+0x250>
 800c2a2:	0550      	lsls	r0, r2, #21
 800c2a4:	f57f af0c 	bpl.w	800c0c0 <_scanf_float+0x60>
 800c2a8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ac:	f43f af0f 	beq.w	800c0ce <_scanf_float+0x6e>
 800c2b0:	0591      	lsls	r1, r2, #22
 800c2b2:	bf58      	it	pl
 800c2b4:	9901      	ldrpl	r1, [sp, #4]
 800c2b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2ba:	bf58      	it	pl
 800c2bc:	eba9 0101 	subpl.w	r1, r9, r1
 800c2c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c2c4:	bf58      	it	pl
 800c2c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2ca:	6022      	str	r2, [r4, #0]
 800c2cc:	f04f 0900 	mov.w	r9, #0
 800c2d0:	e78a      	b.n	800c1e8 <_scanf_float+0x188>
 800c2d2:	f04f 0a03 	mov.w	sl, #3
 800c2d6:	e787      	b.n	800c1e8 <_scanf_float+0x188>
 800c2d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2dc:	4639      	mov	r1, r7
 800c2de:	4640      	mov	r0, r8
 800c2e0:	4798      	blx	r3
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f43f aedf 	beq.w	800c0a6 <_scanf_float+0x46>
 800c2e8:	e6ea      	b.n	800c0c0 <_scanf_float+0x60>
 800c2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2f2:	463a      	mov	r2, r7
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4798      	blx	r3
 800c2f8:	6923      	ldr	r3, [r4, #16]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	6123      	str	r3, [r4, #16]
 800c2fe:	e6ec      	b.n	800c0da <_scanf_float+0x7a>
 800c300:	1e6b      	subs	r3, r5, #1
 800c302:	2b06      	cmp	r3, #6
 800c304:	d825      	bhi.n	800c352 <_scanf_float+0x2f2>
 800c306:	2d02      	cmp	r5, #2
 800c308:	d836      	bhi.n	800c378 <_scanf_float+0x318>
 800c30a:	455e      	cmp	r6, fp
 800c30c:	f67f aee8 	bls.w	800c0e0 <_scanf_float+0x80>
 800c310:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c314:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c318:	463a      	mov	r2, r7
 800c31a:	4640      	mov	r0, r8
 800c31c:	4798      	blx	r3
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	3b01      	subs	r3, #1
 800c322:	6123      	str	r3, [r4, #16]
 800c324:	e7f1      	b.n	800c30a <_scanf_float+0x2aa>
 800c326:	9802      	ldr	r0, [sp, #8]
 800c328:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c32c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c330:	9002      	str	r0, [sp, #8]
 800c332:	463a      	mov	r2, r7
 800c334:	4640      	mov	r0, r8
 800c336:	4798      	blx	r3
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	6123      	str	r3, [r4, #16]
 800c33e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c342:	fa5f fa8a 	uxtb.w	sl, sl
 800c346:	f1ba 0f02 	cmp.w	sl, #2
 800c34a:	d1ec      	bne.n	800c326 <_scanf_float+0x2c6>
 800c34c:	3d03      	subs	r5, #3
 800c34e:	b2ed      	uxtb	r5, r5
 800c350:	1b76      	subs	r6, r6, r5
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	05da      	lsls	r2, r3, #23
 800c356:	d52f      	bpl.n	800c3b8 <_scanf_float+0x358>
 800c358:	055b      	lsls	r3, r3, #21
 800c35a:	d510      	bpl.n	800c37e <_scanf_float+0x31e>
 800c35c:	455e      	cmp	r6, fp
 800c35e:	f67f aebf 	bls.w	800c0e0 <_scanf_float+0x80>
 800c362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c36a:	463a      	mov	r2, r7
 800c36c:	4640      	mov	r0, r8
 800c36e:	4798      	blx	r3
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	3b01      	subs	r3, #1
 800c374:	6123      	str	r3, [r4, #16]
 800c376:	e7f1      	b.n	800c35c <_scanf_float+0x2fc>
 800c378:	46aa      	mov	sl, r5
 800c37a:	9602      	str	r6, [sp, #8]
 800c37c:	e7df      	b.n	800c33e <_scanf_float+0x2de>
 800c37e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	2965      	cmp	r1, #101	; 0x65
 800c386:	f103 33ff 	add.w	r3, r3, #4294967295
 800c38a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c38e:	6123      	str	r3, [r4, #16]
 800c390:	d00c      	beq.n	800c3ac <_scanf_float+0x34c>
 800c392:	2945      	cmp	r1, #69	; 0x45
 800c394:	d00a      	beq.n	800c3ac <_scanf_float+0x34c>
 800c396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c39a:	463a      	mov	r2, r7
 800c39c:	4640      	mov	r0, r8
 800c39e:	4798      	blx	r3
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	1eb5      	subs	r5, r6, #2
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3b0:	463a      	mov	r2, r7
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	4798      	blx	r3
 800c3b6:	462e      	mov	r6, r5
 800c3b8:	6825      	ldr	r5, [r4, #0]
 800c3ba:	f015 0510 	ands.w	r5, r5, #16
 800c3be:	d159      	bne.n	800c474 <_scanf_float+0x414>
 800c3c0:	7035      	strb	r5, [r6, #0]
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3cc:	d11b      	bne.n	800c406 <_scanf_float+0x3a6>
 800c3ce:	9b01      	ldr	r3, [sp, #4]
 800c3d0:	454b      	cmp	r3, r9
 800c3d2:	eba3 0209 	sub.w	r2, r3, r9
 800c3d6:	d123      	bne.n	800c420 <_scanf_float+0x3c0>
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4659      	mov	r1, fp
 800c3dc:	4640      	mov	r0, r8
 800c3de:	f000 ff95 	bl	800d30c <_strtod_r>
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	f012 0f02 	tst.w	r2, #2
 800c3ea:	ec57 6b10 	vmov	r6, r7, d0
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	d021      	beq.n	800c436 <_scanf_float+0x3d6>
 800c3f2:	9903      	ldr	r1, [sp, #12]
 800c3f4:	1d1a      	adds	r2, r3, #4
 800c3f6:	600a      	str	r2, [r1, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	e9c3 6700 	strd	r6, r7, [r3]
 800c3fe:	68e3      	ldr	r3, [r4, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60e3      	str	r3, [r4, #12]
 800c404:	e66d      	b.n	800c0e2 <_scanf_float+0x82>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d0e5      	beq.n	800c3d8 <_scanf_float+0x378>
 800c40c:	9905      	ldr	r1, [sp, #20]
 800c40e:	230a      	movs	r3, #10
 800c410:	462a      	mov	r2, r5
 800c412:	3101      	adds	r1, #1
 800c414:	4640      	mov	r0, r8
 800c416:	f001 f801 	bl	800d41c <_strtol_r>
 800c41a:	9b04      	ldr	r3, [sp, #16]
 800c41c:	9e05      	ldr	r6, [sp, #20]
 800c41e:	1ac2      	subs	r2, r0, r3
 800c420:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c424:	429e      	cmp	r6, r3
 800c426:	bf28      	it	cs
 800c428:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c42c:	4912      	ldr	r1, [pc, #72]	; (800c478 <_scanf_float+0x418>)
 800c42e:	4630      	mov	r0, r6
 800c430:	f000 f8a6 	bl	800c580 <siprintf>
 800c434:	e7d0      	b.n	800c3d8 <_scanf_float+0x378>
 800c436:	9903      	ldr	r1, [sp, #12]
 800c438:	f012 0f04 	tst.w	r2, #4
 800c43c:	f103 0204 	add.w	r2, r3, #4
 800c440:	600a      	str	r2, [r1, #0]
 800c442:	d1d9      	bne.n	800c3f8 <_scanf_float+0x398>
 800c444:	f8d3 8000 	ldr.w	r8, [r3]
 800c448:	ee10 2a10 	vmov	r2, s0
 800c44c:	ee10 0a10 	vmov	r0, s0
 800c450:	463b      	mov	r3, r7
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 fb7a 	bl	8000b4c <__aeabi_dcmpun>
 800c458:	b128      	cbz	r0, 800c466 <_scanf_float+0x406>
 800c45a:	4808      	ldr	r0, [pc, #32]	; (800c47c <_scanf_float+0x41c>)
 800c45c:	f000 f88a 	bl	800c574 <nanf>
 800c460:	ed88 0a00 	vstr	s0, [r8]
 800c464:	e7cb      	b.n	800c3fe <_scanf_float+0x39e>
 800c466:	4630      	mov	r0, r6
 800c468:	4639      	mov	r1, r7
 800c46a:	f7f4 fbcd 	bl	8000c08 <__aeabi_d2f>
 800c46e:	f8c8 0000 	str.w	r0, [r8]
 800c472:	e7c4      	b.n	800c3fe <_scanf_float+0x39e>
 800c474:	2500      	movs	r5, #0
 800c476:	e634      	b.n	800c0e2 <_scanf_float+0x82>
 800c478:	080118f7 	.word	0x080118f7
 800c47c:	0801174b 	.word	0x0801174b

0800c480 <cleanup_glue>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	460c      	mov	r4, r1
 800c484:	6809      	ldr	r1, [r1, #0]
 800c486:	4605      	mov	r5, r0
 800c488:	b109      	cbz	r1, 800c48e <cleanup_glue+0xe>
 800c48a:	f7ff fff9 	bl	800c480 <cleanup_glue>
 800c48e:	4621      	mov	r1, r4
 800c490:	4628      	mov	r0, r5
 800c492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c496:	f003 b8ef 	b.w	800f678 <_free_r>
	...

0800c49c <_reclaim_reent>:
 800c49c:	4b2c      	ldr	r3, [pc, #176]	; (800c550 <_reclaim_reent+0xb4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4283      	cmp	r3, r0
 800c4a2:	b570      	push	{r4, r5, r6, lr}
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	d051      	beq.n	800c54c <_reclaim_reent+0xb0>
 800c4a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c4aa:	b143      	cbz	r3, 800c4be <_reclaim_reent+0x22>
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d14a      	bne.n	800c548 <_reclaim_reent+0xac>
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	6819      	ldr	r1, [r3, #0]
 800c4b6:	b111      	cbz	r1, 800c4be <_reclaim_reent+0x22>
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f003 f8dd 	bl	800f678 <_free_r>
 800c4be:	6961      	ldr	r1, [r4, #20]
 800c4c0:	b111      	cbz	r1, 800c4c8 <_reclaim_reent+0x2c>
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f003 f8d8 	bl	800f678 <_free_r>
 800c4c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c4ca:	b111      	cbz	r1, 800c4d2 <_reclaim_reent+0x36>
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f003 f8d3 	bl	800f678 <_free_r>
 800c4d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c4d4:	b111      	cbz	r1, 800c4dc <_reclaim_reent+0x40>
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f003 f8ce 	bl	800f678 <_free_r>
 800c4dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c4de:	b111      	cbz	r1, 800c4e6 <_reclaim_reent+0x4a>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f003 f8c9 	bl	800f678 <_free_r>
 800c4e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c4e8:	b111      	cbz	r1, 800c4f0 <_reclaim_reent+0x54>
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f003 f8c4 	bl	800f678 <_free_r>
 800c4f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c4f2:	b111      	cbz	r1, 800c4fa <_reclaim_reent+0x5e>
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f003 f8bf 	bl	800f678 <_free_r>
 800c4fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c4fc:	b111      	cbz	r1, 800c504 <_reclaim_reent+0x68>
 800c4fe:	4620      	mov	r0, r4
 800c500:	f003 f8ba 	bl	800f678 <_free_r>
 800c504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c506:	b111      	cbz	r1, 800c50e <_reclaim_reent+0x72>
 800c508:	4620      	mov	r0, r4
 800c50a:	f003 f8b5 	bl	800f678 <_free_r>
 800c50e:	69a3      	ldr	r3, [r4, #24]
 800c510:	b1e3      	cbz	r3, 800c54c <_reclaim_reent+0xb0>
 800c512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c514:	4620      	mov	r0, r4
 800c516:	4798      	blx	r3
 800c518:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c51a:	b1b9      	cbz	r1, 800c54c <_reclaim_reent+0xb0>
 800c51c:	4620      	mov	r0, r4
 800c51e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c522:	f7ff bfad 	b.w	800c480 <cleanup_glue>
 800c526:	5949      	ldr	r1, [r1, r5]
 800c528:	b941      	cbnz	r1, 800c53c <_reclaim_reent+0xa0>
 800c52a:	3504      	adds	r5, #4
 800c52c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c52e:	2d80      	cmp	r5, #128	; 0x80
 800c530:	68d9      	ldr	r1, [r3, #12]
 800c532:	d1f8      	bne.n	800c526 <_reclaim_reent+0x8a>
 800c534:	4620      	mov	r0, r4
 800c536:	f003 f89f 	bl	800f678 <_free_r>
 800c53a:	e7ba      	b.n	800c4b2 <_reclaim_reent+0x16>
 800c53c:	680e      	ldr	r6, [r1, #0]
 800c53e:	4620      	mov	r0, r4
 800c540:	f003 f89a 	bl	800f678 <_free_r>
 800c544:	4631      	mov	r1, r6
 800c546:	e7ef      	b.n	800c528 <_reclaim_reent+0x8c>
 800c548:	2500      	movs	r5, #0
 800c54a:	e7ef      	b.n	800c52c <_reclaim_reent+0x90>
 800c54c:	bd70      	pop	{r4, r5, r6, pc}
 800c54e:	bf00      	nop
 800c550:	20000214 	.word	0x20000214

0800c554 <_sbrk_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d06      	ldr	r5, [pc, #24]	; (800c570 <_sbrk_r+0x1c>)
 800c558:	2300      	movs	r3, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4608      	mov	r0, r1
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	f7f6 fb72 	bl	8002c48 <_sbrk>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_sbrk_r+0x1a>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_sbrk_r+0x1a>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	200130d8 	.word	0x200130d8

0800c574 <nanf>:
 800c574:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c57c <nanf+0x8>
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	7fc00000 	.word	0x7fc00000

0800c580 <siprintf>:
 800c580:	b40e      	push	{r1, r2, r3}
 800c582:	b500      	push	{lr}
 800c584:	b09c      	sub	sp, #112	; 0x70
 800c586:	ab1d      	add	r3, sp, #116	; 0x74
 800c588:	9002      	str	r0, [sp, #8]
 800c58a:	9006      	str	r0, [sp, #24]
 800c58c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c590:	4809      	ldr	r0, [pc, #36]	; (800c5b8 <siprintf+0x38>)
 800c592:	9107      	str	r1, [sp, #28]
 800c594:	9104      	str	r1, [sp, #16]
 800c596:	4909      	ldr	r1, [pc, #36]	; (800c5bc <siprintf+0x3c>)
 800c598:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59c:	9105      	str	r1, [sp, #20]
 800c59e:	6800      	ldr	r0, [r0, #0]
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	a902      	add	r1, sp, #8
 800c5a4:	f003 f93e 	bl	800f824 <_svfiprintf_r>
 800c5a8:	9b02      	ldr	r3, [sp, #8]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	b01c      	add	sp, #112	; 0x70
 800c5b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b4:	b003      	add	sp, #12
 800c5b6:	4770      	bx	lr
 800c5b8:	20000214 	.word	0x20000214
 800c5bc:	ffff0208 	.word	0xffff0208

0800c5c0 <siscanf>:
 800c5c0:	b40e      	push	{r1, r2, r3}
 800c5c2:	b510      	push	{r4, lr}
 800c5c4:	b09f      	sub	sp, #124	; 0x7c
 800c5c6:	ac21      	add	r4, sp, #132	; 0x84
 800c5c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c5cc:	f854 2b04 	ldr.w	r2, [r4], #4
 800c5d0:	9201      	str	r2, [sp, #4]
 800c5d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c5d6:	9004      	str	r0, [sp, #16]
 800c5d8:	9008      	str	r0, [sp, #32]
 800c5da:	f7f3 fe03 	bl	80001e4 <strlen>
 800c5de:	4b0c      	ldr	r3, [pc, #48]	; (800c610 <siscanf+0x50>)
 800c5e0:	9005      	str	r0, [sp, #20]
 800c5e2:	9009      	str	r0, [sp, #36]	; 0x24
 800c5e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c5e6:	480b      	ldr	r0, [pc, #44]	; (800c614 <siscanf+0x54>)
 800c5e8:	9a01      	ldr	r2, [sp, #4]
 800c5ea:	6800      	ldr	r0, [r0, #0]
 800c5ec:	9403      	str	r4, [sp, #12]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9311      	str	r3, [sp, #68]	; 0x44
 800c5f2:	9316      	str	r3, [sp, #88]	; 0x58
 800c5f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c5f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c5fc:	a904      	add	r1, sp, #16
 800c5fe:	4623      	mov	r3, r4
 800c600:	f003 fa6a 	bl	800fad8 <__ssvfiscanf_r>
 800c604:	b01f      	add	sp, #124	; 0x7c
 800c606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c60a:	b003      	add	sp, #12
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	0800c63b 	.word	0x0800c63b
 800c614:	20000214 	.word	0x20000214

0800c618 <__sread>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	460c      	mov	r4, r1
 800c61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c620:	f003 fd24 	bl	801006c <_read_r>
 800c624:	2800      	cmp	r0, #0
 800c626:	bfab      	itete	ge
 800c628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c62a:	89a3      	ldrhlt	r3, [r4, #12]
 800c62c:	181b      	addge	r3, r3, r0
 800c62e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c632:	bfac      	ite	ge
 800c634:	6563      	strge	r3, [r4, #84]	; 0x54
 800c636:	81a3      	strhlt	r3, [r4, #12]
 800c638:	bd10      	pop	{r4, pc}

0800c63a <__seofread>:
 800c63a:	2000      	movs	r0, #0
 800c63c:	4770      	bx	lr

0800c63e <__swrite>:
 800c63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c642:	461f      	mov	r7, r3
 800c644:	898b      	ldrh	r3, [r1, #12]
 800c646:	05db      	lsls	r3, r3, #23
 800c648:	4605      	mov	r5, r0
 800c64a:	460c      	mov	r4, r1
 800c64c:	4616      	mov	r6, r2
 800c64e:	d505      	bpl.n	800c65c <__swrite+0x1e>
 800c650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c654:	2302      	movs	r3, #2
 800c656:	2200      	movs	r2, #0
 800c658:	f002 fa7e 	bl	800eb58 <_lseek_r>
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	4632      	mov	r2, r6
 800c66a:	463b      	mov	r3, r7
 800c66c:	4628      	mov	r0, r5
 800c66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c672:	f000 bf27 	b.w	800d4c4 <_write_r>

0800c676 <__sseek>:
 800c676:	b510      	push	{r4, lr}
 800c678:	460c      	mov	r4, r1
 800c67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c67e:	f002 fa6b 	bl	800eb58 <_lseek_r>
 800c682:	1c43      	adds	r3, r0, #1
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	bf15      	itete	ne
 800c688:	6560      	strne	r0, [r4, #84]	; 0x54
 800c68a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c68e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c692:	81a3      	strheq	r3, [r4, #12]
 800c694:	bf18      	it	ne
 800c696:	81a3      	strhne	r3, [r4, #12]
 800c698:	bd10      	pop	{r4, pc}

0800c69a <__sclose>:
 800c69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c69e:	f000 bf99 	b.w	800d5d4 <_close_r>

0800c6a2 <strncpy>:
 800c6a2:	b510      	push	{r4, lr}
 800c6a4:	3901      	subs	r1, #1
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	b132      	cbz	r2, 800c6b8 <strncpy+0x16>
 800c6aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6ae:	f803 4b01 	strb.w	r4, [r3], #1
 800c6b2:	3a01      	subs	r2, #1
 800c6b4:	2c00      	cmp	r4, #0
 800c6b6:	d1f7      	bne.n	800c6a8 <strncpy+0x6>
 800c6b8:	441a      	add	r2, r3
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d100      	bne.n	800c6c2 <strncpy+0x20>
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6c6:	e7f9      	b.n	800c6bc <strncpy+0x1a>

0800c6c8 <sulp>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	460d      	mov	r5, r1
 800c6ce:	ec45 4b10 	vmov	d0, r4, r5
 800c6d2:	4616      	mov	r6, r2
 800c6d4:	f002 fe6a 	bl	800f3ac <__ulp>
 800c6d8:	ec51 0b10 	vmov	r0, r1, d0
 800c6dc:	b17e      	cbz	r6, 800c6fe <sulp+0x36>
 800c6de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c6e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	dd09      	ble.n	800c6fe <sulp+0x36>
 800c6ea:	051b      	lsls	r3, r3, #20
 800c6ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c6f0:	2400      	movs	r4, #0
 800c6f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	f7f3 ff8d 	bl	8000618 <__aeabi_dmul>
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}

0800c700 <_strtod_l>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	ed2d 8b02 	vpush	{d8}
 800c708:	b09d      	sub	sp, #116	; 0x74
 800c70a:	461f      	mov	r7, r3
 800c70c:	2300      	movs	r3, #0
 800c70e:	9318      	str	r3, [sp, #96]	; 0x60
 800c710:	4ba2      	ldr	r3, [pc, #648]	; (800c99c <_strtod_l+0x29c>)
 800c712:	9213      	str	r2, [sp, #76]	; 0x4c
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	9305      	str	r3, [sp, #20]
 800c718:	4604      	mov	r4, r0
 800c71a:	4618      	mov	r0, r3
 800c71c:	4688      	mov	r8, r1
 800c71e:	f7f3 fd61 	bl	80001e4 <strlen>
 800c722:	f04f 0a00 	mov.w	sl, #0
 800c726:	4605      	mov	r5, r0
 800c728:	f04f 0b00 	mov.w	fp, #0
 800c72c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c732:	781a      	ldrb	r2, [r3, #0]
 800c734:	2a2b      	cmp	r2, #43	; 0x2b
 800c736:	d04e      	beq.n	800c7d6 <_strtod_l+0xd6>
 800c738:	d83b      	bhi.n	800c7b2 <_strtod_l+0xb2>
 800c73a:	2a0d      	cmp	r2, #13
 800c73c:	d834      	bhi.n	800c7a8 <_strtod_l+0xa8>
 800c73e:	2a08      	cmp	r2, #8
 800c740:	d834      	bhi.n	800c7ac <_strtod_l+0xac>
 800c742:	2a00      	cmp	r2, #0
 800c744:	d03e      	beq.n	800c7c4 <_strtod_l+0xc4>
 800c746:	2300      	movs	r3, #0
 800c748:	930a      	str	r3, [sp, #40]	; 0x28
 800c74a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c74c:	7833      	ldrb	r3, [r6, #0]
 800c74e:	2b30      	cmp	r3, #48	; 0x30
 800c750:	f040 80b0 	bne.w	800c8b4 <_strtod_l+0x1b4>
 800c754:	7873      	ldrb	r3, [r6, #1]
 800c756:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c75a:	2b58      	cmp	r3, #88	; 0x58
 800c75c:	d168      	bne.n	800c830 <_strtod_l+0x130>
 800c75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	ab18      	add	r3, sp, #96	; 0x60
 800c764:	9702      	str	r7, [sp, #8]
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	4a8d      	ldr	r2, [pc, #564]	; (800c9a0 <_strtod_l+0x2a0>)
 800c76a:	ab19      	add	r3, sp, #100	; 0x64
 800c76c:	a917      	add	r1, sp, #92	; 0x5c
 800c76e:	4620      	mov	r0, r4
 800c770:	f001 fee6 	bl	800e540 <__gethex>
 800c774:	f010 0707 	ands.w	r7, r0, #7
 800c778:	4605      	mov	r5, r0
 800c77a:	d005      	beq.n	800c788 <_strtod_l+0x88>
 800c77c:	2f06      	cmp	r7, #6
 800c77e:	d12c      	bne.n	800c7da <_strtod_l+0xda>
 800c780:	3601      	adds	r6, #1
 800c782:	2300      	movs	r3, #0
 800c784:	9617      	str	r6, [sp, #92]	; 0x5c
 800c786:	930a      	str	r3, [sp, #40]	; 0x28
 800c788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f040 8590 	bne.w	800d2b0 <_strtod_l+0xbb0>
 800c790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c792:	b1eb      	cbz	r3, 800c7d0 <_strtod_l+0xd0>
 800c794:	4652      	mov	r2, sl
 800c796:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c79a:	ec43 2b10 	vmov	d0, r2, r3
 800c79e:	b01d      	add	sp, #116	; 0x74
 800c7a0:	ecbd 8b02 	vpop	{d8}
 800c7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a8:	2a20      	cmp	r2, #32
 800c7aa:	d1cc      	bne.n	800c746 <_strtod_l+0x46>
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	9317      	str	r3, [sp, #92]	; 0x5c
 800c7b0:	e7be      	b.n	800c730 <_strtod_l+0x30>
 800c7b2:	2a2d      	cmp	r2, #45	; 0x2d
 800c7b4:	d1c7      	bne.n	800c746 <_strtod_l+0x46>
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	920a      	str	r2, [sp, #40]	; 0x28
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1c2      	bne.n	800c74a <_strtod_l+0x4a>
 800c7c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f040 856e 	bne.w	800d2ac <_strtod_l+0xbac>
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	465b      	mov	r3, fp
 800c7d4:	e7e1      	b.n	800c79a <_strtod_l+0x9a>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	e7ee      	b.n	800c7b8 <_strtod_l+0xb8>
 800c7da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c7dc:	b13a      	cbz	r2, 800c7ee <_strtod_l+0xee>
 800c7de:	2135      	movs	r1, #53	; 0x35
 800c7e0:	a81a      	add	r0, sp, #104	; 0x68
 800c7e2:	f002 feee 	bl	800f5c2 <__copybits>
 800c7e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f002 faad 	bl	800ed48 <_Bfree>
 800c7ee:	3f01      	subs	r7, #1
 800c7f0:	2f04      	cmp	r7, #4
 800c7f2:	d806      	bhi.n	800c802 <_strtod_l+0x102>
 800c7f4:	e8df f007 	tbb	[pc, r7]
 800c7f8:	1714030a 	.word	0x1714030a
 800c7fc:	0a          	.byte	0x0a
 800c7fd:	00          	.byte	0x00
 800c7fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c802:	0728      	lsls	r0, r5, #28
 800c804:	d5c0      	bpl.n	800c788 <_strtod_l+0x88>
 800c806:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c80a:	e7bd      	b.n	800c788 <_strtod_l+0x88>
 800c80c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c810:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c812:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c816:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c81a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c81e:	e7f0      	b.n	800c802 <_strtod_l+0x102>
 800c820:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c9a4 <_strtod_l+0x2a4>
 800c824:	e7ed      	b.n	800c802 <_strtod_l+0x102>
 800c826:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c82a:	f04f 3aff 	mov.w	sl, #4294967295
 800c82e:	e7e8      	b.n	800c802 <_strtod_l+0x102>
 800c830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	9217      	str	r2, [sp, #92]	; 0x5c
 800c836:	785b      	ldrb	r3, [r3, #1]
 800c838:	2b30      	cmp	r3, #48	; 0x30
 800c83a:	d0f9      	beq.n	800c830 <_strtod_l+0x130>
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0a3      	beq.n	800c788 <_strtod_l+0x88>
 800c840:	2301      	movs	r3, #1
 800c842:	f04f 0900 	mov.w	r9, #0
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c84a:	9308      	str	r3, [sp, #32]
 800c84c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c850:	464f      	mov	r7, r9
 800c852:	220a      	movs	r2, #10
 800c854:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c856:	7806      	ldrb	r6, [r0, #0]
 800c858:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c85c:	b2d9      	uxtb	r1, r3
 800c85e:	2909      	cmp	r1, #9
 800c860:	d92a      	bls.n	800c8b8 <_strtod_l+0x1b8>
 800c862:	9905      	ldr	r1, [sp, #20]
 800c864:	462a      	mov	r2, r5
 800c866:	f003 fc97 	bl	8010198 <strncmp>
 800c86a:	b398      	cbz	r0, 800c8d4 <_strtod_l+0x1d4>
 800c86c:	2000      	movs	r0, #0
 800c86e:	4632      	mov	r2, r6
 800c870:	463d      	mov	r5, r7
 800c872:	9005      	str	r0, [sp, #20]
 800c874:	4603      	mov	r3, r0
 800c876:	2a65      	cmp	r2, #101	; 0x65
 800c878:	d001      	beq.n	800c87e <_strtod_l+0x17e>
 800c87a:	2a45      	cmp	r2, #69	; 0x45
 800c87c:	d118      	bne.n	800c8b0 <_strtod_l+0x1b0>
 800c87e:	b91d      	cbnz	r5, 800c888 <_strtod_l+0x188>
 800c880:	9a04      	ldr	r2, [sp, #16]
 800c882:	4302      	orrs	r2, r0
 800c884:	d09e      	beq.n	800c7c4 <_strtod_l+0xc4>
 800c886:	2500      	movs	r5, #0
 800c888:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c88c:	f108 0201 	add.w	r2, r8, #1
 800c890:	9217      	str	r2, [sp, #92]	; 0x5c
 800c892:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c896:	2a2b      	cmp	r2, #43	; 0x2b
 800c898:	d075      	beq.n	800c986 <_strtod_l+0x286>
 800c89a:	2a2d      	cmp	r2, #45	; 0x2d
 800c89c:	d07b      	beq.n	800c996 <_strtod_l+0x296>
 800c89e:	f04f 0c00 	mov.w	ip, #0
 800c8a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c8a6:	2909      	cmp	r1, #9
 800c8a8:	f240 8082 	bls.w	800c9b0 <_strtod_l+0x2b0>
 800c8ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c8b0:	2600      	movs	r6, #0
 800c8b2:	e09d      	b.n	800c9f0 <_strtod_l+0x2f0>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e7c4      	b.n	800c842 <_strtod_l+0x142>
 800c8b8:	2f08      	cmp	r7, #8
 800c8ba:	bfd8      	it	le
 800c8bc:	9907      	ldrle	r1, [sp, #28]
 800c8be:	f100 0001 	add.w	r0, r0, #1
 800c8c2:	bfda      	itte	le
 800c8c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8c8:	9307      	strle	r3, [sp, #28]
 800c8ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c8ce:	3701      	adds	r7, #1
 800c8d0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c8d2:	e7bf      	b.n	800c854 <_strtod_l+0x154>
 800c8d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8d6:	195a      	adds	r2, r3, r5
 800c8d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8da:	5d5a      	ldrb	r2, [r3, r5]
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	d037      	beq.n	800c950 <_strtod_l+0x250>
 800c8e0:	9005      	str	r0, [sp, #20]
 800c8e2:	463d      	mov	r5, r7
 800c8e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c8e8:	2b09      	cmp	r3, #9
 800c8ea:	d912      	bls.n	800c912 <_strtod_l+0x212>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e7c2      	b.n	800c876 <_strtod_l+0x176>
 800c8f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c8f6:	785a      	ldrb	r2, [r3, #1]
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	2a30      	cmp	r2, #48	; 0x30
 800c8fc:	d0f8      	beq.n	800c8f0 <_strtod_l+0x1f0>
 800c8fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c902:	2b08      	cmp	r3, #8
 800c904:	f200 84d9 	bhi.w	800d2ba <_strtod_l+0xbba>
 800c908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c90a:	9005      	str	r0, [sp, #20]
 800c90c:	2000      	movs	r0, #0
 800c90e:	9308      	str	r3, [sp, #32]
 800c910:	4605      	mov	r5, r0
 800c912:	3a30      	subs	r2, #48	; 0x30
 800c914:	f100 0301 	add.w	r3, r0, #1
 800c918:	d014      	beq.n	800c944 <_strtod_l+0x244>
 800c91a:	9905      	ldr	r1, [sp, #20]
 800c91c:	4419      	add	r1, r3
 800c91e:	9105      	str	r1, [sp, #20]
 800c920:	462b      	mov	r3, r5
 800c922:	eb00 0e05 	add.w	lr, r0, r5
 800c926:	210a      	movs	r1, #10
 800c928:	4573      	cmp	r3, lr
 800c92a:	d113      	bne.n	800c954 <_strtod_l+0x254>
 800c92c:	182b      	adds	r3, r5, r0
 800c92e:	2b08      	cmp	r3, #8
 800c930:	f105 0501 	add.w	r5, r5, #1
 800c934:	4405      	add	r5, r0
 800c936:	dc1c      	bgt.n	800c972 <_strtod_l+0x272>
 800c938:	9907      	ldr	r1, [sp, #28]
 800c93a:	230a      	movs	r3, #10
 800c93c:	fb03 2301 	mla	r3, r3, r1, r2
 800c940:	9307      	str	r3, [sp, #28]
 800c942:	2300      	movs	r3, #0
 800c944:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c946:	1c51      	adds	r1, r2, #1
 800c948:	9117      	str	r1, [sp, #92]	; 0x5c
 800c94a:	7852      	ldrb	r2, [r2, #1]
 800c94c:	4618      	mov	r0, r3
 800c94e:	e7c9      	b.n	800c8e4 <_strtod_l+0x1e4>
 800c950:	4638      	mov	r0, r7
 800c952:	e7d2      	b.n	800c8fa <_strtod_l+0x1fa>
 800c954:	2b08      	cmp	r3, #8
 800c956:	dc04      	bgt.n	800c962 <_strtod_l+0x262>
 800c958:	9e07      	ldr	r6, [sp, #28]
 800c95a:	434e      	muls	r6, r1
 800c95c:	9607      	str	r6, [sp, #28]
 800c95e:	3301      	adds	r3, #1
 800c960:	e7e2      	b.n	800c928 <_strtod_l+0x228>
 800c962:	f103 0c01 	add.w	ip, r3, #1
 800c966:	f1bc 0f10 	cmp.w	ip, #16
 800c96a:	bfd8      	it	le
 800c96c:	fb01 f909 	mulle.w	r9, r1, r9
 800c970:	e7f5      	b.n	800c95e <_strtod_l+0x25e>
 800c972:	2d10      	cmp	r5, #16
 800c974:	bfdc      	itt	le
 800c976:	230a      	movle	r3, #10
 800c978:	fb03 2909 	mlale	r9, r3, r9, r2
 800c97c:	e7e1      	b.n	800c942 <_strtod_l+0x242>
 800c97e:	2300      	movs	r3, #0
 800c980:	9305      	str	r3, [sp, #20]
 800c982:	2301      	movs	r3, #1
 800c984:	e77c      	b.n	800c880 <_strtod_l+0x180>
 800c986:	f04f 0c00 	mov.w	ip, #0
 800c98a:	f108 0202 	add.w	r2, r8, #2
 800c98e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c990:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c994:	e785      	b.n	800c8a2 <_strtod_l+0x1a2>
 800c996:	f04f 0c01 	mov.w	ip, #1
 800c99a:	e7f6      	b.n	800c98a <_strtod_l+0x28a>
 800c99c:	08011a48 	.word	0x08011a48
 800c9a0:	080118fc 	.word	0x080118fc
 800c9a4:	7ff00000 	.word	0x7ff00000
 800c9a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9aa:	1c51      	adds	r1, r2, #1
 800c9ac:	9117      	str	r1, [sp, #92]	; 0x5c
 800c9ae:	7852      	ldrb	r2, [r2, #1]
 800c9b0:	2a30      	cmp	r2, #48	; 0x30
 800c9b2:	d0f9      	beq.n	800c9a8 <_strtod_l+0x2a8>
 800c9b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c9b8:	2908      	cmp	r1, #8
 800c9ba:	f63f af79 	bhi.w	800c8b0 <_strtod_l+0x1b0>
 800c9be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c9c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9c4:	9206      	str	r2, [sp, #24]
 800c9c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9c8:	1c51      	adds	r1, r2, #1
 800c9ca:	9117      	str	r1, [sp, #92]	; 0x5c
 800c9cc:	7852      	ldrb	r2, [r2, #1]
 800c9ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c9d2:	2e09      	cmp	r6, #9
 800c9d4:	d937      	bls.n	800ca46 <_strtod_l+0x346>
 800c9d6:	9e06      	ldr	r6, [sp, #24]
 800c9d8:	1b89      	subs	r1, r1, r6
 800c9da:	2908      	cmp	r1, #8
 800c9dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c9e0:	dc02      	bgt.n	800c9e8 <_strtod_l+0x2e8>
 800c9e2:	4576      	cmp	r6, lr
 800c9e4:	bfa8      	it	ge
 800c9e6:	4676      	movge	r6, lr
 800c9e8:	f1bc 0f00 	cmp.w	ip, #0
 800c9ec:	d000      	beq.n	800c9f0 <_strtod_l+0x2f0>
 800c9ee:	4276      	negs	r6, r6
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	d14d      	bne.n	800ca90 <_strtod_l+0x390>
 800c9f4:	9904      	ldr	r1, [sp, #16]
 800c9f6:	4301      	orrs	r1, r0
 800c9f8:	f47f aec6 	bne.w	800c788 <_strtod_l+0x88>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f47f aee1 	bne.w	800c7c4 <_strtod_l+0xc4>
 800ca02:	2a69      	cmp	r2, #105	; 0x69
 800ca04:	d027      	beq.n	800ca56 <_strtod_l+0x356>
 800ca06:	dc24      	bgt.n	800ca52 <_strtod_l+0x352>
 800ca08:	2a49      	cmp	r2, #73	; 0x49
 800ca0a:	d024      	beq.n	800ca56 <_strtod_l+0x356>
 800ca0c:	2a4e      	cmp	r2, #78	; 0x4e
 800ca0e:	f47f aed9 	bne.w	800c7c4 <_strtod_l+0xc4>
 800ca12:	499f      	ldr	r1, [pc, #636]	; (800cc90 <_strtod_l+0x590>)
 800ca14:	a817      	add	r0, sp, #92	; 0x5c
 800ca16:	f001 ffeb 	bl	800e9f0 <__match>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	f43f aed2 	beq.w	800c7c4 <_strtod_l+0xc4>
 800ca20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b28      	cmp	r3, #40	; 0x28
 800ca26:	d12d      	bne.n	800ca84 <_strtod_l+0x384>
 800ca28:	499a      	ldr	r1, [pc, #616]	; (800cc94 <_strtod_l+0x594>)
 800ca2a:	aa1a      	add	r2, sp, #104	; 0x68
 800ca2c:	a817      	add	r0, sp, #92	; 0x5c
 800ca2e:	f001 fff3 	bl	800ea18 <__hexnan>
 800ca32:	2805      	cmp	r0, #5
 800ca34:	d126      	bne.n	800ca84 <_strtod_l+0x384>
 800ca36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ca3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ca40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ca44:	e6a0      	b.n	800c788 <_strtod_l+0x88>
 800ca46:	210a      	movs	r1, #10
 800ca48:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ca4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ca50:	e7b9      	b.n	800c9c6 <_strtod_l+0x2c6>
 800ca52:	2a6e      	cmp	r2, #110	; 0x6e
 800ca54:	e7db      	b.n	800ca0e <_strtod_l+0x30e>
 800ca56:	4990      	ldr	r1, [pc, #576]	; (800cc98 <_strtod_l+0x598>)
 800ca58:	a817      	add	r0, sp, #92	; 0x5c
 800ca5a:	f001 ffc9 	bl	800e9f0 <__match>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f43f aeb0 	beq.w	800c7c4 <_strtod_l+0xc4>
 800ca64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca66:	498d      	ldr	r1, [pc, #564]	; (800cc9c <_strtod_l+0x59c>)
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	a817      	add	r0, sp, #92	; 0x5c
 800ca6c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca6e:	f001 ffbf 	bl	800e9f0 <__match>
 800ca72:	b910      	cbnz	r0, 800ca7a <_strtod_l+0x37a>
 800ca74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca76:	3301      	adds	r3, #1
 800ca78:	9317      	str	r3, [sp, #92]	; 0x5c
 800ca7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ccac <_strtod_l+0x5ac>
 800ca7e:	f04f 0a00 	mov.w	sl, #0
 800ca82:	e681      	b.n	800c788 <_strtod_l+0x88>
 800ca84:	4886      	ldr	r0, [pc, #536]	; (800cca0 <_strtod_l+0x5a0>)
 800ca86:	f003 fb03 	bl	8010090 <nan>
 800ca8a:	ec5b ab10 	vmov	sl, fp, d0
 800ca8e:	e67b      	b.n	800c788 <_strtod_l+0x88>
 800ca90:	9b05      	ldr	r3, [sp, #20]
 800ca92:	9807      	ldr	r0, [sp, #28]
 800ca94:	1af3      	subs	r3, r6, r3
 800ca96:	2f00      	cmp	r7, #0
 800ca98:	bf08      	it	eq
 800ca9a:	462f      	moveq	r7, r5
 800ca9c:	2d10      	cmp	r5, #16
 800ca9e:	9306      	str	r3, [sp, #24]
 800caa0:	46a8      	mov	r8, r5
 800caa2:	bfa8      	it	ge
 800caa4:	f04f 0810 	movge.w	r8, #16
 800caa8:	f7f3 fd3c 	bl	8000524 <__aeabi_ui2d>
 800caac:	2d09      	cmp	r5, #9
 800caae:	4682      	mov	sl, r0
 800cab0:	468b      	mov	fp, r1
 800cab2:	dd13      	ble.n	800cadc <_strtod_l+0x3dc>
 800cab4:	4b7b      	ldr	r3, [pc, #492]	; (800cca4 <_strtod_l+0x5a4>)
 800cab6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800caba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cabe:	f7f3 fdab 	bl	8000618 <__aeabi_dmul>
 800cac2:	4682      	mov	sl, r0
 800cac4:	4648      	mov	r0, r9
 800cac6:	468b      	mov	fp, r1
 800cac8:	f7f3 fd2c 	bl	8000524 <__aeabi_ui2d>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4650      	mov	r0, sl
 800cad2:	4659      	mov	r1, fp
 800cad4:	f7f3 fbea 	bl	80002ac <__adddf3>
 800cad8:	4682      	mov	sl, r0
 800cada:	468b      	mov	fp, r1
 800cadc:	2d0f      	cmp	r5, #15
 800cade:	dc38      	bgt.n	800cb52 <_strtod_l+0x452>
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f43f ae50 	beq.w	800c788 <_strtod_l+0x88>
 800cae8:	dd24      	ble.n	800cb34 <_strtod_l+0x434>
 800caea:	2b16      	cmp	r3, #22
 800caec:	dc0b      	bgt.n	800cb06 <_strtod_l+0x406>
 800caee:	496d      	ldr	r1, [pc, #436]	; (800cca4 <_strtod_l+0x5a4>)
 800caf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800caf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caf8:	4652      	mov	r2, sl
 800cafa:	465b      	mov	r3, fp
 800cafc:	f7f3 fd8c 	bl	8000618 <__aeabi_dmul>
 800cb00:	4682      	mov	sl, r0
 800cb02:	468b      	mov	fp, r1
 800cb04:	e640      	b.n	800c788 <_strtod_l+0x88>
 800cb06:	9a06      	ldr	r2, [sp, #24]
 800cb08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	db20      	blt.n	800cb52 <_strtod_l+0x452>
 800cb10:	4c64      	ldr	r4, [pc, #400]	; (800cca4 <_strtod_l+0x5a4>)
 800cb12:	f1c5 050f 	rsb	r5, r5, #15
 800cb16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb1a:	4652      	mov	r2, sl
 800cb1c:	465b      	mov	r3, fp
 800cb1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb22:	f7f3 fd79 	bl	8000618 <__aeabi_dmul>
 800cb26:	9b06      	ldr	r3, [sp, #24]
 800cb28:	1b5d      	subs	r5, r3, r5
 800cb2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb32:	e7e3      	b.n	800cafc <_strtod_l+0x3fc>
 800cb34:	9b06      	ldr	r3, [sp, #24]
 800cb36:	3316      	adds	r3, #22
 800cb38:	db0b      	blt.n	800cb52 <_strtod_l+0x452>
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	1b9e      	subs	r6, r3, r6
 800cb3e:	4b59      	ldr	r3, [pc, #356]	; (800cca4 <_strtod_l+0x5a4>)
 800cb40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cb44:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb48:	4650      	mov	r0, sl
 800cb4a:	4659      	mov	r1, fp
 800cb4c:	f7f3 fe8e 	bl	800086c <__aeabi_ddiv>
 800cb50:	e7d6      	b.n	800cb00 <_strtod_l+0x400>
 800cb52:	9b06      	ldr	r3, [sp, #24]
 800cb54:	eba5 0808 	sub.w	r8, r5, r8
 800cb58:	4498      	add	r8, r3
 800cb5a:	f1b8 0f00 	cmp.w	r8, #0
 800cb5e:	dd74      	ble.n	800cc4a <_strtod_l+0x54a>
 800cb60:	f018 030f 	ands.w	r3, r8, #15
 800cb64:	d00a      	beq.n	800cb7c <_strtod_l+0x47c>
 800cb66:	494f      	ldr	r1, [pc, #316]	; (800cca4 <_strtod_l+0x5a4>)
 800cb68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	465b      	mov	r3, fp
 800cb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb74:	f7f3 fd50 	bl	8000618 <__aeabi_dmul>
 800cb78:	4682      	mov	sl, r0
 800cb7a:	468b      	mov	fp, r1
 800cb7c:	f038 080f 	bics.w	r8, r8, #15
 800cb80:	d04f      	beq.n	800cc22 <_strtod_l+0x522>
 800cb82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cb86:	dd22      	ble.n	800cbce <_strtod_l+0x4ce>
 800cb88:	2500      	movs	r5, #0
 800cb8a:	462e      	mov	r6, r5
 800cb8c:	9507      	str	r5, [sp, #28]
 800cb8e:	9505      	str	r5, [sp, #20]
 800cb90:	2322      	movs	r3, #34	; 0x22
 800cb92:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ccac <_strtod_l+0x5ac>
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	f04f 0a00 	mov.w	sl, #0
 800cb9c:	9b07      	ldr	r3, [sp, #28]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f43f adf2 	beq.w	800c788 <_strtod_l+0x88>
 800cba4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cba6:	4620      	mov	r0, r4
 800cba8:	f002 f8ce 	bl	800ed48 <_Bfree>
 800cbac:	9905      	ldr	r1, [sp, #20]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f002 f8ca 	bl	800ed48 <_Bfree>
 800cbb4:	4631      	mov	r1, r6
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f002 f8c6 	bl	800ed48 <_Bfree>
 800cbbc:	9907      	ldr	r1, [sp, #28]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f002 f8c2 	bl	800ed48 <_Bfree>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f002 f8be 	bl	800ed48 <_Bfree>
 800cbcc:	e5dc      	b.n	800c788 <_strtod_l+0x88>
 800cbce:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <_strtod_l+0x5a8>)
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cbd8:	4650      	mov	r0, sl
 800cbda:	4659      	mov	r1, fp
 800cbdc:	4699      	mov	r9, r3
 800cbde:	f1b8 0f01 	cmp.w	r8, #1
 800cbe2:	dc21      	bgt.n	800cc28 <_strtod_l+0x528>
 800cbe4:	b10b      	cbz	r3, 800cbea <_strtod_l+0x4ea>
 800cbe6:	4682      	mov	sl, r0
 800cbe8:	468b      	mov	fp, r1
 800cbea:	4b2f      	ldr	r3, [pc, #188]	; (800cca8 <_strtod_l+0x5a8>)
 800cbec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cbf0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cbf4:	4652      	mov	r2, sl
 800cbf6:	465b      	mov	r3, fp
 800cbf8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cbfc:	f7f3 fd0c 	bl	8000618 <__aeabi_dmul>
 800cc00:	4b2a      	ldr	r3, [pc, #168]	; (800ccac <_strtod_l+0x5ac>)
 800cc02:	460a      	mov	r2, r1
 800cc04:	400b      	ands	r3, r1
 800cc06:	492a      	ldr	r1, [pc, #168]	; (800ccb0 <_strtod_l+0x5b0>)
 800cc08:	428b      	cmp	r3, r1
 800cc0a:	4682      	mov	sl, r0
 800cc0c:	d8bc      	bhi.n	800cb88 <_strtod_l+0x488>
 800cc0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc12:	428b      	cmp	r3, r1
 800cc14:	bf86      	itte	hi
 800cc16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ccb4 <_strtod_l+0x5b4>
 800cc1a:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cc22:	2300      	movs	r3, #0
 800cc24:	9304      	str	r3, [sp, #16]
 800cc26:	e084      	b.n	800cd32 <_strtod_l+0x632>
 800cc28:	f018 0f01 	tst.w	r8, #1
 800cc2c:	d005      	beq.n	800cc3a <_strtod_l+0x53a>
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	f7f3 fcf0 	bl	8000618 <__aeabi_dmul>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	9a04      	ldr	r2, [sp, #16]
 800cc3c:	3208      	adds	r2, #8
 800cc3e:	f109 0901 	add.w	r9, r9, #1
 800cc42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cc46:	9204      	str	r2, [sp, #16]
 800cc48:	e7c9      	b.n	800cbde <_strtod_l+0x4de>
 800cc4a:	d0ea      	beq.n	800cc22 <_strtod_l+0x522>
 800cc4c:	f1c8 0800 	rsb	r8, r8, #0
 800cc50:	f018 020f 	ands.w	r2, r8, #15
 800cc54:	d00a      	beq.n	800cc6c <_strtod_l+0x56c>
 800cc56:	4b13      	ldr	r3, [pc, #76]	; (800cca4 <_strtod_l+0x5a4>)
 800cc58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	4659      	mov	r1, fp
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fe02 	bl	800086c <__aeabi_ddiv>
 800cc68:	4682      	mov	sl, r0
 800cc6a:	468b      	mov	fp, r1
 800cc6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cc70:	d0d7      	beq.n	800cc22 <_strtod_l+0x522>
 800cc72:	f1b8 0f1f 	cmp.w	r8, #31
 800cc76:	dd1f      	ble.n	800ccb8 <_strtod_l+0x5b8>
 800cc78:	2500      	movs	r5, #0
 800cc7a:	462e      	mov	r6, r5
 800cc7c:	9507      	str	r5, [sp, #28]
 800cc7e:	9505      	str	r5, [sp, #20]
 800cc80:	2322      	movs	r3, #34	; 0x22
 800cc82:	f04f 0a00 	mov.w	sl, #0
 800cc86:	f04f 0b00 	mov.w	fp, #0
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	e786      	b.n	800cb9c <_strtod_l+0x49c>
 800cc8e:	bf00      	nop
 800cc90:	080118d2 	.word	0x080118d2
 800cc94:	08011910 	.word	0x08011910
 800cc98:	080118ca 	.word	0x080118ca
 800cc9c:	08011953 	.word	0x08011953
 800cca0:	0801174b 	.word	0x0801174b
 800cca4:	08011ae0 	.word	0x08011ae0
 800cca8:	08011ab8 	.word	0x08011ab8
 800ccac:	7ff00000 	.word	0x7ff00000
 800ccb0:	7ca00000 	.word	0x7ca00000
 800ccb4:	7fefffff 	.word	0x7fefffff
 800ccb8:	f018 0310 	ands.w	r3, r8, #16
 800ccbc:	bf18      	it	ne
 800ccbe:	236a      	movne	r3, #106	; 0x6a
 800ccc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d070 <_strtod_l+0x970>
 800ccc4:	9304      	str	r3, [sp, #16]
 800ccc6:	4650      	mov	r0, sl
 800ccc8:	4659      	mov	r1, fp
 800ccca:	2300      	movs	r3, #0
 800cccc:	f018 0f01 	tst.w	r8, #1
 800ccd0:	d004      	beq.n	800ccdc <_strtod_l+0x5dc>
 800ccd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ccd6:	f7f3 fc9f 	bl	8000618 <__aeabi_dmul>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cce0:	f109 0908 	add.w	r9, r9, #8
 800cce4:	d1f2      	bne.n	800cccc <_strtod_l+0x5cc>
 800cce6:	b10b      	cbz	r3, 800ccec <_strtod_l+0x5ec>
 800cce8:	4682      	mov	sl, r0
 800ccea:	468b      	mov	fp, r1
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	b1c3      	cbz	r3, 800cd22 <_strtod_l+0x622>
 800ccf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ccf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	4659      	mov	r1, fp
 800ccfc:	dd11      	ble.n	800cd22 <_strtod_l+0x622>
 800ccfe:	2b1f      	cmp	r3, #31
 800cd00:	f340 8124 	ble.w	800cf4c <_strtod_l+0x84c>
 800cd04:	2b34      	cmp	r3, #52	; 0x34
 800cd06:	bfde      	ittt	le
 800cd08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cd0c:	f04f 33ff 	movle.w	r3, #4294967295
 800cd10:	fa03 f202 	lslle.w	r2, r3, r2
 800cd14:	f04f 0a00 	mov.w	sl, #0
 800cd18:	bfcc      	ite	gt
 800cd1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cd1e:	ea02 0b01 	andle.w	fp, r2, r1
 800cd22:	2200      	movs	r2, #0
 800cd24:	2300      	movs	r3, #0
 800cd26:	4650      	mov	r0, sl
 800cd28:	4659      	mov	r1, fp
 800cd2a:	f7f3 fedd 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d1a2      	bne.n	800cc78 <_strtod_l+0x578>
 800cd32:	9b07      	ldr	r3, [sp, #28]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	9908      	ldr	r1, [sp, #32]
 800cd38:	462b      	mov	r3, r5
 800cd3a:	463a      	mov	r2, r7
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f002 f86b 	bl	800ee18 <__s2b>
 800cd42:	9007      	str	r0, [sp, #28]
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f43f af1f 	beq.w	800cb88 <_strtod_l+0x488>
 800cd4a:	9b05      	ldr	r3, [sp, #20]
 800cd4c:	1b9e      	subs	r6, r3, r6
 800cd4e:	9b06      	ldr	r3, [sp, #24]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	bfb4      	ite	lt
 800cd54:	4633      	movlt	r3, r6
 800cd56:	2300      	movge	r3, #0
 800cd58:	930c      	str	r3, [sp, #48]	; 0x30
 800cd5a:	9b06      	ldr	r3, [sp, #24]
 800cd5c:	2500      	movs	r5, #0
 800cd5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd62:	9312      	str	r3, [sp, #72]	; 0x48
 800cd64:	462e      	mov	r6, r5
 800cd66:	9b07      	ldr	r3, [sp, #28]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	6859      	ldr	r1, [r3, #4]
 800cd6c:	f001 ffac 	bl	800ecc8 <_Balloc>
 800cd70:	9005      	str	r0, [sp, #20]
 800cd72:	2800      	cmp	r0, #0
 800cd74:	f43f af0c 	beq.w	800cb90 <_strtod_l+0x490>
 800cd78:	9b07      	ldr	r3, [sp, #28]
 800cd7a:	691a      	ldr	r2, [r3, #16]
 800cd7c:	3202      	adds	r2, #2
 800cd7e:	f103 010c 	add.w	r1, r3, #12
 800cd82:	0092      	lsls	r2, r2, #2
 800cd84:	300c      	adds	r0, #12
 800cd86:	f7fe fafc 	bl	800b382 <memcpy>
 800cd8a:	ec4b ab10 	vmov	d0, sl, fp
 800cd8e:	aa1a      	add	r2, sp, #104	; 0x68
 800cd90:	a919      	add	r1, sp, #100	; 0x64
 800cd92:	4620      	mov	r0, r4
 800cd94:	f002 fb86 	bl	800f4a4 <__d2b>
 800cd98:	ec4b ab18 	vmov	d8, sl, fp
 800cd9c:	9018      	str	r0, [sp, #96]	; 0x60
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	f43f aef6 	beq.w	800cb90 <_strtod_l+0x490>
 800cda4:	2101      	movs	r1, #1
 800cda6:	4620      	mov	r0, r4
 800cda8:	f002 f8d0 	bl	800ef4c <__i2b>
 800cdac:	4606      	mov	r6, r0
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f43f aeee 	beq.w	800cb90 <_strtod_l+0x490>
 800cdb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdb6:	9904      	ldr	r1, [sp, #16]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bfab      	itete	ge
 800cdbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cdbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cdc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cdc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cdc6:	bfac      	ite	ge
 800cdc8:	eb03 0902 	addge.w	r9, r3, r2
 800cdcc:	1ad7      	sublt	r7, r2, r3
 800cdce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cdd0:	eba3 0801 	sub.w	r8, r3, r1
 800cdd4:	4490      	add	r8, r2
 800cdd6:	4ba1      	ldr	r3, [pc, #644]	; (800d05c <_strtod_l+0x95c>)
 800cdd8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cddc:	4598      	cmp	r8, r3
 800cdde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cde2:	f280 80c7 	bge.w	800cf74 <_strtod_l+0x874>
 800cde6:	eba3 0308 	sub.w	r3, r3, r8
 800cdea:	2b1f      	cmp	r3, #31
 800cdec:	eba2 0203 	sub.w	r2, r2, r3
 800cdf0:	f04f 0101 	mov.w	r1, #1
 800cdf4:	f300 80b1 	bgt.w	800cf5a <_strtod_l+0x85a>
 800cdf8:	fa01 f303 	lsl.w	r3, r1, r3
 800cdfc:	930d      	str	r3, [sp, #52]	; 0x34
 800cdfe:	2300      	movs	r3, #0
 800ce00:	9308      	str	r3, [sp, #32]
 800ce02:	eb09 0802 	add.w	r8, r9, r2
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	45c1      	cmp	r9, r8
 800ce0a:	4417      	add	r7, r2
 800ce0c:	441f      	add	r7, r3
 800ce0e:	464b      	mov	r3, r9
 800ce10:	bfa8      	it	ge
 800ce12:	4643      	movge	r3, r8
 800ce14:	42bb      	cmp	r3, r7
 800ce16:	bfa8      	it	ge
 800ce18:	463b      	movge	r3, r7
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfc2      	ittt	gt
 800ce1e:	eba8 0803 	subgt.w	r8, r8, r3
 800ce22:	1aff      	subgt	r7, r7, r3
 800ce24:	eba9 0903 	subgt.w	r9, r9, r3
 800ce28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dd17      	ble.n	800ce5e <_strtod_l+0x75e>
 800ce2e:	4631      	mov	r1, r6
 800ce30:	461a      	mov	r2, r3
 800ce32:	4620      	mov	r0, r4
 800ce34:	f002 f94a 	bl	800f0cc <__pow5mult>
 800ce38:	4606      	mov	r6, r0
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	f43f aea8 	beq.w	800cb90 <_strtod_l+0x490>
 800ce40:	4601      	mov	r1, r0
 800ce42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce44:	4620      	mov	r0, r4
 800ce46:	f002 f897 	bl	800ef78 <__multiply>
 800ce4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	f43f ae9f 	beq.w	800cb90 <_strtod_l+0x490>
 800ce52:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce54:	4620      	mov	r0, r4
 800ce56:	f001 ff77 	bl	800ed48 <_Bfree>
 800ce5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce5c:	9318      	str	r3, [sp, #96]	; 0x60
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	f300 808c 	bgt.w	800cf7e <_strtod_l+0x87e>
 800ce66:	9b06      	ldr	r3, [sp, #24]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	dd08      	ble.n	800ce7e <_strtod_l+0x77e>
 800ce6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce6e:	9905      	ldr	r1, [sp, #20]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f002 f92b 	bl	800f0cc <__pow5mult>
 800ce76:	9005      	str	r0, [sp, #20]
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f43f ae89 	beq.w	800cb90 <_strtod_l+0x490>
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	dd08      	ble.n	800ce94 <_strtod_l+0x794>
 800ce82:	9905      	ldr	r1, [sp, #20]
 800ce84:	463a      	mov	r2, r7
 800ce86:	4620      	mov	r0, r4
 800ce88:	f002 f97a 	bl	800f180 <__lshift>
 800ce8c:	9005      	str	r0, [sp, #20]
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f43f ae7e 	beq.w	800cb90 <_strtod_l+0x490>
 800ce94:	f1b9 0f00 	cmp.w	r9, #0
 800ce98:	dd08      	ble.n	800ceac <_strtod_l+0x7ac>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	464a      	mov	r2, r9
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f002 f96e 	bl	800f180 <__lshift>
 800cea4:	4606      	mov	r6, r0
 800cea6:	2800      	cmp	r0, #0
 800cea8:	f43f ae72 	beq.w	800cb90 <_strtod_l+0x490>
 800ceac:	9a05      	ldr	r2, [sp, #20]
 800ceae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f002 f9f1 	bl	800f298 <__mdiff>
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	f43f ae69 	beq.w	800cb90 <_strtod_l+0x490>
 800cebe:	68c3      	ldr	r3, [r0, #12]
 800cec0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cec2:	2300      	movs	r3, #0
 800cec4:	60c3      	str	r3, [r0, #12]
 800cec6:	4631      	mov	r1, r6
 800cec8:	f002 f9ca 	bl	800f260 <__mcmp>
 800cecc:	2800      	cmp	r0, #0
 800cece:	da60      	bge.n	800cf92 <_strtod_l+0x892>
 800ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced2:	ea53 030a 	orrs.w	r3, r3, sl
 800ced6:	f040 8082 	bne.w	800cfde <_strtod_l+0x8de>
 800ceda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d17d      	bne.n	800cfde <_strtod_l+0x8de>
 800cee2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cee6:	0d1b      	lsrs	r3, r3, #20
 800cee8:	051b      	lsls	r3, r3, #20
 800ceea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ceee:	d976      	bls.n	800cfde <_strtod_l+0x8de>
 800cef0:	696b      	ldr	r3, [r5, #20]
 800cef2:	b913      	cbnz	r3, 800cefa <_strtod_l+0x7fa>
 800cef4:	692b      	ldr	r3, [r5, #16]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	dd71      	ble.n	800cfde <_strtod_l+0x8de>
 800cefa:	4629      	mov	r1, r5
 800cefc:	2201      	movs	r2, #1
 800cefe:	4620      	mov	r0, r4
 800cf00:	f002 f93e 	bl	800f180 <__lshift>
 800cf04:	4631      	mov	r1, r6
 800cf06:	4605      	mov	r5, r0
 800cf08:	f002 f9aa 	bl	800f260 <__mcmp>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	dd66      	ble.n	800cfde <_strtod_l+0x8de>
 800cf10:	9904      	ldr	r1, [sp, #16]
 800cf12:	4a53      	ldr	r2, [pc, #332]	; (800d060 <_strtod_l+0x960>)
 800cf14:	465b      	mov	r3, fp
 800cf16:	2900      	cmp	r1, #0
 800cf18:	f000 8081 	beq.w	800d01e <_strtod_l+0x91e>
 800cf1c:	ea02 010b 	and.w	r1, r2, fp
 800cf20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf24:	dc7b      	bgt.n	800d01e <_strtod_l+0x91e>
 800cf26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf2a:	f77f aea9 	ble.w	800cc80 <_strtod_l+0x580>
 800cf2e:	4b4d      	ldr	r3, [pc, #308]	; (800d064 <_strtod_l+0x964>)
 800cf30:	4650      	mov	r0, sl
 800cf32:	4659      	mov	r1, fp
 800cf34:	2200      	movs	r2, #0
 800cf36:	f7f3 fb6f 	bl	8000618 <__aeabi_dmul>
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	4303      	orrs	r3, r0
 800cf3e:	bf08      	it	eq
 800cf40:	2322      	moveq	r3, #34	; 0x22
 800cf42:	4682      	mov	sl, r0
 800cf44:	468b      	mov	fp, r1
 800cf46:	bf08      	it	eq
 800cf48:	6023      	streq	r3, [r4, #0]
 800cf4a:	e62b      	b.n	800cba4 <_strtod_l+0x4a4>
 800cf4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf50:	fa02 f303 	lsl.w	r3, r2, r3
 800cf54:	ea03 0a0a 	and.w	sl, r3, sl
 800cf58:	e6e3      	b.n	800cd22 <_strtod_l+0x622>
 800cf5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cf5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cf62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cf66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cf6a:	fa01 f308 	lsl.w	r3, r1, r8
 800cf6e:	9308      	str	r3, [sp, #32]
 800cf70:	910d      	str	r1, [sp, #52]	; 0x34
 800cf72:	e746      	b.n	800ce02 <_strtod_l+0x702>
 800cf74:	2300      	movs	r3, #0
 800cf76:	9308      	str	r3, [sp, #32]
 800cf78:	2301      	movs	r3, #1
 800cf7a:	930d      	str	r3, [sp, #52]	; 0x34
 800cf7c:	e741      	b.n	800ce02 <_strtod_l+0x702>
 800cf7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf80:	4642      	mov	r2, r8
 800cf82:	4620      	mov	r0, r4
 800cf84:	f002 f8fc 	bl	800f180 <__lshift>
 800cf88:	9018      	str	r0, [sp, #96]	; 0x60
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	f47f af6b 	bne.w	800ce66 <_strtod_l+0x766>
 800cf90:	e5fe      	b.n	800cb90 <_strtod_l+0x490>
 800cf92:	465f      	mov	r7, fp
 800cf94:	d16e      	bne.n	800d074 <_strtod_l+0x974>
 800cf96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf9c:	b342      	cbz	r2, 800cff0 <_strtod_l+0x8f0>
 800cf9e:	4a32      	ldr	r2, [pc, #200]	; (800d068 <_strtod_l+0x968>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d128      	bne.n	800cff6 <_strtod_l+0x8f6>
 800cfa4:	9b04      	ldr	r3, [sp, #16]
 800cfa6:	4651      	mov	r1, sl
 800cfa8:	b1eb      	cbz	r3, 800cfe6 <_strtod_l+0x8e6>
 800cfaa:	4b2d      	ldr	r3, [pc, #180]	; (800d060 <_strtod_l+0x960>)
 800cfac:	403b      	ands	r3, r7
 800cfae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cfb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb6:	d819      	bhi.n	800cfec <_strtod_l+0x8ec>
 800cfb8:	0d1b      	lsrs	r3, r3, #20
 800cfba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cfbe:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	d117      	bne.n	800cff6 <_strtod_l+0x8f6>
 800cfc6:	4b29      	ldr	r3, [pc, #164]	; (800d06c <_strtod_l+0x96c>)
 800cfc8:	429f      	cmp	r7, r3
 800cfca:	d102      	bne.n	800cfd2 <_strtod_l+0x8d2>
 800cfcc:	3101      	adds	r1, #1
 800cfce:	f43f addf 	beq.w	800cb90 <_strtod_l+0x490>
 800cfd2:	4b23      	ldr	r3, [pc, #140]	; (800d060 <_strtod_l+0x960>)
 800cfd4:	403b      	ands	r3, r7
 800cfd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cfda:	f04f 0a00 	mov.w	sl, #0
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1a4      	bne.n	800cf2e <_strtod_l+0x82e>
 800cfe4:	e5de      	b.n	800cba4 <_strtod_l+0x4a4>
 800cfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfea:	e7ea      	b.n	800cfc2 <_strtod_l+0x8c2>
 800cfec:	4613      	mov	r3, r2
 800cfee:	e7e8      	b.n	800cfc2 <_strtod_l+0x8c2>
 800cff0:	ea53 030a 	orrs.w	r3, r3, sl
 800cff4:	d08c      	beq.n	800cf10 <_strtod_l+0x810>
 800cff6:	9b08      	ldr	r3, [sp, #32]
 800cff8:	b1db      	cbz	r3, 800d032 <_strtod_l+0x932>
 800cffa:	423b      	tst	r3, r7
 800cffc:	d0ef      	beq.n	800cfde <_strtod_l+0x8de>
 800cffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d000:	9a04      	ldr	r2, [sp, #16]
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	b1c3      	cbz	r3, 800d03a <_strtod_l+0x93a>
 800d008:	f7ff fb5e 	bl	800c6c8 <sulp>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	ec51 0b18 	vmov	r0, r1, d8
 800d014:	f7f3 f94a 	bl	80002ac <__adddf3>
 800d018:	4682      	mov	sl, r0
 800d01a:	468b      	mov	fp, r1
 800d01c:	e7df      	b.n	800cfde <_strtod_l+0x8de>
 800d01e:	4013      	ands	r3, r2
 800d020:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d024:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d028:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d02c:	f04f 3aff 	mov.w	sl, #4294967295
 800d030:	e7d5      	b.n	800cfde <_strtod_l+0x8de>
 800d032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d034:	ea13 0f0a 	tst.w	r3, sl
 800d038:	e7e0      	b.n	800cffc <_strtod_l+0x8fc>
 800d03a:	f7ff fb45 	bl	800c6c8 <sulp>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	ec51 0b18 	vmov	r0, r1, d8
 800d046:	f7f3 f92f 	bl	80002a8 <__aeabi_dsub>
 800d04a:	2200      	movs	r2, #0
 800d04c:	2300      	movs	r3, #0
 800d04e:	4682      	mov	sl, r0
 800d050:	468b      	mov	fp, r1
 800d052:	f7f3 fd49 	bl	8000ae8 <__aeabi_dcmpeq>
 800d056:	2800      	cmp	r0, #0
 800d058:	d0c1      	beq.n	800cfde <_strtod_l+0x8de>
 800d05a:	e611      	b.n	800cc80 <_strtod_l+0x580>
 800d05c:	fffffc02 	.word	0xfffffc02
 800d060:	7ff00000 	.word	0x7ff00000
 800d064:	39500000 	.word	0x39500000
 800d068:	000fffff 	.word	0x000fffff
 800d06c:	7fefffff 	.word	0x7fefffff
 800d070:	08011928 	.word	0x08011928
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	f002 fa70 	bl	800f55c <__ratio>
 800d07c:	ec59 8b10 	vmov	r8, r9, d0
 800d080:	ee10 0a10 	vmov	r0, s0
 800d084:	2200      	movs	r2, #0
 800d086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d08a:	4649      	mov	r1, r9
 800d08c:	f7f3 fd40 	bl	8000b10 <__aeabi_dcmple>
 800d090:	2800      	cmp	r0, #0
 800d092:	d07a      	beq.n	800d18a <_strtod_l+0xa8a>
 800d094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d096:	2b00      	cmp	r3, #0
 800d098:	d04a      	beq.n	800d130 <_strtod_l+0xa30>
 800d09a:	4b95      	ldr	r3, [pc, #596]	; (800d2f0 <_strtod_l+0xbf0>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d0a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d2f0 <_strtod_l+0xbf0>
 800d0a6:	f04f 0800 	mov.w	r8, #0
 800d0aa:	4b92      	ldr	r3, [pc, #584]	; (800d2f4 <_strtod_l+0xbf4>)
 800d0ac:	403b      	ands	r3, r7
 800d0ae:	930d      	str	r3, [sp, #52]	; 0x34
 800d0b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0b2:	4b91      	ldr	r3, [pc, #580]	; (800d2f8 <_strtod_l+0xbf8>)
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	f040 80b0 	bne.w	800d21a <_strtod_l+0xb1a>
 800d0ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d0c2:	ec4b ab10 	vmov	d0, sl, fp
 800d0c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0ca:	f002 f96f 	bl	800f3ac <__ulp>
 800d0ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0d2:	ec53 2b10 	vmov	r2, r3, d0
 800d0d6:	f7f3 fa9f 	bl	8000618 <__aeabi_dmul>
 800d0da:	4652      	mov	r2, sl
 800d0dc:	465b      	mov	r3, fp
 800d0de:	f7f3 f8e5 	bl	80002ac <__adddf3>
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4983      	ldr	r1, [pc, #524]	; (800d2f4 <_strtod_l+0xbf4>)
 800d0e6:	4a85      	ldr	r2, [pc, #532]	; (800d2fc <_strtod_l+0xbfc>)
 800d0e8:	4019      	ands	r1, r3
 800d0ea:	4291      	cmp	r1, r2
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	d960      	bls.n	800d1b2 <_strtod_l+0xab2>
 800d0f0:	ee18 3a90 	vmov	r3, s17
 800d0f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d104      	bne.n	800d106 <_strtod_l+0xa06>
 800d0fc:	ee18 3a10 	vmov	r3, s16
 800d100:	3301      	adds	r3, #1
 800d102:	f43f ad45 	beq.w	800cb90 <_strtod_l+0x490>
 800d106:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d308 <_strtod_l+0xc08>
 800d10a:	f04f 3aff 	mov.w	sl, #4294967295
 800d10e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d110:	4620      	mov	r0, r4
 800d112:	f001 fe19 	bl	800ed48 <_Bfree>
 800d116:	9905      	ldr	r1, [sp, #20]
 800d118:	4620      	mov	r0, r4
 800d11a:	f001 fe15 	bl	800ed48 <_Bfree>
 800d11e:	4631      	mov	r1, r6
 800d120:	4620      	mov	r0, r4
 800d122:	f001 fe11 	bl	800ed48 <_Bfree>
 800d126:	4629      	mov	r1, r5
 800d128:	4620      	mov	r0, r4
 800d12a:	f001 fe0d 	bl	800ed48 <_Bfree>
 800d12e:	e61a      	b.n	800cd66 <_strtod_l+0x666>
 800d130:	f1ba 0f00 	cmp.w	sl, #0
 800d134:	d11b      	bne.n	800d16e <_strtod_l+0xa6e>
 800d136:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d13a:	b9f3      	cbnz	r3, 800d17a <_strtod_l+0xa7a>
 800d13c:	4b6c      	ldr	r3, [pc, #432]	; (800d2f0 <_strtod_l+0xbf0>)
 800d13e:	2200      	movs	r2, #0
 800d140:	4640      	mov	r0, r8
 800d142:	4649      	mov	r1, r9
 800d144:	f7f3 fcda 	bl	8000afc <__aeabi_dcmplt>
 800d148:	b9d0      	cbnz	r0, 800d180 <_strtod_l+0xa80>
 800d14a:	4640      	mov	r0, r8
 800d14c:	4649      	mov	r1, r9
 800d14e:	4b6c      	ldr	r3, [pc, #432]	; (800d300 <_strtod_l+0xc00>)
 800d150:	2200      	movs	r2, #0
 800d152:	f7f3 fa61 	bl	8000618 <__aeabi_dmul>
 800d156:	4680      	mov	r8, r0
 800d158:	4689      	mov	r9, r1
 800d15a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d15e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d162:	9315      	str	r3, [sp, #84]	; 0x54
 800d164:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d168:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d16c:	e79d      	b.n	800d0aa <_strtod_l+0x9aa>
 800d16e:	f1ba 0f01 	cmp.w	sl, #1
 800d172:	d102      	bne.n	800d17a <_strtod_l+0xa7a>
 800d174:	2f00      	cmp	r7, #0
 800d176:	f43f ad83 	beq.w	800cc80 <_strtod_l+0x580>
 800d17a:	4b62      	ldr	r3, [pc, #392]	; (800d304 <_strtod_l+0xc04>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	e78e      	b.n	800d09e <_strtod_l+0x99e>
 800d180:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d300 <_strtod_l+0xc00>
 800d184:	f04f 0800 	mov.w	r8, #0
 800d188:	e7e7      	b.n	800d15a <_strtod_l+0xa5a>
 800d18a:	4b5d      	ldr	r3, [pc, #372]	; (800d300 <_strtod_l+0xc00>)
 800d18c:	4640      	mov	r0, r8
 800d18e:	4649      	mov	r1, r9
 800d190:	2200      	movs	r2, #0
 800d192:	f7f3 fa41 	bl	8000618 <__aeabi_dmul>
 800d196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d198:	4680      	mov	r8, r0
 800d19a:	4689      	mov	r9, r1
 800d19c:	b933      	cbnz	r3, 800d1ac <_strtod_l+0xaac>
 800d19e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1a2:	900e      	str	r0, [sp, #56]	; 0x38
 800d1a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d1aa:	e7dd      	b.n	800d168 <_strtod_l+0xa68>
 800d1ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d1b0:	e7f9      	b.n	800d1a6 <_strtod_l+0xaa6>
 800d1b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d1b6:	9b04      	ldr	r3, [sp, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1a8      	bne.n	800d10e <_strtod_l+0xa0e>
 800d1bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1c2:	0d1b      	lsrs	r3, r3, #20
 800d1c4:	051b      	lsls	r3, r3, #20
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d1a1      	bne.n	800d10e <_strtod_l+0xa0e>
 800d1ca:	4640      	mov	r0, r8
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	f7f3 fd83 	bl	8000cd8 <__aeabi_d2lz>
 800d1d2:	f7f3 f9f3 	bl	80005bc <__aeabi_l2d>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	f7f3 f863 	bl	80002a8 <__aeabi_dsub>
 800d1e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1e8:	ea43 030a 	orr.w	r3, r3, sl
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	4680      	mov	r8, r0
 800d1f0:	4689      	mov	r9, r1
 800d1f2:	d055      	beq.n	800d2a0 <_strtod_l+0xba0>
 800d1f4:	a336      	add	r3, pc, #216	; (adr r3, 800d2d0 <_strtod_l+0xbd0>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f3 fc7f 	bl	8000afc <__aeabi_dcmplt>
 800d1fe:	2800      	cmp	r0, #0
 800d200:	f47f acd0 	bne.w	800cba4 <_strtod_l+0x4a4>
 800d204:	a334      	add	r3, pc, #208	; (adr r3, 800d2d8 <_strtod_l+0xbd8>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	4640      	mov	r0, r8
 800d20c:	4649      	mov	r1, r9
 800d20e:	f7f3 fc93 	bl	8000b38 <__aeabi_dcmpgt>
 800d212:	2800      	cmp	r0, #0
 800d214:	f43f af7b 	beq.w	800d10e <_strtod_l+0xa0e>
 800d218:	e4c4      	b.n	800cba4 <_strtod_l+0x4a4>
 800d21a:	9b04      	ldr	r3, [sp, #16]
 800d21c:	b333      	cbz	r3, 800d26c <_strtod_l+0xb6c>
 800d21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d220:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d224:	d822      	bhi.n	800d26c <_strtod_l+0xb6c>
 800d226:	a32e      	add	r3, pc, #184	; (adr r3, 800d2e0 <_strtod_l+0xbe0>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 fc6e 	bl	8000b10 <__aeabi_dcmple>
 800d234:	b1a0      	cbz	r0, 800d260 <_strtod_l+0xb60>
 800d236:	4649      	mov	r1, r9
 800d238:	4640      	mov	r0, r8
 800d23a:	f7f3 fcc5 	bl	8000bc8 <__aeabi_d2uiz>
 800d23e:	2801      	cmp	r0, #1
 800d240:	bf38      	it	cc
 800d242:	2001      	movcc	r0, #1
 800d244:	f7f3 f96e 	bl	8000524 <__aeabi_ui2d>
 800d248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d24a:	4680      	mov	r8, r0
 800d24c:	4689      	mov	r9, r1
 800d24e:	bb23      	cbnz	r3, 800d29a <_strtod_l+0xb9a>
 800d250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d254:	9010      	str	r0, [sp, #64]	; 0x40
 800d256:	9311      	str	r3, [sp, #68]	; 0x44
 800d258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d25c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d262:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d264:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d268:	1a9b      	subs	r3, r3, r2
 800d26a:	9309      	str	r3, [sp, #36]	; 0x24
 800d26c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d270:	eeb0 0a48 	vmov.f32	s0, s16
 800d274:	eef0 0a68 	vmov.f32	s1, s17
 800d278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d27c:	f002 f896 	bl	800f3ac <__ulp>
 800d280:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d284:	ec53 2b10 	vmov	r2, r3, d0
 800d288:	f7f3 f9c6 	bl	8000618 <__aeabi_dmul>
 800d28c:	ec53 2b18 	vmov	r2, r3, d8
 800d290:	f7f3 f80c 	bl	80002ac <__adddf3>
 800d294:	4682      	mov	sl, r0
 800d296:	468b      	mov	fp, r1
 800d298:	e78d      	b.n	800d1b6 <_strtod_l+0xab6>
 800d29a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d29e:	e7db      	b.n	800d258 <_strtod_l+0xb58>
 800d2a0:	a311      	add	r3, pc, #68	; (adr r3, 800d2e8 <_strtod_l+0xbe8>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f3 fc29 	bl	8000afc <__aeabi_dcmplt>
 800d2aa:	e7b2      	b.n	800d212 <_strtod_l+0xb12>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d2b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	f7ff ba6b 	b.w	800c790 <_strtod_l+0x90>
 800d2ba:	2a65      	cmp	r2, #101	; 0x65
 800d2bc:	f43f ab5f 	beq.w	800c97e <_strtod_l+0x27e>
 800d2c0:	2a45      	cmp	r2, #69	; 0x45
 800d2c2:	f43f ab5c 	beq.w	800c97e <_strtod_l+0x27e>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f7ff bb94 	b.w	800c9f4 <_strtod_l+0x2f4>
 800d2cc:	f3af 8000 	nop.w
 800d2d0:	94a03595 	.word	0x94a03595
 800d2d4:	3fdfffff 	.word	0x3fdfffff
 800d2d8:	35afe535 	.word	0x35afe535
 800d2dc:	3fe00000 	.word	0x3fe00000
 800d2e0:	ffc00000 	.word	0xffc00000
 800d2e4:	41dfffff 	.word	0x41dfffff
 800d2e8:	94a03595 	.word	0x94a03595
 800d2ec:	3fcfffff 	.word	0x3fcfffff
 800d2f0:	3ff00000 	.word	0x3ff00000
 800d2f4:	7ff00000 	.word	0x7ff00000
 800d2f8:	7fe00000 	.word	0x7fe00000
 800d2fc:	7c9fffff 	.word	0x7c9fffff
 800d300:	3fe00000 	.word	0x3fe00000
 800d304:	bff00000 	.word	0xbff00000
 800d308:	7fefffff 	.word	0x7fefffff

0800d30c <_strtod_r>:
 800d30c:	4b01      	ldr	r3, [pc, #4]	; (800d314 <_strtod_r+0x8>)
 800d30e:	f7ff b9f7 	b.w	800c700 <_strtod_l>
 800d312:	bf00      	nop
 800d314:	2000027c 	.word	0x2000027c

0800d318 <_strtol_l.constprop.0>:
 800d318:	2b01      	cmp	r3, #1
 800d31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d31e:	d001      	beq.n	800d324 <_strtol_l.constprop.0+0xc>
 800d320:	2b24      	cmp	r3, #36	; 0x24
 800d322:	d906      	bls.n	800d332 <_strtol_l.constprop.0+0x1a>
 800d324:	f7fd fef8 	bl	800b118 <__errno>
 800d328:	2316      	movs	r3, #22
 800d32a:	6003      	str	r3, [r0, #0]
 800d32c:	2000      	movs	r0, #0
 800d32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d332:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d418 <_strtol_l.constprop.0+0x100>
 800d336:	460d      	mov	r5, r1
 800d338:	462e      	mov	r6, r5
 800d33a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d33e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d342:	f017 0708 	ands.w	r7, r7, #8
 800d346:	d1f7      	bne.n	800d338 <_strtol_l.constprop.0+0x20>
 800d348:	2c2d      	cmp	r4, #45	; 0x2d
 800d34a:	d132      	bne.n	800d3b2 <_strtol_l.constprop.0+0x9a>
 800d34c:	782c      	ldrb	r4, [r5, #0]
 800d34e:	2701      	movs	r7, #1
 800d350:	1cb5      	adds	r5, r6, #2
 800d352:	2b00      	cmp	r3, #0
 800d354:	d05b      	beq.n	800d40e <_strtol_l.constprop.0+0xf6>
 800d356:	2b10      	cmp	r3, #16
 800d358:	d109      	bne.n	800d36e <_strtol_l.constprop.0+0x56>
 800d35a:	2c30      	cmp	r4, #48	; 0x30
 800d35c:	d107      	bne.n	800d36e <_strtol_l.constprop.0+0x56>
 800d35e:	782c      	ldrb	r4, [r5, #0]
 800d360:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d364:	2c58      	cmp	r4, #88	; 0x58
 800d366:	d14d      	bne.n	800d404 <_strtol_l.constprop.0+0xec>
 800d368:	786c      	ldrb	r4, [r5, #1]
 800d36a:	2310      	movs	r3, #16
 800d36c:	3502      	adds	r5, #2
 800d36e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d372:	f108 38ff 	add.w	r8, r8, #4294967295
 800d376:	f04f 0c00 	mov.w	ip, #0
 800d37a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d37e:	4666      	mov	r6, ip
 800d380:	fb03 8a19 	mls	sl, r3, r9, r8
 800d384:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d388:	f1be 0f09 	cmp.w	lr, #9
 800d38c:	d816      	bhi.n	800d3bc <_strtol_l.constprop.0+0xa4>
 800d38e:	4674      	mov	r4, lr
 800d390:	42a3      	cmp	r3, r4
 800d392:	dd24      	ble.n	800d3de <_strtol_l.constprop.0+0xc6>
 800d394:	f1bc 0f00 	cmp.w	ip, #0
 800d398:	db1e      	blt.n	800d3d8 <_strtol_l.constprop.0+0xc0>
 800d39a:	45b1      	cmp	r9, r6
 800d39c:	d31c      	bcc.n	800d3d8 <_strtol_l.constprop.0+0xc0>
 800d39e:	d101      	bne.n	800d3a4 <_strtol_l.constprop.0+0x8c>
 800d3a0:	45a2      	cmp	sl, r4
 800d3a2:	db19      	blt.n	800d3d8 <_strtol_l.constprop.0+0xc0>
 800d3a4:	fb06 4603 	mla	r6, r6, r3, r4
 800d3a8:	f04f 0c01 	mov.w	ip, #1
 800d3ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3b0:	e7e8      	b.n	800d384 <_strtol_l.constprop.0+0x6c>
 800d3b2:	2c2b      	cmp	r4, #43	; 0x2b
 800d3b4:	bf04      	itt	eq
 800d3b6:	782c      	ldrbeq	r4, [r5, #0]
 800d3b8:	1cb5      	addeq	r5, r6, #2
 800d3ba:	e7ca      	b.n	800d352 <_strtol_l.constprop.0+0x3a>
 800d3bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d3c0:	f1be 0f19 	cmp.w	lr, #25
 800d3c4:	d801      	bhi.n	800d3ca <_strtol_l.constprop.0+0xb2>
 800d3c6:	3c37      	subs	r4, #55	; 0x37
 800d3c8:	e7e2      	b.n	800d390 <_strtol_l.constprop.0+0x78>
 800d3ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d3ce:	f1be 0f19 	cmp.w	lr, #25
 800d3d2:	d804      	bhi.n	800d3de <_strtol_l.constprop.0+0xc6>
 800d3d4:	3c57      	subs	r4, #87	; 0x57
 800d3d6:	e7db      	b.n	800d390 <_strtol_l.constprop.0+0x78>
 800d3d8:	f04f 3cff 	mov.w	ip, #4294967295
 800d3dc:	e7e6      	b.n	800d3ac <_strtol_l.constprop.0+0x94>
 800d3de:	f1bc 0f00 	cmp.w	ip, #0
 800d3e2:	da05      	bge.n	800d3f0 <_strtol_l.constprop.0+0xd8>
 800d3e4:	2322      	movs	r3, #34	; 0x22
 800d3e6:	6003      	str	r3, [r0, #0]
 800d3e8:	4646      	mov	r6, r8
 800d3ea:	b942      	cbnz	r2, 800d3fe <_strtol_l.constprop.0+0xe6>
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	e79e      	b.n	800d32e <_strtol_l.constprop.0+0x16>
 800d3f0:	b107      	cbz	r7, 800d3f4 <_strtol_l.constprop.0+0xdc>
 800d3f2:	4276      	negs	r6, r6
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	d0f9      	beq.n	800d3ec <_strtol_l.constprop.0+0xd4>
 800d3f8:	f1bc 0f00 	cmp.w	ip, #0
 800d3fc:	d000      	beq.n	800d400 <_strtol_l.constprop.0+0xe8>
 800d3fe:	1e69      	subs	r1, r5, #1
 800d400:	6011      	str	r1, [r2, #0]
 800d402:	e7f3      	b.n	800d3ec <_strtol_l.constprop.0+0xd4>
 800d404:	2430      	movs	r4, #48	; 0x30
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1b1      	bne.n	800d36e <_strtol_l.constprop.0+0x56>
 800d40a:	2308      	movs	r3, #8
 800d40c:	e7af      	b.n	800d36e <_strtol_l.constprop.0+0x56>
 800d40e:	2c30      	cmp	r4, #48	; 0x30
 800d410:	d0a5      	beq.n	800d35e <_strtol_l.constprop.0+0x46>
 800d412:	230a      	movs	r3, #10
 800d414:	e7ab      	b.n	800d36e <_strtol_l.constprop.0+0x56>
 800d416:	bf00      	nop
 800d418:	0801174d 	.word	0x0801174d

0800d41c <_strtol_r>:
 800d41c:	f7ff bf7c 	b.w	800d318 <_strtol_l.constprop.0>

0800d420 <__swbuf_r>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	460e      	mov	r6, r1
 800d424:	4614      	mov	r4, r2
 800d426:	4605      	mov	r5, r0
 800d428:	b118      	cbz	r0, 800d432 <__swbuf_r+0x12>
 800d42a:	6983      	ldr	r3, [r0, #24]
 800d42c:	b90b      	cbnz	r3, 800d432 <__swbuf_r+0x12>
 800d42e:	f7fd fed1 	bl	800b1d4 <__sinit>
 800d432:	4b21      	ldr	r3, [pc, #132]	; (800d4b8 <__swbuf_r+0x98>)
 800d434:	429c      	cmp	r4, r3
 800d436:	d12b      	bne.n	800d490 <__swbuf_r+0x70>
 800d438:	686c      	ldr	r4, [r5, #4]
 800d43a:	69a3      	ldr	r3, [r4, #24]
 800d43c:	60a3      	str	r3, [r4, #8]
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	071a      	lsls	r2, r3, #28
 800d442:	d52f      	bpl.n	800d4a4 <__swbuf_r+0x84>
 800d444:	6923      	ldr	r3, [r4, #16]
 800d446:	b36b      	cbz	r3, 800d4a4 <__swbuf_r+0x84>
 800d448:	6923      	ldr	r3, [r4, #16]
 800d44a:	6820      	ldr	r0, [r4, #0]
 800d44c:	1ac0      	subs	r0, r0, r3
 800d44e:	6963      	ldr	r3, [r4, #20]
 800d450:	b2f6      	uxtb	r6, r6
 800d452:	4283      	cmp	r3, r0
 800d454:	4637      	mov	r7, r6
 800d456:	dc04      	bgt.n	800d462 <__swbuf_r+0x42>
 800d458:	4621      	mov	r1, r4
 800d45a:	4628      	mov	r0, r5
 800d45c:	f000 ffcc 	bl	800e3f8 <_fflush_r>
 800d460:	bb30      	cbnz	r0, 800d4b0 <__swbuf_r+0x90>
 800d462:	68a3      	ldr	r3, [r4, #8]
 800d464:	3b01      	subs	r3, #1
 800d466:	60a3      	str	r3, [r4, #8]
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	1c5a      	adds	r2, r3, #1
 800d46c:	6022      	str	r2, [r4, #0]
 800d46e:	701e      	strb	r6, [r3, #0]
 800d470:	6963      	ldr	r3, [r4, #20]
 800d472:	3001      	adds	r0, #1
 800d474:	4283      	cmp	r3, r0
 800d476:	d004      	beq.n	800d482 <__swbuf_r+0x62>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	07db      	lsls	r3, r3, #31
 800d47c:	d506      	bpl.n	800d48c <__swbuf_r+0x6c>
 800d47e:	2e0a      	cmp	r6, #10
 800d480:	d104      	bne.n	800d48c <__swbuf_r+0x6c>
 800d482:	4621      	mov	r1, r4
 800d484:	4628      	mov	r0, r5
 800d486:	f000 ffb7 	bl	800e3f8 <_fflush_r>
 800d48a:	b988      	cbnz	r0, 800d4b0 <__swbuf_r+0x90>
 800d48c:	4638      	mov	r0, r7
 800d48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d490:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <__swbuf_r+0x9c>)
 800d492:	429c      	cmp	r4, r3
 800d494:	d101      	bne.n	800d49a <__swbuf_r+0x7a>
 800d496:	68ac      	ldr	r4, [r5, #8]
 800d498:	e7cf      	b.n	800d43a <__swbuf_r+0x1a>
 800d49a:	4b09      	ldr	r3, [pc, #36]	; (800d4c0 <__swbuf_r+0xa0>)
 800d49c:	429c      	cmp	r4, r3
 800d49e:	bf08      	it	eq
 800d4a0:	68ec      	ldreq	r4, [r5, #12]
 800d4a2:	e7ca      	b.n	800d43a <__swbuf_r+0x1a>
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f000 f81e 	bl	800d4e8 <__swsetup_r>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d0cb      	beq.n	800d448 <__swbuf_r+0x28>
 800d4b0:	f04f 37ff 	mov.w	r7, #4294967295
 800d4b4:	e7ea      	b.n	800d48c <__swbuf_r+0x6c>
 800d4b6:	bf00      	nop
 800d4b8:	08011870 	.word	0x08011870
 800d4bc:	08011890 	.word	0x08011890
 800d4c0:	08011850 	.word	0x08011850

0800d4c4 <_write_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d07      	ldr	r5, [pc, #28]	; (800d4e4 <_write_r+0x20>)
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	602a      	str	r2, [r5, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	f7f5 fb67 	bl	8002ba6 <_write>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_write_r+0x1e>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_write_r+0x1e>
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	200130d8 	.word	0x200130d8

0800d4e8 <__swsetup_r>:
 800d4e8:	4b32      	ldr	r3, [pc, #200]	; (800d5b4 <__swsetup_r+0xcc>)
 800d4ea:	b570      	push	{r4, r5, r6, lr}
 800d4ec:	681d      	ldr	r5, [r3, #0]
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	b125      	cbz	r5, 800d4fe <__swsetup_r+0x16>
 800d4f4:	69ab      	ldr	r3, [r5, #24]
 800d4f6:	b913      	cbnz	r3, 800d4fe <__swsetup_r+0x16>
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f7fd fe6b 	bl	800b1d4 <__sinit>
 800d4fe:	4b2e      	ldr	r3, [pc, #184]	; (800d5b8 <__swsetup_r+0xd0>)
 800d500:	429c      	cmp	r4, r3
 800d502:	d10f      	bne.n	800d524 <__swsetup_r+0x3c>
 800d504:	686c      	ldr	r4, [r5, #4]
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d50c:	0719      	lsls	r1, r3, #28
 800d50e:	d42c      	bmi.n	800d56a <__swsetup_r+0x82>
 800d510:	06dd      	lsls	r5, r3, #27
 800d512:	d411      	bmi.n	800d538 <__swsetup_r+0x50>
 800d514:	2309      	movs	r3, #9
 800d516:	6033      	str	r3, [r6, #0]
 800d518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d51c:	81a3      	strh	r3, [r4, #12]
 800d51e:	f04f 30ff 	mov.w	r0, #4294967295
 800d522:	e03e      	b.n	800d5a2 <__swsetup_r+0xba>
 800d524:	4b25      	ldr	r3, [pc, #148]	; (800d5bc <__swsetup_r+0xd4>)
 800d526:	429c      	cmp	r4, r3
 800d528:	d101      	bne.n	800d52e <__swsetup_r+0x46>
 800d52a:	68ac      	ldr	r4, [r5, #8]
 800d52c:	e7eb      	b.n	800d506 <__swsetup_r+0x1e>
 800d52e:	4b24      	ldr	r3, [pc, #144]	; (800d5c0 <__swsetup_r+0xd8>)
 800d530:	429c      	cmp	r4, r3
 800d532:	bf08      	it	eq
 800d534:	68ec      	ldreq	r4, [r5, #12]
 800d536:	e7e6      	b.n	800d506 <__swsetup_r+0x1e>
 800d538:	0758      	lsls	r0, r3, #29
 800d53a:	d512      	bpl.n	800d562 <__swsetup_r+0x7a>
 800d53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d53e:	b141      	cbz	r1, 800d552 <__swsetup_r+0x6a>
 800d540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d544:	4299      	cmp	r1, r3
 800d546:	d002      	beq.n	800d54e <__swsetup_r+0x66>
 800d548:	4630      	mov	r0, r6
 800d54a:	f002 f895 	bl	800f678 <_free_r>
 800d54e:	2300      	movs	r3, #0
 800d550:	6363      	str	r3, [r4, #52]	; 0x34
 800d552:	89a3      	ldrh	r3, [r4, #12]
 800d554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	2300      	movs	r3, #0
 800d55c:	6063      	str	r3, [r4, #4]
 800d55e:	6923      	ldr	r3, [r4, #16]
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f043 0308 	orr.w	r3, r3, #8
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	b94b      	cbnz	r3, 800d582 <__swsetup_r+0x9a>
 800d56e:	89a3      	ldrh	r3, [r4, #12]
 800d570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d578:	d003      	beq.n	800d582 <__swsetup_r+0x9a>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4630      	mov	r0, r6
 800d57e:	f001 fb23 	bl	800ebc8 <__smakebuf_r>
 800d582:	89a0      	ldrh	r0, [r4, #12]
 800d584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d588:	f010 0301 	ands.w	r3, r0, #1
 800d58c:	d00a      	beq.n	800d5a4 <__swsetup_r+0xbc>
 800d58e:	2300      	movs	r3, #0
 800d590:	60a3      	str	r3, [r4, #8]
 800d592:	6963      	ldr	r3, [r4, #20]
 800d594:	425b      	negs	r3, r3
 800d596:	61a3      	str	r3, [r4, #24]
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	b943      	cbnz	r3, 800d5ae <__swsetup_r+0xc6>
 800d59c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5a0:	d1ba      	bne.n	800d518 <__swsetup_r+0x30>
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}
 800d5a4:	0781      	lsls	r1, r0, #30
 800d5a6:	bf58      	it	pl
 800d5a8:	6963      	ldrpl	r3, [r4, #20]
 800d5aa:	60a3      	str	r3, [r4, #8]
 800d5ac:	e7f4      	b.n	800d598 <__swsetup_r+0xb0>
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	e7f7      	b.n	800d5a2 <__swsetup_r+0xba>
 800d5b2:	bf00      	nop
 800d5b4:	20000214 	.word	0x20000214
 800d5b8:	08011870 	.word	0x08011870
 800d5bc:	08011890 	.word	0x08011890
 800d5c0:	08011850 	.word	0x08011850

0800d5c4 <abort>:
 800d5c4:	b508      	push	{r3, lr}
 800d5c6:	2006      	movs	r0, #6
 800d5c8:	f002 fdca 	bl	8010160 <raise>
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	f7f5 fac3 	bl	8002b58 <_exit>
	...

0800d5d4 <_close_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d06      	ldr	r5, [pc, #24]	; (800d5f0 <_close_r+0x1c>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	602b      	str	r3, [r5, #0]
 800d5e0:	f7f5 fafd 	bl	8002bde <_close>
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	d102      	bne.n	800d5ee <_close_r+0x1a>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	b103      	cbz	r3, 800d5ee <_close_r+0x1a>
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	200130d8 	.word	0x200130d8

0800d5f4 <quorem>:
 800d5f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	6903      	ldr	r3, [r0, #16]
 800d5fa:	690c      	ldr	r4, [r1, #16]
 800d5fc:	42a3      	cmp	r3, r4
 800d5fe:	4607      	mov	r7, r0
 800d600:	f2c0 8081 	blt.w	800d706 <quorem+0x112>
 800d604:	3c01      	subs	r4, #1
 800d606:	f101 0814 	add.w	r8, r1, #20
 800d60a:	f100 0514 	add.w	r5, r0, #20
 800d60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d612:	9301      	str	r3, [sp, #4]
 800d614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d61c:	3301      	adds	r3, #1
 800d61e:	429a      	cmp	r2, r3
 800d620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d628:	fbb2 f6f3 	udiv	r6, r2, r3
 800d62c:	d331      	bcc.n	800d692 <quorem+0x9e>
 800d62e:	f04f 0e00 	mov.w	lr, #0
 800d632:	4640      	mov	r0, r8
 800d634:	46ac      	mov	ip, r5
 800d636:	46f2      	mov	sl, lr
 800d638:	f850 2b04 	ldr.w	r2, [r0], #4
 800d63c:	b293      	uxth	r3, r2
 800d63e:	fb06 e303 	mla	r3, r6, r3, lr
 800d642:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d646:	b29b      	uxth	r3, r3
 800d648:	ebaa 0303 	sub.w	r3, sl, r3
 800d64c:	f8dc a000 	ldr.w	sl, [ip]
 800d650:	0c12      	lsrs	r2, r2, #16
 800d652:	fa13 f38a 	uxtah	r3, r3, sl
 800d656:	fb06 e202 	mla	r2, r6, r2, lr
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	9b00      	ldr	r3, [sp, #0]
 800d65e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d662:	b292      	uxth	r2, r2
 800d664:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d66c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d670:	4581      	cmp	r9, r0
 800d672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d676:	f84c 3b04 	str.w	r3, [ip], #4
 800d67a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d67e:	d2db      	bcs.n	800d638 <quorem+0x44>
 800d680:	f855 300b 	ldr.w	r3, [r5, fp]
 800d684:	b92b      	cbnz	r3, 800d692 <quorem+0x9e>
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	3b04      	subs	r3, #4
 800d68a:	429d      	cmp	r5, r3
 800d68c:	461a      	mov	r2, r3
 800d68e:	d32e      	bcc.n	800d6ee <quorem+0xfa>
 800d690:	613c      	str	r4, [r7, #16]
 800d692:	4638      	mov	r0, r7
 800d694:	f001 fde4 	bl	800f260 <__mcmp>
 800d698:	2800      	cmp	r0, #0
 800d69a:	db24      	blt.n	800d6e6 <quorem+0xf2>
 800d69c:	3601      	adds	r6, #1
 800d69e:	4628      	mov	r0, r5
 800d6a0:	f04f 0c00 	mov.w	ip, #0
 800d6a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6a8:	f8d0 e000 	ldr.w	lr, [r0]
 800d6ac:	b293      	uxth	r3, r2
 800d6ae:	ebac 0303 	sub.w	r3, ip, r3
 800d6b2:	0c12      	lsrs	r2, r2, #16
 800d6b4:	fa13 f38e 	uxtah	r3, r3, lr
 800d6b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6c6:	45c1      	cmp	r9, r8
 800d6c8:	f840 3b04 	str.w	r3, [r0], #4
 800d6cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6d0:	d2e8      	bcs.n	800d6a4 <quorem+0xb0>
 800d6d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6da:	b922      	cbnz	r2, 800d6e6 <quorem+0xf2>
 800d6dc:	3b04      	subs	r3, #4
 800d6de:	429d      	cmp	r5, r3
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	d30a      	bcc.n	800d6fa <quorem+0x106>
 800d6e4:	613c      	str	r4, [r7, #16]
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	b003      	add	sp, #12
 800d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ee:	6812      	ldr	r2, [r2, #0]
 800d6f0:	3b04      	subs	r3, #4
 800d6f2:	2a00      	cmp	r2, #0
 800d6f4:	d1cc      	bne.n	800d690 <quorem+0x9c>
 800d6f6:	3c01      	subs	r4, #1
 800d6f8:	e7c7      	b.n	800d68a <quorem+0x96>
 800d6fa:	6812      	ldr	r2, [r2, #0]
 800d6fc:	3b04      	subs	r3, #4
 800d6fe:	2a00      	cmp	r2, #0
 800d700:	d1f0      	bne.n	800d6e4 <quorem+0xf0>
 800d702:	3c01      	subs	r4, #1
 800d704:	e7eb      	b.n	800d6de <quorem+0xea>
 800d706:	2000      	movs	r0, #0
 800d708:	e7ee      	b.n	800d6e8 <quorem+0xf4>
 800d70a:	0000      	movs	r0, r0
 800d70c:	0000      	movs	r0, r0
	...

0800d710 <_dtoa_r>:
 800d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d714:	ed2d 8b04 	vpush	{d8-d9}
 800d718:	ec57 6b10 	vmov	r6, r7, d0
 800d71c:	b093      	sub	sp, #76	; 0x4c
 800d71e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d720:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d724:	9106      	str	r1, [sp, #24]
 800d726:	ee10 aa10 	vmov	sl, s0
 800d72a:	4604      	mov	r4, r0
 800d72c:	9209      	str	r2, [sp, #36]	; 0x24
 800d72e:	930c      	str	r3, [sp, #48]	; 0x30
 800d730:	46bb      	mov	fp, r7
 800d732:	b975      	cbnz	r5, 800d752 <_dtoa_r+0x42>
 800d734:	2010      	movs	r0, #16
 800d736:	f001 fa87 	bl	800ec48 <malloc>
 800d73a:	4602      	mov	r2, r0
 800d73c:	6260      	str	r0, [r4, #36]	; 0x24
 800d73e:	b920      	cbnz	r0, 800d74a <_dtoa_r+0x3a>
 800d740:	4ba7      	ldr	r3, [pc, #668]	; (800d9e0 <_dtoa_r+0x2d0>)
 800d742:	21ea      	movs	r1, #234	; 0xea
 800d744:	48a7      	ldr	r0, [pc, #668]	; (800d9e4 <_dtoa_r+0x2d4>)
 800d746:	f7fd fcc9 	bl	800b0dc <__assert_func>
 800d74a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d74e:	6005      	str	r5, [r0, #0]
 800d750:	60c5      	str	r5, [r0, #12]
 800d752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d754:	6819      	ldr	r1, [r3, #0]
 800d756:	b151      	cbz	r1, 800d76e <_dtoa_r+0x5e>
 800d758:	685a      	ldr	r2, [r3, #4]
 800d75a:	604a      	str	r2, [r1, #4]
 800d75c:	2301      	movs	r3, #1
 800d75e:	4093      	lsls	r3, r2
 800d760:	608b      	str	r3, [r1, #8]
 800d762:	4620      	mov	r0, r4
 800d764:	f001 faf0 	bl	800ed48 <_Bfree>
 800d768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	1e3b      	subs	r3, r7, #0
 800d770:	bfaa      	itet	ge
 800d772:	2300      	movge	r3, #0
 800d774:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d778:	f8c8 3000 	strge.w	r3, [r8]
 800d77c:	4b9a      	ldr	r3, [pc, #616]	; (800d9e8 <_dtoa_r+0x2d8>)
 800d77e:	bfbc      	itt	lt
 800d780:	2201      	movlt	r2, #1
 800d782:	f8c8 2000 	strlt.w	r2, [r8]
 800d786:	ea33 030b 	bics.w	r3, r3, fp
 800d78a:	d11b      	bne.n	800d7c4 <_dtoa_r+0xb4>
 800d78c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d78e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d798:	4333      	orrs	r3, r6
 800d79a:	f000 8592 	beq.w	800e2c2 <_dtoa_r+0xbb2>
 800d79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7a0:	b963      	cbnz	r3, 800d7bc <_dtoa_r+0xac>
 800d7a2:	4b92      	ldr	r3, [pc, #584]	; (800d9ec <_dtoa_r+0x2dc>)
 800d7a4:	e022      	b.n	800d7ec <_dtoa_r+0xdc>
 800d7a6:	4b92      	ldr	r3, [pc, #584]	; (800d9f0 <_dtoa_r+0x2e0>)
 800d7a8:	9301      	str	r3, [sp, #4]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	9801      	ldr	r0, [sp, #4]
 800d7b2:	b013      	add	sp, #76	; 0x4c
 800d7b4:	ecbd 8b04 	vpop	{d8-d9}
 800d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7bc:	4b8b      	ldr	r3, [pc, #556]	; (800d9ec <_dtoa_r+0x2dc>)
 800d7be:	9301      	str	r3, [sp, #4]
 800d7c0:	3303      	adds	r3, #3
 800d7c2:	e7f3      	b.n	800d7ac <_dtoa_r+0x9c>
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	4659      	mov	r1, fp
 800d7cc:	f7f3 f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7d0:	ec4b ab19 	vmov	d9, sl, fp
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	b158      	cbz	r0, 800d7f0 <_dtoa_r+0xe0>
 800d7d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7da:	2301      	movs	r3, #1
 800d7dc:	6013      	str	r3, [r2, #0]
 800d7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 856b 	beq.w	800e2bc <_dtoa_r+0xbac>
 800d7e6:	4883      	ldr	r0, [pc, #524]	; (800d9f4 <_dtoa_r+0x2e4>)
 800d7e8:	6018      	str	r0, [r3, #0]
 800d7ea:	1e43      	subs	r3, r0, #1
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	e7df      	b.n	800d7b0 <_dtoa_r+0xa0>
 800d7f0:	ec4b ab10 	vmov	d0, sl, fp
 800d7f4:	aa10      	add	r2, sp, #64	; 0x40
 800d7f6:	a911      	add	r1, sp, #68	; 0x44
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f001 fe53 	bl	800f4a4 <__d2b>
 800d7fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d802:	ee08 0a10 	vmov	s16, r0
 800d806:	2d00      	cmp	r5, #0
 800d808:	f000 8084 	beq.w	800d914 <_dtoa_r+0x204>
 800d80c:	ee19 3a90 	vmov	r3, s19
 800d810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d814:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d818:	4656      	mov	r6, sl
 800d81a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d822:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d826:	4b74      	ldr	r3, [pc, #464]	; (800d9f8 <_dtoa_r+0x2e8>)
 800d828:	2200      	movs	r2, #0
 800d82a:	4630      	mov	r0, r6
 800d82c:	4639      	mov	r1, r7
 800d82e:	f7f2 fd3b 	bl	80002a8 <__aeabi_dsub>
 800d832:	a365      	add	r3, pc, #404	; (adr r3, 800d9c8 <_dtoa_r+0x2b8>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f7f2 feee 	bl	8000618 <__aeabi_dmul>
 800d83c:	a364      	add	r3, pc, #400	; (adr r3, 800d9d0 <_dtoa_r+0x2c0>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	f7f2 fd33 	bl	80002ac <__adddf3>
 800d846:	4606      	mov	r6, r0
 800d848:	4628      	mov	r0, r5
 800d84a:	460f      	mov	r7, r1
 800d84c:	f7f2 fe7a 	bl	8000544 <__aeabi_i2d>
 800d850:	a361      	add	r3, pc, #388	; (adr r3, 800d9d8 <_dtoa_r+0x2c8>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f2 fedf 	bl	8000618 <__aeabi_dmul>
 800d85a:	4602      	mov	r2, r0
 800d85c:	460b      	mov	r3, r1
 800d85e:	4630      	mov	r0, r6
 800d860:	4639      	mov	r1, r7
 800d862:	f7f2 fd23 	bl	80002ac <__adddf3>
 800d866:	4606      	mov	r6, r0
 800d868:	460f      	mov	r7, r1
 800d86a:	f7f3 f985 	bl	8000b78 <__aeabi_d2iz>
 800d86e:	2200      	movs	r2, #0
 800d870:	9000      	str	r0, [sp, #0]
 800d872:	2300      	movs	r3, #0
 800d874:	4630      	mov	r0, r6
 800d876:	4639      	mov	r1, r7
 800d878:	f7f3 f940 	bl	8000afc <__aeabi_dcmplt>
 800d87c:	b150      	cbz	r0, 800d894 <_dtoa_r+0x184>
 800d87e:	9800      	ldr	r0, [sp, #0]
 800d880:	f7f2 fe60 	bl	8000544 <__aeabi_i2d>
 800d884:	4632      	mov	r2, r6
 800d886:	463b      	mov	r3, r7
 800d888:	f7f3 f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d88c:	b910      	cbnz	r0, 800d894 <_dtoa_r+0x184>
 800d88e:	9b00      	ldr	r3, [sp, #0]
 800d890:	3b01      	subs	r3, #1
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	9b00      	ldr	r3, [sp, #0]
 800d896:	2b16      	cmp	r3, #22
 800d898:	d85a      	bhi.n	800d950 <_dtoa_r+0x240>
 800d89a:	9a00      	ldr	r2, [sp, #0]
 800d89c:	4b57      	ldr	r3, [pc, #348]	; (800d9fc <_dtoa_r+0x2ec>)
 800d89e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a6:	ec51 0b19 	vmov	r0, r1, d9
 800d8aa:	f7f3 f927 	bl	8000afc <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d050      	beq.n	800d954 <_dtoa_r+0x244>
 800d8b2:	9b00      	ldr	r3, [sp, #0]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8be:	1b5d      	subs	r5, r3, r5
 800d8c0:	1e6b      	subs	r3, r5, #1
 800d8c2:	9305      	str	r3, [sp, #20]
 800d8c4:	bf45      	ittet	mi
 800d8c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d8ca:	9304      	strmi	r3, [sp, #16]
 800d8cc:	2300      	movpl	r3, #0
 800d8ce:	2300      	movmi	r3, #0
 800d8d0:	bf4c      	ite	mi
 800d8d2:	9305      	strmi	r3, [sp, #20]
 800d8d4:	9304      	strpl	r3, [sp, #16]
 800d8d6:	9b00      	ldr	r3, [sp, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	db3d      	blt.n	800d958 <_dtoa_r+0x248>
 800d8dc:	9b05      	ldr	r3, [sp, #20]
 800d8de:	9a00      	ldr	r2, [sp, #0]
 800d8e0:	920a      	str	r2, [sp, #40]	; 0x28
 800d8e2:	4413      	add	r3, r2
 800d8e4:	9305      	str	r3, [sp, #20]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9307      	str	r3, [sp, #28]
 800d8ea:	9b06      	ldr	r3, [sp, #24]
 800d8ec:	2b09      	cmp	r3, #9
 800d8ee:	f200 8089 	bhi.w	800da04 <_dtoa_r+0x2f4>
 800d8f2:	2b05      	cmp	r3, #5
 800d8f4:	bfc4      	itt	gt
 800d8f6:	3b04      	subgt	r3, #4
 800d8f8:	9306      	strgt	r3, [sp, #24]
 800d8fa:	9b06      	ldr	r3, [sp, #24]
 800d8fc:	f1a3 0302 	sub.w	r3, r3, #2
 800d900:	bfcc      	ite	gt
 800d902:	2500      	movgt	r5, #0
 800d904:	2501      	movle	r5, #1
 800d906:	2b03      	cmp	r3, #3
 800d908:	f200 8087 	bhi.w	800da1a <_dtoa_r+0x30a>
 800d90c:	e8df f003 	tbb	[pc, r3]
 800d910:	59383a2d 	.word	0x59383a2d
 800d914:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d918:	441d      	add	r5, r3
 800d91a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d91e:	2b20      	cmp	r3, #32
 800d920:	bfc1      	itttt	gt
 800d922:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d926:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d92a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d92e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d932:	bfda      	itte	le
 800d934:	f1c3 0320 	rsble	r3, r3, #32
 800d938:	fa06 f003 	lslle.w	r0, r6, r3
 800d93c:	4318      	orrgt	r0, r3
 800d93e:	f7f2 fdf1 	bl	8000524 <__aeabi_ui2d>
 800d942:	2301      	movs	r3, #1
 800d944:	4606      	mov	r6, r0
 800d946:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d94a:	3d01      	subs	r5, #1
 800d94c:	930e      	str	r3, [sp, #56]	; 0x38
 800d94e:	e76a      	b.n	800d826 <_dtoa_r+0x116>
 800d950:	2301      	movs	r3, #1
 800d952:	e7b2      	b.n	800d8ba <_dtoa_r+0x1aa>
 800d954:	900b      	str	r0, [sp, #44]	; 0x2c
 800d956:	e7b1      	b.n	800d8bc <_dtoa_r+0x1ac>
 800d958:	9b04      	ldr	r3, [sp, #16]
 800d95a:	9a00      	ldr	r2, [sp, #0]
 800d95c:	1a9b      	subs	r3, r3, r2
 800d95e:	9304      	str	r3, [sp, #16]
 800d960:	4253      	negs	r3, r2
 800d962:	9307      	str	r3, [sp, #28]
 800d964:	2300      	movs	r3, #0
 800d966:	930a      	str	r3, [sp, #40]	; 0x28
 800d968:	e7bf      	b.n	800d8ea <_dtoa_r+0x1da>
 800d96a:	2300      	movs	r3, #0
 800d96c:	9308      	str	r3, [sp, #32]
 800d96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d970:	2b00      	cmp	r3, #0
 800d972:	dc55      	bgt.n	800da20 <_dtoa_r+0x310>
 800d974:	2301      	movs	r3, #1
 800d976:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d97a:	461a      	mov	r2, r3
 800d97c:	9209      	str	r2, [sp, #36]	; 0x24
 800d97e:	e00c      	b.n	800d99a <_dtoa_r+0x28a>
 800d980:	2301      	movs	r3, #1
 800d982:	e7f3      	b.n	800d96c <_dtoa_r+0x25c>
 800d984:	2300      	movs	r3, #0
 800d986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d988:	9308      	str	r3, [sp, #32]
 800d98a:	9b00      	ldr	r3, [sp, #0]
 800d98c:	4413      	add	r3, r2
 800d98e:	9302      	str	r3, [sp, #8]
 800d990:	3301      	adds	r3, #1
 800d992:	2b01      	cmp	r3, #1
 800d994:	9303      	str	r3, [sp, #12]
 800d996:	bfb8      	it	lt
 800d998:	2301      	movlt	r3, #1
 800d99a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d99c:	2200      	movs	r2, #0
 800d99e:	6042      	str	r2, [r0, #4]
 800d9a0:	2204      	movs	r2, #4
 800d9a2:	f102 0614 	add.w	r6, r2, #20
 800d9a6:	429e      	cmp	r6, r3
 800d9a8:	6841      	ldr	r1, [r0, #4]
 800d9aa:	d93d      	bls.n	800da28 <_dtoa_r+0x318>
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f001 f98b 	bl	800ecc8 <_Balloc>
 800d9b2:	9001      	str	r0, [sp, #4]
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d13b      	bne.n	800da30 <_dtoa_r+0x320>
 800d9b8:	4b11      	ldr	r3, [pc, #68]	; (800da00 <_dtoa_r+0x2f0>)
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9c0:	e6c0      	b.n	800d744 <_dtoa_r+0x34>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e7df      	b.n	800d986 <_dtoa_r+0x276>
 800d9c6:	bf00      	nop
 800d9c8:	636f4361 	.word	0x636f4361
 800d9cc:	3fd287a7 	.word	0x3fd287a7
 800d9d0:	8b60c8b3 	.word	0x8b60c8b3
 800d9d4:	3fc68a28 	.word	0x3fc68a28
 800d9d8:	509f79fb 	.word	0x509f79fb
 800d9dc:	3fd34413 	.word	0x3fd34413
 800d9e0:	0801195d 	.word	0x0801195d
 800d9e4:	08011974 	.word	0x08011974
 800d9e8:	7ff00000 	.word	0x7ff00000
 800d9ec:	08011959 	.word	0x08011959
 800d9f0:	08011950 	.word	0x08011950
 800d9f4:	08011bb9 	.word	0x08011bb9
 800d9f8:	3ff80000 	.word	0x3ff80000
 800d9fc:	08011ae0 	.word	0x08011ae0
 800da00:	080119cf 	.word	0x080119cf
 800da04:	2501      	movs	r5, #1
 800da06:	2300      	movs	r3, #0
 800da08:	9306      	str	r3, [sp, #24]
 800da0a:	9508      	str	r5, [sp, #32]
 800da0c:	f04f 33ff 	mov.w	r3, #4294967295
 800da10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da14:	2200      	movs	r2, #0
 800da16:	2312      	movs	r3, #18
 800da18:	e7b0      	b.n	800d97c <_dtoa_r+0x26c>
 800da1a:	2301      	movs	r3, #1
 800da1c:	9308      	str	r3, [sp, #32]
 800da1e:	e7f5      	b.n	800da0c <_dtoa_r+0x2fc>
 800da20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da26:	e7b8      	b.n	800d99a <_dtoa_r+0x28a>
 800da28:	3101      	adds	r1, #1
 800da2a:	6041      	str	r1, [r0, #4]
 800da2c:	0052      	lsls	r2, r2, #1
 800da2e:	e7b8      	b.n	800d9a2 <_dtoa_r+0x292>
 800da30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da32:	9a01      	ldr	r2, [sp, #4]
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	2b0e      	cmp	r3, #14
 800da3a:	f200 809d 	bhi.w	800db78 <_dtoa_r+0x468>
 800da3e:	2d00      	cmp	r5, #0
 800da40:	f000 809a 	beq.w	800db78 <_dtoa_r+0x468>
 800da44:	9b00      	ldr	r3, [sp, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	dd32      	ble.n	800dab0 <_dtoa_r+0x3a0>
 800da4a:	4ab7      	ldr	r2, [pc, #732]	; (800dd28 <_dtoa_r+0x618>)
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da58:	9b00      	ldr	r3, [sp, #0]
 800da5a:	05d8      	lsls	r0, r3, #23
 800da5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da60:	d516      	bpl.n	800da90 <_dtoa_r+0x380>
 800da62:	4bb2      	ldr	r3, [pc, #712]	; (800dd2c <_dtoa_r+0x61c>)
 800da64:	ec51 0b19 	vmov	r0, r1, d9
 800da68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da6c:	f7f2 fefe 	bl	800086c <__aeabi_ddiv>
 800da70:	f007 070f 	and.w	r7, r7, #15
 800da74:	4682      	mov	sl, r0
 800da76:	468b      	mov	fp, r1
 800da78:	2503      	movs	r5, #3
 800da7a:	4eac      	ldr	r6, [pc, #688]	; (800dd2c <_dtoa_r+0x61c>)
 800da7c:	b957      	cbnz	r7, 800da94 <_dtoa_r+0x384>
 800da7e:	4642      	mov	r2, r8
 800da80:	464b      	mov	r3, r9
 800da82:	4650      	mov	r0, sl
 800da84:	4659      	mov	r1, fp
 800da86:	f7f2 fef1 	bl	800086c <__aeabi_ddiv>
 800da8a:	4682      	mov	sl, r0
 800da8c:	468b      	mov	fp, r1
 800da8e:	e028      	b.n	800dae2 <_dtoa_r+0x3d2>
 800da90:	2502      	movs	r5, #2
 800da92:	e7f2      	b.n	800da7a <_dtoa_r+0x36a>
 800da94:	07f9      	lsls	r1, r7, #31
 800da96:	d508      	bpl.n	800daaa <_dtoa_r+0x39a>
 800da98:	4640      	mov	r0, r8
 800da9a:	4649      	mov	r1, r9
 800da9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800daa0:	f7f2 fdba 	bl	8000618 <__aeabi_dmul>
 800daa4:	3501      	adds	r5, #1
 800daa6:	4680      	mov	r8, r0
 800daa8:	4689      	mov	r9, r1
 800daaa:	107f      	asrs	r7, r7, #1
 800daac:	3608      	adds	r6, #8
 800daae:	e7e5      	b.n	800da7c <_dtoa_r+0x36c>
 800dab0:	f000 809b 	beq.w	800dbea <_dtoa_r+0x4da>
 800dab4:	9b00      	ldr	r3, [sp, #0]
 800dab6:	4f9d      	ldr	r7, [pc, #628]	; (800dd2c <_dtoa_r+0x61c>)
 800dab8:	425e      	negs	r6, r3
 800daba:	4b9b      	ldr	r3, [pc, #620]	; (800dd28 <_dtoa_r+0x618>)
 800dabc:	f006 020f 	and.w	r2, r6, #15
 800dac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	ec51 0b19 	vmov	r0, r1, d9
 800dacc:	f7f2 fda4 	bl	8000618 <__aeabi_dmul>
 800dad0:	1136      	asrs	r6, r6, #4
 800dad2:	4682      	mov	sl, r0
 800dad4:	468b      	mov	fp, r1
 800dad6:	2300      	movs	r3, #0
 800dad8:	2502      	movs	r5, #2
 800dada:	2e00      	cmp	r6, #0
 800dadc:	d17a      	bne.n	800dbd4 <_dtoa_r+0x4c4>
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1d3      	bne.n	800da8a <_dtoa_r+0x37a>
 800dae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 8082 	beq.w	800dbee <_dtoa_r+0x4de>
 800daea:	4b91      	ldr	r3, [pc, #580]	; (800dd30 <_dtoa_r+0x620>)
 800daec:	2200      	movs	r2, #0
 800daee:	4650      	mov	r0, sl
 800daf0:	4659      	mov	r1, fp
 800daf2:	f7f3 f803 	bl	8000afc <__aeabi_dcmplt>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d079      	beq.n	800dbee <_dtoa_r+0x4de>
 800dafa:	9b03      	ldr	r3, [sp, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d076      	beq.n	800dbee <_dtoa_r+0x4de>
 800db00:	9b02      	ldr	r3, [sp, #8]
 800db02:	2b00      	cmp	r3, #0
 800db04:	dd36      	ble.n	800db74 <_dtoa_r+0x464>
 800db06:	9b00      	ldr	r3, [sp, #0]
 800db08:	4650      	mov	r0, sl
 800db0a:	4659      	mov	r1, fp
 800db0c:	1e5f      	subs	r7, r3, #1
 800db0e:	2200      	movs	r2, #0
 800db10:	4b88      	ldr	r3, [pc, #544]	; (800dd34 <_dtoa_r+0x624>)
 800db12:	f7f2 fd81 	bl	8000618 <__aeabi_dmul>
 800db16:	9e02      	ldr	r6, [sp, #8]
 800db18:	4682      	mov	sl, r0
 800db1a:	468b      	mov	fp, r1
 800db1c:	3501      	adds	r5, #1
 800db1e:	4628      	mov	r0, r5
 800db20:	f7f2 fd10 	bl	8000544 <__aeabi_i2d>
 800db24:	4652      	mov	r2, sl
 800db26:	465b      	mov	r3, fp
 800db28:	f7f2 fd76 	bl	8000618 <__aeabi_dmul>
 800db2c:	4b82      	ldr	r3, [pc, #520]	; (800dd38 <_dtoa_r+0x628>)
 800db2e:	2200      	movs	r2, #0
 800db30:	f7f2 fbbc 	bl	80002ac <__adddf3>
 800db34:	46d0      	mov	r8, sl
 800db36:	46d9      	mov	r9, fp
 800db38:	4682      	mov	sl, r0
 800db3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db3e:	2e00      	cmp	r6, #0
 800db40:	d158      	bne.n	800dbf4 <_dtoa_r+0x4e4>
 800db42:	4b7e      	ldr	r3, [pc, #504]	; (800dd3c <_dtoa_r+0x62c>)
 800db44:	2200      	movs	r2, #0
 800db46:	4640      	mov	r0, r8
 800db48:	4649      	mov	r1, r9
 800db4a:	f7f2 fbad 	bl	80002a8 <__aeabi_dsub>
 800db4e:	4652      	mov	r2, sl
 800db50:	465b      	mov	r3, fp
 800db52:	4680      	mov	r8, r0
 800db54:	4689      	mov	r9, r1
 800db56:	f7f2 ffef 	bl	8000b38 <__aeabi_dcmpgt>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	f040 8295 	bne.w	800e08a <_dtoa_r+0x97a>
 800db60:	4652      	mov	r2, sl
 800db62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db66:	4640      	mov	r0, r8
 800db68:	4649      	mov	r1, r9
 800db6a:	f7f2 ffc7 	bl	8000afc <__aeabi_dcmplt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f040 8289 	bne.w	800e086 <_dtoa_r+0x976>
 800db74:	ec5b ab19 	vmov	sl, fp, d9
 800db78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f2c0 8148 	blt.w	800de10 <_dtoa_r+0x700>
 800db80:	9a00      	ldr	r2, [sp, #0]
 800db82:	2a0e      	cmp	r2, #14
 800db84:	f300 8144 	bgt.w	800de10 <_dtoa_r+0x700>
 800db88:	4b67      	ldr	r3, [pc, #412]	; (800dd28 <_dtoa_r+0x618>)
 800db8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db94:	2b00      	cmp	r3, #0
 800db96:	f280 80d5 	bge.w	800dd44 <_dtoa_r+0x634>
 800db9a:	9b03      	ldr	r3, [sp, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f300 80d1 	bgt.w	800dd44 <_dtoa_r+0x634>
 800dba2:	f040 826f 	bne.w	800e084 <_dtoa_r+0x974>
 800dba6:	4b65      	ldr	r3, [pc, #404]	; (800dd3c <_dtoa_r+0x62c>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	4640      	mov	r0, r8
 800dbac:	4649      	mov	r1, r9
 800dbae:	f7f2 fd33 	bl	8000618 <__aeabi_dmul>
 800dbb2:	4652      	mov	r2, sl
 800dbb4:	465b      	mov	r3, fp
 800dbb6:	f7f2 ffb5 	bl	8000b24 <__aeabi_dcmpge>
 800dbba:	9e03      	ldr	r6, [sp, #12]
 800dbbc:	4637      	mov	r7, r6
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f040 8245 	bne.w	800e04e <_dtoa_r+0x93e>
 800dbc4:	9d01      	ldr	r5, [sp, #4]
 800dbc6:	2331      	movs	r3, #49	; 0x31
 800dbc8:	f805 3b01 	strb.w	r3, [r5], #1
 800dbcc:	9b00      	ldr	r3, [sp, #0]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	e240      	b.n	800e056 <_dtoa_r+0x946>
 800dbd4:	07f2      	lsls	r2, r6, #31
 800dbd6:	d505      	bpl.n	800dbe4 <_dtoa_r+0x4d4>
 800dbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbdc:	f7f2 fd1c 	bl	8000618 <__aeabi_dmul>
 800dbe0:	3501      	adds	r5, #1
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	1076      	asrs	r6, r6, #1
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	e777      	b.n	800dada <_dtoa_r+0x3ca>
 800dbea:	2502      	movs	r5, #2
 800dbec:	e779      	b.n	800dae2 <_dtoa_r+0x3d2>
 800dbee:	9f00      	ldr	r7, [sp, #0]
 800dbf0:	9e03      	ldr	r6, [sp, #12]
 800dbf2:	e794      	b.n	800db1e <_dtoa_r+0x40e>
 800dbf4:	9901      	ldr	r1, [sp, #4]
 800dbf6:	4b4c      	ldr	r3, [pc, #304]	; (800dd28 <_dtoa_r+0x618>)
 800dbf8:	4431      	add	r1, r6
 800dbfa:	910d      	str	r1, [sp, #52]	; 0x34
 800dbfc:	9908      	ldr	r1, [sp, #32]
 800dbfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dc02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc06:	2900      	cmp	r1, #0
 800dc08:	d043      	beq.n	800dc92 <_dtoa_r+0x582>
 800dc0a:	494d      	ldr	r1, [pc, #308]	; (800dd40 <_dtoa_r+0x630>)
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	f7f2 fe2d 	bl	800086c <__aeabi_ddiv>
 800dc12:	4652      	mov	r2, sl
 800dc14:	465b      	mov	r3, fp
 800dc16:	f7f2 fb47 	bl	80002a8 <__aeabi_dsub>
 800dc1a:	9d01      	ldr	r5, [sp, #4]
 800dc1c:	4682      	mov	sl, r0
 800dc1e:	468b      	mov	fp, r1
 800dc20:	4649      	mov	r1, r9
 800dc22:	4640      	mov	r0, r8
 800dc24:	f7f2 ffa8 	bl	8000b78 <__aeabi_d2iz>
 800dc28:	4606      	mov	r6, r0
 800dc2a:	f7f2 fc8b 	bl	8000544 <__aeabi_i2d>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4640      	mov	r0, r8
 800dc34:	4649      	mov	r1, r9
 800dc36:	f7f2 fb37 	bl	80002a8 <__aeabi_dsub>
 800dc3a:	3630      	adds	r6, #48	; 0x30
 800dc3c:	f805 6b01 	strb.w	r6, [r5], #1
 800dc40:	4652      	mov	r2, sl
 800dc42:	465b      	mov	r3, fp
 800dc44:	4680      	mov	r8, r0
 800dc46:	4689      	mov	r9, r1
 800dc48:	f7f2 ff58 	bl	8000afc <__aeabi_dcmplt>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d163      	bne.n	800dd18 <_dtoa_r+0x608>
 800dc50:	4642      	mov	r2, r8
 800dc52:	464b      	mov	r3, r9
 800dc54:	4936      	ldr	r1, [pc, #216]	; (800dd30 <_dtoa_r+0x620>)
 800dc56:	2000      	movs	r0, #0
 800dc58:	f7f2 fb26 	bl	80002a8 <__aeabi_dsub>
 800dc5c:	4652      	mov	r2, sl
 800dc5e:	465b      	mov	r3, fp
 800dc60:	f7f2 ff4c 	bl	8000afc <__aeabi_dcmplt>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	f040 80b5 	bne.w	800ddd4 <_dtoa_r+0x6c4>
 800dc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc6c:	429d      	cmp	r5, r3
 800dc6e:	d081      	beq.n	800db74 <_dtoa_r+0x464>
 800dc70:	4b30      	ldr	r3, [pc, #192]	; (800dd34 <_dtoa_r+0x624>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	4650      	mov	r0, sl
 800dc76:	4659      	mov	r1, fp
 800dc78:	f7f2 fcce 	bl	8000618 <__aeabi_dmul>
 800dc7c:	4b2d      	ldr	r3, [pc, #180]	; (800dd34 <_dtoa_r+0x624>)
 800dc7e:	4682      	mov	sl, r0
 800dc80:	468b      	mov	fp, r1
 800dc82:	4640      	mov	r0, r8
 800dc84:	4649      	mov	r1, r9
 800dc86:	2200      	movs	r2, #0
 800dc88:	f7f2 fcc6 	bl	8000618 <__aeabi_dmul>
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	4689      	mov	r9, r1
 800dc90:	e7c6      	b.n	800dc20 <_dtoa_r+0x510>
 800dc92:	4650      	mov	r0, sl
 800dc94:	4659      	mov	r1, fp
 800dc96:	f7f2 fcbf 	bl	8000618 <__aeabi_dmul>
 800dc9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc9c:	9d01      	ldr	r5, [sp, #4]
 800dc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dca0:	4682      	mov	sl, r0
 800dca2:	468b      	mov	fp, r1
 800dca4:	4649      	mov	r1, r9
 800dca6:	4640      	mov	r0, r8
 800dca8:	f7f2 ff66 	bl	8000b78 <__aeabi_d2iz>
 800dcac:	4606      	mov	r6, r0
 800dcae:	f7f2 fc49 	bl	8000544 <__aeabi_i2d>
 800dcb2:	3630      	adds	r6, #48	; 0x30
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4640      	mov	r0, r8
 800dcba:	4649      	mov	r1, r9
 800dcbc:	f7f2 faf4 	bl	80002a8 <__aeabi_dsub>
 800dcc0:	f805 6b01 	strb.w	r6, [r5], #1
 800dcc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcc6:	429d      	cmp	r5, r3
 800dcc8:	4680      	mov	r8, r0
 800dcca:	4689      	mov	r9, r1
 800dccc:	f04f 0200 	mov.w	r2, #0
 800dcd0:	d124      	bne.n	800dd1c <_dtoa_r+0x60c>
 800dcd2:	4b1b      	ldr	r3, [pc, #108]	; (800dd40 <_dtoa_r+0x630>)
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	4659      	mov	r1, fp
 800dcd8:	f7f2 fae8 	bl	80002ac <__adddf3>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4640      	mov	r0, r8
 800dce2:	4649      	mov	r1, r9
 800dce4:	f7f2 ff28 	bl	8000b38 <__aeabi_dcmpgt>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d173      	bne.n	800ddd4 <_dtoa_r+0x6c4>
 800dcec:	4652      	mov	r2, sl
 800dcee:	465b      	mov	r3, fp
 800dcf0:	4913      	ldr	r1, [pc, #76]	; (800dd40 <_dtoa_r+0x630>)
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	f7f2 fad8 	bl	80002a8 <__aeabi_dsub>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	4649      	mov	r1, r9
 800dd00:	f7f2 fefc 	bl	8000afc <__aeabi_dcmplt>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	f43f af35 	beq.w	800db74 <_dtoa_r+0x464>
 800dd0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dd0c:	1e6b      	subs	r3, r5, #1
 800dd0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd14:	2b30      	cmp	r3, #48	; 0x30
 800dd16:	d0f8      	beq.n	800dd0a <_dtoa_r+0x5fa>
 800dd18:	9700      	str	r7, [sp, #0]
 800dd1a:	e049      	b.n	800ddb0 <_dtoa_r+0x6a0>
 800dd1c:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <_dtoa_r+0x624>)
 800dd1e:	f7f2 fc7b 	bl	8000618 <__aeabi_dmul>
 800dd22:	4680      	mov	r8, r0
 800dd24:	4689      	mov	r9, r1
 800dd26:	e7bd      	b.n	800dca4 <_dtoa_r+0x594>
 800dd28:	08011ae0 	.word	0x08011ae0
 800dd2c:	08011ab8 	.word	0x08011ab8
 800dd30:	3ff00000 	.word	0x3ff00000
 800dd34:	40240000 	.word	0x40240000
 800dd38:	401c0000 	.word	0x401c0000
 800dd3c:	40140000 	.word	0x40140000
 800dd40:	3fe00000 	.word	0x3fe00000
 800dd44:	9d01      	ldr	r5, [sp, #4]
 800dd46:	4656      	mov	r6, sl
 800dd48:	465f      	mov	r7, fp
 800dd4a:	4642      	mov	r2, r8
 800dd4c:	464b      	mov	r3, r9
 800dd4e:	4630      	mov	r0, r6
 800dd50:	4639      	mov	r1, r7
 800dd52:	f7f2 fd8b 	bl	800086c <__aeabi_ddiv>
 800dd56:	f7f2 ff0f 	bl	8000b78 <__aeabi_d2iz>
 800dd5a:	4682      	mov	sl, r0
 800dd5c:	f7f2 fbf2 	bl	8000544 <__aeabi_i2d>
 800dd60:	4642      	mov	r2, r8
 800dd62:	464b      	mov	r3, r9
 800dd64:	f7f2 fc58 	bl	8000618 <__aeabi_dmul>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	4639      	mov	r1, r7
 800dd70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd74:	f7f2 fa98 	bl	80002a8 <__aeabi_dsub>
 800dd78:	f805 6b01 	strb.w	r6, [r5], #1
 800dd7c:	9e01      	ldr	r6, [sp, #4]
 800dd7e:	9f03      	ldr	r7, [sp, #12]
 800dd80:	1bae      	subs	r6, r5, r6
 800dd82:	42b7      	cmp	r7, r6
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	d135      	bne.n	800ddf6 <_dtoa_r+0x6e6>
 800dd8a:	f7f2 fa8f 	bl	80002ac <__adddf3>
 800dd8e:	4642      	mov	r2, r8
 800dd90:	464b      	mov	r3, r9
 800dd92:	4606      	mov	r6, r0
 800dd94:	460f      	mov	r7, r1
 800dd96:	f7f2 fecf 	bl	8000b38 <__aeabi_dcmpgt>
 800dd9a:	b9d0      	cbnz	r0, 800ddd2 <_dtoa_r+0x6c2>
 800dd9c:	4642      	mov	r2, r8
 800dd9e:	464b      	mov	r3, r9
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	f7f2 fea0 	bl	8000ae8 <__aeabi_dcmpeq>
 800dda8:	b110      	cbz	r0, 800ddb0 <_dtoa_r+0x6a0>
 800ddaa:	f01a 0f01 	tst.w	sl, #1
 800ddae:	d110      	bne.n	800ddd2 <_dtoa_r+0x6c2>
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	ee18 1a10 	vmov	r1, s16
 800ddb6:	f000 ffc7 	bl	800ed48 <_Bfree>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	9800      	ldr	r0, [sp, #0]
 800ddbe:	702b      	strb	r3, [r5, #0]
 800ddc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	6018      	str	r0, [r3, #0]
 800ddc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f43f acf1 	beq.w	800d7b0 <_dtoa_r+0xa0>
 800ddce:	601d      	str	r5, [r3, #0]
 800ddd0:	e4ee      	b.n	800d7b0 <_dtoa_r+0xa0>
 800ddd2:	9f00      	ldr	r7, [sp, #0]
 800ddd4:	462b      	mov	r3, r5
 800ddd6:	461d      	mov	r5, r3
 800ddd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dddc:	2a39      	cmp	r2, #57	; 0x39
 800ddde:	d106      	bne.n	800ddee <_dtoa_r+0x6de>
 800dde0:	9a01      	ldr	r2, [sp, #4]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d1f7      	bne.n	800ddd6 <_dtoa_r+0x6c6>
 800dde6:	9901      	ldr	r1, [sp, #4]
 800dde8:	2230      	movs	r2, #48	; 0x30
 800ddea:	3701      	adds	r7, #1
 800ddec:	700a      	strb	r2, [r1, #0]
 800ddee:	781a      	ldrb	r2, [r3, #0]
 800ddf0:	3201      	adds	r2, #1
 800ddf2:	701a      	strb	r2, [r3, #0]
 800ddf4:	e790      	b.n	800dd18 <_dtoa_r+0x608>
 800ddf6:	4ba6      	ldr	r3, [pc, #664]	; (800e090 <_dtoa_r+0x980>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f7f2 fc0d 	bl	8000618 <__aeabi_dmul>
 800ddfe:	2200      	movs	r2, #0
 800de00:	2300      	movs	r3, #0
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	f7f2 fe6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d09d      	beq.n	800dd4a <_dtoa_r+0x63a>
 800de0e:	e7cf      	b.n	800ddb0 <_dtoa_r+0x6a0>
 800de10:	9a08      	ldr	r2, [sp, #32]
 800de12:	2a00      	cmp	r2, #0
 800de14:	f000 80d7 	beq.w	800dfc6 <_dtoa_r+0x8b6>
 800de18:	9a06      	ldr	r2, [sp, #24]
 800de1a:	2a01      	cmp	r2, #1
 800de1c:	f300 80ba 	bgt.w	800df94 <_dtoa_r+0x884>
 800de20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de22:	2a00      	cmp	r2, #0
 800de24:	f000 80b2 	beq.w	800df8c <_dtoa_r+0x87c>
 800de28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de2c:	9e07      	ldr	r6, [sp, #28]
 800de2e:	9d04      	ldr	r5, [sp, #16]
 800de30:	9a04      	ldr	r2, [sp, #16]
 800de32:	441a      	add	r2, r3
 800de34:	9204      	str	r2, [sp, #16]
 800de36:	9a05      	ldr	r2, [sp, #20]
 800de38:	2101      	movs	r1, #1
 800de3a:	441a      	add	r2, r3
 800de3c:	4620      	mov	r0, r4
 800de3e:	9205      	str	r2, [sp, #20]
 800de40:	f001 f884 	bl	800ef4c <__i2b>
 800de44:	4607      	mov	r7, r0
 800de46:	2d00      	cmp	r5, #0
 800de48:	dd0c      	ble.n	800de64 <_dtoa_r+0x754>
 800de4a:	9b05      	ldr	r3, [sp, #20]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dd09      	ble.n	800de64 <_dtoa_r+0x754>
 800de50:	42ab      	cmp	r3, r5
 800de52:	9a04      	ldr	r2, [sp, #16]
 800de54:	bfa8      	it	ge
 800de56:	462b      	movge	r3, r5
 800de58:	1ad2      	subs	r2, r2, r3
 800de5a:	9204      	str	r2, [sp, #16]
 800de5c:	9a05      	ldr	r2, [sp, #20]
 800de5e:	1aed      	subs	r5, r5, r3
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	9305      	str	r3, [sp, #20]
 800de64:	9b07      	ldr	r3, [sp, #28]
 800de66:	b31b      	cbz	r3, 800deb0 <_dtoa_r+0x7a0>
 800de68:	9b08      	ldr	r3, [sp, #32]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f000 80af 	beq.w	800dfce <_dtoa_r+0x8be>
 800de70:	2e00      	cmp	r6, #0
 800de72:	dd13      	ble.n	800de9c <_dtoa_r+0x78c>
 800de74:	4639      	mov	r1, r7
 800de76:	4632      	mov	r2, r6
 800de78:	4620      	mov	r0, r4
 800de7a:	f001 f927 	bl	800f0cc <__pow5mult>
 800de7e:	ee18 2a10 	vmov	r2, s16
 800de82:	4601      	mov	r1, r0
 800de84:	4607      	mov	r7, r0
 800de86:	4620      	mov	r0, r4
 800de88:	f001 f876 	bl	800ef78 <__multiply>
 800de8c:	ee18 1a10 	vmov	r1, s16
 800de90:	4680      	mov	r8, r0
 800de92:	4620      	mov	r0, r4
 800de94:	f000 ff58 	bl	800ed48 <_Bfree>
 800de98:	ee08 8a10 	vmov	s16, r8
 800de9c:	9b07      	ldr	r3, [sp, #28]
 800de9e:	1b9a      	subs	r2, r3, r6
 800dea0:	d006      	beq.n	800deb0 <_dtoa_r+0x7a0>
 800dea2:	ee18 1a10 	vmov	r1, s16
 800dea6:	4620      	mov	r0, r4
 800dea8:	f001 f910 	bl	800f0cc <__pow5mult>
 800deac:	ee08 0a10 	vmov	s16, r0
 800deb0:	2101      	movs	r1, #1
 800deb2:	4620      	mov	r0, r4
 800deb4:	f001 f84a 	bl	800ef4c <__i2b>
 800deb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deba:	2b00      	cmp	r3, #0
 800debc:	4606      	mov	r6, r0
 800debe:	f340 8088 	ble.w	800dfd2 <_dtoa_r+0x8c2>
 800dec2:	461a      	mov	r2, r3
 800dec4:	4601      	mov	r1, r0
 800dec6:	4620      	mov	r0, r4
 800dec8:	f001 f900 	bl	800f0cc <__pow5mult>
 800decc:	9b06      	ldr	r3, [sp, #24]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	4606      	mov	r6, r0
 800ded2:	f340 8081 	ble.w	800dfd8 <_dtoa_r+0x8c8>
 800ded6:	f04f 0800 	mov.w	r8, #0
 800deda:	6933      	ldr	r3, [r6, #16]
 800dedc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dee0:	6918      	ldr	r0, [r3, #16]
 800dee2:	f000 ffe3 	bl	800eeac <__hi0bits>
 800dee6:	f1c0 0020 	rsb	r0, r0, #32
 800deea:	9b05      	ldr	r3, [sp, #20]
 800deec:	4418      	add	r0, r3
 800deee:	f010 001f 	ands.w	r0, r0, #31
 800def2:	f000 8092 	beq.w	800e01a <_dtoa_r+0x90a>
 800def6:	f1c0 0320 	rsb	r3, r0, #32
 800defa:	2b04      	cmp	r3, #4
 800defc:	f340 808a 	ble.w	800e014 <_dtoa_r+0x904>
 800df00:	f1c0 001c 	rsb	r0, r0, #28
 800df04:	9b04      	ldr	r3, [sp, #16]
 800df06:	4403      	add	r3, r0
 800df08:	9304      	str	r3, [sp, #16]
 800df0a:	9b05      	ldr	r3, [sp, #20]
 800df0c:	4403      	add	r3, r0
 800df0e:	4405      	add	r5, r0
 800df10:	9305      	str	r3, [sp, #20]
 800df12:	9b04      	ldr	r3, [sp, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	dd07      	ble.n	800df28 <_dtoa_r+0x818>
 800df18:	ee18 1a10 	vmov	r1, s16
 800df1c:	461a      	mov	r2, r3
 800df1e:	4620      	mov	r0, r4
 800df20:	f001 f92e 	bl	800f180 <__lshift>
 800df24:	ee08 0a10 	vmov	s16, r0
 800df28:	9b05      	ldr	r3, [sp, #20]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	dd05      	ble.n	800df3a <_dtoa_r+0x82a>
 800df2e:	4631      	mov	r1, r6
 800df30:	461a      	mov	r2, r3
 800df32:	4620      	mov	r0, r4
 800df34:	f001 f924 	bl	800f180 <__lshift>
 800df38:	4606      	mov	r6, r0
 800df3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d06e      	beq.n	800e01e <_dtoa_r+0x90e>
 800df40:	ee18 0a10 	vmov	r0, s16
 800df44:	4631      	mov	r1, r6
 800df46:	f001 f98b 	bl	800f260 <__mcmp>
 800df4a:	2800      	cmp	r0, #0
 800df4c:	da67      	bge.n	800e01e <_dtoa_r+0x90e>
 800df4e:	9b00      	ldr	r3, [sp, #0]
 800df50:	3b01      	subs	r3, #1
 800df52:	ee18 1a10 	vmov	r1, s16
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	220a      	movs	r2, #10
 800df5a:	2300      	movs	r3, #0
 800df5c:	4620      	mov	r0, r4
 800df5e:	f000 ff15 	bl	800ed8c <__multadd>
 800df62:	9b08      	ldr	r3, [sp, #32]
 800df64:	ee08 0a10 	vmov	s16, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 81b1 	beq.w	800e2d0 <_dtoa_r+0xbc0>
 800df6e:	2300      	movs	r3, #0
 800df70:	4639      	mov	r1, r7
 800df72:	220a      	movs	r2, #10
 800df74:	4620      	mov	r0, r4
 800df76:	f000 ff09 	bl	800ed8c <__multadd>
 800df7a:	9b02      	ldr	r3, [sp, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	4607      	mov	r7, r0
 800df80:	f300 808e 	bgt.w	800e0a0 <_dtoa_r+0x990>
 800df84:	9b06      	ldr	r3, [sp, #24]
 800df86:	2b02      	cmp	r3, #2
 800df88:	dc51      	bgt.n	800e02e <_dtoa_r+0x91e>
 800df8a:	e089      	b.n	800e0a0 <_dtoa_r+0x990>
 800df8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df92:	e74b      	b.n	800de2c <_dtoa_r+0x71c>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	1e5e      	subs	r6, r3, #1
 800df98:	9b07      	ldr	r3, [sp, #28]
 800df9a:	42b3      	cmp	r3, r6
 800df9c:	bfbf      	itttt	lt
 800df9e:	9b07      	ldrlt	r3, [sp, #28]
 800dfa0:	9607      	strlt	r6, [sp, #28]
 800dfa2:	1af2      	sublt	r2, r6, r3
 800dfa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dfa6:	bfb6      	itet	lt
 800dfa8:	189b      	addlt	r3, r3, r2
 800dfaa:	1b9e      	subge	r6, r3, r6
 800dfac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dfae:	9b03      	ldr	r3, [sp, #12]
 800dfb0:	bfb8      	it	lt
 800dfb2:	2600      	movlt	r6, #0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bfb7      	itett	lt
 800dfb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dfbc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dfc0:	1a9d      	sublt	r5, r3, r2
 800dfc2:	2300      	movlt	r3, #0
 800dfc4:	e734      	b.n	800de30 <_dtoa_r+0x720>
 800dfc6:	9e07      	ldr	r6, [sp, #28]
 800dfc8:	9d04      	ldr	r5, [sp, #16]
 800dfca:	9f08      	ldr	r7, [sp, #32]
 800dfcc:	e73b      	b.n	800de46 <_dtoa_r+0x736>
 800dfce:	9a07      	ldr	r2, [sp, #28]
 800dfd0:	e767      	b.n	800dea2 <_dtoa_r+0x792>
 800dfd2:	9b06      	ldr	r3, [sp, #24]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	dc18      	bgt.n	800e00a <_dtoa_r+0x8fa>
 800dfd8:	f1ba 0f00 	cmp.w	sl, #0
 800dfdc:	d115      	bne.n	800e00a <_dtoa_r+0x8fa>
 800dfde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfe2:	b993      	cbnz	r3, 800e00a <_dtoa_r+0x8fa>
 800dfe4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfe8:	0d1b      	lsrs	r3, r3, #20
 800dfea:	051b      	lsls	r3, r3, #20
 800dfec:	b183      	cbz	r3, 800e010 <_dtoa_r+0x900>
 800dfee:	9b04      	ldr	r3, [sp, #16]
 800dff0:	3301      	adds	r3, #1
 800dff2:	9304      	str	r3, [sp, #16]
 800dff4:	9b05      	ldr	r3, [sp, #20]
 800dff6:	3301      	adds	r3, #1
 800dff8:	9305      	str	r3, [sp, #20]
 800dffa:	f04f 0801 	mov.w	r8, #1
 800dffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e000:	2b00      	cmp	r3, #0
 800e002:	f47f af6a 	bne.w	800deda <_dtoa_r+0x7ca>
 800e006:	2001      	movs	r0, #1
 800e008:	e76f      	b.n	800deea <_dtoa_r+0x7da>
 800e00a:	f04f 0800 	mov.w	r8, #0
 800e00e:	e7f6      	b.n	800dffe <_dtoa_r+0x8ee>
 800e010:	4698      	mov	r8, r3
 800e012:	e7f4      	b.n	800dffe <_dtoa_r+0x8ee>
 800e014:	f43f af7d 	beq.w	800df12 <_dtoa_r+0x802>
 800e018:	4618      	mov	r0, r3
 800e01a:	301c      	adds	r0, #28
 800e01c:	e772      	b.n	800df04 <_dtoa_r+0x7f4>
 800e01e:	9b03      	ldr	r3, [sp, #12]
 800e020:	2b00      	cmp	r3, #0
 800e022:	dc37      	bgt.n	800e094 <_dtoa_r+0x984>
 800e024:	9b06      	ldr	r3, [sp, #24]
 800e026:	2b02      	cmp	r3, #2
 800e028:	dd34      	ble.n	800e094 <_dtoa_r+0x984>
 800e02a:	9b03      	ldr	r3, [sp, #12]
 800e02c:	9302      	str	r3, [sp, #8]
 800e02e:	9b02      	ldr	r3, [sp, #8]
 800e030:	b96b      	cbnz	r3, 800e04e <_dtoa_r+0x93e>
 800e032:	4631      	mov	r1, r6
 800e034:	2205      	movs	r2, #5
 800e036:	4620      	mov	r0, r4
 800e038:	f000 fea8 	bl	800ed8c <__multadd>
 800e03c:	4601      	mov	r1, r0
 800e03e:	4606      	mov	r6, r0
 800e040:	ee18 0a10 	vmov	r0, s16
 800e044:	f001 f90c 	bl	800f260 <__mcmp>
 800e048:	2800      	cmp	r0, #0
 800e04a:	f73f adbb 	bgt.w	800dbc4 <_dtoa_r+0x4b4>
 800e04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e050:	9d01      	ldr	r5, [sp, #4]
 800e052:	43db      	mvns	r3, r3
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	f04f 0800 	mov.w	r8, #0
 800e05a:	4631      	mov	r1, r6
 800e05c:	4620      	mov	r0, r4
 800e05e:	f000 fe73 	bl	800ed48 <_Bfree>
 800e062:	2f00      	cmp	r7, #0
 800e064:	f43f aea4 	beq.w	800ddb0 <_dtoa_r+0x6a0>
 800e068:	f1b8 0f00 	cmp.w	r8, #0
 800e06c:	d005      	beq.n	800e07a <_dtoa_r+0x96a>
 800e06e:	45b8      	cmp	r8, r7
 800e070:	d003      	beq.n	800e07a <_dtoa_r+0x96a>
 800e072:	4641      	mov	r1, r8
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fe67 	bl	800ed48 <_Bfree>
 800e07a:	4639      	mov	r1, r7
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 fe63 	bl	800ed48 <_Bfree>
 800e082:	e695      	b.n	800ddb0 <_dtoa_r+0x6a0>
 800e084:	2600      	movs	r6, #0
 800e086:	4637      	mov	r7, r6
 800e088:	e7e1      	b.n	800e04e <_dtoa_r+0x93e>
 800e08a:	9700      	str	r7, [sp, #0]
 800e08c:	4637      	mov	r7, r6
 800e08e:	e599      	b.n	800dbc4 <_dtoa_r+0x4b4>
 800e090:	40240000 	.word	0x40240000
 800e094:	9b08      	ldr	r3, [sp, #32]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f000 80ca 	beq.w	800e230 <_dtoa_r+0xb20>
 800e09c:	9b03      	ldr	r3, [sp, #12]
 800e09e:	9302      	str	r3, [sp, #8]
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	dd05      	ble.n	800e0b0 <_dtoa_r+0x9a0>
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	462a      	mov	r2, r5
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f001 f869 	bl	800f180 <__lshift>
 800e0ae:	4607      	mov	r7, r0
 800e0b0:	f1b8 0f00 	cmp.w	r8, #0
 800e0b4:	d05b      	beq.n	800e16e <_dtoa_r+0xa5e>
 800e0b6:	6879      	ldr	r1, [r7, #4]
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f000 fe05 	bl	800ecc8 <_Balloc>
 800e0be:	4605      	mov	r5, r0
 800e0c0:	b928      	cbnz	r0, 800e0ce <_dtoa_r+0x9be>
 800e0c2:	4b87      	ldr	r3, [pc, #540]	; (800e2e0 <_dtoa_r+0xbd0>)
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0ca:	f7ff bb3b 	b.w	800d744 <_dtoa_r+0x34>
 800e0ce:	693a      	ldr	r2, [r7, #16]
 800e0d0:	3202      	adds	r2, #2
 800e0d2:	0092      	lsls	r2, r2, #2
 800e0d4:	f107 010c 	add.w	r1, r7, #12
 800e0d8:	300c      	adds	r0, #12
 800e0da:	f7fd f952 	bl	800b382 <memcpy>
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f001 f84c 	bl	800f180 <__lshift>
 800e0e8:	9b01      	ldr	r3, [sp, #4]
 800e0ea:	f103 0901 	add.w	r9, r3, #1
 800e0ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	9305      	str	r3, [sp, #20]
 800e0f6:	f00a 0301 	and.w	r3, sl, #1
 800e0fa:	46b8      	mov	r8, r7
 800e0fc:	9304      	str	r3, [sp, #16]
 800e0fe:	4607      	mov	r7, r0
 800e100:	4631      	mov	r1, r6
 800e102:	ee18 0a10 	vmov	r0, s16
 800e106:	f7ff fa75 	bl	800d5f4 <quorem>
 800e10a:	4641      	mov	r1, r8
 800e10c:	9002      	str	r0, [sp, #8]
 800e10e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e112:	ee18 0a10 	vmov	r0, s16
 800e116:	f001 f8a3 	bl	800f260 <__mcmp>
 800e11a:	463a      	mov	r2, r7
 800e11c:	9003      	str	r0, [sp, #12]
 800e11e:	4631      	mov	r1, r6
 800e120:	4620      	mov	r0, r4
 800e122:	f001 f8b9 	bl	800f298 <__mdiff>
 800e126:	68c2      	ldr	r2, [r0, #12]
 800e128:	f109 3bff 	add.w	fp, r9, #4294967295
 800e12c:	4605      	mov	r5, r0
 800e12e:	bb02      	cbnz	r2, 800e172 <_dtoa_r+0xa62>
 800e130:	4601      	mov	r1, r0
 800e132:	ee18 0a10 	vmov	r0, s16
 800e136:	f001 f893 	bl	800f260 <__mcmp>
 800e13a:	4602      	mov	r2, r0
 800e13c:	4629      	mov	r1, r5
 800e13e:	4620      	mov	r0, r4
 800e140:	9207      	str	r2, [sp, #28]
 800e142:	f000 fe01 	bl	800ed48 <_Bfree>
 800e146:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e14a:	ea43 0102 	orr.w	r1, r3, r2
 800e14e:	9b04      	ldr	r3, [sp, #16]
 800e150:	430b      	orrs	r3, r1
 800e152:	464d      	mov	r5, r9
 800e154:	d10f      	bne.n	800e176 <_dtoa_r+0xa66>
 800e156:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e15a:	d02a      	beq.n	800e1b2 <_dtoa_r+0xaa2>
 800e15c:	9b03      	ldr	r3, [sp, #12]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	dd02      	ble.n	800e168 <_dtoa_r+0xa58>
 800e162:	9b02      	ldr	r3, [sp, #8]
 800e164:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e168:	f88b a000 	strb.w	sl, [fp]
 800e16c:	e775      	b.n	800e05a <_dtoa_r+0x94a>
 800e16e:	4638      	mov	r0, r7
 800e170:	e7ba      	b.n	800e0e8 <_dtoa_r+0x9d8>
 800e172:	2201      	movs	r2, #1
 800e174:	e7e2      	b.n	800e13c <_dtoa_r+0xa2c>
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	db04      	blt.n	800e186 <_dtoa_r+0xa76>
 800e17c:	9906      	ldr	r1, [sp, #24]
 800e17e:	430b      	orrs	r3, r1
 800e180:	9904      	ldr	r1, [sp, #16]
 800e182:	430b      	orrs	r3, r1
 800e184:	d122      	bne.n	800e1cc <_dtoa_r+0xabc>
 800e186:	2a00      	cmp	r2, #0
 800e188:	ddee      	ble.n	800e168 <_dtoa_r+0xa58>
 800e18a:	ee18 1a10 	vmov	r1, s16
 800e18e:	2201      	movs	r2, #1
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fff5 	bl	800f180 <__lshift>
 800e196:	4631      	mov	r1, r6
 800e198:	ee08 0a10 	vmov	s16, r0
 800e19c:	f001 f860 	bl	800f260 <__mcmp>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	dc03      	bgt.n	800e1ac <_dtoa_r+0xa9c>
 800e1a4:	d1e0      	bne.n	800e168 <_dtoa_r+0xa58>
 800e1a6:	f01a 0f01 	tst.w	sl, #1
 800e1aa:	d0dd      	beq.n	800e168 <_dtoa_r+0xa58>
 800e1ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1b0:	d1d7      	bne.n	800e162 <_dtoa_r+0xa52>
 800e1b2:	2339      	movs	r3, #57	; 0x39
 800e1b4:	f88b 3000 	strb.w	r3, [fp]
 800e1b8:	462b      	mov	r3, r5
 800e1ba:	461d      	mov	r5, r3
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1c2:	2a39      	cmp	r2, #57	; 0x39
 800e1c4:	d071      	beq.n	800e2aa <_dtoa_r+0xb9a>
 800e1c6:	3201      	adds	r2, #1
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	e746      	b.n	800e05a <_dtoa_r+0x94a>
 800e1cc:	2a00      	cmp	r2, #0
 800e1ce:	dd07      	ble.n	800e1e0 <_dtoa_r+0xad0>
 800e1d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1d4:	d0ed      	beq.n	800e1b2 <_dtoa_r+0xaa2>
 800e1d6:	f10a 0301 	add.w	r3, sl, #1
 800e1da:	f88b 3000 	strb.w	r3, [fp]
 800e1de:	e73c      	b.n	800e05a <_dtoa_r+0x94a>
 800e1e0:	9b05      	ldr	r3, [sp, #20]
 800e1e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e1e6:	4599      	cmp	r9, r3
 800e1e8:	d047      	beq.n	800e27a <_dtoa_r+0xb6a>
 800e1ea:	ee18 1a10 	vmov	r1, s16
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	220a      	movs	r2, #10
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f000 fdca 	bl	800ed8c <__multadd>
 800e1f8:	45b8      	cmp	r8, r7
 800e1fa:	ee08 0a10 	vmov	s16, r0
 800e1fe:	f04f 0300 	mov.w	r3, #0
 800e202:	f04f 020a 	mov.w	r2, #10
 800e206:	4641      	mov	r1, r8
 800e208:	4620      	mov	r0, r4
 800e20a:	d106      	bne.n	800e21a <_dtoa_r+0xb0a>
 800e20c:	f000 fdbe 	bl	800ed8c <__multadd>
 800e210:	4680      	mov	r8, r0
 800e212:	4607      	mov	r7, r0
 800e214:	f109 0901 	add.w	r9, r9, #1
 800e218:	e772      	b.n	800e100 <_dtoa_r+0x9f0>
 800e21a:	f000 fdb7 	bl	800ed8c <__multadd>
 800e21e:	4639      	mov	r1, r7
 800e220:	4680      	mov	r8, r0
 800e222:	2300      	movs	r3, #0
 800e224:	220a      	movs	r2, #10
 800e226:	4620      	mov	r0, r4
 800e228:	f000 fdb0 	bl	800ed8c <__multadd>
 800e22c:	4607      	mov	r7, r0
 800e22e:	e7f1      	b.n	800e214 <_dtoa_r+0xb04>
 800e230:	9b03      	ldr	r3, [sp, #12]
 800e232:	9302      	str	r3, [sp, #8]
 800e234:	9d01      	ldr	r5, [sp, #4]
 800e236:	ee18 0a10 	vmov	r0, s16
 800e23a:	4631      	mov	r1, r6
 800e23c:	f7ff f9da 	bl	800d5f4 <quorem>
 800e240:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e244:	9b01      	ldr	r3, [sp, #4]
 800e246:	f805 ab01 	strb.w	sl, [r5], #1
 800e24a:	1aea      	subs	r2, r5, r3
 800e24c:	9b02      	ldr	r3, [sp, #8]
 800e24e:	4293      	cmp	r3, r2
 800e250:	dd09      	ble.n	800e266 <_dtoa_r+0xb56>
 800e252:	ee18 1a10 	vmov	r1, s16
 800e256:	2300      	movs	r3, #0
 800e258:	220a      	movs	r2, #10
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fd96 	bl	800ed8c <__multadd>
 800e260:	ee08 0a10 	vmov	s16, r0
 800e264:	e7e7      	b.n	800e236 <_dtoa_r+0xb26>
 800e266:	9b02      	ldr	r3, [sp, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bfc8      	it	gt
 800e26c:	461d      	movgt	r5, r3
 800e26e:	9b01      	ldr	r3, [sp, #4]
 800e270:	bfd8      	it	le
 800e272:	2501      	movle	r5, #1
 800e274:	441d      	add	r5, r3
 800e276:	f04f 0800 	mov.w	r8, #0
 800e27a:	ee18 1a10 	vmov	r1, s16
 800e27e:	2201      	movs	r2, #1
 800e280:	4620      	mov	r0, r4
 800e282:	f000 ff7d 	bl	800f180 <__lshift>
 800e286:	4631      	mov	r1, r6
 800e288:	ee08 0a10 	vmov	s16, r0
 800e28c:	f000 ffe8 	bl	800f260 <__mcmp>
 800e290:	2800      	cmp	r0, #0
 800e292:	dc91      	bgt.n	800e1b8 <_dtoa_r+0xaa8>
 800e294:	d102      	bne.n	800e29c <_dtoa_r+0xb8c>
 800e296:	f01a 0f01 	tst.w	sl, #1
 800e29a:	d18d      	bne.n	800e1b8 <_dtoa_r+0xaa8>
 800e29c:	462b      	mov	r3, r5
 800e29e:	461d      	mov	r5, r3
 800e2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2a4:	2a30      	cmp	r2, #48	; 0x30
 800e2a6:	d0fa      	beq.n	800e29e <_dtoa_r+0xb8e>
 800e2a8:	e6d7      	b.n	800e05a <_dtoa_r+0x94a>
 800e2aa:	9a01      	ldr	r2, [sp, #4]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d184      	bne.n	800e1ba <_dtoa_r+0xaaa>
 800e2b0:	9b00      	ldr	r3, [sp, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	2331      	movs	r3, #49	; 0x31
 800e2b8:	7013      	strb	r3, [r2, #0]
 800e2ba:	e6ce      	b.n	800e05a <_dtoa_r+0x94a>
 800e2bc:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <_dtoa_r+0xbd4>)
 800e2be:	f7ff ba95 	b.w	800d7ec <_dtoa_r+0xdc>
 800e2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f47f aa6e 	bne.w	800d7a6 <_dtoa_r+0x96>
 800e2ca:	4b07      	ldr	r3, [pc, #28]	; (800e2e8 <_dtoa_r+0xbd8>)
 800e2cc:	f7ff ba8e 	b.w	800d7ec <_dtoa_r+0xdc>
 800e2d0:	9b02      	ldr	r3, [sp, #8]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	dcae      	bgt.n	800e234 <_dtoa_r+0xb24>
 800e2d6:	9b06      	ldr	r3, [sp, #24]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	f73f aea8 	bgt.w	800e02e <_dtoa_r+0x91e>
 800e2de:	e7a9      	b.n	800e234 <_dtoa_r+0xb24>
 800e2e0:	080119cf 	.word	0x080119cf
 800e2e4:	08011bb8 	.word	0x08011bb8
 800e2e8:	08011950 	.word	0x08011950

0800e2ec <__sflush_r>:
 800e2ec:	898a      	ldrh	r2, [r1, #12]
 800e2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	0710      	lsls	r0, r2, #28
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	d458      	bmi.n	800e3ac <__sflush_r+0xc0>
 800e2fa:	684b      	ldr	r3, [r1, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dc05      	bgt.n	800e30c <__sflush_r+0x20>
 800e300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e302:	2b00      	cmp	r3, #0
 800e304:	dc02      	bgt.n	800e30c <__sflush_r+0x20>
 800e306:	2000      	movs	r0, #0
 800e308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e30e:	2e00      	cmp	r6, #0
 800e310:	d0f9      	beq.n	800e306 <__sflush_r+0x1a>
 800e312:	2300      	movs	r3, #0
 800e314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e318:	682f      	ldr	r7, [r5, #0]
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	d032      	beq.n	800e384 <__sflush_r+0x98>
 800e31e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e320:	89a3      	ldrh	r3, [r4, #12]
 800e322:	075a      	lsls	r2, r3, #29
 800e324:	d505      	bpl.n	800e332 <__sflush_r+0x46>
 800e326:	6863      	ldr	r3, [r4, #4]
 800e328:	1ac0      	subs	r0, r0, r3
 800e32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e32c:	b10b      	cbz	r3, 800e332 <__sflush_r+0x46>
 800e32e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e330:	1ac0      	subs	r0, r0, r3
 800e332:	2300      	movs	r3, #0
 800e334:	4602      	mov	r2, r0
 800e336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e338:	6a21      	ldr	r1, [r4, #32]
 800e33a:	4628      	mov	r0, r5
 800e33c:	47b0      	blx	r6
 800e33e:	1c43      	adds	r3, r0, #1
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	d106      	bne.n	800e352 <__sflush_r+0x66>
 800e344:	6829      	ldr	r1, [r5, #0]
 800e346:	291d      	cmp	r1, #29
 800e348:	d82c      	bhi.n	800e3a4 <__sflush_r+0xb8>
 800e34a:	4a2a      	ldr	r2, [pc, #168]	; (800e3f4 <__sflush_r+0x108>)
 800e34c:	40ca      	lsrs	r2, r1
 800e34e:	07d6      	lsls	r6, r2, #31
 800e350:	d528      	bpl.n	800e3a4 <__sflush_r+0xb8>
 800e352:	2200      	movs	r2, #0
 800e354:	6062      	str	r2, [r4, #4]
 800e356:	04d9      	lsls	r1, r3, #19
 800e358:	6922      	ldr	r2, [r4, #16]
 800e35a:	6022      	str	r2, [r4, #0]
 800e35c:	d504      	bpl.n	800e368 <__sflush_r+0x7c>
 800e35e:	1c42      	adds	r2, r0, #1
 800e360:	d101      	bne.n	800e366 <__sflush_r+0x7a>
 800e362:	682b      	ldr	r3, [r5, #0]
 800e364:	b903      	cbnz	r3, 800e368 <__sflush_r+0x7c>
 800e366:	6560      	str	r0, [r4, #84]	; 0x54
 800e368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e36a:	602f      	str	r7, [r5, #0]
 800e36c:	2900      	cmp	r1, #0
 800e36e:	d0ca      	beq.n	800e306 <__sflush_r+0x1a>
 800e370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e374:	4299      	cmp	r1, r3
 800e376:	d002      	beq.n	800e37e <__sflush_r+0x92>
 800e378:	4628      	mov	r0, r5
 800e37a:	f001 f97d 	bl	800f678 <_free_r>
 800e37e:	2000      	movs	r0, #0
 800e380:	6360      	str	r0, [r4, #52]	; 0x34
 800e382:	e7c1      	b.n	800e308 <__sflush_r+0x1c>
 800e384:	6a21      	ldr	r1, [r4, #32]
 800e386:	2301      	movs	r3, #1
 800e388:	4628      	mov	r0, r5
 800e38a:	47b0      	blx	r6
 800e38c:	1c41      	adds	r1, r0, #1
 800e38e:	d1c7      	bne.n	800e320 <__sflush_r+0x34>
 800e390:	682b      	ldr	r3, [r5, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0c4      	beq.n	800e320 <__sflush_r+0x34>
 800e396:	2b1d      	cmp	r3, #29
 800e398:	d001      	beq.n	800e39e <__sflush_r+0xb2>
 800e39a:	2b16      	cmp	r3, #22
 800e39c:	d101      	bne.n	800e3a2 <__sflush_r+0xb6>
 800e39e:	602f      	str	r7, [r5, #0]
 800e3a0:	e7b1      	b.n	800e306 <__sflush_r+0x1a>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	e7ad      	b.n	800e308 <__sflush_r+0x1c>
 800e3ac:	690f      	ldr	r7, [r1, #16]
 800e3ae:	2f00      	cmp	r7, #0
 800e3b0:	d0a9      	beq.n	800e306 <__sflush_r+0x1a>
 800e3b2:	0793      	lsls	r3, r2, #30
 800e3b4:	680e      	ldr	r6, [r1, #0]
 800e3b6:	bf08      	it	eq
 800e3b8:	694b      	ldreq	r3, [r1, #20]
 800e3ba:	600f      	str	r7, [r1, #0]
 800e3bc:	bf18      	it	ne
 800e3be:	2300      	movne	r3, #0
 800e3c0:	eba6 0807 	sub.w	r8, r6, r7
 800e3c4:	608b      	str	r3, [r1, #8]
 800e3c6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ca:	dd9c      	ble.n	800e306 <__sflush_r+0x1a>
 800e3cc:	6a21      	ldr	r1, [r4, #32]
 800e3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3d0:	4643      	mov	r3, r8
 800e3d2:	463a      	mov	r2, r7
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	47b0      	blx	r6
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	dc06      	bgt.n	800e3ea <__sflush_r+0xfe>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3e2:	81a3      	strh	r3, [r4, #12]
 800e3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e8:	e78e      	b.n	800e308 <__sflush_r+0x1c>
 800e3ea:	4407      	add	r7, r0
 800e3ec:	eba8 0800 	sub.w	r8, r8, r0
 800e3f0:	e7e9      	b.n	800e3c6 <__sflush_r+0xda>
 800e3f2:	bf00      	nop
 800e3f4:	20400001 	.word	0x20400001

0800e3f8 <_fflush_r>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	690b      	ldr	r3, [r1, #16]
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	460c      	mov	r4, r1
 800e400:	b913      	cbnz	r3, 800e408 <_fflush_r+0x10>
 800e402:	2500      	movs	r5, #0
 800e404:	4628      	mov	r0, r5
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	b118      	cbz	r0, 800e412 <_fflush_r+0x1a>
 800e40a:	6983      	ldr	r3, [r0, #24]
 800e40c:	b90b      	cbnz	r3, 800e412 <_fflush_r+0x1a>
 800e40e:	f7fc fee1 	bl	800b1d4 <__sinit>
 800e412:	4b14      	ldr	r3, [pc, #80]	; (800e464 <_fflush_r+0x6c>)
 800e414:	429c      	cmp	r4, r3
 800e416:	d11b      	bne.n	800e450 <_fflush_r+0x58>
 800e418:	686c      	ldr	r4, [r5, #4]
 800e41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0ef      	beq.n	800e402 <_fflush_r+0xa>
 800e422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e424:	07d0      	lsls	r0, r2, #31
 800e426:	d404      	bmi.n	800e432 <_fflush_r+0x3a>
 800e428:	0599      	lsls	r1, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_fflush_r+0x3a>
 800e42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e42e:	f7fc ffa6 	bl	800b37e <__retarget_lock_acquire_recursive>
 800e432:	4628      	mov	r0, r5
 800e434:	4621      	mov	r1, r4
 800e436:	f7ff ff59 	bl	800e2ec <__sflush_r>
 800e43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e43c:	07da      	lsls	r2, r3, #31
 800e43e:	4605      	mov	r5, r0
 800e440:	d4e0      	bmi.n	800e404 <_fflush_r+0xc>
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	059b      	lsls	r3, r3, #22
 800e446:	d4dd      	bmi.n	800e404 <_fflush_r+0xc>
 800e448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e44a:	f7fc ff99 	bl	800b380 <__retarget_lock_release_recursive>
 800e44e:	e7d9      	b.n	800e404 <_fflush_r+0xc>
 800e450:	4b05      	ldr	r3, [pc, #20]	; (800e468 <_fflush_r+0x70>)
 800e452:	429c      	cmp	r4, r3
 800e454:	d101      	bne.n	800e45a <_fflush_r+0x62>
 800e456:	68ac      	ldr	r4, [r5, #8]
 800e458:	e7df      	b.n	800e41a <_fflush_r+0x22>
 800e45a:	4b04      	ldr	r3, [pc, #16]	; (800e46c <_fflush_r+0x74>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	bf08      	it	eq
 800e460:	68ec      	ldreq	r4, [r5, #12]
 800e462:	e7da      	b.n	800e41a <_fflush_r+0x22>
 800e464:	08011870 	.word	0x08011870
 800e468:	08011890 	.word	0x08011890
 800e46c:	08011850 	.word	0x08011850

0800e470 <rshift>:
 800e470:	6903      	ldr	r3, [r0, #16]
 800e472:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e47a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e47e:	f100 0414 	add.w	r4, r0, #20
 800e482:	dd45      	ble.n	800e510 <rshift+0xa0>
 800e484:	f011 011f 	ands.w	r1, r1, #31
 800e488:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e48c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e490:	d10c      	bne.n	800e4ac <rshift+0x3c>
 800e492:	f100 0710 	add.w	r7, r0, #16
 800e496:	4629      	mov	r1, r5
 800e498:	42b1      	cmp	r1, r6
 800e49a:	d334      	bcc.n	800e506 <rshift+0x96>
 800e49c:	1a9b      	subs	r3, r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	1eea      	subs	r2, r5, #3
 800e4a2:	4296      	cmp	r6, r2
 800e4a4:	bf38      	it	cc
 800e4a6:	2300      	movcc	r3, #0
 800e4a8:	4423      	add	r3, r4
 800e4aa:	e015      	b.n	800e4d8 <rshift+0x68>
 800e4ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e4b0:	f1c1 0820 	rsb	r8, r1, #32
 800e4b4:	40cf      	lsrs	r7, r1
 800e4b6:	f105 0e04 	add.w	lr, r5, #4
 800e4ba:	46a1      	mov	r9, r4
 800e4bc:	4576      	cmp	r6, lr
 800e4be:	46f4      	mov	ip, lr
 800e4c0:	d815      	bhi.n	800e4ee <rshift+0x7e>
 800e4c2:	1a9a      	subs	r2, r3, r2
 800e4c4:	0092      	lsls	r2, r2, #2
 800e4c6:	3a04      	subs	r2, #4
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	42ae      	cmp	r6, r5
 800e4cc:	bf38      	it	cc
 800e4ce:	2200      	movcc	r2, #0
 800e4d0:	18a3      	adds	r3, r4, r2
 800e4d2:	50a7      	str	r7, [r4, r2]
 800e4d4:	b107      	cbz	r7, 800e4d8 <rshift+0x68>
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	1b1a      	subs	r2, r3, r4
 800e4da:	42a3      	cmp	r3, r4
 800e4dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e4e0:	bf08      	it	eq
 800e4e2:	2300      	moveq	r3, #0
 800e4e4:	6102      	str	r2, [r0, #16]
 800e4e6:	bf08      	it	eq
 800e4e8:	6143      	streq	r3, [r0, #20]
 800e4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ee:	f8dc c000 	ldr.w	ip, [ip]
 800e4f2:	fa0c fc08 	lsl.w	ip, ip, r8
 800e4f6:	ea4c 0707 	orr.w	r7, ip, r7
 800e4fa:	f849 7b04 	str.w	r7, [r9], #4
 800e4fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e502:	40cf      	lsrs	r7, r1
 800e504:	e7da      	b.n	800e4bc <rshift+0x4c>
 800e506:	f851 cb04 	ldr.w	ip, [r1], #4
 800e50a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e50e:	e7c3      	b.n	800e498 <rshift+0x28>
 800e510:	4623      	mov	r3, r4
 800e512:	e7e1      	b.n	800e4d8 <rshift+0x68>

0800e514 <__hexdig_fun>:
 800e514:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e518:	2b09      	cmp	r3, #9
 800e51a:	d802      	bhi.n	800e522 <__hexdig_fun+0xe>
 800e51c:	3820      	subs	r0, #32
 800e51e:	b2c0      	uxtb	r0, r0
 800e520:	4770      	bx	lr
 800e522:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e526:	2b05      	cmp	r3, #5
 800e528:	d801      	bhi.n	800e52e <__hexdig_fun+0x1a>
 800e52a:	3847      	subs	r0, #71	; 0x47
 800e52c:	e7f7      	b.n	800e51e <__hexdig_fun+0xa>
 800e52e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e532:	2b05      	cmp	r3, #5
 800e534:	d801      	bhi.n	800e53a <__hexdig_fun+0x26>
 800e536:	3827      	subs	r0, #39	; 0x27
 800e538:	e7f1      	b.n	800e51e <__hexdig_fun+0xa>
 800e53a:	2000      	movs	r0, #0
 800e53c:	4770      	bx	lr
	...

0800e540 <__gethex>:
 800e540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e544:	ed2d 8b02 	vpush	{d8}
 800e548:	b089      	sub	sp, #36	; 0x24
 800e54a:	ee08 0a10 	vmov	s16, r0
 800e54e:	9304      	str	r3, [sp, #16]
 800e550:	4bb4      	ldr	r3, [pc, #720]	; (800e824 <__gethex+0x2e4>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	4618      	mov	r0, r3
 800e558:	468b      	mov	fp, r1
 800e55a:	4690      	mov	r8, r2
 800e55c:	f7f1 fe42 	bl	80001e4 <strlen>
 800e560:	9b01      	ldr	r3, [sp, #4]
 800e562:	f8db 2000 	ldr.w	r2, [fp]
 800e566:	4403      	add	r3, r0
 800e568:	4682      	mov	sl, r0
 800e56a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e56e:	9305      	str	r3, [sp, #20]
 800e570:	1c93      	adds	r3, r2, #2
 800e572:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e576:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e57a:	32fe      	adds	r2, #254	; 0xfe
 800e57c:	18d1      	adds	r1, r2, r3
 800e57e:	461f      	mov	r7, r3
 800e580:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e584:	9100      	str	r1, [sp, #0]
 800e586:	2830      	cmp	r0, #48	; 0x30
 800e588:	d0f8      	beq.n	800e57c <__gethex+0x3c>
 800e58a:	f7ff ffc3 	bl	800e514 <__hexdig_fun>
 800e58e:	4604      	mov	r4, r0
 800e590:	2800      	cmp	r0, #0
 800e592:	d13a      	bne.n	800e60a <__gethex+0xca>
 800e594:	9901      	ldr	r1, [sp, #4]
 800e596:	4652      	mov	r2, sl
 800e598:	4638      	mov	r0, r7
 800e59a:	f001 fdfd 	bl	8010198 <strncmp>
 800e59e:	4605      	mov	r5, r0
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d168      	bne.n	800e676 <__gethex+0x136>
 800e5a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e5a8:	eb07 060a 	add.w	r6, r7, sl
 800e5ac:	f7ff ffb2 	bl	800e514 <__hexdig_fun>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d062      	beq.n	800e67a <__gethex+0x13a>
 800e5b4:	4633      	mov	r3, r6
 800e5b6:	7818      	ldrb	r0, [r3, #0]
 800e5b8:	2830      	cmp	r0, #48	; 0x30
 800e5ba:	461f      	mov	r7, r3
 800e5bc:	f103 0301 	add.w	r3, r3, #1
 800e5c0:	d0f9      	beq.n	800e5b6 <__gethex+0x76>
 800e5c2:	f7ff ffa7 	bl	800e514 <__hexdig_fun>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	fab0 f480 	clz	r4, r0
 800e5cc:	0964      	lsrs	r4, r4, #5
 800e5ce:	4635      	mov	r5, r6
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	463a      	mov	r2, r7
 800e5d4:	4616      	mov	r6, r2
 800e5d6:	3201      	adds	r2, #1
 800e5d8:	7830      	ldrb	r0, [r6, #0]
 800e5da:	f7ff ff9b 	bl	800e514 <__hexdig_fun>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d1f8      	bne.n	800e5d4 <__gethex+0x94>
 800e5e2:	9901      	ldr	r1, [sp, #4]
 800e5e4:	4652      	mov	r2, sl
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f001 fdd6 	bl	8010198 <strncmp>
 800e5ec:	b980      	cbnz	r0, 800e610 <__gethex+0xd0>
 800e5ee:	b94d      	cbnz	r5, 800e604 <__gethex+0xc4>
 800e5f0:	eb06 050a 	add.w	r5, r6, sl
 800e5f4:	462a      	mov	r2, r5
 800e5f6:	4616      	mov	r6, r2
 800e5f8:	3201      	adds	r2, #1
 800e5fa:	7830      	ldrb	r0, [r6, #0]
 800e5fc:	f7ff ff8a 	bl	800e514 <__hexdig_fun>
 800e600:	2800      	cmp	r0, #0
 800e602:	d1f8      	bne.n	800e5f6 <__gethex+0xb6>
 800e604:	1bad      	subs	r5, r5, r6
 800e606:	00ad      	lsls	r5, r5, #2
 800e608:	e004      	b.n	800e614 <__gethex+0xd4>
 800e60a:	2400      	movs	r4, #0
 800e60c:	4625      	mov	r5, r4
 800e60e:	e7e0      	b.n	800e5d2 <__gethex+0x92>
 800e610:	2d00      	cmp	r5, #0
 800e612:	d1f7      	bne.n	800e604 <__gethex+0xc4>
 800e614:	7833      	ldrb	r3, [r6, #0]
 800e616:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e61a:	2b50      	cmp	r3, #80	; 0x50
 800e61c:	d13b      	bne.n	800e696 <__gethex+0x156>
 800e61e:	7873      	ldrb	r3, [r6, #1]
 800e620:	2b2b      	cmp	r3, #43	; 0x2b
 800e622:	d02c      	beq.n	800e67e <__gethex+0x13e>
 800e624:	2b2d      	cmp	r3, #45	; 0x2d
 800e626:	d02e      	beq.n	800e686 <__gethex+0x146>
 800e628:	1c71      	adds	r1, r6, #1
 800e62a:	f04f 0900 	mov.w	r9, #0
 800e62e:	7808      	ldrb	r0, [r1, #0]
 800e630:	f7ff ff70 	bl	800e514 <__hexdig_fun>
 800e634:	1e43      	subs	r3, r0, #1
 800e636:	b2db      	uxtb	r3, r3
 800e638:	2b18      	cmp	r3, #24
 800e63a:	d82c      	bhi.n	800e696 <__gethex+0x156>
 800e63c:	f1a0 0210 	sub.w	r2, r0, #16
 800e640:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e644:	f7ff ff66 	bl	800e514 <__hexdig_fun>
 800e648:	1e43      	subs	r3, r0, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b18      	cmp	r3, #24
 800e64e:	d91d      	bls.n	800e68c <__gethex+0x14c>
 800e650:	f1b9 0f00 	cmp.w	r9, #0
 800e654:	d000      	beq.n	800e658 <__gethex+0x118>
 800e656:	4252      	negs	r2, r2
 800e658:	4415      	add	r5, r2
 800e65a:	f8cb 1000 	str.w	r1, [fp]
 800e65e:	b1e4      	cbz	r4, 800e69a <__gethex+0x15a>
 800e660:	9b00      	ldr	r3, [sp, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	bf14      	ite	ne
 800e666:	2700      	movne	r7, #0
 800e668:	2706      	moveq	r7, #6
 800e66a:	4638      	mov	r0, r7
 800e66c:	b009      	add	sp, #36	; 0x24
 800e66e:	ecbd 8b02 	vpop	{d8}
 800e672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e676:	463e      	mov	r6, r7
 800e678:	4625      	mov	r5, r4
 800e67a:	2401      	movs	r4, #1
 800e67c:	e7ca      	b.n	800e614 <__gethex+0xd4>
 800e67e:	f04f 0900 	mov.w	r9, #0
 800e682:	1cb1      	adds	r1, r6, #2
 800e684:	e7d3      	b.n	800e62e <__gethex+0xee>
 800e686:	f04f 0901 	mov.w	r9, #1
 800e68a:	e7fa      	b.n	800e682 <__gethex+0x142>
 800e68c:	230a      	movs	r3, #10
 800e68e:	fb03 0202 	mla	r2, r3, r2, r0
 800e692:	3a10      	subs	r2, #16
 800e694:	e7d4      	b.n	800e640 <__gethex+0x100>
 800e696:	4631      	mov	r1, r6
 800e698:	e7df      	b.n	800e65a <__gethex+0x11a>
 800e69a:	1bf3      	subs	r3, r6, r7
 800e69c:	3b01      	subs	r3, #1
 800e69e:	4621      	mov	r1, r4
 800e6a0:	2b07      	cmp	r3, #7
 800e6a2:	dc0b      	bgt.n	800e6bc <__gethex+0x17c>
 800e6a4:	ee18 0a10 	vmov	r0, s16
 800e6a8:	f000 fb0e 	bl	800ecc8 <_Balloc>
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	b940      	cbnz	r0, 800e6c2 <__gethex+0x182>
 800e6b0:	4b5d      	ldr	r3, [pc, #372]	; (800e828 <__gethex+0x2e8>)
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	21de      	movs	r1, #222	; 0xde
 800e6b6:	485d      	ldr	r0, [pc, #372]	; (800e82c <__gethex+0x2ec>)
 800e6b8:	f7fc fd10 	bl	800b0dc <__assert_func>
 800e6bc:	3101      	adds	r1, #1
 800e6be:	105b      	asrs	r3, r3, #1
 800e6c0:	e7ee      	b.n	800e6a0 <__gethex+0x160>
 800e6c2:	f100 0914 	add.w	r9, r0, #20
 800e6c6:	f04f 0b00 	mov.w	fp, #0
 800e6ca:	f1ca 0301 	rsb	r3, sl, #1
 800e6ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800e6d2:	f8cd b000 	str.w	fp, [sp]
 800e6d6:	9306      	str	r3, [sp, #24]
 800e6d8:	42b7      	cmp	r7, r6
 800e6da:	d340      	bcc.n	800e75e <__gethex+0x21e>
 800e6dc:	9802      	ldr	r0, [sp, #8]
 800e6de:	9b00      	ldr	r3, [sp, #0]
 800e6e0:	f840 3b04 	str.w	r3, [r0], #4
 800e6e4:	eba0 0009 	sub.w	r0, r0, r9
 800e6e8:	1080      	asrs	r0, r0, #2
 800e6ea:	0146      	lsls	r6, r0, #5
 800e6ec:	6120      	str	r0, [r4, #16]
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f000 fbdc 	bl	800eeac <__hi0bits>
 800e6f4:	1a30      	subs	r0, r6, r0
 800e6f6:	f8d8 6000 	ldr.w	r6, [r8]
 800e6fa:	42b0      	cmp	r0, r6
 800e6fc:	dd63      	ble.n	800e7c6 <__gethex+0x286>
 800e6fe:	1b87      	subs	r7, r0, r6
 800e700:	4639      	mov	r1, r7
 800e702:	4620      	mov	r0, r4
 800e704:	f000 ff80 	bl	800f608 <__any_on>
 800e708:	4682      	mov	sl, r0
 800e70a:	b1a8      	cbz	r0, 800e738 <__gethex+0x1f8>
 800e70c:	1e7b      	subs	r3, r7, #1
 800e70e:	1159      	asrs	r1, r3, #5
 800e710:	f003 021f 	and.w	r2, r3, #31
 800e714:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e718:	f04f 0a01 	mov.w	sl, #1
 800e71c:	fa0a f202 	lsl.w	r2, sl, r2
 800e720:	420a      	tst	r2, r1
 800e722:	d009      	beq.n	800e738 <__gethex+0x1f8>
 800e724:	4553      	cmp	r3, sl
 800e726:	dd05      	ble.n	800e734 <__gethex+0x1f4>
 800e728:	1eb9      	subs	r1, r7, #2
 800e72a:	4620      	mov	r0, r4
 800e72c:	f000 ff6c 	bl	800f608 <__any_on>
 800e730:	2800      	cmp	r0, #0
 800e732:	d145      	bne.n	800e7c0 <__gethex+0x280>
 800e734:	f04f 0a02 	mov.w	sl, #2
 800e738:	4639      	mov	r1, r7
 800e73a:	4620      	mov	r0, r4
 800e73c:	f7ff fe98 	bl	800e470 <rshift>
 800e740:	443d      	add	r5, r7
 800e742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e746:	42ab      	cmp	r3, r5
 800e748:	da4c      	bge.n	800e7e4 <__gethex+0x2a4>
 800e74a:	ee18 0a10 	vmov	r0, s16
 800e74e:	4621      	mov	r1, r4
 800e750:	f000 fafa 	bl	800ed48 <_Bfree>
 800e754:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e756:	2300      	movs	r3, #0
 800e758:	6013      	str	r3, [r2, #0]
 800e75a:	27a3      	movs	r7, #163	; 0xa3
 800e75c:	e785      	b.n	800e66a <__gethex+0x12a>
 800e75e:	1e73      	subs	r3, r6, #1
 800e760:	9a05      	ldr	r2, [sp, #20]
 800e762:	9303      	str	r3, [sp, #12]
 800e764:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e768:	4293      	cmp	r3, r2
 800e76a:	d019      	beq.n	800e7a0 <__gethex+0x260>
 800e76c:	f1bb 0f20 	cmp.w	fp, #32
 800e770:	d107      	bne.n	800e782 <__gethex+0x242>
 800e772:	9b02      	ldr	r3, [sp, #8]
 800e774:	9a00      	ldr	r2, [sp, #0]
 800e776:	f843 2b04 	str.w	r2, [r3], #4
 800e77a:	9302      	str	r3, [sp, #8]
 800e77c:	2300      	movs	r3, #0
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	469b      	mov	fp, r3
 800e782:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e786:	f7ff fec5 	bl	800e514 <__hexdig_fun>
 800e78a:	9b00      	ldr	r3, [sp, #0]
 800e78c:	f000 000f 	and.w	r0, r0, #15
 800e790:	fa00 f00b 	lsl.w	r0, r0, fp
 800e794:	4303      	orrs	r3, r0
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	f10b 0b04 	add.w	fp, fp, #4
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	e00d      	b.n	800e7bc <__gethex+0x27c>
 800e7a0:	9b03      	ldr	r3, [sp, #12]
 800e7a2:	9a06      	ldr	r2, [sp, #24]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	42bb      	cmp	r3, r7
 800e7a8:	d3e0      	bcc.n	800e76c <__gethex+0x22c>
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	9901      	ldr	r1, [sp, #4]
 800e7ae:	9307      	str	r3, [sp, #28]
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	f001 fcf1 	bl	8010198 <strncmp>
 800e7b6:	9b07      	ldr	r3, [sp, #28]
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d1d7      	bne.n	800e76c <__gethex+0x22c>
 800e7bc:	461e      	mov	r6, r3
 800e7be:	e78b      	b.n	800e6d8 <__gethex+0x198>
 800e7c0:	f04f 0a03 	mov.w	sl, #3
 800e7c4:	e7b8      	b.n	800e738 <__gethex+0x1f8>
 800e7c6:	da0a      	bge.n	800e7de <__gethex+0x29e>
 800e7c8:	1a37      	subs	r7, r6, r0
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	ee18 0a10 	vmov	r0, s16
 800e7d0:	463a      	mov	r2, r7
 800e7d2:	f000 fcd5 	bl	800f180 <__lshift>
 800e7d6:	1bed      	subs	r5, r5, r7
 800e7d8:	4604      	mov	r4, r0
 800e7da:	f100 0914 	add.w	r9, r0, #20
 800e7de:	f04f 0a00 	mov.w	sl, #0
 800e7e2:	e7ae      	b.n	800e742 <__gethex+0x202>
 800e7e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e7e8:	42a8      	cmp	r0, r5
 800e7ea:	dd72      	ble.n	800e8d2 <__gethex+0x392>
 800e7ec:	1b45      	subs	r5, r0, r5
 800e7ee:	42ae      	cmp	r6, r5
 800e7f0:	dc36      	bgt.n	800e860 <__gethex+0x320>
 800e7f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d02a      	beq.n	800e850 <__gethex+0x310>
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d02c      	beq.n	800e858 <__gethex+0x318>
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d11c      	bne.n	800e83c <__gethex+0x2fc>
 800e802:	42ae      	cmp	r6, r5
 800e804:	d11a      	bne.n	800e83c <__gethex+0x2fc>
 800e806:	2e01      	cmp	r6, #1
 800e808:	d112      	bne.n	800e830 <__gethex+0x2f0>
 800e80a:	9a04      	ldr	r2, [sp, #16]
 800e80c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e810:	6013      	str	r3, [r2, #0]
 800e812:	2301      	movs	r3, #1
 800e814:	6123      	str	r3, [r4, #16]
 800e816:	f8c9 3000 	str.w	r3, [r9]
 800e81a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e81c:	2762      	movs	r7, #98	; 0x62
 800e81e:	601c      	str	r4, [r3, #0]
 800e820:	e723      	b.n	800e66a <__gethex+0x12a>
 800e822:	bf00      	nop
 800e824:	08011a48 	.word	0x08011a48
 800e828:	080119cf 	.word	0x080119cf
 800e82c:	080119e0 	.word	0x080119e0
 800e830:	1e71      	subs	r1, r6, #1
 800e832:	4620      	mov	r0, r4
 800e834:	f000 fee8 	bl	800f608 <__any_on>
 800e838:	2800      	cmp	r0, #0
 800e83a:	d1e6      	bne.n	800e80a <__gethex+0x2ca>
 800e83c:	ee18 0a10 	vmov	r0, s16
 800e840:	4621      	mov	r1, r4
 800e842:	f000 fa81 	bl	800ed48 <_Bfree>
 800e846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e848:	2300      	movs	r3, #0
 800e84a:	6013      	str	r3, [r2, #0]
 800e84c:	2750      	movs	r7, #80	; 0x50
 800e84e:	e70c      	b.n	800e66a <__gethex+0x12a>
 800e850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1f2      	bne.n	800e83c <__gethex+0x2fc>
 800e856:	e7d8      	b.n	800e80a <__gethex+0x2ca>
 800e858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1d5      	bne.n	800e80a <__gethex+0x2ca>
 800e85e:	e7ed      	b.n	800e83c <__gethex+0x2fc>
 800e860:	1e6f      	subs	r7, r5, #1
 800e862:	f1ba 0f00 	cmp.w	sl, #0
 800e866:	d131      	bne.n	800e8cc <__gethex+0x38c>
 800e868:	b127      	cbz	r7, 800e874 <__gethex+0x334>
 800e86a:	4639      	mov	r1, r7
 800e86c:	4620      	mov	r0, r4
 800e86e:	f000 fecb 	bl	800f608 <__any_on>
 800e872:	4682      	mov	sl, r0
 800e874:	117b      	asrs	r3, r7, #5
 800e876:	2101      	movs	r1, #1
 800e878:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e87c:	f007 071f 	and.w	r7, r7, #31
 800e880:	fa01 f707 	lsl.w	r7, r1, r7
 800e884:	421f      	tst	r7, r3
 800e886:	4629      	mov	r1, r5
 800e888:	4620      	mov	r0, r4
 800e88a:	bf18      	it	ne
 800e88c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e890:	1b76      	subs	r6, r6, r5
 800e892:	f7ff fded 	bl	800e470 <rshift>
 800e896:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e89a:	2702      	movs	r7, #2
 800e89c:	f1ba 0f00 	cmp.w	sl, #0
 800e8a0:	d048      	beq.n	800e934 <__gethex+0x3f4>
 800e8a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d015      	beq.n	800e8d6 <__gethex+0x396>
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	d017      	beq.n	800e8de <__gethex+0x39e>
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d109      	bne.n	800e8c6 <__gethex+0x386>
 800e8b2:	f01a 0f02 	tst.w	sl, #2
 800e8b6:	d006      	beq.n	800e8c6 <__gethex+0x386>
 800e8b8:	f8d9 0000 	ldr.w	r0, [r9]
 800e8bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800e8c0:	f01a 0f01 	tst.w	sl, #1
 800e8c4:	d10e      	bne.n	800e8e4 <__gethex+0x3a4>
 800e8c6:	f047 0710 	orr.w	r7, r7, #16
 800e8ca:	e033      	b.n	800e934 <__gethex+0x3f4>
 800e8cc:	f04f 0a01 	mov.w	sl, #1
 800e8d0:	e7d0      	b.n	800e874 <__gethex+0x334>
 800e8d2:	2701      	movs	r7, #1
 800e8d4:	e7e2      	b.n	800e89c <__gethex+0x35c>
 800e8d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8d8:	f1c3 0301 	rsb	r3, r3, #1
 800e8dc:	9315      	str	r3, [sp, #84]	; 0x54
 800e8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d0f0      	beq.n	800e8c6 <__gethex+0x386>
 800e8e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8e8:	f104 0314 	add.w	r3, r4, #20
 800e8ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8f4:	f04f 0c00 	mov.w	ip, #0
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e902:	d01c      	beq.n	800e93e <__gethex+0x3fe>
 800e904:	3201      	adds	r2, #1
 800e906:	6002      	str	r2, [r0, #0]
 800e908:	2f02      	cmp	r7, #2
 800e90a:	f104 0314 	add.w	r3, r4, #20
 800e90e:	d13f      	bne.n	800e990 <__gethex+0x450>
 800e910:	f8d8 2000 	ldr.w	r2, [r8]
 800e914:	3a01      	subs	r2, #1
 800e916:	42b2      	cmp	r2, r6
 800e918:	d10a      	bne.n	800e930 <__gethex+0x3f0>
 800e91a:	1171      	asrs	r1, r6, #5
 800e91c:	2201      	movs	r2, #1
 800e91e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e922:	f006 061f 	and.w	r6, r6, #31
 800e926:	fa02 f606 	lsl.w	r6, r2, r6
 800e92a:	421e      	tst	r6, r3
 800e92c:	bf18      	it	ne
 800e92e:	4617      	movne	r7, r2
 800e930:	f047 0720 	orr.w	r7, r7, #32
 800e934:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e936:	601c      	str	r4, [r3, #0]
 800e938:	9b04      	ldr	r3, [sp, #16]
 800e93a:	601d      	str	r5, [r3, #0]
 800e93c:	e695      	b.n	800e66a <__gethex+0x12a>
 800e93e:	4299      	cmp	r1, r3
 800e940:	f843 cc04 	str.w	ip, [r3, #-4]
 800e944:	d8d8      	bhi.n	800e8f8 <__gethex+0x3b8>
 800e946:	68a3      	ldr	r3, [r4, #8]
 800e948:	459b      	cmp	fp, r3
 800e94a:	db19      	blt.n	800e980 <__gethex+0x440>
 800e94c:	6861      	ldr	r1, [r4, #4]
 800e94e:	ee18 0a10 	vmov	r0, s16
 800e952:	3101      	adds	r1, #1
 800e954:	f000 f9b8 	bl	800ecc8 <_Balloc>
 800e958:	4681      	mov	r9, r0
 800e95a:	b918      	cbnz	r0, 800e964 <__gethex+0x424>
 800e95c:	4b1a      	ldr	r3, [pc, #104]	; (800e9c8 <__gethex+0x488>)
 800e95e:	4602      	mov	r2, r0
 800e960:	2184      	movs	r1, #132	; 0x84
 800e962:	e6a8      	b.n	800e6b6 <__gethex+0x176>
 800e964:	6922      	ldr	r2, [r4, #16]
 800e966:	3202      	adds	r2, #2
 800e968:	f104 010c 	add.w	r1, r4, #12
 800e96c:	0092      	lsls	r2, r2, #2
 800e96e:	300c      	adds	r0, #12
 800e970:	f7fc fd07 	bl	800b382 <memcpy>
 800e974:	4621      	mov	r1, r4
 800e976:	ee18 0a10 	vmov	r0, s16
 800e97a:	f000 f9e5 	bl	800ed48 <_Bfree>
 800e97e:	464c      	mov	r4, r9
 800e980:	6923      	ldr	r3, [r4, #16]
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e988:	6122      	str	r2, [r4, #16]
 800e98a:	2201      	movs	r2, #1
 800e98c:	615a      	str	r2, [r3, #20]
 800e98e:	e7bb      	b.n	800e908 <__gethex+0x3c8>
 800e990:	6922      	ldr	r2, [r4, #16]
 800e992:	455a      	cmp	r2, fp
 800e994:	dd0b      	ble.n	800e9ae <__gethex+0x46e>
 800e996:	2101      	movs	r1, #1
 800e998:	4620      	mov	r0, r4
 800e99a:	f7ff fd69 	bl	800e470 <rshift>
 800e99e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e9a2:	3501      	adds	r5, #1
 800e9a4:	42ab      	cmp	r3, r5
 800e9a6:	f6ff aed0 	blt.w	800e74a <__gethex+0x20a>
 800e9aa:	2701      	movs	r7, #1
 800e9ac:	e7c0      	b.n	800e930 <__gethex+0x3f0>
 800e9ae:	f016 061f 	ands.w	r6, r6, #31
 800e9b2:	d0fa      	beq.n	800e9aa <__gethex+0x46a>
 800e9b4:	4453      	add	r3, sl
 800e9b6:	f1c6 0620 	rsb	r6, r6, #32
 800e9ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e9be:	f000 fa75 	bl	800eeac <__hi0bits>
 800e9c2:	42b0      	cmp	r0, r6
 800e9c4:	dbe7      	blt.n	800e996 <__gethex+0x456>
 800e9c6:	e7f0      	b.n	800e9aa <__gethex+0x46a>
 800e9c8:	080119cf 	.word	0x080119cf

0800e9cc <L_shift>:
 800e9cc:	f1c2 0208 	rsb	r2, r2, #8
 800e9d0:	0092      	lsls	r2, r2, #2
 800e9d2:	b570      	push	{r4, r5, r6, lr}
 800e9d4:	f1c2 0620 	rsb	r6, r2, #32
 800e9d8:	6843      	ldr	r3, [r0, #4]
 800e9da:	6804      	ldr	r4, [r0, #0]
 800e9dc:	fa03 f506 	lsl.w	r5, r3, r6
 800e9e0:	432c      	orrs	r4, r5
 800e9e2:	40d3      	lsrs	r3, r2
 800e9e4:	6004      	str	r4, [r0, #0]
 800e9e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9ea:	4288      	cmp	r0, r1
 800e9ec:	d3f4      	bcc.n	800e9d8 <L_shift+0xc>
 800e9ee:	bd70      	pop	{r4, r5, r6, pc}

0800e9f0 <__match>:
 800e9f0:	b530      	push	{r4, r5, lr}
 800e9f2:	6803      	ldr	r3, [r0, #0]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9fa:	b914      	cbnz	r4, 800ea02 <__match+0x12>
 800e9fc:	6003      	str	r3, [r0, #0]
 800e9fe:	2001      	movs	r0, #1
 800ea00:	bd30      	pop	{r4, r5, pc}
 800ea02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ea0a:	2d19      	cmp	r5, #25
 800ea0c:	bf98      	it	ls
 800ea0e:	3220      	addls	r2, #32
 800ea10:	42a2      	cmp	r2, r4
 800ea12:	d0f0      	beq.n	800e9f6 <__match+0x6>
 800ea14:	2000      	movs	r0, #0
 800ea16:	e7f3      	b.n	800ea00 <__match+0x10>

0800ea18 <__hexnan>:
 800ea18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1c:	680b      	ldr	r3, [r1, #0]
 800ea1e:	115e      	asrs	r6, r3, #5
 800ea20:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea24:	f013 031f 	ands.w	r3, r3, #31
 800ea28:	b087      	sub	sp, #28
 800ea2a:	bf18      	it	ne
 800ea2c:	3604      	addne	r6, #4
 800ea2e:	2500      	movs	r5, #0
 800ea30:	1f37      	subs	r7, r6, #4
 800ea32:	4690      	mov	r8, r2
 800ea34:	6802      	ldr	r2, [r0, #0]
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	4682      	mov	sl, r0
 800ea3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea3e:	46b9      	mov	r9, r7
 800ea40:	463c      	mov	r4, r7
 800ea42:	9502      	str	r5, [sp, #8]
 800ea44:	46ab      	mov	fp, r5
 800ea46:	7851      	ldrb	r1, [r2, #1]
 800ea48:	1c53      	adds	r3, r2, #1
 800ea4a:	9303      	str	r3, [sp, #12]
 800ea4c:	b341      	cbz	r1, 800eaa0 <__hexnan+0x88>
 800ea4e:	4608      	mov	r0, r1
 800ea50:	9205      	str	r2, [sp, #20]
 800ea52:	9104      	str	r1, [sp, #16]
 800ea54:	f7ff fd5e 	bl	800e514 <__hexdig_fun>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d14f      	bne.n	800eafc <__hexnan+0xe4>
 800ea5c:	9904      	ldr	r1, [sp, #16]
 800ea5e:	9a05      	ldr	r2, [sp, #20]
 800ea60:	2920      	cmp	r1, #32
 800ea62:	d818      	bhi.n	800ea96 <__hexnan+0x7e>
 800ea64:	9b02      	ldr	r3, [sp, #8]
 800ea66:	459b      	cmp	fp, r3
 800ea68:	dd13      	ble.n	800ea92 <__hexnan+0x7a>
 800ea6a:	454c      	cmp	r4, r9
 800ea6c:	d206      	bcs.n	800ea7c <__hexnan+0x64>
 800ea6e:	2d07      	cmp	r5, #7
 800ea70:	dc04      	bgt.n	800ea7c <__hexnan+0x64>
 800ea72:	462a      	mov	r2, r5
 800ea74:	4649      	mov	r1, r9
 800ea76:	4620      	mov	r0, r4
 800ea78:	f7ff ffa8 	bl	800e9cc <L_shift>
 800ea7c:	4544      	cmp	r4, r8
 800ea7e:	d950      	bls.n	800eb22 <__hexnan+0x10a>
 800ea80:	2300      	movs	r3, #0
 800ea82:	f1a4 0904 	sub.w	r9, r4, #4
 800ea86:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea8a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea8e:	464c      	mov	r4, r9
 800ea90:	461d      	mov	r5, r3
 800ea92:	9a03      	ldr	r2, [sp, #12]
 800ea94:	e7d7      	b.n	800ea46 <__hexnan+0x2e>
 800ea96:	2929      	cmp	r1, #41	; 0x29
 800ea98:	d156      	bne.n	800eb48 <__hexnan+0x130>
 800ea9a:	3202      	adds	r2, #2
 800ea9c:	f8ca 2000 	str.w	r2, [sl]
 800eaa0:	f1bb 0f00 	cmp.w	fp, #0
 800eaa4:	d050      	beq.n	800eb48 <__hexnan+0x130>
 800eaa6:	454c      	cmp	r4, r9
 800eaa8:	d206      	bcs.n	800eab8 <__hexnan+0xa0>
 800eaaa:	2d07      	cmp	r5, #7
 800eaac:	dc04      	bgt.n	800eab8 <__hexnan+0xa0>
 800eaae:	462a      	mov	r2, r5
 800eab0:	4649      	mov	r1, r9
 800eab2:	4620      	mov	r0, r4
 800eab4:	f7ff ff8a 	bl	800e9cc <L_shift>
 800eab8:	4544      	cmp	r4, r8
 800eaba:	d934      	bls.n	800eb26 <__hexnan+0x10e>
 800eabc:	f1a8 0204 	sub.w	r2, r8, #4
 800eac0:	4623      	mov	r3, r4
 800eac2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eac6:	f842 1f04 	str.w	r1, [r2, #4]!
 800eaca:	429f      	cmp	r7, r3
 800eacc:	d2f9      	bcs.n	800eac2 <__hexnan+0xaa>
 800eace:	1b3b      	subs	r3, r7, r4
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	3304      	adds	r3, #4
 800ead6:	3401      	adds	r4, #1
 800ead8:	3e03      	subs	r6, #3
 800eada:	42b4      	cmp	r4, r6
 800eadc:	bf88      	it	hi
 800eade:	2304      	movhi	r3, #4
 800eae0:	4443      	add	r3, r8
 800eae2:	2200      	movs	r2, #0
 800eae4:	f843 2b04 	str.w	r2, [r3], #4
 800eae8:	429f      	cmp	r7, r3
 800eaea:	d2fb      	bcs.n	800eae4 <__hexnan+0xcc>
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	b91b      	cbnz	r3, 800eaf8 <__hexnan+0xe0>
 800eaf0:	4547      	cmp	r7, r8
 800eaf2:	d127      	bne.n	800eb44 <__hexnan+0x12c>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	603b      	str	r3, [r7, #0]
 800eaf8:	2005      	movs	r0, #5
 800eafa:	e026      	b.n	800eb4a <__hexnan+0x132>
 800eafc:	3501      	adds	r5, #1
 800eafe:	2d08      	cmp	r5, #8
 800eb00:	f10b 0b01 	add.w	fp, fp, #1
 800eb04:	dd06      	ble.n	800eb14 <__hexnan+0xfc>
 800eb06:	4544      	cmp	r4, r8
 800eb08:	d9c3      	bls.n	800ea92 <__hexnan+0x7a>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb10:	2501      	movs	r5, #1
 800eb12:	3c04      	subs	r4, #4
 800eb14:	6822      	ldr	r2, [r4, #0]
 800eb16:	f000 000f 	and.w	r0, r0, #15
 800eb1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eb1e:	6022      	str	r2, [r4, #0]
 800eb20:	e7b7      	b.n	800ea92 <__hexnan+0x7a>
 800eb22:	2508      	movs	r5, #8
 800eb24:	e7b5      	b.n	800ea92 <__hexnan+0x7a>
 800eb26:	9b01      	ldr	r3, [sp, #4]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d0df      	beq.n	800eaec <__hexnan+0xd4>
 800eb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb30:	f1c3 0320 	rsb	r3, r3, #32
 800eb34:	fa22 f303 	lsr.w	r3, r2, r3
 800eb38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb3c:	401a      	ands	r2, r3
 800eb3e:	f846 2c04 	str.w	r2, [r6, #-4]
 800eb42:	e7d3      	b.n	800eaec <__hexnan+0xd4>
 800eb44:	3f04      	subs	r7, #4
 800eb46:	e7d1      	b.n	800eaec <__hexnan+0xd4>
 800eb48:	2004      	movs	r0, #4
 800eb4a:	b007      	add	sp, #28
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb50 <_localeconv_r>:
 800eb50:	4800      	ldr	r0, [pc, #0]	; (800eb54 <_localeconv_r+0x4>)
 800eb52:	4770      	bx	lr
 800eb54:	2000036c 	.word	0x2000036c

0800eb58 <_lseek_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4d07      	ldr	r5, [pc, #28]	; (800eb78 <_lseek_r+0x20>)
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	4608      	mov	r0, r1
 800eb60:	4611      	mov	r1, r2
 800eb62:	2200      	movs	r2, #0
 800eb64:	602a      	str	r2, [r5, #0]
 800eb66:	461a      	mov	r2, r3
 800eb68:	f7f4 f860 	bl	8002c2c <_lseek>
 800eb6c:	1c43      	adds	r3, r0, #1
 800eb6e:	d102      	bne.n	800eb76 <_lseek_r+0x1e>
 800eb70:	682b      	ldr	r3, [r5, #0]
 800eb72:	b103      	cbz	r3, 800eb76 <_lseek_r+0x1e>
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	bd38      	pop	{r3, r4, r5, pc}
 800eb78:	200130d8 	.word	0x200130d8

0800eb7c <__swhatbuf_r>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	460e      	mov	r6, r1
 800eb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb84:	2900      	cmp	r1, #0
 800eb86:	b096      	sub	sp, #88	; 0x58
 800eb88:	4614      	mov	r4, r2
 800eb8a:	461d      	mov	r5, r3
 800eb8c:	da08      	bge.n	800eba0 <__swhatbuf_r+0x24>
 800eb8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	602a      	str	r2, [r5, #0]
 800eb96:	061a      	lsls	r2, r3, #24
 800eb98:	d410      	bmi.n	800ebbc <__swhatbuf_r+0x40>
 800eb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb9e:	e00e      	b.n	800ebbe <__swhatbuf_r+0x42>
 800eba0:	466a      	mov	r2, sp
 800eba2:	f001 fbc9 	bl	8010338 <_fstat_r>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	dbf1      	blt.n	800eb8e <__swhatbuf_r+0x12>
 800ebaa:	9a01      	ldr	r2, [sp, #4]
 800ebac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ebb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ebb4:	425a      	negs	r2, r3
 800ebb6:	415a      	adcs	r2, r3
 800ebb8:	602a      	str	r2, [r5, #0]
 800ebba:	e7ee      	b.n	800eb9a <__swhatbuf_r+0x1e>
 800ebbc:	2340      	movs	r3, #64	; 0x40
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	b016      	add	sp, #88	; 0x58
 800ebc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ebc8 <__smakebuf_r>:
 800ebc8:	898b      	ldrh	r3, [r1, #12]
 800ebca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebcc:	079d      	lsls	r5, r3, #30
 800ebce:	4606      	mov	r6, r0
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	d507      	bpl.n	800ebe4 <__smakebuf_r+0x1c>
 800ebd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	6123      	str	r3, [r4, #16]
 800ebdc:	2301      	movs	r3, #1
 800ebde:	6163      	str	r3, [r4, #20]
 800ebe0:	b002      	add	sp, #8
 800ebe2:	bd70      	pop	{r4, r5, r6, pc}
 800ebe4:	ab01      	add	r3, sp, #4
 800ebe6:	466a      	mov	r2, sp
 800ebe8:	f7ff ffc8 	bl	800eb7c <__swhatbuf_r>
 800ebec:	9900      	ldr	r1, [sp, #0]
 800ebee:	4605      	mov	r5, r0
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	f7fc fbfd 	bl	800b3f0 <_malloc_r>
 800ebf6:	b948      	cbnz	r0, 800ec0c <__smakebuf_r+0x44>
 800ebf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebfc:	059a      	lsls	r2, r3, #22
 800ebfe:	d4ef      	bmi.n	800ebe0 <__smakebuf_r+0x18>
 800ec00:	f023 0303 	bic.w	r3, r3, #3
 800ec04:	f043 0302 	orr.w	r3, r3, #2
 800ec08:	81a3      	strh	r3, [r4, #12]
 800ec0a:	e7e3      	b.n	800ebd4 <__smakebuf_r+0xc>
 800ec0c:	4b0d      	ldr	r3, [pc, #52]	; (800ec44 <__smakebuf_r+0x7c>)
 800ec0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ec10:	89a3      	ldrh	r3, [r4, #12]
 800ec12:	6020      	str	r0, [r4, #0]
 800ec14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec18:	81a3      	strh	r3, [r4, #12]
 800ec1a:	9b00      	ldr	r3, [sp, #0]
 800ec1c:	6163      	str	r3, [r4, #20]
 800ec1e:	9b01      	ldr	r3, [sp, #4]
 800ec20:	6120      	str	r0, [r4, #16]
 800ec22:	b15b      	cbz	r3, 800ec3c <__smakebuf_r+0x74>
 800ec24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec28:	4630      	mov	r0, r6
 800ec2a:	f001 fb97 	bl	801035c <_isatty_r>
 800ec2e:	b128      	cbz	r0, 800ec3c <__smakebuf_r+0x74>
 800ec30:	89a3      	ldrh	r3, [r4, #12]
 800ec32:	f023 0303 	bic.w	r3, r3, #3
 800ec36:	f043 0301 	orr.w	r3, r3, #1
 800ec3a:	81a3      	strh	r3, [r4, #12]
 800ec3c:	89a0      	ldrh	r0, [r4, #12]
 800ec3e:	4305      	orrs	r5, r0
 800ec40:	81a5      	strh	r5, [r4, #12]
 800ec42:	e7cd      	b.n	800ebe0 <__smakebuf_r+0x18>
 800ec44:	0800b16d 	.word	0x0800b16d

0800ec48 <malloc>:
 800ec48:	4b02      	ldr	r3, [pc, #8]	; (800ec54 <malloc+0xc>)
 800ec4a:	4601      	mov	r1, r0
 800ec4c:	6818      	ldr	r0, [r3, #0]
 800ec4e:	f7fc bbcf 	b.w	800b3f0 <_malloc_r>
 800ec52:	bf00      	nop
 800ec54:	20000214 	.word	0x20000214

0800ec58 <__ascii_mbtowc>:
 800ec58:	b082      	sub	sp, #8
 800ec5a:	b901      	cbnz	r1, 800ec5e <__ascii_mbtowc+0x6>
 800ec5c:	a901      	add	r1, sp, #4
 800ec5e:	b142      	cbz	r2, 800ec72 <__ascii_mbtowc+0x1a>
 800ec60:	b14b      	cbz	r3, 800ec76 <__ascii_mbtowc+0x1e>
 800ec62:	7813      	ldrb	r3, [r2, #0]
 800ec64:	600b      	str	r3, [r1, #0]
 800ec66:	7812      	ldrb	r2, [r2, #0]
 800ec68:	1e10      	subs	r0, r2, #0
 800ec6a:	bf18      	it	ne
 800ec6c:	2001      	movne	r0, #1
 800ec6e:	b002      	add	sp, #8
 800ec70:	4770      	bx	lr
 800ec72:	4610      	mov	r0, r2
 800ec74:	e7fb      	b.n	800ec6e <__ascii_mbtowc+0x16>
 800ec76:	f06f 0001 	mvn.w	r0, #1
 800ec7a:	e7f8      	b.n	800ec6e <__ascii_mbtowc+0x16>

0800ec7c <memmove>:
 800ec7c:	4288      	cmp	r0, r1
 800ec7e:	b510      	push	{r4, lr}
 800ec80:	eb01 0402 	add.w	r4, r1, r2
 800ec84:	d902      	bls.n	800ec8c <memmove+0x10>
 800ec86:	4284      	cmp	r4, r0
 800ec88:	4623      	mov	r3, r4
 800ec8a:	d807      	bhi.n	800ec9c <memmove+0x20>
 800ec8c:	1e43      	subs	r3, r0, #1
 800ec8e:	42a1      	cmp	r1, r4
 800ec90:	d008      	beq.n	800eca4 <memmove+0x28>
 800ec92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec9a:	e7f8      	b.n	800ec8e <memmove+0x12>
 800ec9c:	4402      	add	r2, r0
 800ec9e:	4601      	mov	r1, r0
 800eca0:	428a      	cmp	r2, r1
 800eca2:	d100      	bne.n	800eca6 <memmove+0x2a>
 800eca4:	bd10      	pop	{r4, pc}
 800eca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ecae:	e7f7      	b.n	800eca0 <memmove+0x24>

0800ecb0 <__malloc_lock>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	; (800ecb8 <__malloc_lock+0x8>)
 800ecb2:	f7fc bb64 	b.w	800b37e <__retarget_lock_acquire_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	200130cc 	.word	0x200130cc

0800ecbc <__malloc_unlock>:
 800ecbc:	4801      	ldr	r0, [pc, #4]	; (800ecc4 <__malloc_unlock+0x8>)
 800ecbe:	f7fc bb5f 	b.w	800b380 <__retarget_lock_release_recursive>
 800ecc2:	bf00      	nop
 800ecc4:	200130cc 	.word	0x200130cc

0800ecc8 <_Balloc>:
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eccc:	4604      	mov	r4, r0
 800ecce:	460d      	mov	r5, r1
 800ecd0:	b976      	cbnz	r6, 800ecf0 <_Balloc+0x28>
 800ecd2:	2010      	movs	r0, #16
 800ecd4:	f7ff ffb8 	bl	800ec48 <malloc>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	6260      	str	r0, [r4, #36]	; 0x24
 800ecdc:	b920      	cbnz	r0, 800ece8 <_Balloc+0x20>
 800ecde:	4b18      	ldr	r3, [pc, #96]	; (800ed40 <_Balloc+0x78>)
 800ece0:	4818      	ldr	r0, [pc, #96]	; (800ed44 <_Balloc+0x7c>)
 800ece2:	2166      	movs	r1, #102	; 0x66
 800ece4:	f7fc f9fa 	bl	800b0dc <__assert_func>
 800ece8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecec:	6006      	str	r6, [r0, #0]
 800ecee:	60c6      	str	r6, [r0, #12]
 800ecf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ecf2:	68f3      	ldr	r3, [r6, #12]
 800ecf4:	b183      	cbz	r3, 800ed18 <_Balloc+0x50>
 800ecf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecfe:	b9b8      	cbnz	r0, 800ed30 <_Balloc+0x68>
 800ed00:	2101      	movs	r1, #1
 800ed02:	fa01 f605 	lsl.w	r6, r1, r5
 800ed06:	1d72      	adds	r2, r6, #5
 800ed08:	0092      	lsls	r2, r2, #2
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fc9d 	bl	800f64a <_calloc_r>
 800ed10:	b160      	cbz	r0, 800ed2c <_Balloc+0x64>
 800ed12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed16:	e00e      	b.n	800ed36 <_Balloc+0x6e>
 800ed18:	2221      	movs	r2, #33	; 0x21
 800ed1a:	2104      	movs	r1, #4
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fc94 	bl	800f64a <_calloc_r>
 800ed22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed24:	60f0      	str	r0, [r6, #12]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1e4      	bne.n	800ecf6 <_Balloc+0x2e>
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	6802      	ldr	r2, [r0, #0]
 800ed32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed36:	2300      	movs	r3, #0
 800ed38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed3c:	e7f7      	b.n	800ed2e <_Balloc+0x66>
 800ed3e:	bf00      	nop
 800ed40:	0801195d 	.word	0x0801195d
 800ed44:	08011a5c 	.word	0x08011a5c

0800ed48 <_Bfree>:
 800ed48:	b570      	push	{r4, r5, r6, lr}
 800ed4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	460c      	mov	r4, r1
 800ed50:	b976      	cbnz	r6, 800ed70 <_Bfree+0x28>
 800ed52:	2010      	movs	r0, #16
 800ed54:	f7ff ff78 	bl	800ec48 <malloc>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	6268      	str	r0, [r5, #36]	; 0x24
 800ed5c:	b920      	cbnz	r0, 800ed68 <_Bfree+0x20>
 800ed5e:	4b09      	ldr	r3, [pc, #36]	; (800ed84 <_Bfree+0x3c>)
 800ed60:	4809      	ldr	r0, [pc, #36]	; (800ed88 <_Bfree+0x40>)
 800ed62:	218a      	movs	r1, #138	; 0x8a
 800ed64:	f7fc f9ba 	bl	800b0dc <__assert_func>
 800ed68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed6c:	6006      	str	r6, [r0, #0]
 800ed6e:	60c6      	str	r6, [r0, #12]
 800ed70:	b13c      	cbz	r4, 800ed82 <_Bfree+0x3a>
 800ed72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed74:	6862      	ldr	r2, [r4, #4]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed7c:	6021      	str	r1, [r4, #0]
 800ed7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	0801195d 	.word	0x0801195d
 800ed88:	08011a5c 	.word	0x08011a5c

0800ed8c <__multadd>:
 800ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	690d      	ldr	r5, [r1, #16]
 800ed92:	4607      	mov	r7, r0
 800ed94:	460c      	mov	r4, r1
 800ed96:	461e      	mov	r6, r3
 800ed98:	f101 0c14 	add.w	ip, r1, #20
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	f8dc 3000 	ldr.w	r3, [ip]
 800eda2:	b299      	uxth	r1, r3
 800eda4:	fb02 6101 	mla	r1, r2, r1, r6
 800eda8:	0c1e      	lsrs	r6, r3, #16
 800edaa:	0c0b      	lsrs	r3, r1, #16
 800edac:	fb02 3306 	mla	r3, r2, r6, r3
 800edb0:	b289      	uxth	r1, r1
 800edb2:	3001      	adds	r0, #1
 800edb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800edb8:	4285      	cmp	r5, r0
 800edba:	f84c 1b04 	str.w	r1, [ip], #4
 800edbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800edc2:	dcec      	bgt.n	800ed9e <__multadd+0x12>
 800edc4:	b30e      	cbz	r6, 800ee0a <__multadd+0x7e>
 800edc6:	68a3      	ldr	r3, [r4, #8]
 800edc8:	42ab      	cmp	r3, r5
 800edca:	dc19      	bgt.n	800ee00 <__multadd+0x74>
 800edcc:	6861      	ldr	r1, [r4, #4]
 800edce:	4638      	mov	r0, r7
 800edd0:	3101      	adds	r1, #1
 800edd2:	f7ff ff79 	bl	800ecc8 <_Balloc>
 800edd6:	4680      	mov	r8, r0
 800edd8:	b928      	cbnz	r0, 800ede6 <__multadd+0x5a>
 800edda:	4602      	mov	r2, r0
 800eddc:	4b0c      	ldr	r3, [pc, #48]	; (800ee10 <__multadd+0x84>)
 800edde:	480d      	ldr	r0, [pc, #52]	; (800ee14 <__multadd+0x88>)
 800ede0:	21b5      	movs	r1, #181	; 0xb5
 800ede2:	f7fc f97b 	bl	800b0dc <__assert_func>
 800ede6:	6922      	ldr	r2, [r4, #16]
 800ede8:	3202      	adds	r2, #2
 800edea:	f104 010c 	add.w	r1, r4, #12
 800edee:	0092      	lsls	r2, r2, #2
 800edf0:	300c      	adds	r0, #12
 800edf2:	f7fc fac6 	bl	800b382 <memcpy>
 800edf6:	4621      	mov	r1, r4
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7ff ffa5 	bl	800ed48 <_Bfree>
 800edfe:	4644      	mov	r4, r8
 800ee00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee04:	3501      	adds	r5, #1
 800ee06:	615e      	str	r6, [r3, #20]
 800ee08:	6125      	str	r5, [r4, #16]
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee10:	080119cf 	.word	0x080119cf
 800ee14:	08011a5c 	.word	0x08011a5c

0800ee18 <__s2b>:
 800ee18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	4615      	mov	r5, r2
 800ee20:	461f      	mov	r7, r3
 800ee22:	2209      	movs	r2, #9
 800ee24:	3308      	adds	r3, #8
 800ee26:	4606      	mov	r6, r0
 800ee28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	2201      	movs	r2, #1
 800ee30:	429a      	cmp	r2, r3
 800ee32:	db09      	blt.n	800ee48 <__s2b+0x30>
 800ee34:	4630      	mov	r0, r6
 800ee36:	f7ff ff47 	bl	800ecc8 <_Balloc>
 800ee3a:	b940      	cbnz	r0, 800ee4e <__s2b+0x36>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	4b19      	ldr	r3, [pc, #100]	; (800eea4 <__s2b+0x8c>)
 800ee40:	4819      	ldr	r0, [pc, #100]	; (800eea8 <__s2b+0x90>)
 800ee42:	21ce      	movs	r1, #206	; 0xce
 800ee44:	f7fc f94a 	bl	800b0dc <__assert_func>
 800ee48:	0052      	lsls	r2, r2, #1
 800ee4a:	3101      	adds	r1, #1
 800ee4c:	e7f0      	b.n	800ee30 <__s2b+0x18>
 800ee4e:	9b08      	ldr	r3, [sp, #32]
 800ee50:	6143      	str	r3, [r0, #20]
 800ee52:	2d09      	cmp	r5, #9
 800ee54:	f04f 0301 	mov.w	r3, #1
 800ee58:	6103      	str	r3, [r0, #16]
 800ee5a:	dd16      	ble.n	800ee8a <__s2b+0x72>
 800ee5c:	f104 0909 	add.w	r9, r4, #9
 800ee60:	46c8      	mov	r8, r9
 800ee62:	442c      	add	r4, r5
 800ee64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ee68:	4601      	mov	r1, r0
 800ee6a:	3b30      	subs	r3, #48	; 0x30
 800ee6c:	220a      	movs	r2, #10
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f7ff ff8c 	bl	800ed8c <__multadd>
 800ee74:	45a0      	cmp	r8, r4
 800ee76:	d1f5      	bne.n	800ee64 <__s2b+0x4c>
 800ee78:	f1a5 0408 	sub.w	r4, r5, #8
 800ee7c:	444c      	add	r4, r9
 800ee7e:	1b2d      	subs	r5, r5, r4
 800ee80:	1963      	adds	r3, r4, r5
 800ee82:	42bb      	cmp	r3, r7
 800ee84:	db04      	blt.n	800ee90 <__s2b+0x78>
 800ee86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee8a:	340a      	adds	r4, #10
 800ee8c:	2509      	movs	r5, #9
 800ee8e:	e7f6      	b.n	800ee7e <__s2b+0x66>
 800ee90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee94:	4601      	mov	r1, r0
 800ee96:	3b30      	subs	r3, #48	; 0x30
 800ee98:	220a      	movs	r2, #10
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f7ff ff76 	bl	800ed8c <__multadd>
 800eea0:	e7ee      	b.n	800ee80 <__s2b+0x68>
 800eea2:	bf00      	nop
 800eea4:	080119cf 	.word	0x080119cf
 800eea8:	08011a5c 	.word	0x08011a5c

0800eeac <__hi0bits>:
 800eeac:	0c03      	lsrs	r3, r0, #16
 800eeae:	041b      	lsls	r3, r3, #16
 800eeb0:	b9d3      	cbnz	r3, 800eee8 <__hi0bits+0x3c>
 800eeb2:	0400      	lsls	r0, r0, #16
 800eeb4:	2310      	movs	r3, #16
 800eeb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eeba:	bf04      	itt	eq
 800eebc:	0200      	lsleq	r0, r0, #8
 800eebe:	3308      	addeq	r3, #8
 800eec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eec4:	bf04      	itt	eq
 800eec6:	0100      	lsleq	r0, r0, #4
 800eec8:	3304      	addeq	r3, #4
 800eeca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eece:	bf04      	itt	eq
 800eed0:	0080      	lsleq	r0, r0, #2
 800eed2:	3302      	addeq	r3, #2
 800eed4:	2800      	cmp	r0, #0
 800eed6:	db05      	blt.n	800eee4 <__hi0bits+0x38>
 800eed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eedc:	f103 0301 	add.w	r3, r3, #1
 800eee0:	bf08      	it	eq
 800eee2:	2320      	moveq	r3, #32
 800eee4:	4618      	mov	r0, r3
 800eee6:	4770      	bx	lr
 800eee8:	2300      	movs	r3, #0
 800eeea:	e7e4      	b.n	800eeb6 <__hi0bits+0xa>

0800eeec <__lo0bits>:
 800eeec:	6803      	ldr	r3, [r0, #0]
 800eeee:	f013 0207 	ands.w	r2, r3, #7
 800eef2:	4601      	mov	r1, r0
 800eef4:	d00b      	beq.n	800ef0e <__lo0bits+0x22>
 800eef6:	07da      	lsls	r2, r3, #31
 800eef8:	d423      	bmi.n	800ef42 <__lo0bits+0x56>
 800eefa:	0798      	lsls	r0, r3, #30
 800eefc:	bf49      	itett	mi
 800eefe:	085b      	lsrmi	r3, r3, #1
 800ef00:	089b      	lsrpl	r3, r3, #2
 800ef02:	2001      	movmi	r0, #1
 800ef04:	600b      	strmi	r3, [r1, #0]
 800ef06:	bf5c      	itt	pl
 800ef08:	600b      	strpl	r3, [r1, #0]
 800ef0a:	2002      	movpl	r0, #2
 800ef0c:	4770      	bx	lr
 800ef0e:	b298      	uxth	r0, r3
 800ef10:	b9a8      	cbnz	r0, 800ef3e <__lo0bits+0x52>
 800ef12:	0c1b      	lsrs	r3, r3, #16
 800ef14:	2010      	movs	r0, #16
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	b90a      	cbnz	r2, 800ef1e <__lo0bits+0x32>
 800ef1a:	3008      	adds	r0, #8
 800ef1c:	0a1b      	lsrs	r3, r3, #8
 800ef1e:	071a      	lsls	r2, r3, #28
 800ef20:	bf04      	itt	eq
 800ef22:	091b      	lsreq	r3, r3, #4
 800ef24:	3004      	addeq	r0, #4
 800ef26:	079a      	lsls	r2, r3, #30
 800ef28:	bf04      	itt	eq
 800ef2a:	089b      	lsreq	r3, r3, #2
 800ef2c:	3002      	addeq	r0, #2
 800ef2e:	07da      	lsls	r2, r3, #31
 800ef30:	d403      	bmi.n	800ef3a <__lo0bits+0x4e>
 800ef32:	085b      	lsrs	r3, r3, #1
 800ef34:	f100 0001 	add.w	r0, r0, #1
 800ef38:	d005      	beq.n	800ef46 <__lo0bits+0x5a>
 800ef3a:	600b      	str	r3, [r1, #0]
 800ef3c:	4770      	bx	lr
 800ef3e:	4610      	mov	r0, r2
 800ef40:	e7e9      	b.n	800ef16 <__lo0bits+0x2a>
 800ef42:	2000      	movs	r0, #0
 800ef44:	4770      	bx	lr
 800ef46:	2020      	movs	r0, #32
 800ef48:	4770      	bx	lr
	...

0800ef4c <__i2b>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	460c      	mov	r4, r1
 800ef50:	2101      	movs	r1, #1
 800ef52:	f7ff feb9 	bl	800ecc8 <_Balloc>
 800ef56:	4602      	mov	r2, r0
 800ef58:	b928      	cbnz	r0, 800ef66 <__i2b+0x1a>
 800ef5a:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <__i2b+0x24>)
 800ef5c:	4805      	ldr	r0, [pc, #20]	; (800ef74 <__i2b+0x28>)
 800ef5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ef62:	f7fc f8bb 	bl	800b0dc <__assert_func>
 800ef66:	2301      	movs	r3, #1
 800ef68:	6144      	str	r4, [r0, #20]
 800ef6a:	6103      	str	r3, [r0, #16]
 800ef6c:	bd10      	pop	{r4, pc}
 800ef6e:	bf00      	nop
 800ef70:	080119cf 	.word	0x080119cf
 800ef74:	08011a5c 	.word	0x08011a5c

0800ef78 <__multiply>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	4691      	mov	r9, r2
 800ef7e:	690a      	ldr	r2, [r1, #16]
 800ef80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	bfb8      	it	lt
 800ef88:	460b      	movlt	r3, r1
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	bfbc      	itt	lt
 800ef8e:	464c      	movlt	r4, r9
 800ef90:	4699      	movlt	r9, r3
 800ef92:	6927      	ldr	r7, [r4, #16]
 800ef94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ef98:	68a3      	ldr	r3, [r4, #8]
 800ef9a:	6861      	ldr	r1, [r4, #4]
 800ef9c:	eb07 060a 	add.w	r6, r7, sl
 800efa0:	42b3      	cmp	r3, r6
 800efa2:	b085      	sub	sp, #20
 800efa4:	bfb8      	it	lt
 800efa6:	3101      	addlt	r1, #1
 800efa8:	f7ff fe8e 	bl	800ecc8 <_Balloc>
 800efac:	b930      	cbnz	r0, 800efbc <__multiply+0x44>
 800efae:	4602      	mov	r2, r0
 800efb0:	4b44      	ldr	r3, [pc, #272]	; (800f0c4 <__multiply+0x14c>)
 800efb2:	4845      	ldr	r0, [pc, #276]	; (800f0c8 <__multiply+0x150>)
 800efb4:	f240 115d 	movw	r1, #349	; 0x15d
 800efb8:	f7fc f890 	bl	800b0dc <__assert_func>
 800efbc:	f100 0514 	add.w	r5, r0, #20
 800efc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800efc4:	462b      	mov	r3, r5
 800efc6:	2200      	movs	r2, #0
 800efc8:	4543      	cmp	r3, r8
 800efca:	d321      	bcc.n	800f010 <__multiply+0x98>
 800efcc:	f104 0314 	add.w	r3, r4, #20
 800efd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800efd4:	f109 0314 	add.w	r3, r9, #20
 800efd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800efdc:	9202      	str	r2, [sp, #8]
 800efde:	1b3a      	subs	r2, r7, r4
 800efe0:	3a15      	subs	r2, #21
 800efe2:	f022 0203 	bic.w	r2, r2, #3
 800efe6:	3204      	adds	r2, #4
 800efe8:	f104 0115 	add.w	r1, r4, #21
 800efec:	428f      	cmp	r7, r1
 800efee:	bf38      	it	cc
 800eff0:	2204      	movcc	r2, #4
 800eff2:	9201      	str	r2, [sp, #4]
 800eff4:	9a02      	ldr	r2, [sp, #8]
 800eff6:	9303      	str	r3, [sp, #12]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d80c      	bhi.n	800f016 <__multiply+0x9e>
 800effc:	2e00      	cmp	r6, #0
 800effe:	dd03      	ble.n	800f008 <__multiply+0x90>
 800f000:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f004:	2b00      	cmp	r3, #0
 800f006:	d05a      	beq.n	800f0be <__multiply+0x146>
 800f008:	6106      	str	r6, [r0, #16]
 800f00a:	b005      	add	sp, #20
 800f00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f010:	f843 2b04 	str.w	r2, [r3], #4
 800f014:	e7d8      	b.n	800efc8 <__multiply+0x50>
 800f016:	f8b3 a000 	ldrh.w	sl, [r3]
 800f01a:	f1ba 0f00 	cmp.w	sl, #0
 800f01e:	d024      	beq.n	800f06a <__multiply+0xf2>
 800f020:	f104 0e14 	add.w	lr, r4, #20
 800f024:	46a9      	mov	r9, r5
 800f026:	f04f 0c00 	mov.w	ip, #0
 800f02a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f02e:	f8d9 1000 	ldr.w	r1, [r9]
 800f032:	fa1f fb82 	uxth.w	fp, r2
 800f036:	b289      	uxth	r1, r1
 800f038:	fb0a 110b 	mla	r1, sl, fp, r1
 800f03c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f040:	f8d9 2000 	ldr.w	r2, [r9]
 800f044:	4461      	add	r1, ip
 800f046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f04a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f04e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f052:	b289      	uxth	r1, r1
 800f054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f058:	4577      	cmp	r7, lr
 800f05a:	f849 1b04 	str.w	r1, [r9], #4
 800f05e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f062:	d8e2      	bhi.n	800f02a <__multiply+0xb2>
 800f064:	9a01      	ldr	r2, [sp, #4]
 800f066:	f845 c002 	str.w	ip, [r5, r2]
 800f06a:	9a03      	ldr	r2, [sp, #12]
 800f06c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f070:	3304      	adds	r3, #4
 800f072:	f1b9 0f00 	cmp.w	r9, #0
 800f076:	d020      	beq.n	800f0ba <__multiply+0x142>
 800f078:	6829      	ldr	r1, [r5, #0]
 800f07a:	f104 0c14 	add.w	ip, r4, #20
 800f07e:	46ae      	mov	lr, r5
 800f080:	f04f 0a00 	mov.w	sl, #0
 800f084:	f8bc b000 	ldrh.w	fp, [ip]
 800f088:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f08c:	fb09 220b 	mla	r2, r9, fp, r2
 800f090:	4492      	add	sl, r2
 800f092:	b289      	uxth	r1, r1
 800f094:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f098:	f84e 1b04 	str.w	r1, [lr], #4
 800f09c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f0a0:	f8be 1000 	ldrh.w	r1, [lr]
 800f0a4:	0c12      	lsrs	r2, r2, #16
 800f0a6:	fb09 1102 	mla	r1, r9, r2, r1
 800f0aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f0ae:	4567      	cmp	r7, ip
 800f0b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f0b4:	d8e6      	bhi.n	800f084 <__multiply+0x10c>
 800f0b6:	9a01      	ldr	r2, [sp, #4]
 800f0b8:	50a9      	str	r1, [r5, r2]
 800f0ba:	3504      	adds	r5, #4
 800f0bc:	e79a      	b.n	800eff4 <__multiply+0x7c>
 800f0be:	3e01      	subs	r6, #1
 800f0c0:	e79c      	b.n	800effc <__multiply+0x84>
 800f0c2:	bf00      	nop
 800f0c4:	080119cf 	.word	0x080119cf
 800f0c8:	08011a5c 	.word	0x08011a5c

0800f0cc <__pow5mult>:
 800f0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d0:	4615      	mov	r5, r2
 800f0d2:	f012 0203 	ands.w	r2, r2, #3
 800f0d6:	4606      	mov	r6, r0
 800f0d8:	460f      	mov	r7, r1
 800f0da:	d007      	beq.n	800f0ec <__pow5mult+0x20>
 800f0dc:	4c25      	ldr	r4, [pc, #148]	; (800f174 <__pow5mult+0xa8>)
 800f0de:	3a01      	subs	r2, #1
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0e6:	f7ff fe51 	bl	800ed8c <__multadd>
 800f0ea:	4607      	mov	r7, r0
 800f0ec:	10ad      	asrs	r5, r5, #2
 800f0ee:	d03d      	beq.n	800f16c <__pow5mult+0xa0>
 800f0f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f0f2:	b97c      	cbnz	r4, 800f114 <__pow5mult+0x48>
 800f0f4:	2010      	movs	r0, #16
 800f0f6:	f7ff fda7 	bl	800ec48 <malloc>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	6270      	str	r0, [r6, #36]	; 0x24
 800f0fe:	b928      	cbnz	r0, 800f10c <__pow5mult+0x40>
 800f100:	4b1d      	ldr	r3, [pc, #116]	; (800f178 <__pow5mult+0xac>)
 800f102:	481e      	ldr	r0, [pc, #120]	; (800f17c <__pow5mult+0xb0>)
 800f104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f108:	f7fb ffe8 	bl	800b0dc <__assert_func>
 800f10c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f110:	6004      	str	r4, [r0, #0]
 800f112:	60c4      	str	r4, [r0, #12]
 800f114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f11c:	b94c      	cbnz	r4, 800f132 <__pow5mult+0x66>
 800f11e:	f240 2171 	movw	r1, #625	; 0x271
 800f122:	4630      	mov	r0, r6
 800f124:	f7ff ff12 	bl	800ef4c <__i2b>
 800f128:	2300      	movs	r3, #0
 800f12a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f12e:	4604      	mov	r4, r0
 800f130:	6003      	str	r3, [r0, #0]
 800f132:	f04f 0900 	mov.w	r9, #0
 800f136:	07eb      	lsls	r3, r5, #31
 800f138:	d50a      	bpl.n	800f150 <__pow5mult+0x84>
 800f13a:	4639      	mov	r1, r7
 800f13c:	4622      	mov	r2, r4
 800f13e:	4630      	mov	r0, r6
 800f140:	f7ff ff1a 	bl	800ef78 <__multiply>
 800f144:	4639      	mov	r1, r7
 800f146:	4680      	mov	r8, r0
 800f148:	4630      	mov	r0, r6
 800f14a:	f7ff fdfd 	bl	800ed48 <_Bfree>
 800f14e:	4647      	mov	r7, r8
 800f150:	106d      	asrs	r5, r5, #1
 800f152:	d00b      	beq.n	800f16c <__pow5mult+0xa0>
 800f154:	6820      	ldr	r0, [r4, #0]
 800f156:	b938      	cbnz	r0, 800f168 <__pow5mult+0x9c>
 800f158:	4622      	mov	r2, r4
 800f15a:	4621      	mov	r1, r4
 800f15c:	4630      	mov	r0, r6
 800f15e:	f7ff ff0b 	bl	800ef78 <__multiply>
 800f162:	6020      	str	r0, [r4, #0]
 800f164:	f8c0 9000 	str.w	r9, [r0]
 800f168:	4604      	mov	r4, r0
 800f16a:	e7e4      	b.n	800f136 <__pow5mult+0x6a>
 800f16c:	4638      	mov	r0, r7
 800f16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f172:	bf00      	nop
 800f174:	08011ba8 	.word	0x08011ba8
 800f178:	0801195d 	.word	0x0801195d
 800f17c:	08011a5c 	.word	0x08011a5c

0800f180 <__lshift>:
 800f180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f184:	460c      	mov	r4, r1
 800f186:	6849      	ldr	r1, [r1, #4]
 800f188:	6923      	ldr	r3, [r4, #16]
 800f18a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f18e:	68a3      	ldr	r3, [r4, #8]
 800f190:	4607      	mov	r7, r0
 800f192:	4691      	mov	r9, r2
 800f194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f198:	f108 0601 	add.w	r6, r8, #1
 800f19c:	42b3      	cmp	r3, r6
 800f19e:	db0b      	blt.n	800f1b8 <__lshift+0x38>
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	f7ff fd91 	bl	800ecc8 <_Balloc>
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	b948      	cbnz	r0, 800f1be <__lshift+0x3e>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	4b2a      	ldr	r3, [pc, #168]	; (800f258 <__lshift+0xd8>)
 800f1ae:	482b      	ldr	r0, [pc, #172]	; (800f25c <__lshift+0xdc>)
 800f1b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f1b4:	f7fb ff92 	bl	800b0dc <__assert_func>
 800f1b8:	3101      	adds	r1, #1
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	e7ee      	b.n	800f19c <__lshift+0x1c>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	f100 0114 	add.w	r1, r0, #20
 800f1c4:	f100 0210 	add.w	r2, r0, #16
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	4553      	cmp	r3, sl
 800f1cc:	db37      	blt.n	800f23e <__lshift+0xbe>
 800f1ce:	6920      	ldr	r0, [r4, #16]
 800f1d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1d4:	f104 0314 	add.w	r3, r4, #20
 800f1d8:	f019 091f 	ands.w	r9, r9, #31
 800f1dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f1e4:	d02f      	beq.n	800f246 <__lshift+0xc6>
 800f1e6:	f1c9 0e20 	rsb	lr, r9, #32
 800f1ea:	468a      	mov	sl, r1
 800f1ec:	f04f 0c00 	mov.w	ip, #0
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	fa02 f209 	lsl.w	r2, r2, r9
 800f1f6:	ea42 020c 	orr.w	r2, r2, ip
 800f1fa:	f84a 2b04 	str.w	r2, [sl], #4
 800f1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f202:	4298      	cmp	r0, r3
 800f204:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f208:	d8f2      	bhi.n	800f1f0 <__lshift+0x70>
 800f20a:	1b03      	subs	r3, r0, r4
 800f20c:	3b15      	subs	r3, #21
 800f20e:	f023 0303 	bic.w	r3, r3, #3
 800f212:	3304      	adds	r3, #4
 800f214:	f104 0215 	add.w	r2, r4, #21
 800f218:	4290      	cmp	r0, r2
 800f21a:	bf38      	it	cc
 800f21c:	2304      	movcc	r3, #4
 800f21e:	f841 c003 	str.w	ip, [r1, r3]
 800f222:	f1bc 0f00 	cmp.w	ip, #0
 800f226:	d001      	beq.n	800f22c <__lshift+0xac>
 800f228:	f108 0602 	add.w	r6, r8, #2
 800f22c:	3e01      	subs	r6, #1
 800f22e:	4638      	mov	r0, r7
 800f230:	612e      	str	r6, [r5, #16]
 800f232:	4621      	mov	r1, r4
 800f234:	f7ff fd88 	bl	800ed48 <_Bfree>
 800f238:	4628      	mov	r0, r5
 800f23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f23e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f242:	3301      	adds	r3, #1
 800f244:	e7c1      	b.n	800f1ca <__lshift+0x4a>
 800f246:	3904      	subs	r1, #4
 800f248:	f853 2b04 	ldr.w	r2, [r3], #4
 800f24c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f250:	4298      	cmp	r0, r3
 800f252:	d8f9      	bhi.n	800f248 <__lshift+0xc8>
 800f254:	e7ea      	b.n	800f22c <__lshift+0xac>
 800f256:	bf00      	nop
 800f258:	080119cf 	.word	0x080119cf
 800f25c:	08011a5c 	.word	0x08011a5c

0800f260 <__mcmp>:
 800f260:	b530      	push	{r4, r5, lr}
 800f262:	6902      	ldr	r2, [r0, #16]
 800f264:	690c      	ldr	r4, [r1, #16]
 800f266:	1b12      	subs	r2, r2, r4
 800f268:	d10e      	bne.n	800f288 <__mcmp+0x28>
 800f26a:	f100 0314 	add.w	r3, r0, #20
 800f26e:	3114      	adds	r1, #20
 800f270:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f274:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f278:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f27c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f280:	42a5      	cmp	r5, r4
 800f282:	d003      	beq.n	800f28c <__mcmp+0x2c>
 800f284:	d305      	bcc.n	800f292 <__mcmp+0x32>
 800f286:	2201      	movs	r2, #1
 800f288:	4610      	mov	r0, r2
 800f28a:	bd30      	pop	{r4, r5, pc}
 800f28c:	4283      	cmp	r3, r0
 800f28e:	d3f3      	bcc.n	800f278 <__mcmp+0x18>
 800f290:	e7fa      	b.n	800f288 <__mcmp+0x28>
 800f292:	f04f 32ff 	mov.w	r2, #4294967295
 800f296:	e7f7      	b.n	800f288 <__mcmp+0x28>

0800f298 <__mdiff>:
 800f298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	460c      	mov	r4, r1
 800f29e:	4606      	mov	r6, r0
 800f2a0:	4611      	mov	r1, r2
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	4690      	mov	r8, r2
 800f2a6:	f7ff ffdb 	bl	800f260 <__mcmp>
 800f2aa:	1e05      	subs	r5, r0, #0
 800f2ac:	d110      	bne.n	800f2d0 <__mdiff+0x38>
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	f7ff fd09 	bl	800ecc8 <_Balloc>
 800f2b6:	b930      	cbnz	r0, 800f2c6 <__mdiff+0x2e>
 800f2b8:	4b3a      	ldr	r3, [pc, #232]	; (800f3a4 <__mdiff+0x10c>)
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	f240 2132 	movw	r1, #562	; 0x232
 800f2c0:	4839      	ldr	r0, [pc, #228]	; (800f3a8 <__mdiff+0x110>)
 800f2c2:	f7fb ff0b 	bl	800b0dc <__assert_func>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d0:	bfa4      	itt	ge
 800f2d2:	4643      	movge	r3, r8
 800f2d4:	46a0      	movge	r8, r4
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f2dc:	bfa6      	itte	ge
 800f2de:	461c      	movge	r4, r3
 800f2e0:	2500      	movge	r5, #0
 800f2e2:	2501      	movlt	r5, #1
 800f2e4:	f7ff fcf0 	bl	800ecc8 <_Balloc>
 800f2e8:	b920      	cbnz	r0, 800f2f4 <__mdiff+0x5c>
 800f2ea:	4b2e      	ldr	r3, [pc, #184]	; (800f3a4 <__mdiff+0x10c>)
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f2f2:	e7e5      	b.n	800f2c0 <__mdiff+0x28>
 800f2f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f2f8:	6926      	ldr	r6, [r4, #16]
 800f2fa:	60c5      	str	r5, [r0, #12]
 800f2fc:	f104 0914 	add.w	r9, r4, #20
 800f300:	f108 0514 	add.w	r5, r8, #20
 800f304:	f100 0e14 	add.w	lr, r0, #20
 800f308:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f30c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f310:	f108 0210 	add.w	r2, r8, #16
 800f314:	46f2      	mov	sl, lr
 800f316:	2100      	movs	r1, #0
 800f318:	f859 3b04 	ldr.w	r3, [r9], #4
 800f31c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f320:	fa1f f883 	uxth.w	r8, r3
 800f324:	fa11 f18b 	uxtah	r1, r1, fp
 800f328:	0c1b      	lsrs	r3, r3, #16
 800f32a:	eba1 0808 	sub.w	r8, r1, r8
 800f32e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f332:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f336:	fa1f f888 	uxth.w	r8, r8
 800f33a:	1419      	asrs	r1, r3, #16
 800f33c:	454e      	cmp	r6, r9
 800f33e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f342:	f84a 3b04 	str.w	r3, [sl], #4
 800f346:	d8e7      	bhi.n	800f318 <__mdiff+0x80>
 800f348:	1b33      	subs	r3, r6, r4
 800f34a:	3b15      	subs	r3, #21
 800f34c:	f023 0303 	bic.w	r3, r3, #3
 800f350:	3304      	adds	r3, #4
 800f352:	3415      	adds	r4, #21
 800f354:	42a6      	cmp	r6, r4
 800f356:	bf38      	it	cc
 800f358:	2304      	movcc	r3, #4
 800f35a:	441d      	add	r5, r3
 800f35c:	4473      	add	r3, lr
 800f35e:	469e      	mov	lr, r3
 800f360:	462e      	mov	r6, r5
 800f362:	4566      	cmp	r6, ip
 800f364:	d30e      	bcc.n	800f384 <__mdiff+0xec>
 800f366:	f10c 0203 	add.w	r2, ip, #3
 800f36a:	1b52      	subs	r2, r2, r5
 800f36c:	f022 0203 	bic.w	r2, r2, #3
 800f370:	3d03      	subs	r5, #3
 800f372:	45ac      	cmp	ip, r5
 800f374:	bf38      	it	cc
 800f376:	2200      	movcc	r2, #0
 800f378:	441a      	add	r2, r3
 800f37a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f37e:	b17b      	cbz	r3, 800f3a0 <__mdiff+0x108>
 800f380:	6107      	str	r7, [r0, #16]
 800f382:	e7a3      	b.n	800f2cc <__mdiff+0x34>
 800f384:	f856 8b04 	ldr.w	r8, [r6], #4
 800f388:	fa11 f288 	uxtah	r2, r1, r8
 800f38c:	1414      	asrs	r4, r2, #16
 800f38e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f392:	b292      	uxth	r2, r2
 800f394:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f398:	f84e 2b04 	str.w	r2, [lr], #4
 800f39c:	1421      	asrs	r1, r4, #16
 800f39e:	e7e0      	b.n	800f362 <__mdiff+0xca>
 800f3a0:	3f01      	subs	r7, #1
 800f3a2:	e7ea      	b.n	800f37a <__mdiff+0xe2>
 800f3a4:	080119cf 	.word	0x080119cf
 800f3a8:	08011a5c 	.word	0x08011a5c

0800f3ac <__ulp>:
 800f3ac:	b082      	sub	sp, #8
 800f3ae:	ed8d 0b00 	vstr	d0, [sp]
 800f3b2:	9b01      	ldr	r3, [sp, #4]
 800f3b4:	4912      	ldr	r1, [pc, #72]	; (800f400 <__ulp+0x54>)
 800f3b6:	4019      	ands	r1, r3
 800f3b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f3bc:	2900      	cmp	r1, #0
 800f3be:	dd05      	ble.n	800f3cc <__ulp+0x20>
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	ec43 2b10 	vmov	d0, r2, r3
 800f3c8:	b002      	add	sp, #8
 800f3ca:	4770      	bx	lr
 800f3cc:	4249      	negs	r1, r1
 800f3ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f3d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f3d6:	f04f 0200 	mov.w	r2, #0
 800f3da:	f04f 0300 	mov.w	r3, #0
 800f3de:	da04      	bge.n	800f3ea <__ulp+0x3e>
 800f3e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f3e4:	fa41 f300 	asr.w	r3, r1, r0
 800f3e8:	e7ec      	b.n	800f3c4 <__ulp+0x18>
 800f3ea:	f1a0 0114 	sub.w	r1, r0, #20
 800f3ee:	291e      	cmp	r1, #30
 800f3f0:	bfda      	itte	le
 800f3f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f3f6:	fa20 f101 	lsrle.w	r1, r0, r1
 800f3fa:	2101      	movgt	r1, #1
 800f3fc:	460a      	mov	r2, r1
 800f3fe:	e7e1      	b.n	800f3c4 <__ulp+0x18>
 800f400:	7ff00000 	.word	0x7ff00000

0800f404 <__b2d>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	6905      	ldr	r5, [r0, #16]
 800f408:	f100 0714 	add.w	r7, r0, #20
 800f40c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f410:	1f2e      	subs	r6, r5, #4
 800f412:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f416:	4620      	mov	r0, r4
 800f418:	f7ff fd48 	bl	800eeac <__hi0bits>
 800f41c:	f1c0 0320 	rsb	r3, r0, #32
 800f420:	280a      	cmp	r0, #10
 800f422:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f4a0 <__b2d+0x9c>
 800f426:	600b      	str	r3, [r1, #0]
 800f428:	dc14      	bgt.n	800f454 <__b2d+0x50>
 800f42a:	f1c0 0e0b 	rsb	lr, r0, #11
 800f42e:	fa24 f10e 	lsr.w	r1, r4, lr
 800f432:	42b7      	cmp	r7, r6
 800f434:	ea41 030c 	orr.w	r3, r1, ip
 800f438:	bf34      	ite	cc
 800f43a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f43e:	2100      	movcs	r1, #0
 800f440:	3015      	adds	r0, #21
 800f442:	fa04 f000 	lsl.w	r0, r4, r0
 800f446:	fa21 f10e 	lsr.w	r1, r1, lr
 800f44a:	ea40 0201 	orr.w	r2, r0, r1
 800f44e:	ec43 2b10 	vmov	d0, r2, r3
 800f452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f454:	42b7      	cmp	r7, r6
 800f456:	bf3a      	itte	cc
 800f458:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f45c:	f1a5 0608 	subcc.w	r6, r5, #8
 800f460:	2100      	movcs	r1, #0
 800f462:	380b      	subs	r0, #11
 800f464:	d017      	beq.n	800f496 <__b2d+0x92>
 800f466:	f1c0 0c20 	rsb	ip, r0, #32
 800f46a:	fa04 f500 	lsl.w	r5, r4, r0
 800f46e:	42be      	cmp	r6, r7
 800f470:	fa21 f40c 	lsr.w	r4, r1, ip
 800f474:	ea45 0504 	orr.w	r5, r5, r4
 800f478:	bf8c      	ite	hi
 800f47a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f47e:	2400      	movls	r4, #0
 800f480:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f484:	fa01 f000 	lsl.w	r0, r1, r0
 800f488:	fa24 f40c 	lsr.w	r4, r4, ip
 800f48c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f490:	ea40 0204 	orr.w	r2, r0, r4
 800f494:	e7db      	b.n	800f44e <__b2d+0x4a>
 800f496:	ea44 030c 	orr.w	r3, r4, ip
 800f49a:	460a      	mov	r2, r1
 800f49c:	e7d7      	b.n	800f44e <__b2d+0x4a>
 800f49e:	bf00      	nop
 800f4a0:	3ff00000 	.word	0x3ff00000

0800f4a4 <__d2b>:
 800f4a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4a8:	4689      	mov	r9, r1
 800f4aa:	2101      	movs	r1, #1
 800f4ac:	ec57 6b10 	vmov	r6, r7, d0
 800f4b0:	4690      	mov	r8, r2
 800f4b2:	f7ff fc09 	bl	800ecc8 <_Balloc>
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	b930      	cbnz	r0, 800f4c8 <__d2b+0x24>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	4b25      	ldr	r3, [pc, #148]	; (800f554 <__d2b+0xb0>)
 800f4be:	4826      	ldr	r0, [pc, #152]	; (800f558 <__d2b+0xb4>)
 800f4c0:	f240 310a 	movw	r1, #778	; 0x30a
 800f4c4:	f7fb fe0a 	bl	800b0dc <__assert_func>
 800f4c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f4cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4d0:	bb35      	cbnz	r5, 800f520 <__d2b+0x7c>
 800f4d2:	2e00      	cmp	r6, #0
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	d028      	beq.n	800f52a <__d2b+0x86>
 800f4d8:	4668      	mov	r0, sp
 800f4da:	9600      	str	r6, [sp, #0]
 800f4dc:	f7ff fd06 	bl	800eeec <__lo0bits>
 800f4e0:	9900      	ldr	r1, [sp, #0]
 800f4e2:	b300      	cbz	r0, 800f526 <__d2b+0x82>
 800f4e4:	9a01      	ldr	r2, [sp, #4]
 800f4e6:	f1c0 0320 	rsb	r3, r0, #32
 800f4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f4ee:	430b      	orrs	r3, r1
 800f4f0:	40c2      	lsrs	r2, r0
 800f4f2:	6163      	str	r3, [r4, #20]
 800f4f4:	9201      	str	r2, [sp, #4]
 800f4f6:	9b01      	ldr	r3, [sp, #4]
 800f4f8:	61a3      	str	r3, [r4, #24]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	bf14      	ite	ne
 800f4fe:	2202      	movne	r2, #2
 800f500:	2201      	moveq	r2, #1
 800f502:	6122      	str	r2, [r4, #16]
 800f504:	b1d5      	cbz	r5, 800f53c <__d2b+0x98>
 800f506:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f50a:	4405      	add	r5, r0
 800f50c:	f8c9 5000 	str.w	r5, [r9]
 800f510:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f514:	f8c8 0000 	str.w	r0, [r8]
 800f518:	4620      	mov	r0, r4
 800f51a:	b003      	add	sp, #12
 800f51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f524:	e7d5      	b.n	800f4d2 <__d2b+0x2e>
 800f526:	6161      	str	r1, [r4, #20]
 800f528:	e7e5      	b.n	800f4f6 <__d2b+0x52>
 800f52a:	a801      	add	r0, sp, #4
 800f52c:	f7ff fcde 	bl	800eeec <__lo0bits>
 800f530:	9b01      	ldr	r3, [sp, #4]
 800f532:	6163      	str	r3, [r4, #20]
 800f534:	2201      	movs	r2, #1
 800f536:	6122      	str	r2, [r4, #16]
 800f538:	3020      	adds	r0, #32
 800f53a:	e7e3      	b.n	800f504 <__d2b+0x60>
 800f53c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f544:	f8c9 0000 	str.w	r0, [r9]
 800f548:	6918      	ldr	r0, [r3, #16]
 800f54a:	f7ff fcaf 	bl	800eeac <__hi0bits>
 800f54e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f552:	e7df      	b.n	800f514 <__d2b+0x70>
 800f554:	080119cf 	.word	0x080119cf
 800f558:	08011a5c 	.word	0x08011a5c

0800f55c <__ratio>:
 800f55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	4688      	mov	r8, r1
 800f562:	4669      	mov	r1, sp
 800f564:	4681      	mov	r9, r0
 800f566:	f7ff ff4d 	bl	800f404 <__b2d>
 800f56a:	a901      	add	r1, sp, #4
 800f56c:	4640      	mov	r0, r8
 800f56e:	ec55 4b10 	vmov	r4, r5, d0
 800f572:	f7ff ff47 	bl	800f404 <__b2d>
 800f576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f57a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f57e:	eba3 0c02 	sub.w	ip, r3, r2
 800f582:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f586:	1a9b      	subs	r3, r3, r2
 800f588:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f58c:	ec51 0b10 	vmov	r0, r1, d0
 800f590:	2b00      	cmp	r3, #0
 800f592:	bfd6      	itet	le
 800f594:	460a      	movle	r2, r1
 800f596:	462a      	movgt	r2, r5
 800f598:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f59c:	468b      	mov	fp, r1
 800f59e:	462f      	mov	r7, r5
 800f5a0:	bfd4      	ite	le
 800f5a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f5a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	ee10 2a10 	vmov	r2, s0
 800f5b0:	465b      	mov	r3, fp
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	f7f1 f95a 	bl	800086c <__aeabi_ddiv>
 800f5b8:	ec41 0b10 	vmov	d0, r0, r1
 800f5bc:	b003      	add	sp, #12
 800f5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5c2 <__copybits>:
 800f5c2:	3901      	subs	r1, #1
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	1149      	asrs	r1, r1, #5
 800f5c8:	6914      	ldr	r4, [r2, #16]
 800f5ca:	3101      	adds	r1, #1
 800f5cc:	f102 0314 	add.w	r3, r2, #20
 800f5d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f5d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f5d8:	1f05      	subs	r5, r0, #4
 800f5da:	42a3      	cmp	r3, r4
 800f5dc:	d30c      	bcc.n	800f5f8 <__copybits+0x36>
 800f5de:	1aa3      	subs	r3, r4, r2
 800f5e0:	3b11      	subs	r3, #17
 800f5e2:	f023 0303 	bic.w	r3, r3, #3
 800f5e6:	3211      	adds	r2, #17
 800f5e8:	42a2      	cmp	r2, r4
 800f5ea:	bf88      	it	hi
 800f5ec:	2300      	movhi	r3, #0
 800f5ee:	4418      	add	r0, r3
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4288      	cmp	r0, r1
 800f5f4:	d305      	bcc.n	800f602 <__copybits+0x40>
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800f5fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800f600:	e7eb      	b.n	800f5da <__copybits+0x18>
 800f602:	f840 3b04 	str.w	r3, [r0], #4
 800f606:	e7f4      	b.n	800f5f2 <__copybits+0x30>

0800f608 <__any_on>:
 800f608:	f100 0214 	add.w	r2, r0, #20
 800f60c:	6900      	ldr	r0, [r0, #16]
 800f60e:	114b      	asrs	r3, r1, #5
 800f610:	4298      	cmp	r0, r3
 800f612:	b510      	push	{r4, lr}
 800f614:	db11      	blt.n	800f63a <__any_on+0x32>
 800f616:	dd0a      	ble.n	800f62e <__any_on+0x26>
 800f618:	f011 011f 	ands.w	r1, r1, #31
 800f61c:	d007      	beq.n	800f62e <__any_on+0x26>
 800f61e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f622:	fa24 f001 	lsr.w	r0, r4, r1
 800f626:	fa00 f101 	lsl.w	r1, r0, r1
 800f62a:	428c      	cmp	r4, r1
 800f62c:	d10b      	bne.n	800f646 <__any_on+0x3e>
 800f62e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f632:	4293      	cmp	r3, r2
 800f634:	d803      	bhi.n	800f63e <__any_on+0x36>
 800f636:	2000      	movs	r0, #0
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	4603      	mov	r3, r0
 800f63c:	e7f7      	b.n	800f62e <__any_on+0x26>
 800f63e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f642:	2900      	cmp	r1, #0
 800f644:	d0f5      	beq.n	800f632 <__any_on+0x2a>
 800f646:	2001      	movs	r0, #1
 800f648:	e7f6      	b.n	800f638 <__any_on+0x30>

0800f64a <_calloc_r>:
 800f64a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f64c:	fba1 2402 	umull	r2, r4, r1, r2
 800f650:	b94c      	cbnz	r4, 800f666 <_calloc_r+0x1c>
 800f652:	4611      	mov	r1, r2
 800f654:	9201      	str	r2, [sp, #4]
 800f656:	f7fb fecb 	bl	800b3f0 <_malloc_r>
 800f65a:	9a01      	ldr	r2, [sp, #4]
 800f65c:	4605      	mov	r5, r0
 800f65e:	b930      	cbnz	r0, 800f66e <_calloc_r+0x24>
 800f660:	4628      	mov	r0, r5
 800f662:	b003      	add	sp, #12
 800f664:	bd30      	pop	{r4, r5, pc}
 800f666:	220c      	movs	r2, #12
 800f668:	6002      	str	r2, [r0, #0]
 800f66a:	2500      	movs	r5, #0
 800f66c:	e7f8      	b.n	800f660 <_calloc_r+0x16>
 800f66e:	4621      	mov	r1, r4
 800f670:	f7fb fe95 	bl	800b39e <memset>
 800f674:	e7f4      	b.n	800f660 <_calloc_r+0x16>
	...

0800f678 <_free_r>:
 800f678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f67a:	2900      	cmp	r1, #0
 800f67c:	d044      	beq.n	800f708 <_free_r+0x90>
 800f67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f682:	9001      	str	r0, [sp, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	f1a1 0404 	sub.w	r4, r1, #4
 800f68a:	bfb8      	it	lt
 800f68c:	18e4      	addlt	r4, r4, r3
 800f68e:	f7ff fb0f 	bl	800ecb0 <__malloc_lock>
 800f692:	4a1e      	ldr	r2, [pc, #120]	; (800f70c <_free_r+0x94>)
 800f694:	9801      	ldr	r0, [sp, #4]
 800f696:	6813      	ldr	r3, [r2, #0]
 800f698:	b933      	cbnz	r3, 800f6a8 <_free_r+0x30>
 800f69a:	6063      	str	r3, [r4, #4]
 800f69c:	6014      	str	r4, [r2, #0]
 800f69e:	b003      	add	sp, #12
 800f6a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6a4:	f7ff bb0a 	b.w	800ecbc <__malloc_unlock>
 800f6a8:	42a3      	cmp	r3, r4
 800f6aa:	d908      	bls.n	800f6be <_free_r+0x46>
 800f6ac:	6825      	ldr	r5, [r4, #0]
 800f6ae:	1961      	adds	r1, r4, r5
 800f6b0:	428b      	cmp	r3, r1
 800f6b2:	bf01      	itttt	eq
 800f6b4:	6819      	ldreq	r1, [r3, #0]
 800f6b6:	685b      	ldreq	r3, [r3, #4]
 800f6b8:	1949      	addeq	r1, r1, r5
 800f6ba:	6021      	streq	r1, [r4, #0]
 800f6bc:	e7ed      	b.n	800f69a <_free_r+0x22>
 800f6be:	461a      	mov	r2, r3
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	b10b      	cbz	r3, 800f6c8 <_free_r+0x50>
 800f6c4:	42a3      	cmp	r3, r4
 800f6c6:	d9fa      	bls.n	800f6be <_free_r+0x46>
 800f6c8:	6811      	ldr	r1, [r2, #0]
 800f6ca:	1855      	adds	r5, r2, r1
 800f6cc:	42a5      	cmp	r5, r4
 800f6ce:	d10b      	bne.n	800f6e8 <_free_r+0x70>
 800f6d0:	6824      	ldr	r4, [r4, #0]
 800f6d2:	4421      	add	r1, r4
 800f6d4:	1854      	adds	r4, r2, r1
 800f6d6:	42a3      	cmp	r3, r4
 800f6d8:	6011      	str	r1, [r2, #0]
 800f6da:	d1e0      	bne.n	800f69e <_free_r+0x26>
 800f6dc:	681c      	ldr	r4, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	6053      	str	r3, [r2, #4]
 800f6e2:	4421      	add	r1, r4
 800f6e4:	6011      	str	r1, [r2, #0]
 800f6e6:	e7da      	b.n	800f69e <_free_r+0x26>
 800f6e8:	d902      	bls.n	800f6f0 <_free_r+0x78>
 800f6ea:	230c      	movs	r3, #12
 800f6ec:	6003      	str	r3, [r0, #0]
 800f6ee:	e7d6      	b.n	800f69e <_free_r+0x26>
 800f6f0:	6825      	ldr	r5, [r4, #0]
 800f6f2:	1961      	adds	r1, r4, r5
 800f6f4:	428b      	cmp	r3, r1
 800f6f6:	bf04      	itt	eq
 800f6f8:	6819      	ldreq	r1, [r3, #0]
 800f6fa:	685b      	ldreq	r3, [r3, #4]
 800f6fc:	6063      	str	r3, [r4, #4]
 800f6fe:	bf04      	itt	eq
 800f700:	1949      	addeq	r1, r1, r5
 800f702:	6021      	streq	r1, [r4, #0]
 800f704:	6054      	str	r4, [r2, #4]
 800f706:	e7ca      	b.n	800f69e <_free_r+0x26>
 800f708:	b003      	add	sp, #12
 800f70a:	bd30      	pop	{r4, r5, pc}
 800f70c:	200130d0 	.word	0x200130d0

0800f710 <_realloc_r>:
 800f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f714:	4680      	mov	r8, r0
 800f716:	4614      	mov	r4, r2
 800f718:	460e      	mov	r6, r1
 800f71a:	b921      	cbnz	r1, 800f726 <_realloc_r+0x16>
 800f71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f720:	4611      	mov	r1, r2
 800f722:	f7fb be65 	b.w	800b3f0 <_malloc_r>
 800f726:	b92a      	cbnz	r2, 800f734 <_realloc_r+0x24>
 800f728:	f7ff ffa6 	bl	800f678 <_free_r>
 800f72c:	4625      	mov	r5, r4
 800f72e:	4628      	mov	r0, r5
 800f730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f734:	f000 fe22 	bl	801037c <_malloc_usable_size_r>
 800f738:	4284      	cmp	r4, r0
 800f73a:	4607      	mov	r7, r0
 800f73c:	d802      	bhi.n	800f744 <_realloc_r+0x34>
 800f73e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f742:	d812      	bhi.n	800f76a <_realloc_r+0x5a>
 800f744:	4621      	mov	r1, r4
 800f746:	4640      	mov	r0, r8
 800f748:	f7fb fe52 	bl	800b3f0 <_malloc_r>
 800f74c:	4605      	mov	r5, r0
 800f74e:	2800      	cmp	r0, #0
 800f750:	d0ed      	beq.n	800f72e <_realloc_r+0x1e>
 800f752:	42bc      	cmp	r4, r7
 800f754:	4622      	mov	r2, r4
 800f756:	4631      	mov	r1, r6
 800f758:	bf28      	it	cs
 800f75a:	463a      	movcs	r2, r7
 800f75c:	f7fb fe11 	bl	800b382 <memcpy>
 800f760:	4631      	mov	r1, r6
 800f762:	4640      	mov	r0, r8
 800f764:	f7ff ff88 	bl	800f678 <_free_r>
 800f768:	e7e1      	b.n	800f72e <_realloc_r+0x1e>
 800f76a:	4635      	mov	r5, r6
 800f76c:	e7df      	b.n	800f72e <_realloc_r+0x1e>

0800f76e <__ssputs_r>:
 800f76e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f772:	688e      	ldr	r6, [r1, #8]
 800f774:	429e      	cmp	r6, r3
 800f776:	4682      	mov	sl, r0
 800f778:	460c      	mov	r4, r1
 800f77a:	4690      	mov	r8, r2
 800f77c:	461f      	mov	r7, r3
 800f77e:	d838      	bhi.n	800f7f2 <__ssputs_r+0x84>
 800f780:	898a      	ldrh	r2, [r1, #12]
 800f782:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f786:	d032      	beq.n	800f7ee <__ssputs_r+0x80>
 800f788:	6825      	ldr	r5, [r4, #0]
 800f78a:	6909      	ldr	r1, [r1, #16]
 800f78c:	eba5 0901 	sub.w	r9, r5, r1
 800f790:	6965      	ldr	r5, [r4, #20]
 800f792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f79a:	3301      	adds	r3, #1
 800f79c:	444b      	add	r3, r9
 800f79e:	106d      	asrs	r5, r5, #1
 800f7a0:	429d      	cmp	r5, r3
 800f7a2:	bf38      	it	cc
 800f7a4:	461d      	movcc	r5, r3
 800f7a6:	0553      	lsls	r3, r2, #21
 800f7a8:	d531      	bpl.n	800f80e <__ssputs_r+0xa0>
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	f7fb fe20 	bl	800b3f0 <_malloc_r>
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	b950      	cbnz	r0, 800f7ca <__ssputs_r+0x5c>
 800f7b4:	230c      	movs	r3, #12
 800f7b6:	f8ca 3000 	str.w	r3, [sl]
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ca:	6921      	ldr	r1, [r4, #16]
 800f7cc:	464a      	mov	r2, r9
 800f7ce:	f7fb fdd8 	bl	800b382 <memcpy>
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7dc:	81a3      	strh	r3, [r4, #12]
 800f7de:	6126      	str	r6, [r4, #16]
 800f7e0:	6165      	str	r5, [r4, #20]
 800f7e2:	444e      	add	r6, r9
 800f7e4:	eba5 0509 	sub.w	r5, r5, r9
 800f7e8:	6026      	str	r6, [r4, #0]
 800f7ea:	60a5      	str	r5, [r4, #8]
 800f7ec:	463e      	mov	r6, r7
 800f7ee:	42be      	cmp	r6, r7
 800f7f0:	d900      	bls.n	800f7f4 <__ssputs_r+0x86>
 800f7f2:	463e      	mov	r6, r7
 800f7f4:	6820      	ldr	r0, [r4, #0]
 800f7f6:	4632      	mov	r2, r6
 800f7f8:	4641      	mov	r1, r8
 800f7fa:	f7ff fa3f 	bl	800ec7c <memmove>
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	1b9b      	subs	r3, r3, r6
 800f802:	60a3      	str	r3, [r4, #8]
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	4433      	add	r3, r6
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	2000      	movs	r0, #0
 800f80c:	e7db      	b.n	800f7c6 <__ssputs_r+0x58>
 800f80e:	462a      	mov	r2, r5
 800f810:	f7ff ff7e 	bl	800f710 <_realloc_r>
 800f814:	4606      	mov	r6, r0
 800f816:	2800      	cmp	r0, #0
 800f818:	d1e1      	bne.n	800f7de <__ssputs_r+0x70>
 800f81a:	6921      	ldr	r1, [r4, #16]
 800f81c:	4650      	mov	r0, sl
 800f81e:	f7ff ff2b 	bl	800f678 <_free_r>
 800f822:	e7c7      	b.n	800f7b4 <__ssputs_r+0x46>

0800f824 <_svfiprintf_r>:
 800f824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f828:	4698      	mov	r8, r3
 800f82a:	898b      	ldrh	r3, [r1, #12]
 800f82c:	061b      	lsls	r3, r3, #24
 800f82e:	b09d      	sub	sp, #116	; 0x74
 800f830:	4607      	mov	r7, r0
 800f832:	460d      	mov	r5, r1
 800f834:	4614      	mov	r4, r2
 800f836:	d50e      	bpl.n	800f856 <_svfiprintf_r+0x32>
 800f838:	690b      	ldr	r3, [r1, #16]
 800f83a:	b963      	cbnz	r3, 800f856 <_svfiprintf_r+0x32>
 800f83c:	2140      	movs	r1, #64	; 0x40
 800f83e:	f7fb fdd7 	bl	800b3f0 <_malloc_r>
 800f842:	6028      	str	r0, [r5, #0]
 800f844:	6128      	str	r0, [r5, #16]
 800f846:	b920      	cbnz	r0, 800f852 <_svfiprintf_r+0x2e>
 800f848:	230c      	movs	r3, #12
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	f04f 30ff 	mov.w	r0, #4294967295
 800f850:	e0d1      	b.n	800f9f6 <_svfiprintf_r+0x1d2>
 800f852:	2340      	movs	r3, #64	; 0x40
 800f854:	616b      	str	r3, [r5, #20]
 800f856:	2300      	movs	r3, #0
 800f858:	9309      	str	r3, [sp, #36]	; 0x24
 800f85a:	2320      	movs	r3, #32
 800f85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f860:	f8cd 800c 	str.w	r8, [sp, #12]
 800f864:	2330      	movs	r3, #48	; 0x30
 800f866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa10 <_svfiprintf_r+0x1ec>
 800f86a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f86e:	f04f 0901 	mov.w	r9, #1
 800f872:	4623      	mov	r3, r4
 800f874:	469a      	mov	sl, r3
 800f876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f87a:	b10a      	cbz	r2, 800f880 <_svfiprintf_r+0x5c>
 800f87c:	2a25      	cmp	r2, #37	; 0x25
 800f87e:	d1f9      	bne.n	800f874 <_svfiprintf_r+0x50>
 800f880:	ebba 0b04 	subs.w	fp, sl, r4
 800f884:	d00b      	beq.n	800f89e <_svfiprintf_r+0x7a>
 800f886:	465b      	mov	r3, fp
 800f888:	4622      	mov	r2, r4
 800f88a:	4629      	mov	r1, r5
 800f88c:	4638      	mov	r0, r7
 800f88e:	f7ff ff6e 	bl	800f76e <__ssputs_r>
 800f892:	3001      	adds	r0, #1
 800f894:	f000 80aa 	beq.w	800f9ec <_svfiprintf_r+0x1c8>
 800f898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f89a:	445a      	add	r2, fp
 800f89c:	9209      	str	r2, [sp, #36]	; 0x24
 800f89e:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 80a2 	beq.w	800f9ec <_svfiprintf_r+0x1c8>
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8b2:	f10a 0a01 	add.w	sl, sl, #1
 800f8b6:	9304      	str	r3, [sp, #16]
 800f8b8:	9307      	str	r3, [sp, #28]
 800f8ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8be:	931a      	str	r3, [sp, #104]	; 0x68
 800f8c0:	4654      	mov	r4, sl
 800f8c2:	2205      	movs	r2, #5
 800f8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c8:	4851      	ldr	r0, [pc, #324]	; (800fa10 <_svfiprintf_r+0x1ec>)
 800f8ca:	f7f0 fc99 	bl	8000200 <memchr>
 800f8ce:	9a04      	ldr	r2, [sp, #16]
 800f8d0:	b9d8      	cbnz	r0, 800f90a <_svfiprintf_r+0xe6>
 800f8d2:	06d0      	lsls	r0, r2, #27
 800f8d4:	bf44      	itt	mi
 800f8d6:	2320      	movmi	r3, #32
 800f8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8dc:	0711      	lsls	r1, r2, #28
 800f8de:	bf44      	itt	mi
 800f8e0:	232b      	movmi	r3, #43	; 0x2b
 800f8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800f8ec:	d015      	beq.n	800f91a <_svfiprintf_r+0xf6>
 800f8ee:	9a07      	ldr	r2, [sp, #28]
 800f8f0:	4654      	mov	r4, sl
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	f04f 0c0a 	mov.w	ip, #10
 800f8f8:	4621      	mov	r1, r4
 800f8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8fe:	3b30      	subs	r3, #48	; 0x30
 800f900:	2b09      	cmp	r3, #9
 800f902:	d94e      	bls.n	800f9a2 <_svfiprintf_r+0x17e>
 800f904:	b1b0      	cbz	r0, 800f934 <_svfiprintf_r+0x110>
 800f906:	9207      	str	r2, [sp, #28]
 800f908:	e014      	b.n	800f934 <_svfiprintf_r+0x110>
 800f90a:	eba0 0308 	sub.w	r3, r0, r8
 800f90e:	fa09 f303 	lsl.w	r3, r9, r3
 800f912:	4313      	orrs	r3, r2
 800f914:	9304      	str	r3, [sp, #16]
 800f916:	46a2      	mov	sl, r4
 800f918:	e7d2      	b.n	800f8c0 <_svfiprintf_r+0x9c>
 800f91a:	9b03      	ldr	r3, [sp, #12]
 800f91c:	1d19      	adds	r1, r3, #4
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	9103      	str	r1, [sp, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	bfbb      	ittet	lt
 800f926:	425b      	neglt	r3, r3
 800f928:	f042 0202 	orrlt.w	r2, r2, #2
 800f92c:	9307      	strge	r3, [sp, #28]
 800f92e:	9307      	strlt	r3, [sp, #28]
 800f930:	bfb8      	it	lt
 800f932:	9204      	strlt	r2, [sp, #16]
 800f934:	7823      	ldrb	r3, [r4, #0]
 800f936:	2b2e      	cmp	r3, #46	; 0x2e
 800f938:	d10c      	bne.n	800f954 <_svfiprintf_r+0x130>
 800f93a:	7863      	ldrb	r3, [r4, #1]
 800f93c:	2b2a      	cmp	r3, #42	; 0x2a
 800f93e:	d135      	bne.n	800f9ac <_svfiprintf_r+0x188>
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	1d1a      	adds	r2, r3, #4
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	9203      	str	r2, [sp, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	bfb8      	it	lt
 800f94c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f950:	3402      	adds	r4, #2
 800f952:	9305      	str	r3, [sp, #20]
 800f954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa20 <_svfiprintf_r+0x1fc>
 800f958:	7821      	ldrb	r1, [r4, #0]
 800f95a:	2203      	movs	r2, #3
 800f95c:	4650      	mov	r0, sl
 800f95e:	f7f0 fc4f 	bl	8000200 <memchr>
 800f962:	b140      	cbz	r0, 800f976 <_svfiprintf_r+0x152>
 800f964:	2340      	movs	r3, #64	; 0x40
 800f966:	eba0 000a 	sub.w	r0, r0, sl
 800f96a:	fa03 f000 	lsl.w	r0, r3, r0
 800f96e:	9b04      	ldr	r3, [sp, #16]
 800f970:	4303      	orrs	r3, r0
 800f972:	3401      	adds	r4, #1
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f97a:	4826      	ldr	r0, [pc, #152]	; (800fa14 <_svfiprintf_r+0x1f0>)
 800f97c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f980:	2206      	movs	r2, #6
 800f982:	f7f0 fc3d 	bl	8000200 <memchr>
 800f986:	2800      	cmp	r0, #0
 800f988:	d038      	beq.n	800f9fc <_svfiprintf_r+0x1d8>
 800f98a:	4b23      	ldr	r3, [pc, #140]	; (800fa18 <_svfiprintf_r+0x1f4>)
 800f98c:	bb1b      	cbnz	r3, 800f9d6 <_svfiprintf_r+0x1b2>
 800f98e:	9b03      	ldr	r3, [sp, #12]
 800f990:	3307      	adds	r3, #7
 800f992:	f023 0307 	bic.w	r3, r3, #7
 800f996:	3308      	adds	r3, #8
 800f998:	9303      	str	r3, [sp, #12]
 800f99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f99c:	4433      	add	r3, r6
 800f99e:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a0:	e767      	b.n	800f872 <_svfiprintf_r+0x4e>
 800f9a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	2001      	movs	r0, #1
 800f9aa:	e7a5      	b.n	800f8f8 <_svfiprintf_r+0xd4>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	3401      	adds	r4, #1
 800f9b0:	9305      	str	r3, [sp, #20]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	f04f 0c0a 	mov.w	ip, #10
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9be:	3a30      	subs	r2, #48	; 0x30
 800f9c0:	2a09      	cmp	r2, #9
 800f9c2:	d903      	bls.n	800f9cc <_svfiprintf_r+0x1a8>
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d0c5      	beq.n	800f954 <_svfiprintf_r+0x130>
 800f9c8:	9105      	str	r1, [sp, #20]
 800f9ca:	e7c3      	b.n	800f954 <_svfiprintf_r+0x130>
 800f9cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e7f0      	b.n	800f9b8 <_svfiprintf_r+0x194>
 800f9d6:	ab03      	add	r3, sp, #12
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	462a      	mov	r2, r5
 800f9dc:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <_svfiprintf_r+0x1f8>)
 800f9de:	a904      	add	r1, sp, #16
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7fb ff73 	bl	800b8cc <_printf_float>
 800f9e6:	1c42      	adds	r2, r0, #1
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	d1d6      	bne.n	800f99a <_svfiprintf_r+0x176>
 800f9ec:	89ab      	ldrh	r3, [r5, #12]
 800f9ee:	065b      	lsls	r3, r3, #25
 800f9f0:	f53f af2c 	bmi.w	800f84c <_svfiprintf_r+0x28>
 800f9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9f6:	b01d      	add	sp, #116	; 0x74
 800f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fc:	ab03      	add	r3, sp, #12
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	462a      	mov	r2, r5
 800fa02:	4b06      	ldr	r3, [pc, #24]	; (800fa1c <_svfiprintf_r+0x1f8>)
 800fa04:	a904      	add	r1, sp, #16
 800fa06:	4638      	mov	r0, r7
 800fa08:	f7fc fa04 	bl	800be14 <_printf_i>
 800fa0c:	e7eb      	b.n	800f9e6 <_svfiprintf_r+0x1c2>
 800fa0e:	bf00      	nop
 800fa10:	080118b4 	.word	0x080118b4
 800fa14:	080118be 	.word	0x080118be
 800fa18:	0800b8cd 	.word	0x0800b8cd
 800fa1c:	0800f76f 	.word	0x0800f76f
 800fa20:	080118ba 	.word	0x080118ba

0800fa24 <_sungetc_r>:
 800fa24:	b538      	push	{r3, r4, r5, lr}
 800fa26:	1c4b      	adds	r3, r1, #1
 800fa28:	4614      	mov	r4, r2
 800fa2a:	d103      	bne.n	800fa34 <_sungetc_r+0x10>
 800fa2c:	f04f 35ff 	mov.w	r5, #4294967295
 800fa30:	4628      	mov	r0, r5
 800fa32:	bd38      	pop	{r3, r4, r5, pc}
 800fa34:	8993      	ldrh	r3, [r2, #12]
 800fa36:	f023 0320 	bic.w	r3, r3, #32
 800fa3a:	8193      	strh	r3, [r2, #12]
 800fa3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa3e:	6852      	ldr	r2, [r2, #4]
 800fa40:	b2cd      	uxtb	r5, r1
 800fa42:	b18b      	cbz	r3, 800fa68 <_sungetc_r+0x44>
 800fa44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fa46:	4293      	cmp	r3, r2
 800fa48:	dd08      	ble.n	800fa5c <_sungetc_r+0x38>
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	1e5a      	subs	r2, r3, #1
 800fa4e:	6022      	str	r2, [r4, #0]
 800fa50:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fa54:	6863      	ldr	r3, [r4, #4]
 800fa56:	3301      	adds	r3, #1
 800fa58:	6063      	str	r3, [r4, #4]
 800fa5a:	e7e9      	b.n	800fa30 <_sungetc_r+0xc>
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	f000 fc23 	bl	80102a8 <__submore>
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d0f1      	beq.n	800fa4a <_sungetc_r+0x26>
 800fa66:	e7e1      	b.n	800fa2c <_sungetc_r+0x8>
 800fa68:	6921      	ldr	r1, [r4, #16]
 800fa6a:	6823      	ldr	r3, [r4, #0]
 800fa6c:	b151      	cbz	r1, 800fa84 <_sungetc_r+0x60>
 800fa6e:	4299      	cmp	r1, r3
 800fa70:	d208      	bcs.n	800fa84 <_sungetc_r+0x60>
 800fa72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fa76:	42a9      	cmp	r1, r5
 800fa78:	d104      	bne.n	800fa84 <_sungetc_r+0x60>
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	3201      	adds	r2, #1
 800fa7e:	6023      	str	r3, [r4, #0]
 800fa80:	6062      	str	r2, [r4, #4]
 800fa82:	e7d5      	b.n	800fa30 <_sungetc_r+0xc>
 800fa84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fa88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa8c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa8e:	2303      	movs	r3, #3
 800fa90:	63a3      	str	r3, [r4, #56]	; 0x38
 800fa92:	4623      	mov	r3, r4
 800fa94:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e7dc      	b.n	800fa58 <_sungetc_r+0x34>

0800fa9e <__ssrefill_r>:
 800fa9e:	b510      	push	{r4, lr}
 800faa0:	460c      	mov	r4, r1
 800faa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800faa4:	b169      	cbz	r1, 800fac2 <__ssrefill_r+0x24>
 800faa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faaa:	4299      	cmp	r1, r3
 800faac:	d001      	beq.n	800fab2 <__ssrefill_r+0x14>
 800faae:	f7ff fde3 	bl	800f678 <_free_r>
 800fab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fab4:	6063      	str	r3, [r4, #4]
 800fab6:	2000      	movs	r0, #0
 800fab8:	6360      	str	r0, [r4, #52]	; 0x34
 800faba:	b113      	cbz	r3, 800fac2 <__ssrefill_r+0x24>
 800fabc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fabe:	6023      	str	r3, [r4, #0]
 800fac0:	bd10      	pop	{r4, pc}
 800fac2:	6923      	ldr	r3, [r4, #16]
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	2300      	movs	r3, #0
 800fac8:	6063      	str	r3, [r4, #4]
 800faca:	89a3      	ldrh	r3, [r4, #12]
 800facc:	f043 0320 	orr.w	r3, r3, #32
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	f04f 30ff 	mov.w	r0, #4294967295
 800fad6:	e7f3      	b.n	800fac0 <__ssrefill_r+0x22>

0800fad8 <__ssvfiscanf_r>:
 800fad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fadc:	460c      	mov	r4, r1
 800fade:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fae2:	2100      	movs	r1, #0
 800fae4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800fae8:	49a6      	ldr	r1, [pc, #664]	; (800fd84 <__ssvfiscanf_r+0x2ac>)
 800faea:	91a0      	str	r1, [sp, #640]	; 0x280
 800faec:	f10d 0804 	add.w	r8, sp, #4
 800faf0:	49a5      	ldr	r1, [pc, #660]	; (800fd88 <__ssvfiscanf_r+0x2b0>)
 800faf2:	4fa6      	ldr	r7, [pc, #664]	; (800fd8c <__ssvfiscanf_r+0x2b4>)
 800faf4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fd90 <__ssvfiscanf_r+0x2b8>
 800faf8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fafc:	4606      	mov	r6, r0
 800fafe:	91a1      	str	r1, [sp, #644]	; 0x284
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	7813      	ldrb	r3, [r2, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f000 815a 	beq.w	800fdbe <__ssvfiscanf_r+0x2e6>
 800fb0a:	5dd9      	ldrb	r1, [r3, r7]
 800fb0c:	f011 0108 	ands.w	r1, r1, #8
 800fb10:	f102 0501 	add.w	r5, r2, #1
 800fb14:	d019      	beq.n	800fb4a <__ssvfiscanf_r+0x72>
 800fb16:	6863      	ldr	r3, [r4, #4]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	dd0f      	ble.n	800fb3c <__ssvfiscanf_r+0x64>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	5cba      	ldrb	r2, [r7, r2]
 800fb22:	0712      	lsls	r2, r2, #28
 800fb24:	d401      	bmi.n	800fb2a <__ssvfiscanf_r+0x52>
 800fb26:	462a      	mov	r2, r5
 800fb28:	e7eb      	b.n	800fb02 <__ssvfiscanf_r+0x2a>
 800fb2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fb2c:	3201      	adds	r2, #1
 800fb2e:	9245      	str	r2, [sp, #276]	; 0x114
 800fb30:	6862      	ldr	r2, [r4, #4]
 800fb32:	3301      	adds	r3, #1
 800fb34:	3a01      	subs	r2, #1
 800fb36:	6062      	str	r2, [r4, #4]
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	e7ec      	b.n	800fb16 <__ssvfiscanf_r+0x3e>
 800fb3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb3e:	4621      	mov	r1, r4
 800fb40:	4630      	mov	r0, r6
 800fb42:	4798      	blx	r3
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d0e9      	beq.n	800fb1c <__ssvfiscanf_r+0x44>
 800fb48:	e7ed      	b.n	800fb26 <__ssvfiscanf_r+0x4e>
 800fb4a:	2b25      	cmp	r3, #37	; 0x25
 800fb4c:	d012      	beq.n	800fb74 <__ssvfiscanf_r+0x9c>
 800fb4e:	469a      	mov	sl, r3
 800fb50:	6863      	ldr	r3, [r4, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f340 8091 	ble.w	800fc7a <__ssvfiscanf_r+0x1a2>
 800fb58:	6822      	ldr	r2, [r4, #0]
 800fb5a:	7813      	ldrb	r3, [r2, #0]
 800fb5c:	4553      	cmp	r3, sl
 800fb5e:	f040 812e 	bne.w	800fdbe <__ssvfiscanf_r+0x2e6>
 800fb62:	6863      	ldr	r3, [r4, #4]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	6063      	str	r3, [r4, #4]
 800fb68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fb6a:	3201      	adds	r2, #1
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	6022      	str	r2, [r4, #0]
 800fb70:	9345      	str	r3, [sp, #276]	; 0x114
 800fb72:	e7d8      	b.n	800fb26 <__ssvfiscanf_r+0x4e>
 800fb74:	9141      	str	r1, [sp, #260]	; 0x104
 800fb76:	9143      	str	r1, [sp, #268]	; 0x10c
 800fb78:	7853      	ldrb	r3, [r2, #1]
 800fb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb7c:	bf02      	ittt	eq
 800fb7e:	2310      	moveq	r3, #16
 800fb80:	1c95      	addeq	r5, r2, #2
 800fb82:	9341      	streq	r3, [sp, #260]	; 0x104
 800fb84:	220a      	movs	r2, #10
 800fb86:	46aa      	mov	sl, r5
 800fb88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800fb8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fb90:	2b09      	cmp	r3, #9
 800fb92:	d91d      	bls.n	800fbd0 <__ssvfiscanf_r+0xf8>
 800fb94:	487e      	ldr	r0, [pc, #504]	; (800fd90 <__ssvfiscanf_r+0x2b8>)
 800fb96:	2203      	movs	r2, #3
 800fb98:	f7f0 fb32 	bl	8000200 <memchr>
 800fb9c:	b140      	cbz	r0, 800fbb0 <__ssvfiscanf_r+0xd8>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	eba0 0009 	sub.w	r0, r0, r9
 800fba4:	fa03 f000 	lsl.w	r0, r3, r0
 800fba8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fbaa:	4318      	orrs	r0, r3
 800fbac:	9041      	str	r0, [sp, #260]	; 0x104
 800fbae:	4655      	mov	r5, sl
 800fbb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fbb4:	2b78      	cmp	r3, #120	; 0x78
 800fbb6:	d806      	bhi.n	800fbc6 <__ssvfiscanf_r+0xee>
 800fbb8:	2b57      	cmp	r3, #87	; 0x57
 800fbba:	d810      	bhi.n	800fbde <__ssvfiscanf_r+0x106>
 800fbbc:	2b25      	cmp	r3, #37	; 0x25
 800fbbe:	d0c6      	beq.n	800fb4e <__ssvfiscanf_r+0x76>
 800fbc0:	d856      	bhi.n	800fc70 <__ssvfiscanf_r+0x198>
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d064      	beq.n	800fc90 <__ssvfiscanf_r+0x1b8>
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	9347      	str	r3, [sp, #284]	; 0x11c
 800fbca:	230a      	movs	r3, #10
 800fbcc:	9342      	str	r3, [sp, #264]	; 0x108
 800fbce:	e071      	b.n	800fcb4 <__ssvfiscanf_r+0x1dc>
 800fbd0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fbd2:	fb02 1103 	mla	r1, r2, r3, r1
 800fbd6:	3930      	subs	r1, #48	; 0x30
 800fbd8:	9143      	str	r1, [sp, #268]	; 0x10c
 800fbda:	4655      	mov	r5, sl
 800fbdc:	e7d3      	b.n	800fb86 <__ssvfiscanf_r+0xae>
 800fbde:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fbe2:	2a20      	cmp	r2, #32
 800fbe4:	d8ef      	bhi.n	800fbc6 <__ssvfiscanf_r+0xee>
 800fbe6:	a101      	add	r1, pc, #4	; (adr r1, 800fbec <__ssvfiscanf_r+0x114>)
 800fbe8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fbec:	0800fc9f 	.word	0x0800fc9f
 800fbf0:	0800fbc7 	.word	0x0800fbc7
 800fbf4:	0800fbc7 	.word	0x0800fbc7
 800fbf8:	0800fcfd 	.word	0x0800fcfd
 800fbfc:	0800fbc7 	.word	0x0800fbc7
 800fc00:	0800fbc7 	.word	0x0800fbc7
 800fc04:	0800fbc7 	.word	0x0800fbc7
 800fc08:	0800fbc7 	.word	0x0800fbc7
 800fc0c:	0800fbc7 	.word	0x0800fbc7
 800fc10:	0800fbc7 	.word	0x0800fbc7
 800fc14:	0800fbc7 	.word	0x0800fbc7
 800fc18:	0800fd13 	.word	0x0800fd13
 800fc1c:	0800fce9 	.word	0x0800fce9
 800fc20:	0800fc77 	.word	0x0800fc77
 800fc24:	0800fc77 	.word	0x0800fc77
 800fc28:	0800fc77 	.word	0x0800fc77
 800fc2c:	0800fbc7 	.word	0x0800fbc7
 800fc30:	0800fced 	.word	0x0800fced
 800fc34:	0800fbc7 	.word	0x0800fbc7
 800fc38:	0800fbc7 	.word	0x0800fbc7
 800fc3c:	0800fbc7 	.word	0x0800fbc7
 800fc40:	0800fbc7 	.word	0x0800fbc7
 800fc44:	0800fd23 	.word	0x0800fd23
 800fc48:	0800fcf5 	.word	0x0800fcf5
 800fc4c:	0800fc97 	.word	0x0800fc97
 800fc50:	0800fbc7 	.word	0x0800fbc7
 800fc54:	0800fbc7 	.word	0x0800fbc7
 800fc58:	0800fd1f 	.word	0x0800fd1f
 800fc5c:	0800fbc7 	.word	0x0800fbc7
 800fc60:	0800fce9 	.word	0x0800fce9
 800fc64:	0800fbc7 	.word	0x0800fbc7
 800fc68:	0800fbc7 	.word	0x0800fbc7
 800fc6c:	0800fc9f 	.word	0x0800fc9f
 800fc70:	3b45      	subs	r3, #69	; 0x45
 800fc72:	2b02      	cmp	r3, #2
 800fc74:	d8a7      	bhi.n	800fbc6 <__ssvfiscanf_r+0xee>
 800fc76:	2305      	movs	r3, #5
 800fc78:	e01b      	b.n	800fcb2 <__ssvfiscanf_r+0x1da>
 800fc7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fc7c:	4621      	mov	r1, r4
 800fc7e:	4630      	mov	r0, r6
 800fc80:	4798      	blx	r3
 800fc82:	2800      	cmp	r0, #0
 800fc84:	f43f af68 	beq.w	800fb58 <__ssvfiscanf_r+0x80>
 800fc88:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	f040 808d 	bne.w	800fdaa <__ssvfiscanf_r+0x2d2>
 800fc90:	f04f 30ff 	mov.w	r0, #4294967295
 800fc94:	e08f      	b.n	800fdb6 <__ssvfiscanf_r+0x2de>
 800fc96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fc98:	f042 0220 	orr.w	r2, r2, #32
 800fc9c:	9241      	str	r2, [sp, #260]	; 0x104
 800fc9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fca4:	9241      	str	r2, [sp, #260]	; 0x104
 800fca6:	2210      	movs	r2, #16
 800fca8:	2b6f      	cmp	r3, #111	; 0x6f
 800fcaa:	9242      	str	r2, [sp, #264]	; 0x108
 800fcac:	bf34      	ite	cc
 800fcae:	2303      	movcc	r3, #3
 800fcb0:	2304      	movcs	r3, #4
 800fcb2:	9347      	str	r3, [sp, #284]	; 0x11c
 800fcb4:	6863      	ldr	r3, [r4, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	dd42      	ble.n	800fd40 <__ssvfiscanf_r+0x268>
 800fcba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcbc:	0659      	lsls	r1, r3, #25
 800fcbe:	d404      	bmi.n	800fcca <__ssvfiscanf_r+0x1f2>
 800fcc0:	6823      	ldr	r3, [r4, #0]
 800fcc2:	781a      	ldrb	r2, [r3, #0]
 800fcc4:	5cba      	ldrb	r2, [r7, r2]
 800fcc6:	0712      	lsls	r2, r2, #28
 800fcc8:	d441      	bmi.n	800fd4e <__ssvfiscanf_r+0x276>
 800fcca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fccc:	2b02      	cmp	r3, #2
 800fcce:	dc50      	bgt.n	800fd72 <__ssvfiscanf_r+0x29a>
 800fcd0:	466b      	mov	r3, sp
 800fcd2:	4622      	mov	r2, r4
 800fcd4:	a941      	add	r1, sp, #260	; 0x104
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	f000 f876 	bl	800fdc8 <_scanf_chars>
 800fcdc:	2801      	cmp	r0, #1
 800fcde:	d06e      	beq.n	800fdbe <__ssvfiscanf_r+0x2e6>
 800fce0:	2802      	cmp	r0, #2
 800fce2:	f47f af20 	bne.w	800fb26 <__ssvfiscanf_r+0x4e>
 800fce6:	e7cf      	b.n	800fc88 <__ssvfiscanf_r+0x1b0>
 800fce8:	220a      	movs	r2, #10
 800fcea:	e7dd      	b.n	800fca8 <__ssvfiscanf_r+0x1d0>
 800fcec:	2300      	movs	r3, #0
 800fcee:	9342      	str	r3, [sp, #264]	; 0x108
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	e7de      	b.n	800fcb2 <__ssvfiscanf_r+0x1da>
 800fcf4:	2308      	movs	r3, #8
 800fcf6:	9342      	str	r3, [sp, #264]	; 0x108
 800fcf8:	2304      	movs	r3, #4
 800fcfa:	e7da      	b.n	800fcb2 <__ssvfiscanf_r+0x1da>
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	4640      	mov	r0, r8
 800fd00:	f000 f9ce 	bl	80100a0 <__sccl>
 800fd04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fd06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd0a:	9341      	str	r3, [sp, #260]	; 0x104
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e7cf      	b.n	800fcb2 <__ssvfiscanf_r+0x1da>
 800fd12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd18:	9341      	str	r3, [sp, #260]	; 0x104
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e7c9      	b.n	800fcb2 <__ssvfiscanf_r+0x1da>
 800fd1e:	2302      	movs	r3, #2
 800fd20:	e7c7      	b.n	800fcb2 <__ssvfiscanf_r+0x1da>
 800fd22:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fd24:	06c3      	lsls	r3, r0, #27
 800fd26:	f53f aefe 	bmi.w	800fb26 <__ssvfiscanf_r+0x4e>
 800fd2a:	9b00      	ldr	r3, [sp, #0]
 800fd2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fd2e:	1d19      	adds	r1, r3, #4
 800fd30:	9100      	str	r1, [sp, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f010 0f01 	tst.w	r0, #1
 800fd38:	bf14      	ite	ne
 800fd3a:	801a      	strhne	r2, [r3, #0]
 800fd3c:	601a      	streq	r2, [r3, #0]
 800fd3e:	e6f2      	b.n	800fb26 <__ssvfiscanf_r+0x4e>
 800fd40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fd42:	4621      	mov	r1, r4
 800fd44:	4630      	mov	r0, r6
 800fd46:	4798      	blx	r3
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d0b6      	beq.n	800fcba <__ssvfiscanf_r+0x1e2>
 800fd4c:	e79c      	b.n	800fc88 <__ssvfiscanf_r+0x1b0>
 800fd4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fd50:	3201      	adds	r2, #1
 800fd52:	9245      	str	r2, [sp, #276]	; 0x114
 800fd54:	6862      	ldr	r2, [r4, #4]
 800fd56:	3a01      	subs	r2, #1
 800fd58:	2a00      	cmp	r2, #0
 800fd5a:	6062      	str	r2, [r4, #4]
 800fd5c:	dd02      	ble.n	800fd64 <__ssvfiscanf_r+0x28c>
 800fd5e:	3301      	adds	r3, #1
 800fd60:	6023      	str	r3, [r4, #0]
 800fd62:	e7ad      	b.n	800fcc0 <__ssvfiscanf_r+0x1e8>
 800fd64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fd66:	4621      	mov	r1, r4
 800fd68:	4630      	mov	r0, r6
 800fd6a:	4798      	blx	r3
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d0a7      	beq.n	800fcc0 <__ssvfiscanf_r+0x1e8>
 800fd70:	e78a      	b.n	800fc88 <__ssvfiscanf_r+0x1b0>
 800fd72:	2b04      	cmp	r3, #4
 800fd74:	dc0e      	bgt.n	800fd94 <__ssvfiscanf_r+0x2bc>
 800fd76:	466b      	mov	r3, sp
 800fd78:	4622      	mov	r2, r4
 800fd7a:	a941      	add	r1, sp, #260	; 0x104
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f000 f87d 	bl	800fe7c <_scanf_i>
 800fd82:	e7ab      	b.n	800fcdc <__ssvfiscanf_r+0x204>
 800fd84:	0800fa25 	.word	0x0800fa25
 800fd88:	0800fa9f 	.word	0x0800fa9f
 800fd8c:	0801174d 	.word	0x0801174d
 800fd90:	080118ba 	.word	0x080118ba
 800fd94:	4b0b      	ldr	r3, [pc, #44]	; (800fdc4 <__ssvfiscanf_r+0x2ec>)
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f43f aec5 	beq.w	800fb26 <__ssvfiscanf_r+0x4e>
 800fd9c:	466b      	mov	r3, sp
 800fd9e:	4622      	mov	r2, r4
 800fda0:	a941      	add	r1, sp, #260	; 0x104
 800fda2:	4630      	mov	r0, r6
 800fda4:	f7fc f95c 	bl	800c060 <_scanf_float>
 800fda8:	e798      	b.n	800fcdc <__ssvfiscanf_r+0x204>
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fdb0:	bf18      	it	ne
 800fdb2:	f04f 30ff 	movne.w	r0, #4294967295
 800fdb6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdbe:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fdc0:	e7f9      	b.n	800fdb6 <__ssvfiscanf_r+0x2de>
 800fdc2:	bf00      	nop
 800fdc4:	0800c061 	.word	0x0800c061

0800fdc8 <_scanf_chars>:
 800fdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdcc:	4615      	mov	r5, r2
 800fdce:	688a      	ldr	r2, [r1, #8]
 800fdd0:	4680      	mov	r8, r0
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	b932      	cbnz	r2, 800fde4 <_scanf_chars+0x1c>
 800fdd6:	698a      	ldr	r2, [r1, #24]
 800fdd8:	2a00      	cmp	r2, #0
 800fdda:	bf0c      	ite	eq
 800fddc:	2201      	moveq	r2, #1
 800fdde:	f04f 32ff 	movne.w	r2, #4294967295
 800fde2:	608a      	str	r2, [r1, #8]
 800fde4:	6822      	ldr	r2, [r4, #0]
 800fde6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fe78 <_scanf_chars+0xb0>
 800fdea:	06d1      	lsls	r1, r2, #27
 800fdec:	bf5f      	itttt	pl
 800fdee:	681a      	ldrpl	r2, [r3, #0]
 800fdf0:	1d11      	addpl	r1, r2, #4
 800fdf2:	6019      	strpl	r1, [r3, #0]
 800fdf4:	6816      	ldrpl	r6, [r2, #0]
 800fdf6:	2700      	movs	r7, #0
 800fdf8:	69a0      	ldr	r0, [r4, #24]
 800fdfa:	b188      	cbz	r0, 800fe20 <_scanf_chars+0x58>
 800fdfc:	2801      	cmp	r0, #1
 800fdfe:	d107      	bne.n	800fe10 <_scanf_chars+0x48>
 800fe00:	682a      	ldr	r2, [r5, #0]
 800fe02:	7811      	ldrb	r1, [r2, #0]
 800fe04:	6962      	ldr	r2, [r4, #20]
 800fe06:	5c52      	ldrb	r2, [r2, r1]
 800fe08:	b952      	cbnz	r2, 800fe20 <_scanf_chars+0x58>
 800fe0a:	2f00      	cmp	r7, #0
 800fe0c:	d031      	beq.n	800fe72 <_scanf_chars+0xaa>
 800fe0e:	e022      	b.n	800fe56 <_scanf_chars+0x8e>
 800fe10:	2802      	cmp	r0, #2
 800fe12:	d120      	bne.n	800fe56 <_scanf_chars+0x8e>
 800fe14:	682b      	ldr	r3, [r5, #0]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fe1c:	071b      	lsls	r3, r3, #28
 800fe1e:	d41a      	bmi.n	800fe56 <_scanf_chars+0x8e>
 800fe20:	6823      	ldr	r3, [r4, #0]
 800fe22:	06da      	lsls	r2, r3, #27
 800fe24:	bf5e      	ittt	pl
 800fe26:	682b      	ldrpl	r3, [r5, #0]
 800fe28:	781b      	ldrbpl	r3, [r3, #0]
 800fe2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fe2e:	682a      	ldr	r2, [r5, #0]
 800fe30:	686b      	ldr	r3, [r5, #4]
 800fe32:	3201      	adds	r2, #1
 800fe34:	602a      	str	r2, [r5, #0]
 800fe36:	68a2      	ldr	r2, [r4, #8]
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	3a01      	subs	r2, #1
 800fe3c:	606b      	str	r3, [r5, #4]
 800fe3e:	3701      	adds	r7, #1
 800fe40:	60a2      	str	r2, [r4, #8]
 800fe42:	b142      	cbz	r2, 800fe56 <_scanf_chars+0x8e>
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	dcd7      	bgt.n	800fdf8 <_scanf_chars+0x30>
 800fe48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4640      	mov	r0, r8
 800fe50:	4798      	blx	r3
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d0d0      	beq.n	800fdf8 <_scanf_chars+0x30>
 800fe56:	6823      	ldr	r3, [r4, #0]
 800fe58:	f013 0310 	ands.w	r3, r3, #16
 800fe5c:	d105      	bne.n	800fe6a <_scanf_chars+0xa2>
 800fe5e:	68e2      	ldr	r2, [r4, #12]
 800fe60:	3201      	adds	r2, #1
 800fe62:	60e2      	str	r2, [r4, #12]
 800fe64:	69a2      	ldr	r2, [r4, #24]
 800fe66:	b102      	cbz	r2, 800fe6a <_scanf_chars+0xa2>
 800fe68:	7033      	strb	r3, [r6, #0]
 800fe6a:	6923      	ldr	r3, [r4, #16]
 800fe6c:	443b      	add	r3, r7
 800fe6e:	6123      	str	r3, [r4, #16]
 800fe70:	2000      	movs	r0, #0
 800fe72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe76:	bf00      	nop
 800fe78:	0801174d 	.word	0x0801174d

0800fe7c <_scanf_i>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	4698      	mov	r8, r3
 800fe82:	4b76      	ldr	r3, [pc, #472]	; (801005c <_scanf_i+0x1e0>)
 800fe84:	460c      	mov	r4, r1
 800fe86:	4682      	mov	sl, r0
 800fe88:	4616      	mov	r6, r2
 800fe8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe8e:	b087      	sub	sp, #28
 800fe90:	ab03      	add	r3, sp, #12
 800fe92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe96:	4b72      	ldr	r3, [pc, #456]	; (8010060 <_scanf_i+0x1e4>)
 800fe98:	69a1      	ldr	r1, [r4, #24]
 800fe9a:	4a72      	ldr	r2, [pc, #456]	; (8010064 <_scanf_i+0x1e8>)
 800fe9c:	2903      	cmp	r1, #3
 800fe9e:	bf18      	it	ne
 800fea0:	461a      	movne	r2, r3
 800fea2:	68a3      	ldr	r3, [r4, #8]
 800fea4:	9201      	str	r2, [sp, #4]
 800fea6:	1e5a      	subs	r2, r3, #1
 800fea8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800feac:	bf88      	it	hi
 800feae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800feb2:	4627      	mov	r7, r4
 800feb4:	bf82      	ittt	hi
 800feb6:	eb03 0905 	addhi.w	r9, r3, r5
 800feba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800febe:	60a3      	strhi	r3, [r4, #8]
 800fec0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fec4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fec8:	bf98      	it	ls
 800feca:	f04f 0900 	movls.w	r9, #0
 800fece:	6023      	str	r3, [r4, #0]
 800fed0:	463d      	mov	r5, r7
 800fed2:	f04f 0b00 	mov.w	fp, #0
 800fed6:	6831      	ldr	r1, [r6, #0]
 800fed8:	ab03      	add	r3, sp, #12
 800feda:	7809      	ldrb	r1, [r1, #0]
 800fedc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fee0:	2202      	movs	r2, #2
 800fee2:	f7f0 f98d 	bl	8000200 <memchr>
 800fee6:	b328      	cbz	r0, 800ff34 <_scanf_i+0xb8>
 800fee8:	f1bb 0f01 	cmp.w	fp, #1
 800feec:	d159      	bne.n	800ffa2 <_scanf_i+0x126>
 800feee:	6862      	ldr	r2, [r4, #4]
 800fef0:	b92a      	cbnz	r2, 800fefe <_scanf_i+0x82>
 800fef2:	6822      	ldr	r2, [r4, #0]
 800fef4:	2308      	movs	r3, #8
 800fef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fefa:	6063      	str	r3, [r4, #4]
 800fefc:	6022      	str	r2, [r4, #0]
 800fefe:	6822      	ldr	r2, [r4, #0]
 800ff00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ff04:	6022      	str	r2, [r4, #0]
 800ff06:	68a2      	ldr	r2, [r4, #8]
 800ff08:	1e51      	subs	r1, r2, #1
 800ff0a:	60a1      	str	r1, [r4, #8]
 800ff0c:	b192      	cbz	r2, 800ff34 <_scanf_i+0xb8>
 800ff0e:	6832      	ldr	r2, [r6, #0]
 800ff10:	1c51      	adds	r1, r2, #1
 800ff12:	6031      	str	r1, [r6, #0]
 800ff14:	7812      	ldrb	r2, [r2, #0]
 800ff16:	f805 2b01 	strb.w	r2, [r5], #1
 800ff1a:	6872      	ldr	r2, [r6, #4]
 800ff1c:	3a01      	subs	r2, #1
 800ff1e:	2a00      	cmp	r2, #0
 800ff20:	6072      	str	r2, [r6, #4]
 800ff22:	dc07      	bgt.n	800ff34 <_scanf_i+0xb8>
 800ff24:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ff28:	4631      	mov	r1, r6
 800ff2a:	4650      	mov	r0, sl
 800ff2c:	4790      	blx	r2
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f040 8085 	bne.w	801003e <_scanf_i+0x1c2>
 800ff34:	f10b 0b01 	add.w	fp, fp, #1
 800ff38:	f1bb 0f03 	cmp.w	fp, #3
 800ff3c:	d1cb      	bne.n	800fed6 <_scanf_i+0x5a>
 800ff3e:	6863      	ldr	r3, [r4, #4]
 800ff40:	b90b      	cbnz	r3, 800ff46 <_scanf_i+0xca>
 800ff42:	230a      	movs	r3, #10
 800ff44:	6063      	str	r3, [r4, #4]
 800ff46:	6863      	ldr	r3, [r4, #4]
 800ff48:	4947      	ldr	r1, [pc, #284]	; (8010068 <_scanf_i+0x1ec>)
 800ff4a:	6960      	ldr	r0, [r4, #20]
 800ff4c:	1ac9      	subs	r1, r1, r3
 800ff4e:	f000 f8a7 	bl	80100a0 <__sccl>
 800ff52:	f04f 0b00 	mov.w	fp, #0
 800ff56:	68a3      	ldr	r3, [r4, #8]
 800ff58:	6822      	ldr	r2, [r4, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d03d      	beq.n	800ffda <_scanf_i+0x15e>
 800ff5e:	6831      	ldr	r1, [r6, #0]
 800ff60:	6960      	ldr	r0, [r4, #20]
 800ff62:	f891 c000 	ldrb.w	ip, [r1]
 800ff66:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d035      	beq.n	800ffda <_scanf_i+0x15e>
 800ff6e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ff72:	d124      	bne.n	800ffbe <_scanf_i+0x142>
 800ff74:	0510      	lsls	r0, r2, #20
 800ff76:	d522      	bpl.n	800ffbe <_scanf_i+0x142>
 800ff78:	f10b 0b01 	add.w	fp, fp, #1
 800ff7c:	f1b9 0f00 	cmp.w	r9, #0
 800ff80:	d003      	beq.n	800ff8a <_scanf_i+0x10e>
 800ff82:	3301      	adds	r3, #1
 800ff84:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff88:	60a3      	str	r3, [r4, #8]
 800ff8a:	6873      	ldr	r3, [r6, #4]
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	6073      	str	r3, [r6, #4]
 800ff92:	dd1b      	ble.n	800ffcc <_scanf_i+0x150>
 800ff94:	6833      	ldr	r3, [r6, #0]
 800ff96:	3301      	adds	r3, #1
 800ff98:	6033      	str	r3, [r6, #0]
 800ff9a:	68a3      	ldr	r3, [r4, #8]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	60a3      	str	r3, [r4, #8]
 800ffa0:	e7d9      	b.n	800ff56 <_scanf_i+0xda>
 800ffa2:	f1bb 0f02 	cmp.w	fp, #2
 800ffa6:	d1ae      	bne.n	800ff06 <_scanf_i+0x8a>
 800ffa8:	6822      	ldr	r2, [r4, #0]
 800ffaa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ffae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ffb2:	d1bf      	bne.n	800ff34 <_scanf_i+0xb8>
 800ffb4:	2310      	movs	r3, #16
 800ffb6:	6063      	str	r3, [r4, #4]
 800ffb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ffbc:	e7a2      	b.n	800ff04 <_scanf_i+0x88>
 800ffbe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ffc2:	6022      	str	r2, [r4, #0]
 800ffc4:	780b      	ldrb	r3, [r1, #0]
 800ffc6:	f805 3b01 	strb.w	r3, [r5], #1
 800ffca:	e7de      	b.n	800ff8a <_scanf_i+0x10e>
 800ffcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4650      	mov	r0, sl
 800ffd4:	4798      	blx	r3
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d0df      	beq.n	800ff9a <_scanf_i+0x11e>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	05db      	lsls	r3, r3, #23
 800ffde:	d50d      	bpl.n	800fffc <_scanf_i+0x180>
 800ffe0:	42bd      	cmp	r5, r7
 800ffe2:	d909      	bls.n	800fff8 <_scanf_i+0x17c>
 800ffe4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ffe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffec:	4632      	mov	r2, r6
 800ffee:	4650      	mov	r0, sl
 800fff0:	4798      	blx	r3
 800fff2:	f105 39ff 	add.w	r9, r5, #4294967295
 800fff6:	464d      	mov	r5, r9
 800fff8:	42bd      	cmp	r5, r7
 800fffa:	d02d      	beq.n	8010058 <_scanf_i+0x1dc>
 800fffc:	6822      	ldr	r2, [r4, #0]
 800fffe:	f012 0210 	ands.w	r2, r2, #16
 8010002:	d113      	bne.n	801002c <_scanf_i+0x1b0>
 8010004:	702a      	strb	r2, [r5, #0]
 8010006:	6863      	ldr	r3, [r4, #4]
 8010008:	9e01      	ldr	r6, [sp, #4]
 801000a:	4639      	mov	r1, r7
 801000c:	4650      	mov	r0, sl
 801000e:	47b0      	blx	r6
 8010010:	6821      	ldr	r1, [r4, #0]
 8010012:	f8d8 3000 	ldr.w	r3, [r8]
 8010016:	f011 0f20 	tst.w	r1, #32
 801001a:	d013      	beq.n	8010044 <_scanf_i+0x1c8>
 801001c:	1d1a      	adds	r2, r3, #4
 801001e:	f8c8 2000 	str.w	r2, [r8]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6018      	str	r0, [r3, #0]
 8010026:	68e3      	ldr	r3, [r4, #12]
 8010028:	3301      	adds	r3, #1
 801002a:	60e3      	str	r3, [r4, #12]
 801002c:	1bed      	subs	r5, r5, r7
 801002e:	44ab      	add	fp, r5
 8010030:	6925      	ldr	r5, [r4, #16]
 8010032:	445d      	add	r5, fp
 8010034:	6125      	str	r5, [r4, #16]
 8010036:	2000      	movs	r0, #0
 8010038:	b007      	add	sp, #28
 801003a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801003e:	f04f 0b00 	mov.w	fp, #0
 8010042:	e7ca      	b.n	800ffda <_scanf_i+0x15e>
 8010044:	1d1a      	adds	r2, r3, #4
 8010046:	f8c8 2000 	str.w	r2, [r8]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f011 0f01 	tst.w	r1, #1
 8010050:	bf14      	ite	ne
 8010052:	8018      	strhne	r0, [r3, #0]
 8010054:	6018      	streq	r0, [r3, #0]
 8010056:	e7e6      	b.n	8010026 <_scanf_i+0x1aa>
 8010058:	2001      	movs	r0, #1
 801005a:	e7ed      	b.n	8010038 <_scanf_i+0x1bc>
 801005c:	08011674 	.word	0x08011674
 8010060:	080102a5 	.word	0x080102a5
 8010064:	0800d41d 	.word	0x0800d41d
 8010068:	08011bcd 	.word	0x08011bcd

0801006c <_read_r>:
 801006c:	b538      	push	{r3, r4, r5, lr}
 801006e:	4d07      	ldr	r5, [pc, #28]	; (801008c <_read_r+0x20>)
 8010070:	4604      	mov	r4, r0
 8010072:	4608      	mov	r0, r1
 8010074:	4611      	mov	r1, r2
 8010076:	2200      	movs	r2, #0
 8010078:	602a      	str	r2, [r5, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	f7f2 fd76 	bl	8002b6c <_read>
 8010080:	1c43      	adds	r3, r0, #1
 8010082:	d102      	bne.n	801008a <_read_r+0x1e>
 8010084:	682b      	ldr	r3, [r5, #0]
 8010086:	b103      	cbz	r3, 801008a <_read_r+0x1e>
 8010088:	6023      	str	r3, [r4, #0]
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	200130d8 	.word	0x200130d8

08010090 <nan>:
 8010090:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010098 <nan+0x8>
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	00000000 	.word	0x00000000
 801009c:	7ff80000 	.word	0x7ff80000

080100a0 <__sccl>:
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	780b      	ldrb	r3, [r1, #0]
 80100a4:	4604      	mov	r4, r0
 80100a6:	2b5e      	cmp	r3, #94	; 0x5e
 80100a8:	bf0b      	itete	eq
 80100aa:	784b      	ldrbeq	r3, [r1, #1]
 80100ac:	1c48      	addne	r0, r1, #1
 80100ae:	1c88      	addeq	r0, r1, #2
 80100b0:	2200      	movne	r2, #0
 80100b2:	bf08      	it	eq
 80100b4:	2201      	moveq	r2, #1
 80100b6:	1e61      	subs	r1, r4, #1
 80100b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80100bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80100c0:	42a9      	cmp	r1, r5
 80100c2:	d1fb      	bne.n	80100bc <__sccl+0x1c>
 80100c4:	b90b      	cbnz	r3, 80100ca <__sccl+0x2a>
 80100c6:	3801      	subs	r0, #1
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
 80100ca:	f082 0201 	eor.w	r2, r2, #1
 80100ce:	54e2      	strb	r2, [r4, r3]
 80100d0:	4605      	mov	r5, r0
 80100d2:	4628      	mov	r0, r5
 80100d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80100d8:	292d      	cmp	r1, #45	; 0x2d
 80100da:	d006      	beq.n	80100ea <__sccl+0x4a>
 80100dc:	295d      	cmp	r1, #93	; 0x5d
 80100de:	d0f3      	beq.n	80100c8 <__sccl+0x28>
 80100e0:	b909      	cbnz	r1, 80100e6 <__sccl+0x46>
 80100e2:	4628      	mov	r0, r5
 80100e4:	e7f0      	b.n	80100c8 <__sccl+0x28>
 80100e6:	460b      	mov	r3, r1
 80100e8:	e7f1      	b.n	80100ce <__sccl+0x2e>
 80100ea:	786e      	ldrb	r6, [r5, #1]
 80100ec:	2e5d      	cmp	r6, #93	; 0x5d
 80100ee:	d0fa      	beq.n	80100e6 <__sccl+0x46>
 80100f0:	42b3      	cmp	r3, r6
 80100f2:	dcf8      	bgt.n	80100e6 <__sccl+0x46>
 80100f4:	3502      	adds	r5, #2
 80100f6:	4619      	mov	r1, r3
 80100f8:	3101      	adds	r1, #1
 80100fa:	428e      	cmp	r6, r1
 80100fc:	5462      	strb	r2, [r4, r1]
 80100fe:	dcfb      	bgt.n	80100f8 <__sccl+0x58>
 8010100:	1af1      	subs	r1, r6, r3
 8010102:	3901      	subs	r1, #1
 8010104:	1c58      	adds	r0, r3, #1
 8010106:	42b3      	cmp	r3, r6
 8010108:	bfa8      	it	ge
 801010a:	2100      	movge	r1, #0
 801010c:	1843      	adds	r3, r0, r1
 801010e:	e7e0      	b.n	80100d2 <__sccl+0x32>

08010110 <_raise_r>:
 8010110:	291f      	cmp	r1, #31
 8010112:	b538      	push	{r3, r4, r5, lr}
 8010114:	4604      	mov	r4, r0
 8010116:	460d      	mov	r5, r1
 8010118:	d904      	bls.n	8010124 <_raise_r+0x14>
 801011a:	2316      	movs	r3, #22
 801011c:	6003      	str	r3, [r0, #0]
 801011e:	f04f 30ff 	mov.w	r0, #4294967295
 8010122:	bd38      	pop	{r3, r4, r5, pc}
 8010124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010126:	b112      	cbz	r2, 801012e <_raise_r+0x1e>
 8010128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801012c:	b94b      	cbnz	r3, 8010142 <_raise_r+0x32>
 801012e:	4620      	mov	r0, r4
 8010130:	f000 f830 	bl	8010194 <_getpid_r>
 8010134:	462a      	mov	r2, r5
 8010136:	4601      	mov	r1, r0
 8010138:	4620      	mov	r0, r4
 801013a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801013e:	f000 b817 	b.w	8010170 <_kill_r>
 8010142:	2b01      	cmp	r3, #1
 8010144:	d00a      	beq.n	801015c <_raise_r+0x4c>
 8010146:	1c59      	adds	r1, r3, #1
 8010148:	d103      	bne.n	8010152 <_raise_r+0x42>
 801014a:	2316      	movs	r3, #22
 801014c:	6003      	str	r3, [r0, #0]
 801014e:	2001      	movs	r0, #1
 8010150:	e7e7      	b.n	8010122 <_raise_r+0x12>
 8010152:	2400      	movs	r4, #0
 8010154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010158:	4628      	mov	r0, r5
 801015a:	4798      	blx	r3
 801015c:	2000      	movs	r0, #0
 801015e:	e7e0      	b.n	8010122 <_raise_r+0x12>

08010160 <raise>:
 8010160:	4b02      	ldr	r3, [pc, #8]	; (801016c <raise+0xc>)
 8010162:	4601      	mov	r1, r0
 8010164:	6818      	ldr	r0, [r3, #0]
 8010166:	f7ff bfd3 	b.w	8010110 <_raise_r>
 801016a:	bf00      	nop
 801016c:	20000214 	.word	0x20000214

08010170 <_kill_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	; (8010190 <_kill_r+0x20>)
 8010174:	2300      	movs	r3, #0
 8010176:	4604      	mov	r4, r0
 8010178:	4608      	mov	r0, r1
 801017a:	4611      	mov	r1, r2
 801017c:	602b      	str	r3, [r5, #0]
 801017e:	f7f2 fcdb 	bl	8002b38 <_kill>
 8010182:	1c43      	adds	r3, r0, #1
 8010184:	d102      	bne.n	801018c <_kill_r+0x1c>
 8010186:	682b      	ldr	r3, [r5, #0]
 8010188:	b103      	cbz	r3, 801018c <_kill_r+0x1c>
 801018a:	6023      	str	r3, [r4, #0]
 801018c:	bd38      	pop	{r3, r4, r5, pc}
 801018e:	bf00      	nop
 8010190:	200130d8 	.word	0x200130d8

08010194 <_getpid_r>:
 8010194:	f7f2 bcc8 	b.w	8002b28 <_getpid>

08010198 <strncmp>:
 8010198:	b510      	push	{r4, lr}
 801019a:	b17a      	cbz	r2, 80101bc <strncmp+0x24>
 801019c:	4603      	mov	r3, r0
 801019e:	3901      	subs	r1, #1
 80101a0:	1884      	adds	r4, r0, r2
 80101a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80101a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80101aa:	4290      	cmp	r0, r2
 80101ac:	d101      	bne.n	80101b2 <strncmp+0x1a>
 80101ae:	42a3      	cmp	r3, r4
 80101b0:	d101      	bne.n	80101b6 <strncmp+0x1e>
 80101b2:	1a80      	subs	r0, r0, r2
 80101b4:	bd10      	pop	{r4, pc}
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d1f3      	bne.n	80101a2 <strncmp+0xa>
 80101ba:	e7fa      	b.n	80101b2 <strncmp+0x1a>
 80101bc:	4610      	mov	r0, r2
 80101be:	e7f9      	b.n	80101b4 <strncmp+0x1c>

080101c0 <_strtoul_l.constprop.0>:
 80101c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101c4:	4f36      	ldr	r7, [pc, #216]	; (80102a0 <_strtoul_l.constprop.0+0xe0>)
 80101c6:	4686      	mov	lr, r0
 80101c8:	460d      	mov	r5, r1
 80101ca:	4628      	mov	r0, r5
 80101cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101d0:	5de6      	ldrb	r6, [r4, r7]
 80101d2:	f016 0608 	ands.w	r6, r6, #8
 80101d6:	d1f8      	bne.n	80101ca <_strtoul_l.constprop.0+0xa>
 80101d8:	2c2d      	cmp	r4, #45	; 0x2d
 80101da:	d12f      	bne.n	801023c <_strtoul_l.constprop.0+0x7c>
 80101dc:	782c      	ldrb	r4, [r5, #0]
 80101de:	2601      	movs	r6, #1
 80101e0:	1c85      	adds	r5, r0, #2
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d057      	beq.n	8010296 <_strtoul_l.constprop.0+0xd6>
 80101e6:	2b10      	cmp	r3, #16
 80101e8:	d109      	bne.n	80101fe <_strtoul_l.constprop.0+0x3e>
 80101ea:	2c30      	cmp	r4, #48	; 0x30
 80101ec:	d107      	bne.n	80101fe <_strtoul_l.constprop.0+0x3e>
 80101ee:	7828      	ldrb	r0, [r5, #0]
 80101f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80101f4:	2858      	cmp	r0, #88	; 0x58
 80101f6:	d149      	bne.n	801028c <_strtoul_l.constprop.0+0xcc>
 80101f8:	786c      	ldrb	r4, [r5, #1]
 80101fa:	2310      	movs	r3, #16
 80101fc:	3502      	adds	r5, #2
 80101fe:	f04f 38ff 	mov.w	r8, #4294967295
 8010202:	2700      	movs	r7, #0
 8010204:	fbb8 f8f3 	udiv	r8, r8, r3
 8010208:	fb03 f908 	mul.w	r9, r3, r8
 801020c:	ea6f 0909 	mvn.w	r9, r9
 8010210:	4638      	mov	r0, r7
 8010212:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010216:	f1bc 0f09 	cmp.w	ip, #9
 801021a:	d814      	bhi.n	8010246 <_strtoul_l.constprop.0+0x86>
 801021c:	4664      	mov	r4, ip
 801021e:	42a3      	cmp	r3, r4
 8010220:	dd22      	ble.n	8010268 <_strtoul_l.constprop.0+0xa8>
 8010222:	2f00      	cmp	r7, #0
 8010224:	db1d      	blt.n	8010262 <_strtoul_l.constprop.0+0xa2>
 8010226:	4580      	cmp	r8, r0
 8010228:	d31b      	bcc.n	8010262 <_strtoul_l.constprop.0+0xa2>
 801022a:	d101      	bne.n	8010230 <_strtoul_l.constprop.0+0x70>
 801022c:	45a1      	cmp	r9, r4
 801022e:	db18      	blt.n	8010262 <_strtoul_l.constprop.0+0xa2>
 8010230:	fb00 4003 	mla	r0, r0, r3, r4
 8010234:	2701      	movs	r7, #1
 8010236:	f815 4b01 	ldrb.w	r4, [r5], #1
 801023a:	e7ea      	b.n	8010212 <_strtoul_l.constprop.0+0x52>
 801023c:	2c2b      	cmp	r4, #43	; 0x2b
 801023e:	bf04      	itt	eq
 8010240:	782c      	ldrbeq	r4, [r5, #0]
 8010242:	1c85      	addeq	r5, r0, #2
 8010244:	e7cd      	b.n	80101e2 <_strtoul_l.constprop.0+0x22>
 8010246:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801024a:	f1bc 0f19 	cmp.w	ip, #25
 801024e:	d801      	bhi.n	8010254 <_strtoul_l.constprop.0+0x94>
 8010250:	3c37      	subs	r4, #55	; 0x37
 8010252:	e7e4      	b.n	801021e <_strtoul_l.constprop.0+0x5e>
 8010254:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010258:	f1bc 0f19 	cmp.w	ip, #25
 801025c:	d804      	bhi.n	8010268 <_strtoul_l.constprop.0+0xa8>
 801025e:	3c57      	subs	r4, #87	; 0x57
 8010260:	e7dd      	b.n	801021e <_strtoul_l.constprop.0+0x5e>
 8010262:	f04f 37ff 	mov.w	r7, #4294967295
 8010266:	e7e6      	b.n	8010236 <_strtoul_l.constprop.0+0x76>
 8010268:	2f00      	cmp	r7, #0
 801026a:	da07      	bge.n	801027c <_strtoul_l.constprop.0+0xbc>
 801026c:	2322      	movs	r3, #34	; 0x22
 801026e:	f8ce 3000 	str.w	r3, [lr]
 8010272:	f04f 30ff 	mov.w	r0, #4294967295
 8010276:	b932      	cbnz	r2, 8010286 <_strtoul_l.constprop.0+0xc6>
 8010278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801027c:	b106      	cbz	r6, 8010280 <_strtoul_l.constprop.0+0xc0>
 801027e:	4240      	negs	r0, r0
 8010280:	2a00      	cmp	r2, #0
 8010282:	d0f9      	beq.n	8010278 <_strtoul_l.constprop.0+0xb8>
 8010284:	b107      	cbz	r7, 8010288 <_strtoul_l.constprop.0+0xc8>
 8010286:	1e69      	subs	r1, r5, #1
 8010288:	6011      	str	r1, [r2, #0]
 801028a:	e7f5      	b.n	8010278 <_strtoul_l.constprop.0+0xb8>
 801028c:	2430      	movs	r4, #48	; 0x30
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1b5      	bne.n	80101fe <_strtoul_l.constprop.0+0x3e>
 8010292:	2308      	movs	r3, #8
 8010294:	e7b3      	b.n	80101fe <_strtoul_l.constprop.0+0x3e>
 8010296:	2c30      	cmp	r4, #48	; 0x30
 8010298:	d0a9      	beq.n	80101ee <_strtoul_l.constprop.0+0x2e>
 801029a:	230a      	movs	r3, #10
 801029c:	e7af      	b.n	80101fe <_strtoul_l.constprop.0+0x3e>
 801029e:	bf00      	nop
 80102a0:	0801174d 	.word	0x0801174d

080102a4 <_strtoul_r>:
 80102a4:	f7ff bf8c 	b.w	80101c0 <_strtoul_l.constprop.0>

080102a8 <__submore>:
 80102a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ac:	460c      	mov	r4, r1
 80102ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80102b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102b4:	4299      	cmp	r1, r3
 80102b6:	d11d      	bne.n	80102f4 <__submore+0x4c>
 80102b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80102bc:	f7fb f898 	bl	800b3f0 <_malloc_r>
 80102c0:	b918      	cbnz	r0, 80102ca <__submore+0x22>
 80102c2:	f04f 30ff 	mov.w	r0, #4294967295
 80102c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80102d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80102d4:	6360      	str	r0, [r4, #52]	; 0x34
 80102d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80102da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80102de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80102e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80102e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80102ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80102ee:	6020      	str	r0, [r4, #0]
 80102f0:	2000      	movs	r0, #0
 80102f2:	e7e8      	b.n	80102c6 <__submore+0x1e>
 80102f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80102f6:	0077      	lsls	r7, r6, #1
 80102f8:	463a      	mov	r2, r7
 80102fa:	f7ff fa09 	bl	800f710 <_realloc_r>
 80102fe:	4605      	mov	r5, r0
 8010300:	2800      	cmp	r0, #0
 8010302:	d0de      	beq.n	80102c2 <__submore+0x1a>
 8010304:	eb00 0806 	add.w	r8, r0, r6
 8010308:	4601      	mov	r1, r0
 801030a:	4632      	mov	r2, r6
 801030c:	4640      	mov	r0, r8
 801030e:	f7fb f838 	bl	800b382 <memcpy>
 8010312:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010316:	f8c4 8000 	str.w	r8, [r4]
 801031a:	e7e9      	b.n	80102f0 <__submore+0x48>

0801031c <__ascii_wctomb>:
 801031c:	b149      	cbz	r1, 8010332 <__ascii_wctomb+0x16>
 801031e:	2aff      	cmp	r2, #255	; 0xff
 8010320:	bf85      	ittet	hi
 8010322:	238a      	movhi	r3, #138	; 0x8a
 8010324:	6003      	strhi	r3, [r0, #0]
 8010326:	700a      	strbls	r2, [r1, #0]
 8010328:	f04f 30ff 	movhi.w	r0, #4294967295
 801032c:	bf98      	it	ls
 801032e:	2001      	movls	r0, #1
 8010330:	4770      	bx	lr
 8010332:	4608      	mov	r0, r1
 8010334:	4770      	bx	lr
	...

08010338 <_fstat_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d07      	ldr	r5, [pc, #28]	; (8010358 <_fstat_r+0x20>)
 801033c:	2300      	movs	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	4608      	mov	r0, r1
 8010342:	4611      	mov	r1, r2
 8010344:	602b      	str	r3, [r5, #0]
 8010346:	f7f2 fc56 	bl	8002bf6 <_fstat>
 801034a:	1c43      	adds	r3, r0, #1
 801034c:	d102      	bne.n	8010354 <_fstat_r+0x1c>
 801034e:	682b      	ldr	r3, [r5, #0]
 8010350:	b103      	cbz	r3, 8010354 <_fstat_r+0x1c>
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	bd38      	pop	{r3, r4, r5, pc}
 8010356:	bf00      	nop
 8010358:	200130d8 	.word	0x200130d8

0801035c <_isatty_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4d06      	ldr	r5, [pc, #24]	; (8010378 <_isatty_r+0x1c>)
 8010360:	2300      	movs	r3, #0
 8010362:	4604      	mov	r4, r0
 8010364:	4608      	mov	r0, r1
 8010366:	602b      	str	r3, [r5, #0]
 8010368:	f7f2 fc55 	bl	8002c16 <_isatty>
 801036c:	1c43      	adds	r3, r0, #1
 801036e:	d102      	bne.n	8010376 <_isatty_r+0x1a>
 8010370:	682b      	ldr	r3, [r5, #0]
 8010372:	b103      	cbz	r3, 8010376 <_isatty_r+0x1a>
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	bd38      	pop	{r3, r4, r5, pc}
 8010378:	200130d8 	.word	0x200130d8

0801037c <_malloc_usable_size_r>:
 801037c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010380:	1f18      	subs	r0, r3, #4
 8010382:	2b00      	cmp	r3, #0
 8010384:	bfbc      	itt	lt
 8010386:	580b      	ldrlt	r3, [r1, r0]
 8010388:	18c0      	addlt	r0, r0, r3
 801038a:	4770      	bx	lr
 801038c:	0000      	movs	r0, r0
	...

08010390 <sin>:
 8010390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010392:	ec53 2b10 	vmov	r2, r3, d0
 8010396:	4828      	ldr	r0, [pc, #160]	; (8010438 <sin+0xa8>)
 8010398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801039c:	4281      	cmp	r1, r0
 801039e:	dc07      	bgt.n	80103b0 <sin+0x20>
 80103a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010430 <sin+0xa0>
 80103a4:	2000      	movs	r0, #0
 80103a6:	b005      	add	sp, #20
 80103a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80103ac:	f000 be6c 	b.w	8011088 <__kernel_sin>
 80103b0:	4822      	ldr	r0, [pc, #136]	; (801043c <sin+0xac>)
 80103b2:	4281      	cmp	r1, r0
 80103b4:	dd09      	ble.n	80103ca <sin+0x3a>
 80103b6:	ee10 0a10 	vmov	r0, s0
 80103ba:	4619      	mov	r1, r3
 80103bc:	f7ef ff74 	bl	80002a8 <__aeabi_dsub>
 80103c0:	ec41 0b10 	vmov	d0, r0, r1
 80103c4:	b005      	add	sp, #20
 80103c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80103ca:	4668      	mov	r0, sp
 80103cc:	f000 f838 	bl	8010440 <__ieee754_rem_pio2>
 80103d0:	f000 0003 	and.w	r0, r0, #3
 80103d4:	2801      	cmp	r0, #1
 80103d6:	d00c      	beq.n	80103f2 <sin+0x62>
 80103d8:	2802      	cmp	r0, #2
 80103da:	d011      	beq.n	8010400 <sin+0x70>
 80103dc:	b9f0      	cbnz	r0, 801041c <sin+0x8c>
 80103de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103e2:	ed9d 0b00 	vldr	d0, [sp]
 80103e6:	2001      	movs	r0, #1
 80103e8:	f000 fe4e 	bl	8011088 <__kernel_sin>
 80103ec:	ec51 0b10 	vmov	r0, r1, d0
 80103f0:	e7e6      	b.n	80103c0 <sin+0x30>
 80103f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103f6:	ed9d 0b00 	vldr	d0, [sp]
 80103fa:	f000 fa2d 	bl	8010858 <__kernel_cos>
 80103fe:	e7f5      	b.n	80103ec <sin+0x5c>
 8010400:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010404:	ed9d 0b00 	vldr	d0, [sp]
 8010408:	2001      	movs	r0, #1
 801040a:	f000 fe3d 	bl	8011088 <__kernel_sin>
 801040e:	ec53 2b10 	vmov	r2, r3, d0
 8010412:	ee10 0a10 	vmov	r0, s0
 8010416:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801041a:	e7d1      	b.n	80103c0 <sin+0x30>
 801041c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010420:	ed9d 0b00 	vldr	d0, [sp]
 8010424:	f000 fa18 	bl	8010858 <__kernel_cos>
 8010428:	e7f1      	b.n	801040e <sin+0x7e>
 801042a:	bf00      	nop
 801042c:	f3af 8000 	nop.w
	...
 8010438:	3fe921fb 	.word	0x3fe921fb
 801043c:	7fefffff 	.word	0x7fefffff

08010440 <__ieee754_rem_pio2>:
 8010440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010444:	ed2d 8b02 	vpush	{d8}
 8010448:	ec55 4b10 	vmov	r4, r5, d0
 801044c:	4bca      	ldr	r3, [pc, #808]	; (8010778 <__ieee754_rem_pio2+0x338>)
 801044e:	b08b      	sub	sp, #44	; 0x2c
 8010450:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010454:	4598      	cmp	r8, r3
 8010456:	4682      	mov	sl, r0
 8010458:	9502      	str	r5, [sp, #8]
 801045a:	dc08      	bgt.n	801046e <__ieee754_rem_pio2+0x2e>
 801045c:	2200      	movs	r2, #0
 801045e:	2300      	movs	r3, #0
 8010460:	ed80 0b00 	vstr	d0, [r0]
 8010464:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010468:	f04f 0b00 	mov.w	fp, #0
 801046c:	e028      	b.n	80104c0 <__ieee754_rem_pio2+0x80>
 801046e:	4bc3      	ldr	r3, [pc, #780]	; (801077c <__ieee754_rem_pio2+0x33c>)
 8010470:	4598      	cmp	r8, r3
 8010472:	dc78      	bgt.n	8010566 <__ieee754_rem_pio2+0x126>
 8010474:	9b02      	ldr	r3, [sp, #8]
 8010476:	4ec2      	ldr	r6, [pc, #776]	; (8010780 <__ieee754_rem_pio2+0x340>)
 8010478:	2b00      	cmp	r3, #0
 801047a:	ee10 0a10 	vmov	r0, s0
 801047e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010740 <__ieee754_rem_pio2+0x300>)
 8010480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010484:	4629      	mov	r1, r5
 8010486:	dd39      	ble.n	80104fc <__ieee754_rem_pio2+0xbc>
 8010488:	f7ef ff0e 	bl	80002a8 <__aeabi_dsub>
 801048c:	45b0      	cmp	r8, r6
 801048e:	4604      	mov	r4, r0
 8010490:	460d      	mov	r5, r1
 8010492:	d01b      	beq.n	80104cc <__ieee754_rem_pio2+0x8c>
 8010494:	a3ac      	add	r3, pc, #688	; (adr r3, 8010748 <__ieee754_rem_pio2+0x308>)
 8010496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049a:	f7ef ff05 	bl	80002a8 <__aeabi_dsub>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	e9ca 2300 	strd	r2, r3, [sl]
 80104a6:	4620      	mov	r0, r4
 80104a8:	4629      	mov	r1, r5
 80104aa:	f7ef fefd 	bl	80002a8 <__aeabi_dsub>
 80104ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8010748 <__ieee754_rem_pio2+0x308>)
 80104b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b4:	f7ef fef8 	bl	80002a8 <__aeabi_dsub>
 80104b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80104bc:	f04f 0b01 	mov.w	fp, #1
 80104c0:	4658      	mov	r0, fp
 80104c2:	b00b      	add	sp, #44	; 0x2c
 80104c4:	ecbd 8b02 	vpop	{d8}
 80104c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8010750 <__ieee754_rem_pio2+0x310>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	f7ef fee9 	bl	80002a8 <__aeabi_dsub>
 80104d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010758 <__ieee754_rem_pio2+0x318>)
 80104d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104dc:	4604      	mov	r4, r0
 80104de:	460d      	mov	r5, r1
 80104e0:	f7ef fee2 	bl	80002a8 <__aeabi_dsub>
 80104e4:	4602      	mov	r2, r0
 80104e6:	460b      	mov	r3, r1
 80104e8:	e9ca 2300 	strd	r2, r3, [sl]
 80104ec:	4620      	mov	r0, r4
 80104ee:	4629      	mov	r1, r5
 80104f0:	f7ef feda 	bl	80002a8 <__aeabi_dsub>
 80104f4:	a398      	add	r3, pc, #608	; (adr r3, 8010758 <__ieee754_rem_pio2+0x318>)
 80104f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fa:	e7db      	b.n	80104b4 <__ieee754_rem_pio2+0x74>
 80104fc:	f7ef fed6 	bl	80002ac <__adddf3>
 8010500:	45b0      	cmp	r8, r6
 8010502:	4604      	mov	r4, r0
 8010504:	460d      	mov	r5, r1
 8010506:	d016      	beq.n	8010536 <__ieee754_rem_pio2+0xf6>
 8010508:	a38f      	add	r3, pc, #572	; (adr r3, 8010748 <__ieee754_rem_pio2+0x308>)
 801050a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050e:	f7ef fecd 	bl	80002ac <__adddf3>
 8010512:	4602      	mov	r2, r0
 8010514:	460b      	mov	r3, r1
 8010516:	e9ca 2300 	strd	r2, r3, [sl]
 801051a:	4620      	mov	r0, r4
 801051c:	4629      	mov	r1, r5
 801051e:	f7ef fec3 	bl	80002a8 <__aeabi_dsub>
 8010522:	a389      	add	r3, pc, #548	; (adr r3, 8010748 <__ieee754_rem_pio2+0x308>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	f7ef fec0 	bl	80002ac <__adddf3>
 801052c:	f04f 3bff 	mov.w	fp, #4294967295
 8010530:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010534:	e7c4      	b.n	80104c0 <__ieee754_rem_pio2+0x80>
 8010536:	a386      	add	r3, pc, #536	; (adr r3, 8010750 <__ieee754_rem_pio2+0x310>)
 8010538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053c:	f7ef feb6 	bl	80002ac <__adddf3>
 8010540:	a385      	add	r3, pc, #532	; (adr r3, 8010758 <__ieee754_rem_pio2+0x318>)
 8010542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010546:	4604      	mov	r4, r0
 8010548:	460d      	mov	r5, r1
 801054a:	f7ef feaf 	bl	80002ac <__adddf3>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	e9ca 2300 	strd	r2, r3, [sl]
 8010556:	4620      	mov	r0, r4
 8010558:	4629      	mov	r1, r5
 801055a:	f7ef fea5 	bl	80002a8 <__aeabi_dsub>
 801055e:	a37e      	add	r3, pc, #504	; (adr r3, 8010758 <__ieee754_rem_pio2+0x318>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	e7e0      	b.n	8010528 <__ieee754_rem_pio2+0xe8>
 8010566:	4b87      	ldr	r3, [pc, #540]	; (8010784 <__ieee754_rem_pio2+0x344>)
 8010568:	4598      	cmp	r8, r3
 801056a:	f300 80d9 	bgt.w	8010720 <__ieee754_rem_pio2+0x2e0>
 801056e:	f000 fe49 	bl	8011204 <fabs>
 8010572:	ec55 4b10 	vmov	r4, r5, d0
 8010576:	ee10 0a10 	vmov	r0, s0
 801057a:	a379      	add	r3, pc, #484	; (adr r3, 8010760 <__ieee754_rem_pio2+0x320>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	4629      	mov	r1, r5
 8010582:	f7f0 f849 	bl	8000618 <__aeabi_dmul>
 8010586:	4b80      	ldr	r3, [pc, #512]	; (8010788 <__ieee754_rem_pio2+0x348>)
 8010588:	2200      	movs	r2, #0
 801058a:	f7ef fe8f 	bl	80002ac <__adddf3>
 801058e:	f7f0 faf3 	bl	8000b78 <__aeabi_d2iz>
 8010592:	4683      	mov	fp, r0
 8010594:	f7ef ffd6 	bl	8000544 <__aeabi_i2d>
 8010598:	4602      	mov	r2, r0
 801059a:	460b      	mov	r3, r1
 801059c:	ec43 2b18 	vmov	d8, r2, r3
 80105a0:	a367      	add	r3, pc, #412	; (adr r3, 8010740 <__ieee754_rem_pio2+0x300>)
 80105a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a6:	f7f0 f837 	bl	8000618 <__aeabi_dmul>
 80105aa:	4602      	mov	r2, r0
 80105ac:	460b      	mov	r3, r1
 80105ae:	4620      	mov	r0, r4
 80105b0:	4629      	mov	r1, r5
 80105b2:	f7ef fe79 	bl	80002a8 <__aeabi_dsub>
 80105b6:	a364      	add	r3, pc, #400	; (adr r3, 8010748 <__ieee754_rem_pio2+0x308>)
 80105b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105bc:	4606      	mov	r6, r0
 80105be:	460f      	mov	r7, r1
 80105c0:	ec51 0b18 	vmov	r0, r1, d8
 80105c4:	f7f0 f828 	bl	8000618 <__aeabi_dmul>
 80105c8:	f1bb 0f1f 	cmp.w	fp, #31
 80105cc:	4604      	mov	r4, r0
 80105ce:	460d      	mov	r5, r1
 80105d0:	dc0d      	bgt.n	80105ee <__ieee754_rem_pio2+0x1ae>
 80105d2:	4b6e      	ldr	r3, [pc, #440]	; (801078c <__ieee754_rem_pio2+0x34c>)
 80105d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80105d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105dc:	4543      	cmp	r3, r8
 80105de:	d006      	beq.n	80105ee <__ieee754_rem_pio2+0x1ae>
 80105e0:	4622      	mov	r2, r4
 80105e2:	462b      	mov	r3, r5
 80105e4:	4630      	mov	r0, r6
 80105e6:	4639      	mov	r1, r7
 80105e8:	f7ef fe5e 	bl	80002a8 <__aeabi_dsub>
 80105ec:	e00f      	b.n	801060e <__ieee754_rem_pio2+0x1ce>
 80105ee:	462b      	mov	r3, r5
 80105f0:	4622      	mov	r2, r4
 80105f2:	4630      	mov	r0, r6
 80105f4:	4639      	mov	r1, r7
 80105f6:	f7ef fe57 	bl	80002a8 <__aeabi_dsub>
 80105fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80105fe:	9303      	str	r3, [sp, #12]
 8010600:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010604:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010608:	f1b8 0f10 	cmp.w	r8, #16
 801060c:	dc02      	bgt.n	8010614 <__ieee754_rem_pio2+0x1d4>
 801060e:	e9ca 0100 	strd	r0, r1, [sl]
 8010612:	e039      	b.n	8010688 <__ieee754_rem_pio2+0x248>
 8010614:	a34e      	add	r3, pc, #312	; (adr r3, 8010750 <__ieee754_rem_pio2+0x310>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	ec51 0b18 	vmov	r0, r1, d8
 801061e:	f7ef fffb 	bl	8000618 <__aeabi_dmul>
 8010622:	4604      	mov	r4, r0
 8010624:	460d      	mov	r5, r1
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4630      	mov	r0, r6
 801062c:	4639      	mov	r1, r7
 801062e:	f7ef fe3b 	bl	80002a8 <__aeabi_dsub>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	4680      	mov	r8, r0
 8010638:	4689      	mov	r9, r1
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7ef fe33 	bl	80002a8 <__aeabi_dsub>
 8010642:	4622      	mov	r2, r4
 8010644:	462b      	mov	r3, r5
 8010646:	f7ef fe2f 	bl	80002a8 <__aeabi_dsub>
 801064a:	a343      	add	r3, pc, #268	; (adr r3, 8010758 <__ieee754_rem_pio2+0x318>)
 801064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010650:	4604      	mov	r4, r0
 8010652:	460d      	mov	r5, r1
 8010654:	ec51 0b18 	vmov	r0, r1, d8
 8010658:	f7ef ffde 	bl	8000618 <__aeabi_dmul>
 801065c:	4622      	mov	r2, r4
 801065e:	462b      	mov	r3, r5
 8010660:	f7ef fe22 	bl	80002a8 <__aeabi_dsub>
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	4604      	mov	r4, r0
 801066a:	460d      	mov	r5, r1
 801066c:	4640      	mov	r0, r8
 801066e:	4649      	mov	r1, r9
 8010670:	f7ef fe1a 	bl	80002a8 <__aeabi_dsub>
 8010674:	9a03      	ldr	r2, [sp, #12]
 8010676:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801067a:	1ad3      	subs	r3, r2, r3
 801067c:	2b31      	cmp	r3, #49	; 0x31
 801067e:	dc24      	bgt.n	80106ca <__ieee754_rem_pio2+0x28a>
 8010680:	e9ca 0100 	strd	r0, r1, [sl]
 8010684:	4646      	mov	r6, r8
 8010686:	464f      	mov	r7, r9
 8010688:	e9da 8900 	ldrd	r8, r9, [sl]
 801068c:	4630      	mov	r0, r6
 801068e:	4642      	mov	r2, r8
 8010690:	464b      	mov	r3, r9
 8010692:	4639      	mov	r1, r7
 8010694:	f7ef fe08 	bl	80002a8 <__aeabi_dsub>
 8010698:	462b      	mov	r3, r5
 801069a:	4622      	mov	r2, r4
 801069c:	f7ef fe04 	bl	80002a8 <__aeabi_dsub>
 80106a0:	9b02      	ldr	r3, [sp, #8]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80106a8:	f6bf af0a 	bge.w	80104c0 <__ieee754_rem_pio2+0x80>
 80106ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80106b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80106b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106b8:	f8ca 8000 	str.w	r8, [sl]
 80106bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80106c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80106c4:	f1cb 0b00 	rsb	fp, fp, #0
 80106c8:	e6fa      	b.n	80104c0 <__ieee754_rem_pio2+0x80>
 80106ca:	a327      	add	r3, pc, #156	; (adr r3, 8010768 <__ieee754_rem_pio2+0x328>)
 80106cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d0:	ec51 0b18 	vmov	r0, r1, d8
 80106d4:	f7ef ffa0 	bl	8000618 <__aeabi_dmul>
 80106d8:	4604      	mov	r4, r0
 80106da:	460d      	mov	r5, r1
 80106dc:	4602      	mov	r2, r0
 80106de:	460b      	mov	r3, r1
 80106e0:	4640      	mov	r0, r8
 80106e2:	4649      	mov	r1, r9
 80106e4:	f7ef fde0 	bl	80002a8 <__aeabi_dsub>
 80106e8:	4602      	mov	r2, r0
 80106ea:	460b      	mov	r3, r1
 80106ec:	4606      	mov	r6, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	4640      	mov	r0, r8
 80106f2:	4649      	mov	r1, r9
 80106f4:	f7ef fdd8 	bl	80002a8 <__aeabi_dsub>
 80106f8:	4622      	mov	r2, r4
 80106fa:	462b      	mov	r3, r5
 80106fc:	f7ef fdd4 	bl	80002a8 <__aeabi_dsub>
 8010700:	a31b      	add	r3, pc, #108	; (adr r3, 8010770 <__ieee754_rem_pio2+0x330>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	4604      	mov	r4, r0
 8010708:	460d      	mov	r5, r1
 801070a:	ec51 0b18 	vmov	r0, r1, d8
 801070e:	f7ef ff83 	bl	8000618 <__aeabi_dmul>
 8010712:	4622      	mov	r2, r4
 8010714:	462b      	mov	r3, r5
 8010716:	f7ef fdc7 	bl	80002a8 <__aeabi_dsub>
 801071a:	4604      	mov	r4, r0
 801071c:	460d      	mov	r5, r1
 801071e:	e75f      	b.n	80105e0 <__ieee754_rem_pio2+0x1a0>
 8010720:	4b1b      	ldr	r3, [pc, #108]	; (8010790 <__ieee754_rem_pio2+0x350>)
 8010722:	4598      	cmp	r8, r3
 8010724:	dd36      	ble.n	8010794 <__ieee754_rem_pio2+0x354>
 8010726:	ee10 2a10 	vmov	r2, s0
 801072a:	462b      	mov	r3, r5
 801072c:	4620      	mov	r0, r4
 801072e:	4629      	mov	r1, r5
 8010730:	f7ef fdba 	bl	80002a8 <__aeabi_dsub>
 8010734:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010738:	e9ca 0100 	strd	r0, r1, [sl]
 801073c:	e694      	b.n	8010468 <__ieee754_rem_pio2+0x28>
 801073e:	bf00      	nop
 8010740:	54400000 	.word	0x54400000
 8010744:	3ff921fb 	.word	0x3ff921fb
 8010748:	1a626331 	.word	0x1a626331
 801074c:	3dd0b461 	.word	0x3dd0b461
 8010750:	1a600000 	.word	0x1a600000
 8010754:	3dd0b461 	.word	0x3dd0b461
 8010758:	2e037073 	.word	0x2e037073
 801075c:	3ba3198a 	.word	0x3ba3198a
 8010760:	6dc9c883 	.word	0x6dc9c883
 8010764:	3fe45f30 	.word	0x3fe45f30
 8010768:	2e000000 	.word	0x2e000000
 801076c:	3ba3198a 	.word	0x3ba3198a
 8010770:	252049c1 	.word	0x252049c1
 8010774:	397b839a 	.word	0x397b839a
 8010778:	3fe921fb 	.word	0x3fe921fb
 801077c:	4002d97b 	.word	0x4002d97b
 8010780:	3ff921fb 	.word	0x3ff921fb
 8010784:	413921fb 	.word	0x413921fb
 8010788:	3fe00000 	.word	0x3fe00000
 801078c:	08011bd0 	.word	0x08011bd0
 8010790:	7fefffff 	.word	0x7fefffff
 8010794:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010798:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801079c:	ee10 0a10 	vmov	r0, s0
 80107a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80107a4:	ee10 6a10 	vmov	r6, s0
 80107a8:	460f      	mov	r7, r1
 80107aa:	f7f0 f9e5 	bl	8000b78 <__aeabi_d2iz>
 80107ae:	f7ef fec9 	bl	8000544 <__aeabi_i2d>
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	4630      	mov	r0, r6
 80107b8:	4639      	mov	r1, r7
 80107ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80107be:	f7ef fd73 	bl	80002a8 <__aeabi_dsub>
 80107c2:	4b23      	ldr	r3, [pc, #140]	; (8010850 <__ieee754_rem_pio2+0x410>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	f7ef ff27 	bl	8000618 <__aeabi_dmul>
 80107ca:	460f      	mov	r7, r1
 80107cc:	4606      	mov	r6, r0
 80107ce:	f7f0 f9d3 	bl	8000b78 <__aeabi_d2iz>
 80107d2:	f7ef feb7 	bl	8000544 <__aeabi_i2d>
 80107d6:	4602      	mov	r2, r0
 80107d8:	460b      	mov	r3, r1
 80107da:	4630      	mov	r0, r6
 80107dc:	4639      	mov	r1, r7
 80107de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80107e2:	f7ef fd61 	bl	80002a8 <__aeabi_dsub>
 80107e6:	4b1a      	ldr	r3, [pc, #104]	; (8010850 <__ieee754_rem_pio2+0x410>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	f7ef ff15 	bl	8000618 <__aeabi_dmul>
 80107ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80107f2:	ad04      	add	r5, sp, #16
 80107f4:	f04f 0803 	mov.w	r8, #3
 80107f8:	46a9      	mov	r9, r5
 80107fa:	2600      	movs	r6, #0
 80107fc:	2700      	movs	r7, #0
 80107fe:	4632      	mov	r2, r6
 8010800:	463b      	mov	r3, r7
 8010802:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8010806:	46c3      	mov	fp, r8
 8010808:	3d08      	subs	r5, #8
 801080a:	f108 38ff 	add.w	r8, r8, #4294967295
 801080e:	f7f0 f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010812:	2800      	cmp	r0, #0
 8010814:	d1f3      	bne.n	80107fe <__ieee754_rem_pio2+0x3be>
 8010816:	4b0f      	ldr	r3, [pc, #60]	; (8010854 <__ieee754_rem_pio2+0x414>)
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	2302      	movs	r3, #2
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	4622      	mov	r2, r4
 8010820:	465b      	mov	r3, fp
 8010822:	4651      	mov	r1, sl
 8010824:	4648      	mov	r0, r9
 8010826:	f000 f8df 	bl	80109e8 <__kernel_rem_pio2>
 801082a:	9b02      	ldr	r3, [sp, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	4683      	mov	fp, r0
 8010830:	f6bf ae46 	bge.w	80104c0 <__ieee754_rem_pio2+0x80>
 8010834:	e9da 2100 	ldrd	r2, r1, [sl]
 8010838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801083c:	e9ca 2300 	strd	r2, r3, [sl]
 8010840:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010848:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801084c:	e73a      	b.n	80106c4 <__ieee754_rem_pio2+0x284>
 801084e:	bf00      	nop
 8010850:	41700000 	.word	0x41700000
 8010854:	08011c50 	.word	0x08011c50

08010858 <__kernel_cos>:
 8010858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085c:	ec57 6b10 	vmov	r6, r7, d0
 8010860:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010864:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010868:	ed8d 1b00 	vstr	d1, [sp]
 801086c:	da07      	bge.n	801087e <__kernel_cos+0x26>
 801086e:	ee10 0a10 	vmov	r0, s0
 8010872:	4639      	mov	r1, r7
 8010874:	f7f0 f980 	bl	8000b78 <__aeabi_d2iz>
 8010878:	2800      	cmp	r0, #0
 801087a:	f000 8088 	beq.w	801098e <__kernel_cos+0x136>
 801087e:	4632      	mov	r2, r6
 8010880:	463b      	mov	r3, r7
 8010882:	4630      	mov	r0, r6
 8010884:	4639      	mov	r1, r7
 8010886:	f7ef fec7 	bl	8000618 <__aeabi_dmul>
 801088a:	4b51      	ldr	r3, [pc, #324]	; (80109d0 <__kernel_cos+0x178>)
 801088c:	2200      	movs	r2, #0
 801088e:	4604      	mov	r4, r0
 8010890:	460d      	mov	r5, r1
 8010892:	f7ef fec1 	bl	8000618 <__aeabi_dmul>
 8010896:	a340      	add	r3, pc, #256	; (adr r3, 8010998 <__kernel_cos+0x140>)
 8010898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089c:	4682      	mov	sl, r0
 801089e:	468b      	mov	fp, r1
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7ef feb8 	bl	8000618 <__aeabi_dmul>
 80108a8:	a33d      	add	r3, pc, #244	; (adr r3, 80109a0 <__kernel_cos+0x148>)
 80108aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ae:	f7ef fcfd 	bl	80002ac <__adddf3>
 80108b2:	4622      	mov	r2, r4
 80108b4:	462b      	mov	r3, r5
 80108b6:	f7ef feaf 	bl	8000618 <__aeabi_dmul>
 80108ba:	a33b      	add	r3, pc, #236	; (adr r3, 80109a8 <__kernel_cos+0x150>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	f7ef fcf2 	bl	80002a8 <__aeabi_dsub>
 80108c4:	4622      	mov	r2, r4
 80108c6:	462b      	mov	r3, r5
 80108c8:	f7ef fea6 	bl	8000618 <__aeabi_dmul>
 80108cc:	a338      	add	r3, pc, #224	; (adr r3, 80109b0 <__kernel_cos+0x158>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7ef fceb 	bl	80002ac <__adddf3>
 80108d6:	4622      	mov	r2, r4
 80108d8:	462b      	mov	r3, r5
 80108da:	f7ef fe9d 	bl	8000618 <__aeabi_dmul>
 80108de:	a336      	add	r3, pc, #216	; (adr r3, 80109b8 <__kernel_cos+0x160>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	f7ef fce0 	bl	80002a8 <__aeabi_dsub>
 80108e8:	4622      	mov	r2, r4
 80108ea:	462b      	mov	r3, r5
 80108ec:	f7ef fe94 	bl	8000618 <__aeabi_dmul>
 80108f0:	a333      	add	r3, pc, #204	; (adr r3, 80109c0 <__kernel_cos+0x168>)
 80108f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f6:	f7ef fcd9 	bl	80002ac <__adddf3>
 80108fa:	4622      	mov	r2, r4
 80108fc:	462b      	mov	r3, r5
 80108fe:	f7ef fe8b 	bl	8000618 <__aeabi_dmul>
 8010902:	4622      	mov	r2, r4
 8010904:	462b      	mov	r3, r5
 8010906:	f7ef fe87 	bl	8000618 <__aeabi_dmul>
 801090a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801090e:	4604      	mov	r4, r0
 8010910:	460d      	mov	r5, r1
 8010912:	4630      	mov	r0, r6
 8010914:	4639      	mov	r1, r7
 8010916:	f7ef fe7f 	bl	8000618 <__aeabi_dmul>
 801091a:	460b      	mov	r3, r1
 801091c:	4602      	mov	r2, r0
 801091e:	4629      	mov	r1, r5
 8010920:	4620      	mov	r0, r4
 8010922:	f7ef fcc1 	bl	80002a8 <__aeabi_dsub>
 8010926:	4b2b      	ldr	r3, [pc, #172]	; (80109d4 <__kernel_cos+0x17c>)
 8010928:	4598      	cmp	r8, r3
 801092a:	4606      	mov	r6, r0
 801092c:	460f      	mov	r7, r1
 801092e:	dc10      	bgt.n	8010952 <__kernel_cos+0xfa>
 8010930:	4602      	mov	r2, r0
 8010932:	460b      	mov	r3, r1
 8010934:	4650      	mov	r0, sl
 8010936:	4659      	mov	r1, fp
 8010938:	f7ef fcb6 	bl	80002a8 <__aeabi_dsub>
 801093c:	460b      	mov	r3, r1
 801093e:	4926      	ldr	r1, [pc, #152]	; (80109d8 <__kernel_cos+0x180>)
 8010940:	4602      	mov	r2, r0
 8010942:	2000      	movs	r0, #0
 8010944:	f7ef fcb0 	bl	80002a8 <__aeabi_dsub>
 8010948:	ec41 0b10 	vmov	d0, r0, r1
 801094c:	b003      	add	sp, #12
 801094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010952:	4b22      	ldr	r3, [pc, #136]	; (80109dc <__kernel_cos+0x184>)
 8010954:	4920      	ldr	r1, [pc, #128]	; (80109d8 <__kernel_cos+0x180>)
 8010956:	4598      	cmp	r8, r3
 8010958:	bfcc      	ite	gt
 801095a:	4d21      	ldrgt	r5, [pc, #132]	; (80109e0 <__kernel_cos+0x188>)
 801095c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010960:	2400      	movs	r4, #0
 8010962:	4622      	mov	r2, r4
 8010964:	462b      	mov	r3, r5
 8010966:	2000      	movs	r0, #0
 8010968:	f7ef fc9e 	bl	80002a8 <__aeabi_dsub>
 801096c:	4622      	mov	r2, r4
 801096e:	4680      	mov	r8, r0
 8010970:	4689      	mov	r9, r1
 8010972:	462b      	mov	r3, r5
 8010974:	4650      	mov	r0, sl
 8010976:	4659      	mov	r1, fp
 8010978:	f7ef fc96 	bl	80002a8 <__aeabi_dsub>
 801097c:	4632      	mov	r2, r6
 801097e:	463b      	mov	r3, r7
 8010980:	f7ef fc92 	bl	80002a8 <__aeabi_dsub>
 8010984:	4602      	mov	r2, r0
 8010986:	460b      	mov	r3, r1
 8010988:	4640      	mov	r0, r8
 801098a:	4649      	mov	r1, r9
 801098c:	e7da      	b.n	8010944 <__kernel_cos+0xec>
 801098e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80109c8 <__kernel_cos+0x170>
 8010992:	e7db      	b.n	801094c <__kernel_cos+0xf4>
 8010994:	f3af 8000 	nop.w
 8010998:	be8838d4 	.word	0xbe8838d4
 801099c:	bda8fae9 	.word	0xbda8fae9
 80109a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80109a4:	3e21ee9e 	.word	0x3e21ee9e
 80109a8:	809c52ad 	.word	0x809c52ad
 80109ac:	3e927e4f 	.word	0x3e927e4f
 80109b0:	19cb1590 	.word	0x19cb1590
 80109b4:	3efa01a0 	.word	0x3efa01a0
 80109b8:	16c15177 	.word	0x16c15177
 80109bc:	3f56c16c 	.word	0x3f56c16c
 80109c0:	5555554c 	.word	0x5555554c
 80109c4:	3fa55555 	.word	0x3fa55555
 80109c8:	00000000 	.word	0x00000000
 80109cc:	3ff00000 	.word	0x3ff00000
 80109d0:	3fe00000 	.word	0x3fe00000
 80109d4:	3fd33332 	.word	0x3fd33332
 80109d8:	3ff00000 	.word	0x3ff00000
 80109dc:	3fe90000 	.word	0x3fe90000
 80109e0:	3fd20000 	.word	0x3fd20000
 80109e4:	00000000 	.word	0x00000000

080109e8 <__kernel_rem_pio2>:
 80109e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ec:	ed2d 8b02 	vpush	{d8}
 80109f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80109f4:	f112 0f14 	cmn.w	r2, #20
 80109f8:	9308      	str	r3, [sp, #32]
 80109fa:	9101      	str	r1, [sp, #4]
 80109fc:	4bc4      	ldr	r3, [pc, #784]	; (8010d10 <__kernel_rem_pio2+0x328>)
 80109fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010a00:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a06:	9302      	str	r3, [sp, #8]
 8010a08:	9b08      	ldr	r3, [sp, #32]
 8010a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a0e:	bfa8      	it	ge
 8010a10:	1ed4      	subge	r4, r2, #3
 8010a12:	9306      	str	r3, [sp, #24]
 8010a14:	bfb2      	itee	lt
 8010a16:	2400      	movlt	r4, #0
 8010a18:	2318      	movge	r3, #24
 8010a1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010a1e:	f06f 0317 	mvn.w	r3, #23
 8010a22:	fb04 3303 	mla	r3, r4, r3, r3
 8010a26:	eb03 0a02 	add.w	sl, r3, r2
 8010a2a:	9b02      	ldr	r3, [sp, #8]
 8010a2c:	9a06      	ldr	r2, [sp, #24]
 8010a2e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010d00 <__kernel_rem_pio2+0x318>
 8010a32:	eb03 0802 	add.w	r8, r3, r2
 8010a36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010a38:	1aa7      	subs	r7, r4, r2
 8010a3a:	ae22      	add	r6, sp, #136	; 0x88
 8010a3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010a40:	2500      	movs	r5, #0
 8010a42:	4545      	cmp	r5, r8
 8010a44:	dd13      	ble.n	8010a6e <__kernel_rem_pio2+0x86>
 8010a46:	9b08      	ldr	r3, [sp, #32]
 8010a48:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010d00 <__kernel_rem_pio2+0x318>
 8010a4c:	aa22      	add	r2, sp, #136	; 0x88
 8010a4e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010a52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010a56:	f04f 0800 	mov.w	r8, #0
 8010a5a:	9b02      	ldr	r3, [sp, #8]
 8010a5c:	4598      	cmp	r8, r3
 8010a5e:	dc2f      	bgt.n	8010ac0 <__kernel_rem_pio2+0xd8>
 8010a60:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010a64:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010a68:	462f      	mov	r7, r5
 8010a6a:	2600      	movs	r6, #0
 8010a6c:	e01b      	b.n	8010aa6 <__kernel_rem_pio2+0xbe>
 8010a6e:	42ef      	cmn	r7, r5
 8010a70:	d407      	bmi.n	8010a82 <__kernel_rem_pio2+0x9a>
 8010a72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010a76:	f7ef fd65 	bl	8000544 <__aeabi_i2d>
 8010a7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010a7e:	3501      	adds	r5, #1
 8010a80:	e7df      	b.n	8010a42 <__kernel_rem_pio2+0x5a>
 8010a82:	ec51 0b18 	vmov	r0, r1, d8
 8010a86:	e7f8      	b.n	8010a7a <__kernel_rem_pio2+0x92>
 8010a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010a90:	f7ef fdc2 	bl	8000618 <__aeabi_dmul>
 8010a94:	4602      	mov	r2, r0
 8010a96:	460b      	mov	r3, r1
 8010a98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a9c:	f7ef fc06 	bl	80002ac <__adddf3>
 8010aa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010aa4:	3601      	adds	r6, #1
 8010aa6:	9b06      	ldr	r3, [sp, #24]
 8010aa8:	429e      	cmp	r6, r3
 8010aaa:	f1a7 0708 	sub.w	r7, r7, #8
 8010aae:	ddeb      	ble.n	8010a88 <__kernel_rem_pio2+0xa0>
 8010ab0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010ab4:	f108 0801 	add.w	r8, r8, #1
 8010ab8:	ecab 7b02 	vstmia	fp!, {d7}
 8010abc:	3508      	adds	r5, #8
 8010abe:	e7cc      	b.n	8010a5a <__kernel_rem_pio2+0x72>
 8010ac0:	9b02      	ldr	r3, [sp, #8]
 8010ac2:	aa0e      	add	r2, sp, #56	; 0x38
 8010ac4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8010aca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010acc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ad0:	9c02      	ldr	r4, [sp, #8]
 8010ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ad4:	00e3      	lsls	r3, r4, #3
 8010ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8010ad8:	ab9a      	add	r3, sp, #616	; 0x268
 8010ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ade:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010ae2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010ae6:	ab72      	add	r3, sp, #456	; 0x1c8
 8010ae8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010aec:	46c3      	mov	fp, r8
 8010aee:	46a1      	mov	r9, r4
 8010af0:	f1b9 0f00 	cmp.w	r9, #0
 8010af4:	f1a5 0508 	sub.w	r5, r5, #8
 8010af8:	dc77      	bgt.n	8010bea <__kernel_rem_pio2+0x202>
 8010afa:	ec47 6b10 	vmov	d0, r6, r7
 8010afe:	4650      	mov	r0, sl
 8010b00:	f000 fc0a 	bl	8011318 <scalbn>
 8010b04:	ec57 6b10 	vmov	r6, r7, d0
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010b0e:	ee10 0a10 	vmov	r0, s0
 8010b12:	4639      	mov	r1, r7
 8010b14:	f7ef fd80 	bl	8000618 <__aeabi_dmul>
 8010b18:	ec41 0b10 	vmov	d0, r0, r1
 8010b1c:	f000 fb7c 	bl	8011218 <floor>
 8010b20:	4b7c      	ldr	r3, [pc, #496]	; (8010d14 <__kernel_rem_pio2+0x32c>)
 8010b22:	ec51 0b10 	vmov	r0, r1, d0
 8010b26:	2200      	movs	r2, #0
 8010b28:	f7ef fd76 	bl	8000618 <__aeabi_dmul>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	4630      	mov	r0, r6
 8010b32:	4639      	mov	r1, r7
 8010b34:	f7ef fbb8 	bl	80002a8 <__aeabi_dsub>
 8010b38:	460f      	mov	r7, r1
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	f7f0 f81c 	bl	8000b78 <__aeabi_d2iz>
 8010b40:	9004      	str	r0, [sp, #16]
 8010b42:	f7ef fcff 	bl	8000544 <__aeabi_i2d>
 8010b46:	4602      	mov	r2, r0
 8010b48:	460b      	mov	r3, r1
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	f7ef fbab 	bl	80002a8 <__aeabi_dsub>
 8010b52:	f1ba 0f00 	cmp.w	sl, #0
 8010b56:	4606      	mov	r6, r0
 8010b58:	460f      	mov	r7, r1
 8010b5a:	dd6d      	ble.n	8010c38 <__kernel_rem_pio2+0x250>
 8010b5c:	1e62      	subs	r2, r4, #1
 8010b5e:	ab0e      	add	r3, sp, #56	; 0x38
 8010b60:	9d04      	ldr	r5, [sp, #16]
 8010b62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010b66:	f1ca 0118 	rsb	r1, sl, #24
 8010b6a:	fa40 f301 	asr.w	r3, r0, r1
 8010b6e:	441d      	add	r5, r3
 8010b70:	408b      	lsls	r3, r1
 8010b72:	1ac0      	subs	r0, r0, r3
 8010b74:	ab0e      	add	r3, sp, #56	; 0x38
 8010b76:	9504      	str	r5, [sp, #16]
 8010b78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010b7c:	f1ca 0317 	rsb	r3, sl, #23
 8010b80:	fa40 fb03 	asr.w	fp, r0, r3
 8010b84:	f1bb 0f00 	cmp.w	fp, #0
 8010b88:	dd65      	ble.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010b8a:	9b04      	ldr	r3, [sp, #16]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	3301      	adds	r3, #1
 8010b90:	9304      	str	r3, [sp, #16]
 8010b92:	4615      	mov	r5, r2
 8010b94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010b98:	4294      	cmp	r4, r2
 8010b9a:	f300 809c 	bgt.w	8010cd6 <__kernel_rem_pio2+0x2ee>
 8010b9e:	f1ba 0f00 	cmp.w	sl, #0
 8010ba2:	dd07      	ble.n	8010bb4 <__kernel_rem_pio2+0x1cc>
 8010ba4:	f1ba 0f01 	cmp.w	sl, #1
 8010ba8:	f000 80c0 	beq.w	8010d2c <__kernel_rem_pio2+0x344>
 8010bac:	f1ba 0f02 	cmp.w	sl, #2
 8010bb0:	f000 80c6 	beq.w	8010d40 <__kernel_rem_pio2+0x358>
 8010bb4:	f1bb 0f02 	cmp.w	fp, #2
 8010bb8:	d14d      	bne.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010bba:	4632      	mov	r2, r6
 8010bbc:	463b      	mov	r3, r7
 8010bbe:	4956      	ldr	r1, [pc, #344]	; (8010d18 <__kernel_rem_pio2+0x330>)
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	f7ef fb71 	bl	80002a8 <__aeabi_dsub>
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	460f      	mov	r7, r1
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	d043      	beq.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010bce:	4650      	mov	r0, sl
 8010bd0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010d08 <__kernel_rem_pio2+0x320>
 8010bd4:	f000 fba0 	bl	8011318 <scalbn>
 8010bd8:	4630      	mov	r0, r6
 8010bda:	4639      	mov	r1, r7
 8010bdc:	ec53 2b10 	vmov	r2, r3, d0
 8010be0:	f7ef fb62 	bl	80002a8 <__aeabi_dsub>
 8010be4:	4606      	mov	r6, r0
 8010be6:	460f      	mov	r7, r1
 8010be8:	e035      	b.n	8010c56 <__kernel_rem_pio2+0x26e>
 8010bea:	4b4c      	ldr	r3, [pc, #304]	; (8010d1c <__kernel_rem_pio2+0x334>)
 8010bec:	2200      	movs	r2, #0
 8010bee:	4630      	mov	r0, r6
 8010bf0:	4639      	mov	r1, r7
 8010bf2:	f7ef fd11 	bl	8000618 <__aeabi_dmul>
 8010bf6:	f7ef ffbf 	bl	8000b78 <__aeabi_d2iz>
 8010bfa:	f7ef fca3 	bl	8000544 <__aeabi_i2d>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	ec43 2b18 	vmov	d8, r2, r3
 8010c06:	4b46      	ldr	r3, [pc, #280]	; (8010d20 <__kernel_rem_pio2+0x338>)
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f7ef fd05 	bl	8000618 <__aeabi_dmul>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	4630      	mov	r0, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	f7ef fb47 	bl	80002a8 <__aeabi_dsub>
 8010c1a:	f7ef ffad 	bl	8000b78 <__aeabi_d2iz>
 8010c1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c22:	f84b 0b04 	str.w	r0, [fp], #4
 8010c26:	ec51 0b18 	vmov	r0, r1, d8
 8010c2a:	f7ef fb3f 	bl	80002ac <__adddf3>
 8010c2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010c32:	4606      	mov	r6, r0
 8010c34:	460f      	mov	r7, r1
 8010c36:	e75b      	b.n	8010af0 <__kernel_rem_pio2+0x108>
 8010c38:	d106      	bne.n	8010c48 <__kernel_rem_pio2+0x260>
 8010c3a:	1e63      	subs	r3, r4, #1
 8010c3c:	aa0e      	add	r2, sp, #56	; 0x38
 8010c3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010c42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010c46:	e79d      	b.n	8010b84 <__kernel_rem_pio2+0x19c>
 8010c48:	4b36      	ldr	r3, [pc, #216]	; (8010d24 <__kernel_rem_pio2+0x33c>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f7ef ff6a 	bl	8000b24 <__aeabi_dcmpge>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d13d      	bne.n	8010cd0 <__kernel_rem_pio2+0x2e8>
 8010c54:	4683      	mov	fp, r0
 8010c56:	2200      	movs	r2, #0
 8010c58:	2300      	movs	r3, #0
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	f7ef ff43 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	f000 80c0 	beq.w	8010de8 <__kernel_rem_pio2+0x400>
 8010c68:	1e65      	subs	r5, r4, #1
 8010c6a:	462b      	mov	r3, r5
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	9902      	ldr	r1, [sp, #8]
 8010c70:	428b      	cmp	r3, r1
 8010c72:	da6c      	bge.n	8010d4e <__kernel_rem_pio2+0x366>
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	f000 8089 	beq.w	8010d8c <__kernel_rem_pio2+0x3a4>
 8010c7a:	ab0e      	add	r3, sp, #56	; 0x38
 8010c7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010c80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f000 80ad 	beq.w	8010de4 <__kernel_rem_pio2+0x3fc>
 8010c8a:	4650      	mov	r0, sl
 8010c8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010d08 <__kernel_rem_pio2+0x320>
 8010c90:	f000 fb42 	bl	8011318 <scalbn>
 8010c94:	ab9a      	add	r3, sp, #616	; 0x268
 8010c96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010c9a:	ec57 6b10 	vmov	r6, r7, d0
 8010c9e:	00ec      	lsls	r4, r5, #3
 8010ca0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010ca4:	46aa      	mov	sl, r5
 8010ca6:	f1ba 0f00 	cmp.w	sl, #0
 8010caa:	f280 80d6 	bge.w	8010e5a <__kernel_rem_pio2+0x472>
 8010cae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010d00 <__kernel_rem_pio2+0x318>
 8010cb2:	462e      	mov	r6, r5
 8010cb4:	2e00      	cmp	r6, #0
 8010cb6:	f2c0 8104 	blt.w	8010ec2 <__kernel_rem_pio2+0x4da>
 8010cba:	ab72      	add	r3, sp, #456	; 0x1c8
 8010cbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010cc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010d28 <__kernel_rem_pio2+0x340>
 8010cc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010cc8:	f04f 0800 	mov.w	r8, #0
 8010ccc:	1baf      	subs	r7, r5, r6
 8010cce:	e0ea      	b.n	8010ea6 <__kernel_rem_pio2+0x4be>
 8010cd0:	f04f 0b02 	mov.w	fp, #2
 8010cd4:	e759      	b.n	8010b8a <__kernel_rem_pio2+0x1a2>
 8010cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010cda:	b955      	cbnz	r5, 8010cf2 <__kernel_rem_pio2+0x30a>
 8010cdc:	b123      	cbz	r3, 8010ce8 <__kernel_rem_pio2+0x300>
 8010cde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010ce2:	f8c8 3000 	str.w	r3, [r8]
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	3201      	adds	r2, #1
 8010cea:	f108 0804 	add.w	r8, r8, #4
 8010cee:	461d      	mov	r5, r3
 8010cf0:	e752      	b.n	8010b98 <__kernel_rem_pio2+0x1b0>
 8010cf2:	1acb      	subs	r3, r1, r3
 8010cf4:	f8c8 3000 	str.w	r3, [r8]
 8010cf8:	462b      	mov	r3, r5
 8010cfa:	e7f5      	b.n	8010ce8 <__kernel_rem_pio2+0x300>
 8010cfc:	f3af 8000 	nop.w
	...
 8010d0c:	3ff00000 	.word	0x3ff00000
 8010d10:	08011d98 	.word	0x08011d98
 8010d14:	40200000 	.word	0x40200000
 8010d18:	3ff00000 	.word	0x3ff00000
 8010d1c:	3e700000 	.word	0x3e700000
 8010d20:	41700000 	.word	0x41700000
 8010d24:	3fe00000 	.word	0x3fe00000
 8010d28:	08011d58 	.word	0x08011d58
 8010d2c:	1e62      	subs	r2, r4, #1
 8010d2e:	ab0e      	add	r3, sp, #56	; 0x38
 8010d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010d38:	a90e      	add	r1, sp, #56	; 0x38
 8010d3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010d3e:	e739      	b.n	8010bb4 <__kernel_rem_pio2+0x1cc>
 8010d40:	1e62      	subs	r2, r4, #1
 8010d42:	ab0e      	add	r3, sp, #56	; 0x38
 8010d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010d4c:	e7f4      	b.n	8010d38 <__kernel_rem_pio2+0x350>
 8010d4e:	a90e      	add	r1, sp, #56	; 0x38
 8010d50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	430a      	orrs	r2, r1
 8010d58:	e789      	b.n	8010c6e <__kernel_rem_pio2+0x286>
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010d60:	2900      	cmp	r1, #0
 8010d62:	d0fa      	beq.n	8010d5a <__kernel_rem_pio2+0x372>
 8010d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010d6a:	446a      	add	r2, sp
 8010d6c:	3a98      	subs	r2, #152	; 0x98
 8010d6e:	920a      	str	r2, [sp, #40]	; 0x28
 8010d70:	9a08      	ldr	r2, [sp, #32]
 8010d72:	18e3      	adds	r3, r4, r3
 8010d74:	18a5      	adds	r5, r4, r2
 8010d76:	aa22      	add	r2, sp, #136	; 0x88
 8010d78:	f104 0801 	add.w	r8, r4, #1
 8010d7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010d80:	9304      	str	r3, [sp, #16]
 8010d82:	9b04      	ldr	r3, [sp, #16]
 8010d84:	4543      	cmp	r3, r8
 8010d86:	da04      	bge.n	8010d92 <__kernel_rem_pio2+0x3aa>
 8010d88:	461c      	mov	r4, r3
 8010d8a:	e6a3      	b.n	8010ad4 <__kernel_rem_pio2+0xec>
 8010d8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e7e4      	b.n	8010d5c <__kernel_rem_pio2+0x374>
 8010d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010d98:	f7ef fbd4 	bl	8000544 <__aeabi_i2d>
 8010d9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010da2:	46ab      	mov	fp, r5
 8010da4:	461c      	mov	r4, r3
 8010da6:	f04f 0900 	mov.w	r9, #0
 8010daa:	2600      	movs	r6, #0
 8010dac:	2700      	movs	r7, #0
 8010dae:	9b06      	ldr	r3, [sp, #24]
 8010db0:	4599      	cmp	r9, r3
 8010db2:	dd06      	ble.n	8010dc2 <__kernel_rem_pio2+0x3da>
 8010db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010dba:	f108 0801 	add.w	r8, r8, #1
 8010dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8010dc0:	e7df      	b.n	8010d82 <__kernel_rem_pio2+0x39a>
 8010dc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010dc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010dca:	f7ef fc25 	bl	8000618 <__aeabi_dmul>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	f7ef fa69 	bl	80002ac <__adddf3>
 8010dda:	f109 0901 	add.w	r9, r9, #1
 8010dde:	4606      	mov	r6, r0
 8010de0:	460f      	mov	r7, r1
 8010de2:	e7e4      	b.n	8010dae <__kernel_rem_pio2+0x3c6>
 8010de4:	3d01      	subs	r5, #1
 8010de6:	e748      	b.n	8010c7a <__kernel_rem_pio2+0x292>
 8010de8:	ec47 6b10 	vmov	d0, r6, r7
 8010dec:	f1ca 0000 	rsb	r0, sl, #0
 8010df0:	f000 fa92 	bl	8011318 <scalbn>
 8010df4:	ec57 6b10 	vmov	r6, r7, d0
 8010df8:	4ba0      	ldr	r3, [pc, #640]	; (801107c <__kernel_rem_pio2+0x694>)
 8010dfa:	ee10 0a10 	vmov	r0, s0
 8010dfe:	2200      	movs	r2, #0
 8010e00:	4639      	mov	r1, r7
 8010e02:	f7ef fe8f 	bl	8000b24 <__aeabi_dcmpge>
 8010e06:	b1f8      	cbz	r0, 8010e48 <__kernel_rem_pio2+0x460>
 8010e08:	4b9d      	ldr	r3, [pc, #628]	; (8011080 <__kernel_rem_pio2+0x698>)
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	4639      	mov	r1, r7
 8010e10:	f7ef fc02 	bl	8000618 <__aeabi_dmul>
 8010e14:	f7ef feb0 	bl	8000b78 <__aeabi_d2iz>
 8010e18:	4680      	mov	r8, r0
 8010e1a:	f7ef fb93 	bl	8000544 <__aeabi_i2d>
 8010e1e:	4b97      	ldr	r3, [pc, #604]	; (801107c <__kernel_rem_pio2+0x694>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	f7ef fbf9 	bl	8000618 <__aeabi_dmul>
 8010e26:	460b      	mov	r3, r1
 8010e28:	4602      	mov	r2, r0
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	f7ef fa3b 	bl	80002a8 <__aeabi_dsub>
 8010e32:	f7ef fea1 	bl	8000b78 <__aeabi_d2iz>
 8010e36:	1c65      	adds	r5, r4, #1
 8010e38:	ab0e      	add	r3, sp, #56	; 0x38
 8010e3a:	f10a 0a18 	add.w	sl, sl, #24
 8010e3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010e46:	e720      	b.n	8010c8a <__kernel_rem_pio2+0x2a2>
 8010e48:	4630      	mov	r0, r6
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	f7ef fe94 	bl	8000b78 <__aeabi_d2iz>
 8010e50:	ab0e      	add	r3, sp, #56	; 0x38
 8010e52:	4625      	mov	r5, r4
 8010e54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010e58:	e717      	b.n	8010c8a <__kernel_rem_pio2+0x2a2>
 8010e5a:	ab0e      	add	r3, sp, #56	; 0x38
 8010e5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010e60:	f7ef fb70 	bl	8000544 <__aeabi_i2d>
 8010e64:	4632      	mov	r2, r6
 8010e66:	463b      	mov	r3, r7
 8010e68:	f7ef fbd6 	bl	8000618 <__aeabi_dmul>
 8010e6c:	4b84      	ldr	r3, [pc, #528]	; (8011080 <__kernel_rem_pio2+0x698>)
 8010e6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010e72:	2200      	movs	r2, #0
 8010e74:	4630      	mov	r0, r6
 8010e76:	4639      	mov	r1, r7
 8010e78:	f7ef fbce 	bl	8000618 <__aeabi_dmul>
 8010e7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e80:	4606      	mov	r6, r0
 8010e82:	460f      	mov	r7, r1
 8010e84:	e70f      	b.n	8010ca6 <__kernel_rem_pio2+0x2be>
 8010e86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010e8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010e8e:	f7ef fbc3 	bl	8000618 <__aeabi_dmul>
 8010e92:	4602      	mov	r2, r0
 8010e94:	460b      	mov	r3, r1
 8010e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e9a:	f7ef fa07 	bl	80002ac <__adddf3>
 8010e9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010ea2:	f108 0801 	add.w	r8, r8, #1
 8010ea6:	9b02      	ldr	r3, [sp, #8]
 8010ea8:	4598      	cmp	r8, r3
 8010eaa:	dc01      	bgt.n	8010eb0 <__kernel_rem_pio2+0x4c8>
 8010eac:	45b8      	cmp	r8, r7
 8010eae:	ddea      	ble.n	8010e86 <__kernel_rem_pio2+0x49e>
 8010eb0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010eb4:	ab4a      	add	r3, sp, #296	; 0x128
 8010eb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010eba:	ed87 7b00 	vstr	d7, [r7]
 8010ebe:	3e01      	subs	r6, #1
 8010ec0:	e6f8      	b.n	8010cb4 <__kernel_rem_pio2+0x2cc>
 8010ec2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	dc0b      	bgt.n	8010ee0 <__kernel_rem_pio2+0x4f8>
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dc35      	bgt.n	8010f38 <__kernel_rem_pio2+0x550>
 8010ecc:	d059      	beq.n	8010f82 <__kernel_rem_pio2+0x59a>
 8010ece:	9b04      	ldr	r3, [sp, #16]
 8010ed0:	f003 0007 	and.w	r0, r3, #7
 8010ed4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010ed8:	ecbd 8b02 	vpop	{d8}
 8010edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010ee2:	2b03      	cmp	r3, #3
 8010ee4:	d1f3      	bne.n	8010ece <__kernel_rem_pio2+0x4e6>
 8010ee6:	ab4a      	add	r3, sp, #296	; 0x128
 8010ee8:	4423      	add	r3, r4
 8010eea:	9306      	str	r3, [sp, #24]
 8010eec:	461c      	mov	r4, r3
 8010eee:	469a      	mov	sl, r3
 8010ef0:	9502      	str	r5, [sp, #8]
 8010ef2:	9b02      	ldr	r3, [sp, #8]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f1aa 0a08 	sub.w	sl, sl, #8
 8010efa:	dc6b      	bgt.n	8010fd4 <__kernel_rem_pio2+0x5ec>
 8010efc:	46aa      	mov	sl, r5
 8010efe:	f1ba 0f01 	cmp.w	sl, #1
 8010f02:	f1a4 0408 	sub.w	r4, r4, #8
 8010f06:	f300 8085 	bgt.w	8011014 <__kernel_rem_pio2+0x62c>
 8010f0a:	9c06      	ldr	r4, [sp, #24]
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	3408      	adds	r4, #8
 8010f10:	2100      	movs	r1, #0
 8010f12:	2d01      	cmp	r5, #1
 8010f14:	f300 809d 	bgt.w	8011052 <__kernel_rem_pio2+0x66a>
 8010f18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010f1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010f20:	f1bb 0f00 	cmp.w	fp, #0
 8010f24:	f040 809b 	bne.w	801105e <__kernel_rem_pio2+0x676>
 8010f28:	9b01      	ldr	r3, [sp, #4]
 8010f2a:	e9c3 5600 	strd	r5, r6, [r3]
 8010f2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010f32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010f36:	e7ca      	b.n	8010ece <__kernel_rem_pio2+0x4e6>
 8010f38:	3408      	adds	r4, #8
 8010f3a:	ab4a      	add	r3, sp, #296	; 0x128
 8010f3c:	441c      	add	r4, r3
 8010f3e:	462e      	mov	r6, r5
 8010f40:	2000      	movs	r0, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	2e00      	cmp	r6, #0
 8010f46:	da36      	bge.n	8010fb6 <__kernel_rem_pio2+0x5ce>
 8010f48:	f1bb 0f00 	cmp.w	fp, #0
 8010f4c:	d039      	beq.n	8010fc2 <__kernel_rem_pio2+0x5da>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f54:	9c01      	ldr	r4, [sp, #4]
 8010f56:	e9c4 2300 	strd	r2, r3, [r4]
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010f62:	f7ef f9a1 	bl	80002a8 <__aeabi_dsub>
 8010f66:	ae4c      	add	r6, sp, #304	; 0x130
 8010f68:	2401      	movs	r4, #1
 8010f6a:	42a5      	cmp	r5, r4
 8010f6c:	da2c      	bge.n	8010fc8 <__kernel_rem_pio2+0x5e0>
 8010f6e:	f1bb 0f00 	cmp.w	fp, #0
 8010f72:	d002      	beq.n	8010f7a <__kernel_rem_pio2+0x592>
 8010f74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010f78:	4619      	mov	r1, r3
 8010f7a:	9b01      	ldr	r3, [sp, #4]
 8010f7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010f80:	e7a5      	b.n	8010ece <__kernel_rem_pio2+0x4e6>
 8010f82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010f86:	eb0d 0403 	add.w	r4, sp, r3
 8010f8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010f8e:	2000      	movs	r0, #0
 8010f90:	2100      	movs	r1, #0
 8010f92:	2d00      	cmp	r5, #0
 8010f94:	da09      	bge.n	8010faa <__kernel_rem_pio2+0x5c2>
 8010f96:	f1bb 0f00 	cmp.w	fp, #0
 8010f9a:	d002      	beq.n	8010fa2 <__kernel_rem_pio2+0x5ba>
 8010f9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	9b01      	ldr	r3, [sp, #4]
 8010fa4:	e9c3 0100 	strd	r0, r1, [r3]
 8010fa8:	e791      	b.n	8010ece <__kernel_rem_pio2+0x4e6>
 8010faa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010fae:	f7ef f97d 	bl	80002ac <__adddf3>
 8010fb2:	3d01      	subs	r5, #1
 8010fb4:	e7ed      	b.n	8010f92 <__kernel_rem_pio2+0x5aa>
 8010fb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010fba:	f7ef f977 	bl	80002ac <__adddf3>
 8010fbe:	3e01      	subs	r6, #1
 8010fc0:	e7c0      	b.n	8010f44 <__kernel_rem_pio2+0x55c>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	e7c5      	b.n	8010f54 <__kernel_rem_pio2+0x56c>
 8010fc8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010fcc:	f7ef f96e 	bl	80002ac <__adddf3>
 8010fd0:	3401      	adds	r4, #1
 8010fd2:	e7ca      	b.n	8010f6a <__kernel_rem_pio2+0x582>
 8010fd4:	e9da 8900 	ldrd	r8, r9, [sl]
 8010fd8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010fdc:	9b02      	ldr	r3, [sp, #8]
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	9302      	str	r3, [sp, #8]
 8010fe2:	4632      	mov	r2, r6
 8010fe4:	463b      	mov	r3, r7
 8010fe6:	4640      	mov	r0, r8
 8010fe8:	4649      	mov	r1, r9
 8010fea:	f7ef f95f 	bl	80002ac <__adddf3>
 8010fee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	4640      	mov	r0, r8
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	f7ef f955 	bl	80002a8 <__aeabi_dsub>
 8010ffe:	4632      	mov	r2, r6
 8011000:	463b      	mov	r3, r7
 8011002:	f7ef f953 	bl	80002ac <__adddf3>
 8011006:	ed9d 7b08 	vldr	d7, [sp, #32]
 801100a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801100e:	ed8a 7b00 	vstr	d7, [sl]
 8011012:	e76e      	b.n	8010ef2 <__kernel_rem_pio2+0x50a>
 8011014:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011018:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801101c:	4640      	mov	r0, r8
 801101e:	4632      	mov	r2, r6
 8011020:	463b      	mov	r3, r7
 8011022:	4649      	mov	r1, r9
 8011024:	f7ef f942 	bl	80002ac <__adddf3>
 8011028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	f7ef f938 	bl	80002a8 <__aeabi_dsub>
 8011038:	4632      	mov	r2, r6
 801103a:	463b      	mov	r3, r7
 801103c:	f7ef f936 	bl	80002ac <__adddf3>
 8011040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011044:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011048:	ed84 7b00 	vstr	d7, [r4]
 801104c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011050:	e755      	b.n	8010efe <__kernel_rem_pio2+0x516>
 8011052:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011056:	f7ef f929 	bl	80002ac <__adddf3>
 801105a:	3d01      	subs	r5, #1
 801105c:	e759      	b.n	8010f12 <__kernel_rem_pio2+0x52a>
 801105e:	9b01      	ldr	r3, [sp, #4]
 8011060:	9a01      	ldr	r2, [sp, #4]
 8011062:	601d      	str	r5, [r3, #0]
 8011064:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011068:	605c      	str	r4, [r3, #4]
 801106a:	609f      	str	r7, [r3, #8]
 801106c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011070:	60d3      	str	r3, [r2, #12]
 8011072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011076:	6110      	str	r0, [r2, #16]
 8011078:	6153      	str	r3, [r2, #20]
 801107a:	e728      	b.n	8010ece <__kernel_rem_pio2+0x4e6>
 801107c:	41700000 	.word	0x41700000
 8011080:	3e700000 	.word	0x3e700000
 8011084:	00000000 	.word	0x00000000

08011088 <__kernel_sin>:
 8011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108c:	ed2d 8b04 	vpush	{d8-d9}
 8011090:	eeb0 8a41 	vmov.f32	s16, s2
 8011094:	eef0 8a61 	vmov.f32	s17, s3
 8011098:	ec55 4b10 	vmov	r4, r5, d0
 801109c:	b083      	sub	sp, #12
 801109e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80110a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80110a6:	9001      	str	r0, [sp, #4]
 80110a8:	da06      	bge.n	80110b8 <__kernel_sin+0x30>
 80110aa:	ee10 0a10 	vmov	r0, s0
 80110ae:	4629      	mov	r1, r5
 80110b0:	f7ef fd62 	bl	8000b78 <__aeabi_d2iz>
 80110b4:	2800      	cmp	r0, #0
 80110b6:	d051      	beq.n	801115c <__kernel_sin+0xd4>
 80110b8:	4622      	mov	r2, r4
 80110ba:	462b      	mov	r3, r5
 80110bc:	4620      	mov	r0, r4
 80110be:	4629      	mov	r1, r5
 80110c0:	f7ef faaa 	bl	8000618 <__aeabi_dmul>
 80110c4:	4682      	mov	sl, r0
 80110c6:	468b      	mov	fp, r1
 80110c8:	4602      	mov	r2, r0
 80110ca:	460b      	mov	r3, r1
 80110cc:	4620      	mov	r0, r4
 80110ce:	4629      	mov	r1, r5
 80110d0:	f7ef faa2 	bl	8000618 <__aeabi_dmul>
 80110d4:	a341      	add	r3, pc, #260	; (adr r3, 80111dc <__kernel_sin+0x154>)
 80110d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110da:	4680      	mov	r8, r0
 80110dc:	4689      	mov	r9, r1
 80110de:	4650      	mov	r0, sl
 80110e0:	4659      	mov	r1, fp
 80110e2:	f7ef fa99 	bl	8000618 <__aeabi_dmul>
 80110e6:	a33f      	add	r3, pc, #252	; (adr r3, 80111e4 <__kernel_sin+0x15c>)
 80110e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ec:	f7ef f8dc 	bl	80002a8 <__aeabi_dsub>
 80110f0:	4652      	mov	r2, sl
 80110f2:	465b      	mov	r3, fp
 80110f4:	f7ef fa90 	bl	8000618 <__aeabi_dmul>
 80110f8:	a33c      	add	r3, pc, #240	; (adr r3, 80111ec <__kernel_sin+0x164>)
 80110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fe:	f7ef f8d5 	bl	80002ac <__adddf3>
 8011102:	4652      	mov	r2, sl
 8011104:	465b      	mov	r3, fp
 8011106:	f7ef fa87 	bl	8000618 <__aeabi_dmul>
 801110a:	a33a      	add	r3, pc, #232	; (adr r3, 80111f4 <__kernel_sin+0x16c>)
 801110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011110:	f7ef f8ca 	bl	80002a8 <__aeabi_dsub>
 8011114:	4652      	mov	r2, sl
 8011116:	465b      	mov	r3, fp
 8011118:	f7ef fa7e 	bl	8000618 <__aeabi_dmul>
 801111c:	a337      	add	r3, pc, #220	; (adr r3, 80111fc <__kernel_sin+0x174>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f7ef f8c3 	bl	80002ac <__adddf3>
 8011126:	9b01      	ldr	r3, [sp, #4]
 8011128:	4606      	mov	r6, r0
 801112a:	460f      	mov	r7, r1
 801112c:	b9eb      	cbnz	r3, 801116a <__kernel_sin+0xe2>
 801112e:	4602      	mov	r2, r0
 8011130:	460b      	mov	r3, r1
 8011132:	4650      	mov	r0, sl
 8011134:	4659      	mov	r1, fp
 8011136:	f7ef fa6f 	bl	8000618 <__aeabi_dmul>
 801113a:	a325      	add	r3, pc, #148	; (adr r3, 80111d0 <__kernel_sin+0x148>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef f8b2 	bl	80002a8 <__aeabi_dsub>
 8011144:	4642      	mov	r2, r8
 8011146:	464b      	mov	r3, r9
 8011148:	f7ef fa66 	bl	8000618 <__aeabi_dmul>
 801114c:	4602      	mov	r2, r0
 801114e:	460b      	mov	r3, r1
 8011150:	4620      	mov	r0, r4
 8011152:	4629      	mov	r1, r5
 8011154:	f7ef f8aa 	bl	80002ac <__adddf3>
 8011158:	4604      	mov	r4, r0
 801115a:	460d      	mov	r5, r1
 801115c:	ec45 4b10 	vmov	d0, r4, r5
 8011160:	b003      	add	sp, #12
 8011162:	ecbd 8b04 	vpop	{d8-d9}
 8011166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116a:	4b1b      	ldr	r3, [pc, #108]	; (80111d8 <__kernel_sin+0x150>)
 801116c:	ec51 0b18 	vmov	r0, r1, d8
 8011170:	2200      	movs	r2, #0
 8011172:	f7ef fa51 	bl	8000618 <__aeabi_dmul>
 8011176:	4632      	mov	r2, r6
 8011178:	ec41 0b19 	vmov	d9, r0, r1
 801117c:	463b      	mov	r3, r7
 801117e:	4640      	mov	r0, r8
 8011180:	4649      	mov	r1, r9
 8011182:	f7ef fa49 	bl	8000618 <__aeabi_dmul>
 8011186:	4602      	mov	r2, r0
 8011188:	460b      	mov	r3, r1
 801118a:	ec51 0b19 	vmov	r0, r1, d9
 801118e:	f7ef f88b 	bl	80002a8 <__aeabi_dsub>
 8011192:	4652      	mov	r2, sl
 8011194:	465b      	mov	r3, fp
 8011196:	f7ef fa3f 	bl	8000618 <__aeabi_dmul>
 801119a:	ec53 2b18 	vmov	r2, r3, d8
 801119e:	f7ef f883 	bl	80002a8 <__aeabi_dsub>
 80111a2:	a30b      	add	r3, pc, #44	; (adr r3, 80111d0 <__kernel_sin+0x148>)
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	4606      	mov	r6, r0
 80111aa:	460f      	mov	r7, r1
 80111ac:	4640      	mov	r0, r8
 80111ae:	4649      	mov	r1, r9
 80111b0:	f7ef fa32 	bl	8000618 <__aeabi_dmul>
 80111b4:	4602      	mov	r2, r0
 80111b6:	460b      	mov	r3, r1
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef f876 	bl	80002ac <__adddf3>
 80111c0:	4602      	mov	r2, r0
 80111c2:	460b      	mov	r3, r1
 80111c4:	4620      	mov	r0, r4
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7ef f86e 	bl	80002a8 <__aeabi_dsub>
 80111cc:	e7c4      	b.n	8011158 <__kernel_sin+0xd0>
 80111ce:	bf00      	nop
 80111d0:	55555549 	.word	0x55555549
 80111d4:	3fc55555 	.word	0x3fc55555
 80111d8:	3fe00000 	.word	0x3fe00000
 80111dc:	5acfd57c 	.word	0x5acfd57c
 80111e0:	3de5d93a 	.word	0x3de5d93a
 80111e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80111e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80111ec:	57b1fe7d 	.word	0x57b1fe7d
 80111f0:	3ec71de3 	.word	0x3ec71de3
 80111f4:	19c161d5 	.word	0x19c161d5
 80111f8:	3f2a01a0 	.word	0x3f2a01a0
 80111fc:	1110f8a6 	.word	0x1110f8a6
 8011200:	3f811111 	.word	0x3f811111

08011204 <fabs>:
 8011204:	ec51 0b10 	vmov	r0, r1, d0
 8011208:	ee10 2a10 	vmov	r2, s0
 801120c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011210:	ec43 2b10 	vmov	d0, r2, r3
 8011214:	4770      	bx	lr
	...

08011218 <floor>:
 8011218:	ec51 0b10 	vmov	r0, r1, d0
 801121c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011220:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011224:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011228:	2e13      	cmp	r6, #19
 801122a:	ee10 5a10 	vmov	r5, s0
 801122e:	ee10 8a10 	vmov	r8, s0
 8011232:	460c      	mov	r4, r1
 8011234:	dc32      	bgt.n	801129c <floor+0x84>
 8011236:	2e00      	cmp	r6, #0
 8011238:	da14      	bge.n	8011264 <floor+0x4c>
 801123a:	a333      	add	r3, pc, #204	; (adr r3, 8011308 <floor+0xf0>)
 801123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011240:	f7ef f834 	bl	80002ac <__adddf3>
 8011244:	2200      	movs	r2, #0
 8011246:	2300      	movs	r3, #0
 8011248:	f7ef fc76 	bl	8000b38 <__aeabi_dcmpgt>
 801124c:	b138      	cbz	r0, 801125e <floor+0x46>
 801124e:	2c00      	cmp	r4, #0
 8011250:	da57      	bge.n	8011302 <floor+0xea>
 8011252:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011256:	431d      	orrs	r5, r3
 8011258:	d001      	beq.n	801125e <floor+0x46>
 801125a:	4c2d      	ldr	r4, [pc, #180]	; (8011310 <floor+0xf8>)
 801125c:	2500      	movs	r5, #0
 801125e:	4621      	mov	r1, r4
 8011260:	4628      	mov	r0, r5
 8011262:	e025      	b.n	80112b0 <floor+0x98>
 8011264:	4f2b      	ldr	r7, [pc, #172]	; (8011314 <floor+0xfc>)
 8011266:	4137      	asrs	r7, r6
 8011268:	ea01 0307 	and.w	r3, r1, r7
 801126c:	4303      	orrs	r3, r0
 801126e:	d01f      	beq.n	80112b0 <floor+0x98>
 8011270:	a325      	add	r3, pc, #148	; (adr r3, 8011308 <floor+0xf0>)
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	f7ef f819 	bl	80002ac <__adddf3>
 801127a:	2200      	movs	r2, #0
 801127c:	2300      	movs	r3, #0
 801127e:	f7ef fc5b 	bl	8000b38 <__aeabi_dcmpgt>
 8011282:	2800      	cmp	r0, #0
 8011284:	d0eb      	beq.n	801125e <floor+0x46>
 8011286:	2c00      	cmp	r4, #0
 8011288:	bfbe      	ittt	lt
 801128a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801128e:	fa43 f606 	asrlt.w	r6, r3, r6
 8011292:	19a4      	addlt	r4, r4, r6
 8011294:	ea24 0407 	bic.w	r4, r4, r7
 8011298:	2500      	movs	r5, #0
 801129a:	e7e0      	b.n	801125e <floor+0x46>
 801129c:	2e33      	cmp	r6, #51	; 0x33
 801129e:	dd0b      	ble.n	80112b8 <floor+0xa0>
 80112a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80112a4:	d104      	bne.n	80112b0 <floor+0x98>
 80112a6:	ee10 2a10 	vmov	r2, s0
 80112aa:	460b      	mov	r3, r1
 80112ac:	f7ee fffe 	bl	80002ac <__adddf3>
 80112b0:	ec41 0b10 	vmov	d0, r0, r1
 80112b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80112bc:	f04f 33ff 	mov.w	r3, #4294967295
 80112c0:	fa23 f707 	lsr.w	r7, r3, r7
 80112c4:	4207      	tst	r7, r0
 80112c6:	d0f3      	beq.n	80112b0 <floor+0x98>
 80112c8:	a30f      	add	r3, pc, #60	; (adr r3, 8011308 <floor+0xf0>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	f7ee ffed 	bl	80002ac <__adddf3>
 80112d2:	2200      	movs	r2, #0
 80112d4:	2300      	movs	r3, #0
 80112d6:	f7ef fc2f 	bl	8000b38 <__aeabi_dcmpgt>
 80112da:	2800      	cmp	r0, #0
 80112dc:	d0bf      	beq.n	801125e <floor+0x46>
 80112de:	2c00      	cmp	r4, #0
 80112e0:	da02      	bge.n	80112e8 <floor+0xd0>
 80112e2:	2e14      	cmp	r6, #20
 80112e4:	d103      	bne.n	80112ee <floor+0xd6>
 80112e6:	3401      	adds	r4, #1
 80112e8:	ea25 0507 	bic.w	r5, r5, r7
 80112ec:	e7b7      	b.n	801125e <floor+0x46>
 80112ee:	2301      	movs	r3, #1
 80112f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80112f4:	fa03 f606 	lsl.w	r6, r3, r6
 80112f8:	4435      	add	r5, r6
 80112fa:	4545      	cmp	r5, r8
 80112fc:	bf38      	it	cc
 80112fe:	18e4      	addcc	r4, r4, r3
 8011300:	e7f2      	b.n	80112e8 <floor+0xd0>
 8011302:	2500      	movs	r5, #0
 8011304:	462c      	mov	r4, r5
 8011306:	e7aa      	b.n	801125e <floor+0x46>
 8011308:	8800759c 	.word	0x8800759c
 801130c:	7e37e43c 	.word	0x7e37e43c
 8011310:	bff00000 	.word	0xbff00000
 8011314:	000fffff 	.word	0x000fffff

08011318 <scalbn>:
 8011318:	b570      	push	{r4, r5, r6, lr}
 801131a:	ec55 4b10 	vmov	r4, r5, d0
 801131e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011322:	4606      	mov	r6, r0
 8011324:	462b      	mov	r3, r5
 8011326:	b99a      	cbnz	r2, 8011350 <scalbn+0x38>
 8011328:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801132c:	4323      	orrs	r3, r4
 801132e:	d036      	beq.n	801139e <scalbn+0x86>
 8011330:	4b39      	ldr	r3, [pc, #228]	; (8011418 <scalbn+0x100>)
 8011332:	4629      	mov	r1, r5
 8011334:	ee10 0a10 	vmov	r0, s0
 8011338:	2200      	movs	r2, #0
 801133a:	f7ef f96d 	bl	8000618 <__aeabi_dmul>
 801133e:	4b37      	ldr	r3, [pc, #220]	; (801141c <scalbn+0x104>)
 8011340:	429e      	cmp	r6, r3
 8011342:	4604      	mov	r4, r0
 8011344:	460d      	mov	r5, r1
 8011346:	da10      	bge.n	801136a <scalbn+0x52>
 8011348:	a32b      	add	r3, pc, #172	; (adr r3, 80113f8 <scalbn+0xe0>)
 801134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134e:	e03a      	b.n	80113c6 <scalbn+0xae>
 8011350:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011354:	428a      	cmp	r2, r1
 8011356:	d10c      	bne.n	8011372 <scalbn+0x5a>
 8011358:	ee10 2a10 	vmov	r2, s0
 801135c:	4620      	mov	r0, r4
 801135e:	4629      	mov	r1, r5
 8011360:	f7ee ffa4 	bl	80002ac <__adddf3>
 8011364:	4604      	mov	r4, r0
 8011366:	460d      	mov	r5, r1
 8011368:	e019      	b.n	801139e <scalbn+0x86>
 801136a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801136e:	460b      	mov	r3, r1
 8011370:	3a36      	subs	r2, #54	; 0x36
 8011372:	4432      	add	r2, r6
 8011374:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011378:	428a      	cmp	r2, r1
 801137a:	dd08      	ble.n	801138e <scalbn+0x76>
 801137c:	2d00      	cmp	r5, #0
 801137e:	a120      	add	r1, pc, #128	; (adr r1, 8011400 <scalbn+0xe8>)
 8011380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011384:	da1c      	bge.n	80113c0 <scalbn+0xa8>
 8011386:	a120      	add	r1, pc, #128	; (adr r1, 8011408 <scalbn+0xf0>)
 8011388:	e9d1 0100 	ldrd	r0, r1, [r1]
 801138c:	e018      	b.n	80113c0 <scalbn+0xa8>
 801138e:	2a00      	cmp	r2, #0
 8011390:	dd08      	ble.n	80113a4 <scalbn+0x8c>
 8011392:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801139a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801139e:	ec45 4b10 	vmov	d0, r4, r5
 80113a2:	bd70      	pop	{r4, r5, r6, pc}
 80113a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80113a8:	da19      	bge.n	80113de <scalbn+0xc6>
 80113aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80113ae:	429e      	cmp	r6, r3
 80113b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80113b4:	dd0a      	ble.n	80113cc <scalbn+0xb4>
 80113b6:	a112      	add	r1, pc, #72	; (adr r1, 8011400 <scalbn+0xe8>)
 80113b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d1e2      	bne.n	8011386 <scalbn+0x6e>
 80113c0:	a30f      	add	r3, pc, #60	; (adr r3, 8011400 <scalbn+0xe8>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	f7ef f927 	bl	8000618 <__aeabi_dmul>
 80113ca:	e7cb      	b.n	8011364 <scalbn+0x4c>
 80113cc:	a10a      	add	r1, pc, #40	; (adr r1, 80113f8 <scalbn+0xe0>)
 80113ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d0b8      	beq.n	8011348 <scalbn+0x30>
 80113d6:	a10e      	add	r1, pc, #56	; (adr r1, 8011410 <scalbn+0xf8>)
 80113d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113dc:	e7b4      	b.n	8011348 <scalbn+0x30>
 80113de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80113e2:	3236      	adds	r2, #54	; 0x36
 80113e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80113e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80113ec:	4620      	mov	r0, r4
 80113ee:	4b0c      	ldr	r3, [pc, #48]	; (8011420 <scalbn+0x108>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	e7e8      	b.n	80113c6 <scalbn+0xae>
 80113f4:	f3af 8000 	nop.w
 80113f8:	c2f8f359 	.word	0xc2f8f359
 80113fc:	01a56e1f 	.word	0x01a56e1f
 8011400:	8800759c 	.word	0x8800759c
 8011404:	7e37e43c 	.word	0x7e37e43c
 8011408:	8800759c 	.word	0x8800759c
 801140c:	fe37e43c 	.word	0xfe37e43c
 8011410:	c2f8f359 	.word	0xc2f8f359
 8011414:	81a56e1f 	.word	0x81a56e1f
 8011418:	43500000 	.word	0x43500000
 801141c:	ffff3cb0 	.word	0xffff3cb0
 8011420:	3c900000 	.word	0x3c900000

08011424 <_init>:
 8011424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011426:	bf00      	nop
 8011428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801142a:	bc08      	pop	{r3}
 801142c:	469e      	mov	lr, r3
 801142e:	4770      	bx	lr

08011430 <_fini>:
 8011430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011432:	bf00      	nop
 8011434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011436:	bc08      	pop	{r3}
 8011438:	469e      	mov	lr, r3
 801143a:	4770      	bx	lr
